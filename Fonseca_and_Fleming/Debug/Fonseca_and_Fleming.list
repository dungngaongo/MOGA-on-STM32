
Fonseca_and_Fleming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008314  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  080084c8  080084c8  000094c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008988  08008988  0000a1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008988  08008988  00009988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008990  08008990  0000a1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008990  08008990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008994  08008994  00009994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08008998  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1f4  2**0
                  CONTENTS
 10 .bss          000001b8  200001f4  200001f4  0000a1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  0000a1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d61  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001918  00000000  00000000  00012f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  000148a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f2  00000000  00000000  00015078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023de3  00000000  00000000  0001566a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f2f  00000000  00000000  0003944d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4868  00000000  00000000  0004337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117be4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000345c  00000000  00000000  00117c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0011b084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080084ac 	.word	0x080084ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	080084ac 	.word	0x080084ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <rand01>:
float crossover_prob = 0.6;
float mutation_prob = 0.05;
int rate_local_search = 30;
float step_size = 0.02;

float rand01() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    return (float)rand() / RAND_MAX;
 8000f98:	f003 fab6 	bl	8004508 <rand>
 8000f9c:	ee07 0a90 	vmov	s15, r0
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000fb8 <rand01+0x24>
 8000fa8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fac:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	4f000000 	.word	0x4f000000

08000fbc <rand_range>:

float rand_range(float min, float max) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	ed2d 8b02 	vpush	{d8}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fca:	edc7 0a00 	vstr	s1, [r7]
    return min + (max - min) * rand01();
 8000fce:	ed97 7a00 	vldr	s14, [r7]
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000fda:	f7ff ffdb 	bl	8000f94 <rand01>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
 8000fe2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	ecbd 8b02 	vpop	{d8}
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <random_population>:

void random_population(Population *pop) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < POP_SIZE; i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e028      	b.n	800105c <random_population+0x60>
        for (int j = 0; j < NV; j++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	e01f      	b.n	8001050 <random_population+0x54>
            pop->solutions[i].x[j] = rand_range(lb[j], ub[j]);
 8001010:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <random_population+0x7c>)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	4a17      	ldr	r2, [pc, #92]	@ (800107c <random_population+0x80>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	eef0 0a47 	vmov.f32	s1, s14
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	f7ff ffc4 	bl	8000fbc <rand_range>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	0099      	lsls	r1, r3, #2
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	440b      	add	r3, r1
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < NV; j++) {
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b01      	cmp	r3, #1
 8001054:	dddc      	ble.n	8001010 <random_population+0x14>
    for (int i = 0; i < POP_SIZE; i++) {
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b63      	cmp	r3, #99	@ 0x63
 8001060:	ddd3      	ble.n	800100a <random_population+0xe>
        }
    }
    pop->size = POP_SIZE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001068:	461a      	mov	r2, r3
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008

08001080 <evaluate>:

void evaluate(Solution *sol) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    float sum1 = 0.0, sum2 = 0.0;
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
    const float inv_sqrt_n = 1.0/sqrt(NV);
 8001094:	4b56      	ldr	r3, [pc, #344]	@ (80011f0 <evaluate+0x170>)
 8001096:	60fb      	str	r3, [r7, #12]

    for (int j = 0; j < NV; j++) {
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e02b      	b.n	80010f6 <evaluate+0x76>
        sum1 += pow(sol->x[j] - inv_sqrt_n, 2);
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	ed93 7a00 	vldr	s14, [r3]
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b2:	ee17 0a90 	vmov	r0, s15
 80010b6:	f7ff fa57 	bl	8000568 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 80011e8 <evaluate+0x168>
 80010c2:	ec43 2b10 	vmov	d0, r2, r3
 80010c6:	f006 f917 	bl	80072f8 <pow>
 80010ca:	ec55 4b10 	vmov	r4, r5, d0
 80010ce:	69f8      	ldr	r0, [r7, #28]
 80010d0:	f7ff fa4a 	bl	8000568 <__aeabi_f2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff f8e6 	bl	80002ac <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd6e 	bl	8000bc8 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	61fb      	str	r3, [r7, #28]
    for (int j = 0; j < NV; j++) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	ddd0      	ble.n	800109e <evaluate+0x1e>
    }
    sol->fitness[0] = 1 - exp(-sum1);
 80010fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001100:	eef1 7a67 	vneg.f32	s15, s15
 8001104:	ee17 3a90 	vmov	r3, s15
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa2d 	bl	8000568 <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	ec43 2b10 	vmov	d0, r2, r3
 8001116:	f006 f8a7 	bl	8007268 <exp>
 800111a:	ec53 2b10 	vmov	r2, r3, d0
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4934      	ldr	r1, [pc, #208]	@ (80011f4 <evaluate+0x174>)
 8001124:	f7ff f8c0 	bl	80002a8 <__aeabi_dsub>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd4a 	bl	8000bc8 <__aeabi_d2f>
 8001134:	4602      	mov	r2, r0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	609a      	str	r2, [r3, #8]

    for (int j = 0; j < NV; j++) {
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	e02b      	b.n	8001198 <evaluate+0x118>
        sum2 += pow(sol->x[j] + inv_sqrt_n, 2);
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f7ff fa06 	bl	8000568 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80011e8 <evaluate+0x168>
 8001164:	ec43 2b10 	vmov	d0, r2, r3
 8001168:	f006 f8c6 	bl	80072f8 <pow>
 800116c:	ec55 4b10 	vmov	r4, r5, d0
 8001170:	69b8      	ldr	r0, [r7, #24]
 8001172:	f7ff f9f9 	bl	8000568 <__aeabi_f2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff f895 	bl	80002ac <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd1d 	bl	8000bc8 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
    for (int j = 0; j < NV; j++) {
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3301      	adds	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b01      	cmp	r3, #1
 800119c:	ddd0      	ble.n	8001140 <evaluate+0xc0>
    }
    sol->fitness[1] = 1 - exp(-sum2);
 800119e:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a2:	eef1 7a67 	vneg.f32	s15, s15
 80011a6:	ee17 3a90 	vmov	r3, s15
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9dc 	bl	8000568 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	ec43 2b10 	vmov	d0, r2, r3
 80011b8:	f006 f856 	bl	8007268 <exp>
 80011bc:	ec53 2b10 	vmov	r2, r3, d0
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	490b      	ldr	r1, [pc, #44]	@ (80011f4 <evaluate+0x174>)
 80011c6:	f7ff f86f 	bl	80002a8 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fcf9 	bl	8000bc8 <__aeabi_d2f>
 80011d6:	4602      	mov	r2, r0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	60da      	str	r2, [r3, #12]
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}
 80011e4:	f3af 8000 	nop.w
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40000000 	.word	0x40000000
 80011f0:	3f3504f3 	.word	0x3f3504f3
 80011f4:	3ff00000 	.word	0x3ff00000

080011f8 <crossover>:

void crossover(Population *pop, Population *offspring) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001208:	461a      	mov	r2, r3
 800120a:	2300      	movs	r3, #0
 800120c:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
    for (int i = 0; i < pop->size / 2; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	e0c4      	b.n	80013a0 <crossover+0x1a8>
        if (rand01() < crossover_prob) {
 8001216:	f7ff febd 	bl	8000f94 <rand01>
 800121a:	eeb0 7a40 	vmov.f32	s14, s0
 800121e:	4b69      	ldr	r3, [pc, #420]	@ (80013c4 <crossover+0x1cc>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	f140 80b5 	bpl.w	800139a <crossover+0x1a2>
            int r1 = rand() % pop->size;
 8001230:	f003 f96a 	bl	8004508 <rand>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800123c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001240:	fb92 f1f3 	sdiv	r1, r2, r3
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	613b      	str	r3, [r7, #16]
            int r2 = rand() % pop->size;
 800124c:	f003 f95c 	bl	8004508 <rand>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001258:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800125c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	61bb      	str	r3, [r7, #24]
            while (r1 == r2) {
 8001268:	e00d      	b.n	8001286 <crossover+0x8e>
                r2 = rand() % pop->size;
 800126a:	f003 f94d 	bl	8004508 <rand>
 800126e:	4602      	mov	r2, r0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800127a:	fb92 f1f3 	sdiv	r1, r2, r3
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	61bb      	str	r3, [r7, #24]
            while (r1 == r2) {
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	429a      	cmp	r2, r3
 800128c:	d0ed      	beq.n	800126a <crossover+0x72>
            }

            int cutting_point = rand() % (NV - 1) + 1;
 800128e:	f003 f93b 	bl	8004508 <rand>
 8001292:	2301      	movs	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]

            for (int j = 0; j < NV; j++) {
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e059      	b.n	8001350 <crossover+0x158>
                if (j < cutting_point) {
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	da29      	bge.n	80012f8 <crossover+0x100>
                    offspring->solutions[offspring->size].x[j] = pop->solutions[r1].x[j];
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	0090      	lsls	r0, r2, #2
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	4402      	add	r2, r0
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	440a      	add	r2, r1
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	0098      	lsls	r0, r3, #2
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	4403      	add	r3, r0
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	601a      	str	r2, [r3, #0]
                    offspring->solutions[offspring->size + 1].x[j] = pop->solutions[r2].x[j];
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80012d6:	3301      	adds	r3, #1
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	0090      	lsls	r0, r2, #2
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4402      	add	r2, r0
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	440a      	add	r2, r1
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	6839      	ldr	r1, [r7, #0]
 80012ea:	0098      	lsls	r0, r3, #2
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4403      	add	r3, r0
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e028      	b.n	800134a <crossover+0x152>
                } else {
                    offspring->solutions[offspring->size].x[j] = pop->solutions[r2].x[j];
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	0090      	lsls	r0, r2, #2
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4402      	add	r2, r0
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	440a      	add	r2, r1
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	0098      	lsls	r0, r3, #2
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4403      	add	r3, r0
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	601a      	str	r2, [r3, #0]
                    offspring->solutions[offspring->size + 1].x[j] = pop->solutions[r1].x[j];
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800132a:	3301      	adds	r3, #1
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	0090      	lsls	r0, r2, #2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4402      	add	r2, r0
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	440a      	add	r2, r1
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	0098      	lsls	r0, r3, #2
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4403      	add	r3, r0
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	601a      	str	r2, [r3, #0]
            for (int j = 0; j < NV; j++) {
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b01      	cmp	r3, #1
 8001354:	dda2      	ble.n	800129c <crossover+0xa4>
                }
            }

            evaluate(&offspring->solutions[offspring->size]);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800135c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe8a 	bl	8001080 <evaluate>
            evaluate(&offspring->solutions[offspring->size + 1]);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001376:	3301      	adds	r3, #1
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe7e 	bl	8001080 <evaluate>

            offspring->size += 2;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800138a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800138e:	3302      	adds	r3, #2
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001396:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
    for (int i = 0; i < pop->size / 2; i++) {
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80013aa:	0fda      	lsrs	r2, r3, #31
 80013ac:	4413      	add	r3, r2
 80013ae:	105b      	asrs	r3, r3, #1
 80013b0:	461a      	mov	r2, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4293      	cmp	r3, r2
 80013b6:	f6ff af2e 	blt.w	8001216 <crossover+0x1e>
        }
    }
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000010 	.word	0x20000010

080013c8 <mutation>:

void mutation(Population *pop, Population *offspring) {
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d8:	461a      	mov	r2, r3
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
    for (int i = 0; i < pop->size; i++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e05e      	b.n	80014a4 <mutation+0xdc>
        if (rand01() < mutation_prob) {
 80013e6:	f7ff fdd5 	bl	8000f94 <rand01>
 80013ea:	eeb0 7a40 	vmov.f32	s14, s0
 80013ee:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <mutation+0xf8>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	d54f      	bpl.n	800149e <mutation+0xd6>
            offspring->solutions[offspring->size] = pop->solutions[i];
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	18d1      	adds	r1, r2, r3
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	460c      	mov	r4, r1
 8001418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800141a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            int mutation_point = rand() % NV;
 800141e:	f003 f873 	bl	8004508 <rand>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	bfb8      	it	lt
 800142c:	425b      	neglt	r3, r3
 800142e:	60bb      	str	r3, [r7, #8]
            offspring->solutions[offspring->size].x[mutation_point] =
                rand_range(lb[mutation_point], ub[mutation_point]);
 8001430:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <mutation+0xfc>)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <mutation+0x100>)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	ed93 7a00 	vldr	s14, [r3]
            offspring->solutions[offspring->size].x[mutation_point] =
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800144e:	f8d3 42c0 	ldr.w	r4, [r3, #704]	@ 0x2c0
                rand_range(lb[mutation_point], ub[mutation_point]);
 8001452:	eef0 0a47 	vmov.f32	s1, s14
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	f7ff fdaf 	bl	8000fbc <rand_range>
 800145e:	eef0 7a40 	vmov.f32	s15, s0
            offspring->solutions[offspring->size].x[mutation_point] =
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	00a1      	lsls	r1, r4, #2
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	440b      	add	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	edc3 7a00 	vstr	s15, [r3]
            evaluate(&offspring->solutions[offspring->size]);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001478:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fdfc 	bl	8001080 <evaluate>
            offspring->size++;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800148e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001492:	3301      	adds	r3, #1
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800149a:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
    for (int i = 0; i < pop->size; i++) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	db98      	blt.n	80013e6 <mutation+0x1e>
        }
    }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000014 	.word	0x20000014
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008

080014cc <local_search>:

void local_search(Population *pop, Population *offspring) {
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
    offspring->size = rate_local_search;
 80014d6:	4b54      	ldr	r3, [pc, #336]	@ (8001628 <local_search+0x15c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014e0:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
    for (int i = 0; i < rate_local_search; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e092      	b.n	8001610 <local_search+0x144>
        int r1 = rand() % pop->size;
 80014ea:	f003 f80d 	bl	8004508 <rand>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80014fa:	fb92 f1f3 	sdiv	r1, r2, r3
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	613b      	str	r3, [r7, #16]
        offspring->solutions[i] = pop->solutions[r1];
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	18d1      	adds	r1, r2, r3
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	460c      	mov	r4, r1
 8001518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int r2 = rand() % NV;
 800151e:	f002 fff3 	bl	8004508 <rand>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	bfb8      	it	lt
 800152c:	425b      	neglt	r3, r3
 800152e:	60fb      	str	r3, [r7, #12]
        offspring->solutions[i].x[r2] += rand_range(-step_size, step_size);
 8001530:	4b3e      	ldr	r3, [pc, #248]	@ (800162c <local_search+0x160>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eef1 7a67 	vneg.f32	s15, s15
 800153a:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <local_search+0x160>)
 800153c:	ed93 7a00 	vldr	s14, [r3]
 8001540:	eef0 0a47 	vmov.f32	s1, s14
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	f7ff fd38 	bl	8000fbc <rand_range>
 800154c:	eeb0 7a40 	vmov.f32	s14, s0
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	0099      	lsls	r1, r3, #2
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	440b      	add	r3, r1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	0099      	lsls	r1, r3, #2
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	440b      	add	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	edc3 7a00 	vstr	s15, [r3]

        if (offspring->solutions[i].x[r2] < lb[r2])
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	0099      	lsls	r1, r3, #2
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	440b      	add	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	4a29      	ldr	r2, [pc, #164]	@ (8001630 <local_search+0x164>)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	d50c      	bpl.n	80015ba <local_search+0xee>
            offspring->solutions[i].x[r2] = lb[r2];
 80015a0:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <local_search+0x164>)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	0098      	lsls	r0, r3, #2
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4403      	add	r3, r0
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	601a      	str	r2, [r3, #0]
        if (offspring->solutions[i].x[r2] > ub[r2])
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	0099      	lsls	r1, r3, #2
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	440b      	add	r3, r1
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <local_search+0x168>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	dd0c      	ble.n	80015fc <local_search+0x130>
            offspring->solutions[i].x[r2] = ub[r2];
 80015e2:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <local_search+0x168>)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	6839      	ldr	r1, [r7, #0]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	0098      	lsls	r0, r3, #2
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4403      	add	r3, r0
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	601a      	str	r2, [r3, #0]

        evaluate(&offspring->solutions[i]);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fd3b 	bl	8001080 <evaluate>
    for (int i = 0; i < rate_local_search; i++) {
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <local_search+0x15c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	429a      	cmp	r2, r3
 8001618:	f6ff af67 	blt.w	80014ea <local_search+0x1e>
    }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	bf00      	nop
 8001628:	20000018 	.word	0x20000018
 800162c:	2000001c 	.word	0x2000001c
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008

08001638 <dominates>:

bool dominates(Solution *sol1, Solution *sol2) {
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    bool better = false;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	e02c      	b.n	80016a6 <dominates+0x6e>
        if (sol1->fitness[i] > sol2->fitness[i]) {
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3302      	adds	r3, #2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3302      	adds	r3, #2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	dd01      	ble.n	8001676 <dominates+0x3e>
            return false;
 8001672:	2300      	movs	r3, #0
 8001674:	e01b      	b.n	80016ae <dominates+0x76>
        }
        if (sol1->fitness[i] < sol2->fitness[i]) {
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3302      	adds	r3, #2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3302      	adds	r3, #2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	d501      	bpl.n	80016a0 <dominates+0x68>
            better = true;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	ddcf      	ble.n	800164c <dominates+0x14>
        }
    }
    return better;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <find_pareto_front>:

void find_pareto_front(Solution *solutions, int size, int *front_indices, int *front_size) {
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b088      	sub	sp, #32
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	603b      	str	r3, [r7, #0]
    *front_size = 0;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e034      	b.n	800173e <find_pareto_front+0x84>
        bool is_dominated = false;
 80016d4:	2300      	movs	r3, #0
 80016d6:	76fb      	strb	r3, [r7, #27]
        for (int j = 0; j < size; j++) {
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e018      	b.n	8001710 <find_pareto_front+0x56>
            if (i == j) continue;
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d010      	beq.n	8001708 <find_pareto_front+0x4e>
            if (dominates(&solutions[j], &solutions[i])) {
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	18d0      	adds	r0, r2, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff ff9e 	bl	8001638 <dominates>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <find_pareto_front+0x50>
                is_dominated = true;
 8001702:	2301      	movs	r3, #1
 8001704:	76fb      	strb	r3, [r7, #27]
                break;
 8001706:	e007      	b.n	8001718 <find_pareto_front+0x5e>
            if (i == j) continue;
 8001708:	bf00      	nop
        for (int j = 0; j < size; j++) {
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbe2      	blt.n	80016de <find_pareto_front+0x24>
            }
        }
        if (!is_dominated) {
 8001718:	7efb      	ldrb	r3, [r7, #27]
 800171a:	f083 0301 	eor.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <find_pareto_front+0x7e>
            front_indices[(*front_size)++] = i;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	6011      	str	r1, [r2, #0]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbc6      	blt.n	80016d4 <find_pareto_front+0x1a>
        }
    }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <crowding_distance>:

void crowding_distance(Solution *front, int front_size, float *distances) {
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	f5ad 6d9f 	sub.w	sp, sp, #1272	@ 0x4f8
 8001756:	af00      	add	r7, sp, #0
 8001758:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800175c:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 8001760:	6018      	str	r0, [r3, #0]
 8001762:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001766:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 800176a:	6019      	str	r1, [r3, #0]
 800176c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001770:	f2a3 43f4 	subw	r3, r3, #1268	@ 0x4f4
 8001774:	601a      	str	r2, [r3, #0]
    if (front_size == 0) return;
 8001776:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800177a:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 81c3 	beq.w	8001b0c <crowding_distance+0x3bc>

    for (int i = 0; i < front_size; i++) {
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 800178c:	e010      	b.n	80017b0 <crowding_distance+0x60>
        distances[i] = 0.0;
 800178e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001798:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < front_size; i++) {
 80017a6:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 80017aa:	3301      	adds	r3, #1
 80017ac:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 80017b0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80017b4:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80017b8:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	@ 0x4f4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbe5      	blt.n	800178e <crowding_distance+0x3e>
    }

    for (int obj = 0; obj < 2; obj++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 80017c8:	e19a      	b.n	8001b00 <crowding_distance+0x3b0>
        int indices[POP_SIZE * 3];
        for (int i = 0; i < front_size; i++) indices[i] = i;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 80017d0:	e00e      	b.n	80017f0 <crowding_distance+0xa0>
 80017d2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80017d6:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80017da:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	@ 0x4ec
 80017de:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 80017e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80017e6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	@ 0x4ec
 80017ea:	3301      	adds	r3, #1
 80017ec:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 80017f0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80017f4:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80017f8:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	@ 0x4ec
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbe7      	blt.n	80017d2 <crowding_distance+0x82>

        for (int i = 0; i < front_size - 1; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8001808:	e06d      	b.n	80018e6 <crowding_distance+0x196>
            for (int j = i + 1; j < front_size; j++) {
 800180a:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 800180e:	3301      	adds	r3, #1
 8001810:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8001814:	e059      	b.n	80018ca <crowding_distance+0x17a>
                if (front[indices[i]].fitness[obj] > front[indices[j]].fitness[obj]) {
 8001816:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800181a:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800181e:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 8001822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800182c:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	441a      	add	r2, r3
 8001834:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001838:	3302      	adds	r3, #2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	ed93 7a00 	vldr	s14, [r3]
 8001842:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001846:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800184a:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 800184e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001858:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	441a      	add	r2, r3
 8001860:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001864:	3302      	adds	r3, #2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	dd23      	ble.n	80018c0 <crowding_distance+0x170>
                    int temp = indices[i];
 8001878:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800187c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001880:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
                    indices[i] = indices[j];
 800188c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001890:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001894:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 8001898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800189c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80018a0:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80018a4:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    indices[j] = temp;
 80018ac:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80018b0:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80018b4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 80018b8:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = i + 1; j < front_size; j++) {
 80018c0:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80018c4:	3301      	adds	r3, #1
 80018c6:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80018ca:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80018ce:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80018d2:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	db9c      	blt.n	8001816 <crowding_distance+0xc6>
        for (int i = 0; i < front_size - 1; i++) {
 80018dc:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80018e0:	3301      	adds	r3, #1
 80018e2:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 80018e6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80018ea:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 80018f6:	429a      	cmp	r2, r3
 80018f8:	db87      	blt.n	800180a <crowding_distance+0xba>
                }
            }
        }

        distances[indices[0]] = DBL_MAX;
 80018fa:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80018fe:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800190a:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4413      	add	r3, r2
 8001912:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001916:	601a      	str	r2, [r3, #0]
        distances[indices[front_size - 1]] = DBL_MAX;
 8001918:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800191c:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001928:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001936:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4413      	add	r3, r2
 800193e:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001942:	601a      	str	r2, [r3, #0]

        double fmin = front[indices[0]].fitness[obj];
 8001944:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001948:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001954:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	441a      	add	r2, r3
 800195c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001960:	3302      	adds	r3, #2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdfd 	bl	8000568 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8001976:	e9c1 2300 	strd	r2, r3, [r1]
        double fmax = front[indices[front_size - 1]].fitness[obj];
 800197a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800197e:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800198a:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800198e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001998:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	441a      	add	r2, r3
 80019a0:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 80019a4:	3302      	adds	r3, #2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fddb 	bl	8000568 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 80019ba:	e9c1 2300 	strd	r2, r3, [r1]
        double range = fmax - fmin;
 80019be:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 80019ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ce:	f7fe fc6b 	bl	80002a8 <__aeabi_dsub>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 80019da:	e9c1 2300 	strd	r2, r3, [r1]

        if (range > 0) {
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 80019ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ee:	f7ff f8a3 	bl	8000b38 <__aeabi_dcmpgt>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d07e      	beq.n	8001af6 <crowding_distance+0x3a6>
            for (int i = 1; i < front_size - 1; i++) {
 80019f8:	2301      	movs	r3, #1
 80019fa:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80019fe:	e070      	b.n	8001ae2 <crowding_distance+0x392>
                distances[indices[i]] +=
 8001a00:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001a04:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001a08:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001a16:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fda1 	bl	8000568 <__aeabi_f2d>
 8001a26:	4604      	mov	r4, r0
 8001a28:	460d      	mov	r5, r1
                    (front[indices[i + 1]].fitness[obj] - front[indices[i - 1]].fitness[obj]) / range;
 8001a2a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001a34:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001a42:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	441a      	add	r2, r3
 8001a4a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001a4e:	3302      	adds	r3, #2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001a62:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001a70:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	441a      	add	r2, r3
 8001a78:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8a:	ee17 0a90 	vmov	r0, s15
 8001a8e:	f7fe fd6b 	bl	8000568 <__aeabi_f2d>
 8001a92:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fee7 	bl	800086c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
                distances[indices[i]] +=
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fc01 	bl	80002ac <__adddf3>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001ab6:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001aba:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001ac8:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	18d4      	adds	r4, r2, r3
 8001ad0:	f7ff f87a 	bl	8000bc8 <__aeabi_d2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	6023      	str	r3, [r4, #0]
            for (int i = 1; i < front_size - 1; i++) {
 8001ad8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001adc:	3301      	adds	r3, #1
 8001ade:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8001ae2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001ae6:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8001af2:	429a      	cmp	r2, r3
 8001af4:	db84      	blt.n	8001a00 <crowding_distance+0x2b0>
    for (int obj = 0; obj < 2; obj++) {
 8001af6:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 8001b00:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	f77f ae60 	ble.w	80017ca <crowding_distance+0x7a>
 8001b0a:	e000      	b.n	8001b0e <crowding_distance+0x3be>
    if (front_size == 0) return;
 8001b0c:	bf00      	nop
            }
        }
    }
}
 8001b0e:	f507 679f 	add.w	r7, r7, #1272	@ 0x4f8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b18 <select_by_crowding>:

void select_by_crowding(Solution *solutions, int size, int num_to_select, Solution *selected) {
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	f2ad 4dd4 	subw	sp, sp, #1236	@ 0x4d4
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	f507 649a 	add.w	r4, r7, #1232	@ 0x4d0
 8001b24:	f2a4 44c4 	subw	r4, r4, #1220	@ 0x4c4
 8001b28:	6020      	str	r0, [r4, #0]
 8001b2a:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 8001b2e:	f5a0 6099 	sub.w	r0, r0, #1224	@ 0x4c8
 8001b32:	6001      	str	r1, [r0, #0]
 8001b34:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8001b38:	f2a1 41cc 	subw	r1, r1, #1228	@ 0x4cc
 8001b3c:	600a      	str	r2, [r1, #0]
 8001b3e:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8001b42:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001b46:	6013      	str	r3, [r2, #0]
    float distances[POP_SIZE * 3];
    crowding_distance(solutions, size, distances);
 8001b48:	f107 0214 	add.w	r2, r7, #20
 8001b4c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001b50:	f5a3 6199 	sub.w	r1, r3, #1224	@ 0x4c8
 8001b54:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001b58:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001b5c:	6809      	ldr	r1, [r1, #0]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f7ff fdf6 	bl	8001750 <crowding_distance>

    for (int i = 0; i < num_to_select; i++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001b6a:	e057      	b.n	8001c1c <select_by_crowding+0x104>
        int best = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001b72:	2301      	movs	r3, #1
 8001b74:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001b78:	e021      	b.n	8001bbe <select_by_crowding+0xa6>
            if (distances[j] > distances[best]) {
 8001b7a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001b7e:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001b82:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001b92:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001b96:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	dd03      	ble.n	8001bb4 <select_by_crowding+0x9c>
                best = j;
 8001bac:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001bb0:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001bb4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001bbe:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001bc2:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8001bc6:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbd4      	blt.n	8001b7a <select_by_crowding+0x62>
            }
        }
        selected[i] = solutions[best];
 8001bd0:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8001bda:	f2a2 42c4 	subw	r2, r2, #1220	@ 0x4c4
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	18d1      	adds	r1, r2, r3
 8001be2:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8001bec:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	461c      	mov	r4, r3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        distances[best] = -1.0;
 8001bfe:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001c02:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001c06:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c3c <select_by_crowding+0x124>)
 8001c10:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < num_to_select; i++) {
 8001c12:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001c16:	3301      	adds	r3, #1
 8001c18:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001c1c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001c20:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8001c24:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	db9e      	blt.n	8001b6c <select_by_crowding+0x54>
    }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	f207 47d4 	addw	r7, r7, #1236	@ 0x4d4
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd90      	pop	{r4, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	bf800000 	.word	0xbf800000

08001c40 <selection>:

void selection(Population *pop, Population *selected) {
 8001c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c44:	b0a3      	sub	sp, #140	@ 0x8c
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c4a:	6339      	str	r1, [r7, #48]	@ 0x30
 8001c4c:	466b      	mov	r3, sp
 8001c4e:	607b      	str	r3, [r7, #4]
    int remaining_indices[pop->size];
 8001c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c56:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001c5a:	1e4b      	subs	r3, r1, #1
 8001c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c5e:	460a      	mov	r2, r1
 8001c60:	2300      	movs	r3, #0
 8001c62:	4614      	mov	r4, r2
 8001c64:	461d      	mov	r5, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	016b      	lsls	r3, r5, #5
 8001c70:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001c74:	0162      	lsls	r2, r4, #5
 8001c76:	460a      	mov	r2, r1
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001c8a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001c8e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001c92:	460b      	mov	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	3307      	adds	r3, #7
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001ca0:	466b      	mov	r3, sp
 8001ca2:	3303      	adds	r3, #3
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int remaining_size = pop->size;
 8001caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    for (int i = 0; i < pop->size; i++) remaining_indices[i] = i;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001cbe:	e00b      	b.n	8001cd8 <selection+0x98>
 8001cc0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001cc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cde:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 8001ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	dbea      	blt.n	8001cc0 <selection+0x80>

    selected->size = 0;
 8001cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0

    while (selected->size < POP_SIZE) {
 8001cf8:	e151      	b.n	8001f9e <selection+0x35e>
 8001cfa:	466b      	mov	r3, sp
 8001cfc:	461e      	mov	r6, r3
        int front_indices[remaining_size];
 8001cfe:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001d02:	1e4b      	subs	r3, r1, #1
 8001d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d06:	460a      	mov	r2, r1
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	0143      	lsls	r3, r0, #5
 8001d1e:	4620      	mov	r0, r4
 8001d20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d24:	4620      	mov	r0, r4
 8001d26:	0142      	lsls	r2, r0, #5
 8001d28:	460a      	mov	r2, r1
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623a      	str	r2, [r7, #32]
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	0143      	lsls	r3, r0, #5
 8001d40:	4620      	mov	r0, r4
 8001d42:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d46:	4620      	mov	r0, r4
 8001d48:	0142      	lsls	r2, r0, #5
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	3307      	adds	r3, #7
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	ebad 0d03 	sub.w	sp, sp, r3
 8001d58:	466b      	mov	r3, sp
 8001d5a:	3303      	adds	r3, #3
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	657b      	str	r3, [r7, #84]	@ 0x54
        int front_size;
        find_pareto_front(pop->solutions, remaining_size, front_indices, &front_size);
 8001d62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d6a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001d6e:	f7ff fca4 	bl	80016ba <find_pareto_front>

        if (selected->size + front_size > POP_SIZE) {
 8001d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d78:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 8001d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d7e:	4413      	add	r3, r2
 8001d80:	2b64      	cmp	r3, #100	@ 0x64
 8001d82:	f340 80ac 	ble.w	8001ede <selection+0x29e>
 8001d86:	466b      	mov	r3, sp
 8001d88:	461d      	mov	r5, r3
            int needed = POP_SIZE - selected->size;
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001d94:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001d98:	653b      	str	r3, [r7, #80]	@ 0x50
            Solution temp_front[front_size];
 8001d9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d9c:	1e4b      	subs	r3, r1, #1
 8001d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001da0:	460a      	mov	r2, r1
 8001da2:	2300      	movs	r3, #0
 8001da4:	4692      	mov	sl, r2
 8001da6:	469b      	mov	fp, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8001db4:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8001db8:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61ba      	str	r2, [r7, #24]
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001dd0:	4648      	mov	r0, r9
 8001dd2:	01c3      	lsls	r3, r0, #7
 8001dd4:	4640      	mov	r0, r8
 8001dd6:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8001dda:	4640      	mov	r0, r8
 8001ddc:	01c2      	lsls	r2, r0, #7
 8001dde:	460b      	mov	r3, r1
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	3307      	adds	r3, #7
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	ebad 0d03 	sub.w	sp, sp, r3
 8001dec:	466b      	mov	r3, sp
 8001dee:	3303      	adds	r3, #3
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (int i = 0; i < front_size; i++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001dfa:	e011      	b.n	8001e20 <selection+0x1e0>
                temp_front[i] = pop->solutions[front_indices[i]];
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001e06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	4411      	add	r1, r2
 8001e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	460c      	mov	r4, r1
 8001e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < front_size; i++) {
 8001e1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbe9      	blt.n	8001dfc <selection+0x1bc>
            }

            Solution selected_from_front[needed];
 8001e28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001e2a:	1e4b      	subs	r3, r1, #1
 8001e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e2e:	460a      	mov	r2, r1
 8001e30:	2300      	movs	r3, #0
 8001e32:	613a      	str	r2, [r7, #16]
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e42:	4648      	mov	r0, r9
 8001e44:	01c3      	lsls	r3, r0, #7
 8001e46:	4640      	mov	r0, r8
 8001e48:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8001e4c:	4640      	mov	r0, r8
 8001e4e:	01c2      	lsls	r2, r0, #7
 8001e50:	460a      	mov	r2, r1
 8001e52:	2300      	movs	r3, #0
 8001e54:	60ba      	str	r2, [r7, #8]
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001e64:	4648      	mov	r0, r9
 8001e66:	01c3      	lsls	r3, r0, #7
 8001e68:	4640      	mov	r0, r8
 8001e6a:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8001e6e:	4640      	mov	r0, r8
 8001e70:	01c2      	lsls	r2, r0, #7
 8001e72:	460b      	mov	r3, r1
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	3307      	adds	r3, #7
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001e80:	466b      	mov	r3, sp
 8001e82:	3303      	adds	r3, #3
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	643b      	str	r3, [r7, #64]	@ 0x40
            select_by_crowding(temp_front, front_size, needed, selected_from_front);
 8001e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e90:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001e92:	f7ff fe41 	bl	8001b18 <select_by_crowding>

            for (int i = 0; i < needed; i++) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e9a:	e018      	b.n	8001ece <selection+0x28e>
                selected->solutions[selected->size++] = selected_from_front[i];
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001eaa:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8001eae:	f8c1 22c0 	str.w	r2, [r1, #704]	@ 0x2c0
 8001eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	18d1      	adds	r1, r2, r3
 8001eb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	4413      	add	r3, r2
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < needed; i++) {
 8001ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eca:	3301      	adds	r3, #1
 8001ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ece:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbe2      	blt.n	8001e9c <selection+0x25c>
            }
            break;
 8001ed6:	bf00      	nop
 8001ed8:	46ad      	mov	sp, r5
 8001eda:	46b5      	mov	sp, r6
 8001edc:	e067      	b.n	8001fae <selection+0x36e>
        } else {
            for (int i = 0; i < front_size; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ee2:	e01b      	b.n	8001f1c <selection+0x2dc>
                selected->solutions[selected->size++] = pop->solutions[front_indices[i]];
 8001ee4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef2:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001ef6:	1c4a      	adds	r2, r1, #1
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efe:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 8001f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f04:	010b      	lsls	r3, r1, #4
 8001f06:	18d1      	adds	r1, r2, r3
 8001f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f0a:	0103      	lsls	r3, r0, #4
 8001f0c:	4413      	add	r3, r2
 8001f0e:	460c      	mov	r4, r1
 8001f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < front_size; i++) {
 8001f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f18:	3301      	adds	r3, #1
 8001f1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f20:	4293      	cmp	r3, r2
 8001f22:	dbdf      	blt.n	8001ee4 <selection+0x2a4>
            }

            int new_remaining_size = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	673b      	str	r3, [r7, #112]	@ 0x70
            for (int i = 0; i < remaining_size; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f2c:	e02e      	b.n	8001f8c <selection+0x34c>
                bool in_front = false;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                for (int j = 0; j < front_size; j++) {
 8001f34:	2300      	movs	r3, #0
 8001f36:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f38:	e010      	b.n	8001f5c <selection+0x31c>
                    if (remaining_indices[i] == front_indices[j]) {
 8001f3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	4299      	cmp	r1, r3
 8001f4c:	d103      	bne.n	8001f56 <selection+0x316>
                        in_front = true;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                        break;
 8001f54:	e006      	b.n	8001f64 <selection+0x324>
                for (int j = 0; j < front_size; j++) {
 8001f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f58:	3301      	adds	r3, #1
 8001f5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f60:	4293      	cmp	r3, r2
 8001f62:	dbea      	blt.n	8001f3a <selection+0x2fa>
                    }
                }
                if (!in_front) {
 8001f64:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <selection+0x346>
                    remaining_indices[new_remaining_size++] = remaining_indices[i];
 8001f72:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f74:	1c4b      	adds	r3, r1, #1
 8001f76:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f82:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            for (int i = 0; i < remaining_size; i++) {
 8001f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f88:	3301      	adds	r3, #1
 8001f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dbcb      	blt.n	8001f2e <selection+0x2ee>
                }
            }
            remaining_size = new_remaining_size;
 8001f96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f9c:	46b5      	mov	sp, r6
    while (selected->size < POP_SIZE) {
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001fa8:	2b63      	cmp	r3, #99	@ 0x63
 8001faa:	f77f aea6 	ble.w	8001cfa <selection+0xba>
 8001fae:	f8d7 d004 	ldr.w	sp, [r7, #4]
        }
    }
}
 8001fb2:	bf00      	nop
 8001fb4:	378c      	adds	r7, #140	@ 0x8c
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc0:	f5ad 4d05 	sub.w	sp, sp, #34048	@ 0x8500
 8001fc4:	b0b2      	sub	sp, #200	@ 0xc8
 8001fc6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc8:	f000 fe20 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fcc:	f000 fb8a 	bl	80026e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd0:	f000 fc22 	bl	8002818 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001fd4:	f000 fbf6 	bl	80027c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Population pop, offspring_cross, offspring_mut, offspring_ls, combined, selected;

  srand(HAL_GetTick());
 8001fd8:	f000 fe7e 	bl	8002cd8 <HAL_GetTick>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fa64 	bl	80044ac <srand>

  // Initialize population
  random_population(&pop);
 8001fe4:	f507 43e5 	add.w	r3, r7, #29312	@ 0x7280
 8001fe8:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8001fec:	3b18      	subs	r3, #24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f804 	bl	8000ffc <random_population>
  for (int i = 0; i < pop.size; i++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8001ffa:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e019      	b.n	8002036 <main+0x7a>
	  evaluate(&pop.solutions[i]);
 8002002:	f507 43e5 	add.w	r3, r7, #29312	@ 0x7280
 8002006:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800200a:	3b18      	subs	r3, #24
 800200c:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002010:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	4413      	add	r3, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f830 	bl	8001080 <evaluate>
  for (int i = 0; i < pop.size; i++) {
 8002020:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002024:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002030:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	f507 43eb 	add.w	r3, r7, #30080	@ 0x7580
 800203a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800203e:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8002042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800204a:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 800204e:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbd4      	blt.n	8002002 <main+0x46>
  }

  uint32_t start_time = HAL_GetTick();
 8002058:	f000 fe3e 	bl	8002cd8 <HAL_GetTick>
 800205c:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002060:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8002064:	6018      	str	r0, [r3, #0]

  // Main optimization loop
  for (int iter = 0; iter < MAX_ITER; iter++) {
 8002066:	2300      	movs	r3, #0
 8002068:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 800206c:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e1aa      	b.n	80023ca <main+0x40e>
	  // Generate offspring
	  crossover(&pop, &offspring_cross);
 8002074:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8002078:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800207c:	3a3c      	subs	r2, #60	@ 0x3c
 800207e:	f507 43e5 	add.w	r3, r7, #29312	@ 0x7280
 8002082:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8002086:	3b18      	subs	r3, #24
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f8b4 	bl	80011f8 <crossover>
	  mutation(&pop, &offspring_mut);
 8002090:	f507 429a 	add.w	r2, r7, #19712	@ 0x4d00
 8002094:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002098:	f507 43e5 	add.w	r3, r7, #29312	@ 0x7280
 800209c:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 80020a0:	3b18      	subs	r3, #24
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f98f 	bl	80013c8 <mutation>
	  local_search(&pop, &offspring_ls);
 80020aa:	f507 526a 	add.w	r2, r7, #14976	@ 0x3a80
 80020ae:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80020b2:	3a44      	subs	r2, #68	@ 0x44
 80020b4:	f507 43e5 	add.w	r3, r7, #29312	@ 0x7280
 80020b8:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 80020bc:	3b18      	subs	r3, #24
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fa03 	bl	80014cc <local_search>

	  // Combine populations
	  combined.size = 0;
 80020c6:	f507 5356 	add.w	r3, r7, #13696	@ 0x3580
 80020ca:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80020ce:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80020d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d6:	461a      	mov	r2, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
	  for (int i = 0; i < pop.size; i++) {
 80020de:	2300      	movs	r3, #0
 80020e0:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80020e4:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e038      	b.n	800215e <main+0x1a2>
		  combined.solutions[combined.size++] = pop.solutions[i];
 80020ec:	f507 5356 	add.w	r3, r7, #13696	@ 0x3580
 80020f0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80020f4:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80020f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	f507 5156 	add.w	r1, r7, #13696	@ 0x3580
 8002106:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 800210a:	f6a1 6108 	subw	r1, r1, #3592	@ 0xe08
 800210e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8002112:	f8c1 22c0 	str.w	r2, [r1, #704]	@ 0x2c0
 8002116:	f507 5256 	add.w	r2, r7, #13696	@ 0x3580
 800211a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800211e:	f6a2 6208 	subw	r2, r2, #3592	@ 0xe08
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	18d1      	adds	r1, r2, r3
 8002126:	f507 43eb 	add.w	r3, r7, #30080	@ 0x7580
 800212a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800212e:	f5a3 723e 	sub.w	r2, r3, #760	@ 0x2f8
 8002132:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002136:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	460c      	mov	r4, r1
 8002142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (int i = 0; i < pop.size; i++) {
 8002148:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 800214c:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002158:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	f507 43eb 	add.w	r3, r7, #30080	@ 0x7580
 8002162:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002166:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800216a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800216e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002172:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002176:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	dbb5      	blt.n	80020ec <main+0x130>
	  }
	  for (int i = 0; i < offspring_cross.size; i++) {
 8002180:	2300      	movs	r3, #0
 8002182:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002186:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e038      	b.n	8002200 <main+0x244>
		  combined.solutions[combined.size++] = offspring_cross.solutions[i];
 800218e:	f507 5356 	add.w	r3, r7, #13696	@ 0x3580
 8002192:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002196:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 800219a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	f507 5156 	add.w	r1, r7, #13696	@ 0x3580
 80021a8:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 80021ac:	f6a1 6108 	subw	r1, r1, #3592	@ 0xe08
 80021b0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80021b4:	f8c1 22c0 	str.w	r2, [r1, #704]	@ 0x2c0
 80021b8:	f507 5256 	add.w	r2, r7, #13696	@ 0x3580
 80021bc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80021c0:	f6a2 6208 	subw	r2, r2, #3592	@ 0xe08
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	18d1      	adds	r1, r2, r3
 80021c8:	f507 43cb 	add.w	r3, r7, #25984	@ 0x6580
 80021cc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80021d0:	f2a3 52bc 	subw	r2, r3, #1468	@ 0x5bc
 80021d4:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80021d8:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	460c      	mov	r4, r1
 80021e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (int i = 0; i < offspring_cross.size; i++) {
 80021ea:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80021ee:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80021fa:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	f507 43cb 	add.w	r3, r7, #25984	@ 0x6580
 8002204:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002208:	f2a3 53bc 	subw	r3, r3, #1468	@ 0x5bc
 800220c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002214:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002218:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	dbb5      	blt.n	800218e <main+0x1d2>
	  }
	  for (int i = 0; i < offspring_mut.size; i++) {
 8002222:	2300      	movs	r3, #0
 8002224:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002228:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e038      	b.n	80022a2 <main+0x2e6>
		  combined.solutions[combined.size++] = offspring_mut.solutions[i];
 8002230:	f507 5356 	add.w	r3, r7, #13696	@ 0x3580
 8002234:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002238:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 800223c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	f507 5156 	add.w	r1, r7, #13696	@ 0x3580
 800224a:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 800224e:	f6a1 6108 	subw	r1, r1, #3592	@ 0xe08
 8002252:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8002256:	f8c1 22c0 	str.w	r2, [r1, #704]	@ 0x2c0
 800225a:	f507 5256 	add.w	r2, r7, #13696	@ 0x3580
 800225e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002262:	f6a2 6208 	subw	r2, r2, #3592	@ 0xe08
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	18d1      	adds	r1, r2, r3
 800226a:	f507 43ab 	add.w	r3, r7, #21888	@ 0x5580
 800226e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002272:	f5a3 6208 	sub.w	r2, r3, #2176	@ 0x880
 8002276:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 800227a:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4413      	add	r3, r2
 8002284:	460c      	mov	r4, r1
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (int i = 0; i < offspring_mut.size; i++) {
 800228c:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002290:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 800229c:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	f507 43ab 	add.w	r3, r7, #21888	@ 0x5580
 80022a6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80022aa:	f5a3 6308 	sub.w	r3, r3, #2176	@ 0x880
 80022ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80022b6:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80022ba:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbb5      	blt.n	8002230 <main+0x274>
	  }
	  for (int i = 0; i < offspring_ls.size; i++) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80022ca:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e038      	b.n	8002344 <main+0x388>
		  combined.solutions[combined.size++] = offspring_ls.solutions[i];
 80022d2:	f507 5356 	add.w	r3, r7, #13696	@ 0x3580
 80022d6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80022da:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80022de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	f507 5156 	add.w	r1, r7, #13696	@ 0x3580
 80022ec:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 80022f0:	f6a1 6108 	subw	r1, r1, #3592	@ 0xe08
 80022f4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80022f8:	f8c1 22c0 	str.w	r2, [r1, #704]	@ 0x2c0
 80022fc:	f507 5256 	add.w	r2, r7, #13696	@ 0x3580
 8002300:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002304:	f6a2 6208 	subw	r2, r2, #3592	@ 0xe08
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	18d1      	adds	r1, r2, r3
 800230c:	f507 438b 	add.w	r3, r7, #17792	@ 0x4580
 8002310:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002314:	f6a3 3244 	subw	r2, r3, #2884	@ 0xb44
 8002318:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 800231c:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4413      	add	r3, r2
 8002326:	460c      	mov	r4, r1
 8002328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (int i = 0; i < offspring_ls.size; i++) {
 800232e:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002332:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 800233e:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	f507 438b 	add.w	r3, r7, #17792	@ 0x4580
 8002348:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800234c:	f6a3 3344 	subw	r3, r3, #2884	@ 0xb44
 8002350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002358:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 800235c:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	dbb5      	blt.n	80022d2 <main+0x316>
	  }

	  // Selection
	  selection(&combined, &selected);
 8002366:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 800236a:	f102 0208 	add.w	r2, r2, #8
 800236e:	3a4c      	subs	r2, #76	@ 0x4c
 8002370:	f507 531e 	add.w	r3, r7, #10112	@ 0x2780
 8002374:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002378:	3b08      	subs	r3, #8
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fc5f 	bl	8001c40 <selection>
	  pop = selected;
 8002382:	f507 43eb 	add.w	r3, r7, #30080	@ 0x7580
 8002386:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800238a:	f5a3 723e 	sub.w	r2, r3, #760	@ 0x2f8
 800238e:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8002392:	f103 0308 	add.w	r3, r3, #8
 8002396:	4610      	mov	r0, r2
 8002398:	3bcc      	subs	r3, #204	@ 0xcc
 800239a:	f241 22c4 	movw	r2, #4804	@ 0x12c4
 800239e:	4619      	mov	r1, r3
 80023a0:	f002 ff13 	bl	80051ca <memcpy>

	  printf("Iteration %d\n", iter);
 80023a4:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80023a8:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	48c6      	ldr	r0, [pc, #792]	@ (80026c8 <main+0x70c>)
 80023b0:	f002 fe00 	bl	8004fb4 <iprintf>
  for (int iter = 0; iter < MAX_ITER; iter++) {
 80023b4:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80023b8:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80023c4:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80023ce:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80023d6:	f77f ae4d 	ble.w	8002074 <main+0xb8>
  }

  uint32_t end_time = HAL_GetTick();
 80023da:	f000 fc7d 	bl	8002cd8 <HAL_GetTick>
 80023de:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80023e2:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 80023e6:	6018      	str	r0, [r3, #0]
  uint32_t elapsed_ms = end_time - start_time;
 80023e8:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80023ec:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80023f6:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002402:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 8002406:	6013      	str	r3, [r2, #0]

  float time_sec = elapsed_ms / 1000.0f;
 8002408:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 800240c:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800241a:	eddf 6aac 	vldr	s13, [pc, #688]	@ 80026cc <main+0x710>
 800241e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002422:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002426:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800242a:	edc3 7a00 	vstr	s15, [r3]
  float energy_joules = VOLTAGE * CURRENT * time_sec;
 800242e:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002432:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80026d0 <main+0x714>
 800243e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002442:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002446:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800244a:	edc3 7a00 	vstr	s15, [r3]

  // Extract Pareto front from final population
  int front_indices[POP_SIZE];
  int front_size;
  find_pareto_front(pop.solutions, pop.size, front_indices, &front_size);
 800244e:	f507 43eb 	add.w	r3, r7, #30080	@ 0x7580
 8002452:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002456:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800245a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800245e:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8002462:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8002466:	f103 0308 	add.w	r3, r3, #8
 800246a:	3b60      	subs	r3, #96	@ 0x60
 800246c:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 8002470:	f102 0208 	add.w	r2, r2, #8
 8002474:	3a5c      	subs	r2, #92	@ 0x5c
 8002476:	f507 40e5 	add.w	r0, r7, #29312	@ 0x7280
 800247a:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 800247e:	3818      	subs	r0, #24
 8002480:	f7ff f91b 	bl	80016ba <find_pareto_front>

  Population pareto_front = {0};
 8002484:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002488:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800248c:	4618      	mov	r0, r3
 800248e:	f241 23c4 	movw	r3, #4804	@ 0x12c4
 8002492:	461a      	mov	r2, r3
 8002494:	2100      	movs	r1, #0
 8002496:	f002 fe18 	bl	80050ca <memset>
  for (int i = 0; i < front_size; i++) {
 800249a:	2300      	movs	r3, #0
 800249c:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80024a0:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e02e      	b.n	8002506 <main+0x54a>
	  pareto_front.solutions[i] = pop.solutions[front_indices[i]];
 80024a8:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 80024ac:	f103 0308 	add.w	r3, r3, #8
 80024b0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80024b4:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80024b8:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c2:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 80024c6:	f2a2 5124 	subw	r1, r2, #1316	@ 0x524
 80024ca:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 80024ce:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	4411      	add	r1, r2
 80024d8:	f507 42eb 	add.w	r2, r7, #30080	@ 0x7580
 80024dc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80024e0:	f5a2 723e 	sub.w	r2, r2, #760	@ 0x2f8
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	460c      	mov	r4, r1
 80024ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (int i = 0; i < front_size; i++) {
 80024f0:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80024f4:	f103 038c 	add.w	r3, r3, #140	@ 0x8c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002500:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 800250a:	f103 0308 	add.w	r3, r3, #8
 800250e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002518:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	dbc2      	blt.n	80024a8 <main+0x4ec>
  }
  pareto_front.size = front_size;
 8002522:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8002526:	f103 0308 	add.w	r3, r3, #8
 800252a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 8002534:	f2a2 5224 	subw	r2, r2, #1316	@ 0x524
 8002538:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800253c:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0

  char msg[128];
  for (int i = 0; i < pareto_front.size; i++) {
 8002540:	2300      	movs	r3, #0
 8002542:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002546:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e06f      	b.n	800262e <main+0x672>
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
			  pareto_front.solutions[i].x[0], pareto_front.solutions[i].x[1],
 800254e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002552:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8002556:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 800255a:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd fffe 	bl	8000568 <__aeabi_f2d>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
			  pareto_front.solutions[i].x[0], pareto_front.solutions[i].x[1],
 8002570:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002574:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8002578:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 800257c:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ffec 	bl	8000568 <__aeabi_f2d>
 8002590:	4680      	mov	r8, r0
 8002592:	4689      	mov	r9, r1
			  pareto_front.solutions[i].fitness[0], pareto_front.solutions[i].fitness[1]);
 8002594:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002598:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 800259c:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80025a0:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	4413      	add	r3, r2
 80025aa:	3308      	adds	r3, #8
 80025ac:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ffda 	bl	8000568 <__aeabi_f2d>
 80025b4:	4682      	mov	sl, r0
 80025b6:	468b      	mov	fp, r1
			  pareto_front.solutions[i].fitness[0], pareto_front.solutions[i].fitness[1]);
 80025b8:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80025bc:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 80025c0:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 80025c4:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	330c      	adds	r3, #12
 80025d0:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffc8 	bl	8000568 <__aeabi_f2d>
 80025d8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025dc:	3ba4      	subs	r3, #164	@ 0xa4
 80025de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80025e2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80025e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80025ea:	e9cd 4500 	strd	r4, r5, [sp]
 80025ee:	4a39      	ldr	r2, [pc, #228]	@ (80026d4 <main+0x718>)
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 fcf0 	bl	8004fd8 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80025f8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025fc:	3ba4      	subs	r3, #164	@ 0xa4
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd fe46 	bl	8000290 <strlen>
 8002604:	4603      	mov	r3, r0
 8002606:	b29a      	uxth	r2, r3
 8002608:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800260c:	39a4      	subs	r1, #164	@ 0xa4
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	4831      	ldr	r0, [pc, #196]	@ (80026d8 <main+0x71c>)
 8002614:	f001 fb8e 	bl	8003d34 <HAL_UART_Transmit>
  for (int i = 0; i < pareto_front.size; i++) {
 8002618:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 800261c:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002628:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002632:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800263a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800263e:	f507 4205 	add.w	r2, r7, #34048	@ 0x8500
 8002642:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	db80      	blt.n	800254e <main+0x592>
  }

  snprintf(msg, sizeof(msg), "Done! Time: %lums (%.2fs), Energy: %.4fJ\r\n", elapsed_ms, time_sec, energy_joules);
 800264c:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002650:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f7fd ff87 	bl	8000568 <__aeabi_f2d>
 800265a:	4604      	mov	r4, r0
 800265c:	460d      	mov	r5, r1
 800265e:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002662:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	f7fd ff7e 	bl	8000568 <__aeabi_f2d>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8002674:	38a4      	subs	r0, #164	@ 0xa4
 8002676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800267a:	e9cd 4500 	strd	r4, r5, [sp]
 800267e:	f507 4305 	add.w	r3, r7, #34048	@ 0x8500
 8002682:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a14      	ldr	r2, [pc, #80]	@ (80026dc <main+0x720>)
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	f002 fca4 	bl	8004fd8 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002690:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002694:	3ba4      	subs	r3, #164	@ 0xa4
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd fdfa 	bl	8000290 <strlen>
 800269c:	4603      	mov	r3, r0
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80026a4:	39a4      	subs	r1, #164	@ 0xa4
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <main+0x71c>)
 80026ac:	f001 fb42 	bl	8003d34 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
 80026b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026b4:	480a      	ldr	r0, [pc, #40]	@ (80026e0 <main+0x724>)
 80026b6:	f000 fdea 	bl	800328e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80026ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026be:	f000 fb17 	bl	8002cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
 80026c2:	bf00      	nop
 80026c4:	e7f4      	b.n	80026b0 <main+0x6f4>
 80026c6:	bf00      	nop
 80026c8:	080084c8 	.word	0x080084c8
 80026cc:	447a0000 	.word	0x447a0000
 80026d0:	3d872b02 	.word	0x3d872b02
 80026d4:	080084d8 	.word	0x080084d8
 80026d8:	20000210 	.word	0x20000210
 80026dc:	08008500 	.word	0x08008500
 80026e0:	40021800 	.word	0x40021800

080026e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b094      	sub	sp, #80	@ 0x50
 80026e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ea:	f107 0320 	add.w	r3, r7, #32
 80026ee:	2230      	movs	r2, #48	@ 0x30
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fce9 	bl	80050ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <SystemClock_Config+0xd8>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	4a2a      	ldr	r2, [pc, #168]	@ (80027bc <SystemClock_Config+0xd8>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002716:	6413      	str	r3, [r2, #64]	@ 0x40
 8002718:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <SystemClock_Config+0xd8>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <SystemClock_Config+0xdc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a24      	ldr	r2, [pc, #144]	@ (80027c0 <SystemClock_Config+0xdc>)
 800272e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <SystemClock_Config+0xdc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002740:	2301      	movs	r3, #1
 8002742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800274a:	2302      	movs	r3, #2
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800274e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002754:	2304      	movs	r3, #4
 8002756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002758:	23b4      	movs	r3, #180	@ 0xb4
 800275a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800275c:	2302      	movs	r3, #2
 800275e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002760:	2304      	movs	r3, #4
 8002762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002764:	f107 0320 	add.w	r3, r7, #32
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fdfb 	bl	8003364 <HAL_RCC_OscConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002774:	f000 f8a2 	bl	80028bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002778:	f000 fda4 	bl	80032c4 <HAL_PWREx_EnableOverDrive>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002782:	f000 f89b 	bl	80028bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002786:	230f      	movs	r3, #15
 8002788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278a:	2302      	movs	r3, #2
 800278c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002792:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002798:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800279c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	2105      	movs	r1, #5
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 f855 	bl	8003854 <HAL_RCC_ClockConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80027b0:	f000 f884 	bl	80028bc <Error_Handler>
  }
}
 80027b4:	bf00      	nop
 80027b6:	3750      	adds	r7, #80	@ 0x50
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000

080027c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027c8:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	@ (8002814 <MX_USART1_UART_Init+0x50>)
 80027cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027ea:	220c      	movs	r2, #12
 80027ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027fa:	4805      	ldr	r0, [pc, #20]	@ (8002810 <MX_USART1_UART_Init+0x4c>)
 80027fc:	f001 fa4a 	bl	8003c94 <HAL_UART_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002806:	f000 f859 	bl	80028bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000210 	.word	0x20000210
 8002814:	40011000 	.word	0x40011000

08002818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
 800282c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 8002838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 8002870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <MX_GPIO_Init+0x9c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002888:	480b      	ldr	r0, [pc, #44]	@ (80028b8 <MX_GPIO_Init+0xa0>)
 800288a:	f000 fce7 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800288e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002894:	2301      	movs	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4804      	ldr	r0, [pc, #16]	@ (80028b8 <MX_GPIO_Init+0xa0>)
 80028a8:	f000 fb2c 	bl	8002f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028ac:	bf00      	nop
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40021800 	.word	0x40021800

080028bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c0:	b672      	cpsid	i
}
 80028c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <Error_Handler+0x8>

080028c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_MspInit+0x4c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <HAL_MspInit+0x4c>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_MspInit+0x4c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_MspInit+0x4c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a08      	ldr	r2, [pc, #32]	@ (8002914 <HAL_MspInit+0x4c>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_MspInit+0x4c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_UART_MspInit+0x84>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d12c      	bne.n	8002994 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	4b18      	ldr	r3, [pc, #96]	@ (80029a0 <HAL_UART_MspInit+0x88>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_UART_MspInit+0x88>)
 8002944:	f043 0310 	orr.w	r3, r3, #16
 8002948:	6453      	str	r3, [r2, #68]	@ 0x44
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <HAL_UART_MspInit+0x88>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_UART_MspInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a10      	ldr	r2, [pc, #64]	@ (80029a0 <HAL_UART_MspInit+0x88>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <HAL_UART_MspInit+0x88>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002972:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002984:	2307      	movs	r3, #7
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <HAL_UART_MspInit+0x8c>)
 8002990:	f000 fab8 	bl	8002f04 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002994:	bf00      	nop
 8002996:	3728      	adds	r7, #40	@ 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40011000 	.word	0x40011000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020000 	.word	0x40020000

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <NMI_Handler+0x4>

080029b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <MemManage_Handler+0x4>

080029c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <UsageFault_Handler+0x4>

080029d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fe:	f000 f957 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  return 1;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_kill>:

int _kill(int pid, int sig)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a20:	f002 fba6 	bl	8005170 <__errno>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2216      	movs	r2, #22
 8002a28:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_exit>:

void _exit (int status)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ffe7 	bl	8002a16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <_exit+0x12>

08002a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e00a      	b.n	8002a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a5e:	f3af 8000 	nop.w
 8002a62:	4601      	mov	r1, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	60ba      	str	r2, [r7, #8]
 8002a6a:	b2ca      	uxtb	r2, r1
 8002a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbf0      	blt.n	8002a5e <_read+0x12>
  }

  return len;
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e009      	b.n	8002aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	60ba      	str	r2, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbf1      	blt.n	8002a98 <_write+0x12>
  }
  return len;
 8002ab4:	687b      	ldr	r3, [r7, #4]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_close>:

int _close(int file)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <_isatty>:

int _isatty(int file)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f002 fb0a 	bl	8005170 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20030000 	.word	0x20030000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	20000258 	.word	0x20000258
 8002b90:	200003b0 	.word	0x200003b0

08002b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <SystemInit+0x20>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <SystemInit+0x20>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bbc:	f7ff ffea 	bl	8002b94 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc0:	480c      	ldr	r0, [pc, #48]	@ (8002bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bc2:	490d      	ldr	r1, [pc, #52]	@ (8002bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f002 fac9 	bl	800517c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7ff f9e7 	bl	8001fbc <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bf0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002bfc:	08008998 	.word	0x08008998
  ldr r2, =_sbss
 8002c00:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002c04:	200003ac 	.word	0x200003ac

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 f931 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff fe42 	bl	80028c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f93b 	bl	8002eea <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 f911 	bl	8002eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	@ (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000020 	.word	0x20000020
 8002ca8:	20000028 	.word	0x20000028
 8002cac:	20000024 	.word	0x20000024

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000028 	.word	0x20000028
 8002cd4:	2000025c 	.word	0x2000025c

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	2000025c 	.word	0x2000025c

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff ffee 	bl	8002cd8 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <HAL_Delay+0x44>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000028 	.word	0x20000028

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	@ (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	@ (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff8e 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff47 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec4:	f7ff ff5c 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f7ff ff8e 	bl	8002df0 <NVIC_EncodePriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff5d 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffb0 	bl	8002e58 <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e177      	b.n	8003210 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 8166 	bne.w	800320a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d005      	beq.n	8002f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d017      	beq.n	8002ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80c0 	beq.w	800320a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b66      	ldr	r3, [pc, #408]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	4a65      	ldr	r2, [pc, #404]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003098:	6453      	str	r3, [r2, #68]	@ 0x44
 800309a:	4b63      	ldr	r3, [pc, #396]	@ (8003228 <HAL_GPIO_Init+0x324>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a6:	4a61      	ldr	r2, [pc, #388]	@ (800322c <HAL_GPIO_Init+0x328>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a58      	ldr	r2, [pc, #352]	@ (8003230 <HAL_GPIO_Init+0x32c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d037      	beq.n	8003142 <HAL_GPIO_Init+0x23e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a57      	ldr	r2, [pc, #348]	@ (8003234 <HAL_GPIO_Init+0x330>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_GPIO_Init+0x23a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a56      	ldr	r2, [pc, #344]	@ (8003238 <HAL_GPIO_Init+0x334>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d02b      	beq.n	800313a <HAL_GPIO_Init+0x236>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a55      	ldr	r2, [pc, #340]	@ (800323c <HAL_GPIO_Init+0x338>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x232>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a54      	ldr	r2, [pc, #336]	@ (8003240 <HAL_GPIO_Init+0x33c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x22e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a53      	ldr	r2, [pc, #332]	@ (8003244 <HAL_GPIO_Init+0x340>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x22a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	@ (8003248 <HAL_GPIO_Init+0x344>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x226>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a51      	ldr	r2, [pc, #324]	@ (800324c <HAL_GPIO_Init+0x348>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x222>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a50      	ldr	r2, [pc, #320]	@ (8003250 <HAL_GPIO_Init+0x34c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x21e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4f      	ldr	r2, [pc, #316]	@ (8003254 <HAL_GPIO_Init+0x350>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x21a>
 800311a:	2309      	movs	r3, #9
 800311c:	e012      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800311e:	230a      	movs	r3, #10
 8003120:	e010      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003122:	2308      	movs	r3, #8
 8003124:	e00e      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003126:	2307      	movs	r3, #7
 8003128:	e00c      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800312a:	2306      	movs	r3, #6
 800312c:	e00a      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800312e:	2305      	movs	r3, #5
 8003130:	e008      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003132:	2304      	movs	r3, #4
 8003134:	e006      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003136:	2303      	movs	r3, #3
 8003138:	e004      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800313a:	2302      	movs	r3, #2
 800313c:	e002      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003142:	2300      	movs	r3, #0
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	4093      	lsls	r3, r2
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003154:	4935      	ldr	r1, [pc, #212]	@ (800322c <HAL_GPIO_Init+0x328>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3302      	adds	r3, #2
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b3d      	ldr	r3, [pc, #244]	@ (8003258 <HAL_GPIO_Init+0x354>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a34      	ldr	r2, [pc, #208]	@ (8003258 <HAL_GPIO_Init+0x354>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <HAL_GPIO_Init+0x354>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <HAL_GPIO_Init+0x354>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b6:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_GPIO_Init+0x354>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031da:	4a1f      	ldr	r2, [pc, #124]	@ (8003258 <HAL_GPIO_Init+0x354>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <HAL_GPIO_Init+0x354>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003204:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <HAL_GPIO_Init+0x354>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	f67f ae84 	bls.w	8002f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40013800 	.word	0x40013800
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	40020800 	.word	0x40020800
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021000 	.word	0x40021000
 8003244:	40021400 	.word	0x40021400
 8003248:	40021800 	.word	0x40021800
 800324c:	40021c00 	.word	0x40021c00
 8003250:	40022000 	.word	0x40022000
 8003254:	40022400 	.word	0x40022400
 8003258:	40013c00 	.word	0x40013c00

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003278:	e003      	b.n	8003282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	041a      	lsls	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4013      	ands	r3, r2
 80032a6:	041a      	lsls	r2, r3, #16
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	400b      	ands	r3, r1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4b20      	ldr	r3, [pc, #128]	@ (8003354 <HAL_PWREx_EnableOverDrive+0x90>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003354 <HAL_PWREx_EnableOverDrive+0x90>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032de:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_PWREx_EnableOverDrive+0x90>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <HAL_PWREx_EnableOverDrive+0x94>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f0:	f7ff fcf2 	bl	8002cd8 <HAL_GetTick>
 80032f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032f6:	e009      	b.n	800330c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032f8:	f7ff fcee 	bl	8002cd8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003306:	d901      	bls.n	800330c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e01f      	b.n	800334c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800330c:	4b13      	ldr	r3, [pc, #76]	@ (800335c <HAL_PWREx_EnableOverDrive+0x98>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003318:	d1ee      	bne.n	80032f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800331a:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <HAL_PWREx_EnableOverDrive+0x9c>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003320:	f7ff fcda 	bl	8002cd8 <HAL_GetTick>
 8003324:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003326:	e009      	b.n	800333c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003328:	f7ff fcd6 	bl	8002cd8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003336:	d901      	bls.n	800333c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e007      	b.n	800334c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800333c:	4b07      	ldr	r3, [pc, #28]	@ (800335c <HAL_PWREx_EnableOverDrive+0x98>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003348:	d1ee      	bne.n	8003328 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	420e0040 	.word	0x420e0040
 800335c:	40007000 	.word	0x40007000
 8003360:	420e0044 	.word	0x420e0044

08003364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e267      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d075      	beq.n	800346e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003382:	4b88      	ldr	r3, [pc, #544]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d00c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338e:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003396:	2b08      	cmp	r3, #8
 8003398:	d112      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b82      	ldr	r3, [pc, #520]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	4b7e      	ldr	r3, [pc, #504]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05b      	beq.n	800346c <HAL_RCC_OscConfig+0x108>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d157      	bne.n	800346c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e242      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x74>
 80033ca:	4b76      	ldr	r3, [pc, #472]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a75      	ldr	r2, [pc, #468]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b70      	ldr	r3, [pc, #448]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6f      	ldr	r2, [pc, #444]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6c      	ldr	r2, [pc, #432]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033fc:	4b69      	ldr	r3, [pc, #420]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a68      	ldr	r2, [pc, #416]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b66      	ldr	r3, [pc, #408]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a65      	ldr	r2, [pc, #404]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7ff fc5c 	bl	8002cd8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7ff fc58 	bl	8002cd8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e207      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b5b      	ldr	r3, [pc, #364]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xc0>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7ff fc48 	bl	8002cd8 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7ff fc44 	bl	8002cd8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1f3      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b51      	ldr	r3, [pc, #324]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0xe8>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800347a:	4b4a      	ldr	r3, [pc, #296]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b44      	ldr	r3, [pc, #272]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b41      	ldr	r3, [pc, #260]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1c7      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4937      	ldr	r1, [pc, #220]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_RCC_OscConfig+0x244>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7ff fbfd 	bl	8002cd8 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e2:	f7ff fbf9 	bl	8002cd8 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1a8      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4925      	ldr	r1, [pc, #148]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b24      	ldr	r3, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x244>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7ff fbdc 	bl	8002cd8 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003524:	f7ff fbd8 	bl	8002cd8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e187      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d036      	beq.n	80035bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_RCC_OscConfig+0x248>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7ff fbbc 	bl	8002cd8 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7ff fbb8 	bl	8002cd8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e167      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x200>
 8003582:	e01b      	b.n	80035bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <HAL_RCC_OscConfig+0x248>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7ff fba5 	bl	8002cd8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	e00e      	b.n	80035b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7ff fba1 	bl	8002cd8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d907      	bls.n	80035b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e150      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	42470000 	.word	0x42470000
 80035ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ea      	bne.n	8003592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8097 	beq.w	80036f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b81      	ldr	r3, [pc, #516]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	4b7d      	ldr	r3, [pc, #500]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	4a7c      	ldr	r2, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ea:	4b7a      	ldr	r3, [pc, #488]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b77      	ldr	r3, [pc, #476]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b74      	ldr	r3, [pc, #464]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a73      	ldr	r2, [pc, #460]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7ff fb61 	bl	8002cd8 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7ff fb5d 	bl	8002cd8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e10c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b6a      	ldr	r3, [pc, #424]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x2ea>
 8003640:	4b64      	ldr	r3, [pc, #400]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4a63      	ldr	r2, [pc, #396]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	@ 0x70
 800364c:	e01c      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x30c>
 8003656:	4b5f      	ldr	r3, [pc, #380]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	4a5e      	ldr	r2, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	@ 0x70
 8003662:	4b5c      	ldr	r3, [pc, #368]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a5b      	ldr	r2, [pc, #364]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	@ 0x70
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 8003670:	4b58      	ldr	r3, [pc, #352]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	4a57      	ldr	r2, [pc, #348]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	@ 0x70
 800367c:	4b55      	ldr	r3, [pc, #340]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a54      	ldr	r2, [pc, #336]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7ff fb22 	bl	8002cd8 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7ff fb1e 	bl	8002cd8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0cb      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	4b49      	ldr	r3, [pc, #292]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ee      	beq.n	8003698 <HAL_RCC_OscConfig+0x334>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7ff fb0c 	bl	8002cd8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7ff fb08 	bl	8002cd8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0b5      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036da:	4b3e      	ldr	r3, [pc, #248]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ee      	bne.n	80036c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	4a38      	ldr	r2, [pc, #224]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a1 	beq.w	8003844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003702:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b08      	cmp	r3, #8
 800370c:	d05c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d141      	bne.n	800379a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7ff fadc 	bl	8002cd8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7ff fad8 	bl	8002cd8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e087      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	491b      	ldr	r1, [pc, #108]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7ff fab1 	bl	8002cd8 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7ff faad 	bl	8002cd8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e05c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x416>
 8003798:	e054      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7ff fa9a 	bl	8002cd8 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7ff fa96 	bl	8002cd8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e045      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x444>
 80037c6:	e03d      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e038      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_RCC_OscConfig+0x4ec>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d028      	beq.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d121      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d11a      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d111      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cc      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b68      	ldr	r3, [pc, #416]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90c      	bls.n	8003890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b65      	ldr	r3, [pc, #404]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d044      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d119      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	2b03      	cmp	r3, #3
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e067      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b37      	ldr	r3, [pc, #220]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4934      	ldr	r1, [pc, #208]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7ff f9c8 	bl	8002cd8 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7ff f9c4 	bl	8002cd8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e04f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2b      	ldr	r3, [pc, #172]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b25      	ldr	r3, [pc, #148]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20c      	bcs.n	800399c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b22      	ldr	r3, [pc, #136]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f928 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	0800852c 	.word	0x0800852c
 8003a18:	20000020 	.word	0x20000020
 8003a1c:	20000024 	.word	0x20000024

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b094      	sub	sp, #80	@ 0x50
 8003a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a38:	4b79      	ldr	r3, [pc, #484]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d00d      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	f200 80e1 	bhi.w	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a52:	e0db      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b73      	ldr	r3, [pc, #460]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a58:	e0db      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5a:	4b73      	ldr	r3, [pc, #460]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5e:	e0d8      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a60:	4b6f      	ldr	r3, [pc, #444]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b6a      	ldr	r3, [pc, #424]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
 8003a96:	f04f 0000 	mov.w	r0, #0
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	0159      	lsls	r1, r3, #5
 8003aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa4:	0150      	lsls	r0, r2, #5
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4621      	mov	r1, r4
 8003aac:	1a51      	subs	r1, r2, r1
 8003aae:	6139      	str	r1, [r7, #16]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	018b      	lsls	r3, r1, #6
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ace:	4651      	mov	r1, sl
 8003ad0:	018a      	lsls	r2, r1, #6
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ad8:	4659      	mov	r1, fp
 8003ada:	eb63 0901 	sbc.w	r9, r3, r1
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af2:	4690      	mov	r8, r2
 8003af4:	4699      	mov	r9, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	eb18 0303 	adds.w	r3, r8, r3
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	462b      	mov	r3, r5
 8003b00:	eb49 0303 	adc.w	r3, r9, r3
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b12:	4629      	mov	r1, r5
 8003b14:	024b      	lsls	r3, r1, #9
 8003b16:	4621      	mov	r1, r4
 8003b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	024a      	lsls	r2, r1, #9
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b26:	2200      	movs	r2, #0
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b30:	f7fd f89a 	bl	8000c68 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b3c:	e058      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	4611      	mov	r1, r2
 8003b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	0159      	lsls	r1, r3, #5
 8003b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6a:	0150      	lsls	r0, r2, #5
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4641      	mov	r1, r8
 8003b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b90:	ebb2 040a 	subs.w	r4, r2, sl
 8003b94:	eb63 050b 	sbc.w	r5, r3, fp
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	00eb      	lsls	r3, r5, #3
 8003ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba6:	00e2      	lsls	r2, r4, #3
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	4643      	mov	r3, r8
 8003bae:	18e3      	adds	r3, r4, r3
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	eb45 0303 	adc.w	r3, r5, r3
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	028b      	lsls	r3, r1, #10
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	028a      	lsls	r2, r1, #10
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	61fa      	str	r2, [r7, #28]
 8003be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be4:	f7fd f840 	bl	8000c68 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3750      	adds	r7, #80	@ 0x50
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000020 	.word	0x20000020

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	@ (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	0800853c 	.word	0x0800853c

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c70:	f7ff ffdc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0b5b      	lsrs	r3, r3, #13
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	0800853c 	.word	0x0800853c

08003c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e042      	b.n	8003d2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe fe2c 	bl	8002918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	@ 0x24
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f973 	bl	8003fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	@ 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d175      	bne.n	8003e40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Transmit+0x2c>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e06e      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2221      	movs	r2, #33	@ 0x21
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d72:	f7fe ffb1 	bl	8002cd8 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8c:	d108      	bne.n	8003da0 <HAL_UART_Transmit+0x6c>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e003      	b.n	8003da8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003da8:	e02e      	b.n	8003e08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2180      	movs	r1, #128	@ 0x80
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f848 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e03a      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	3302      	adds	r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e007      	b.n	8003dfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1cb      	bne.n	8003daa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2140      	movs	r1, #64	@ 0x40
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f814 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e006      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5a:	e03b      	b.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d037      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7fe ff38 	bl	8002cd8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	6a3a      	ldr	r2, [r7, #32]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e03a      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b80      	cmp	r3, #128	@ 0x80
 8003e90:	d020      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	d01d      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d116      	bne.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f81d 	bl	8003efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e00f      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4013      	ands	r3, r2
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d0b4      	beq.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b095      	sub	sp, #84	@ 0x54
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f24:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d119      	bne.n	8003fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f94:	61ba      	str	r2, [r7, #24]
 8003f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fb6:	bf00      	nop
 8003fb8:	3754      	adds	r7, #84	@ 0x54
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc8:	b0c0      	sub	sp, #256	@ 0x100
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	68d9      	ldr	r1, [r3, #12]
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	ea40 0301 	orr.w	r3, r0, r1
 8003fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	431a      	orrs	r2, r3
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800401c:	f021 010c 	bic.w	r1, r1, #12
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800402a:	430b      	orrs	r3, r1
 800402c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	6999      	ldr	r1, [r3, #24]
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	ea40 0301 	orr.w	r3, r0, r1
 800404a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b8f      	ldr	r3, [pc, #572]	@ (8004290 <UART_SetConfig+0x2cc>)
 8004054:	429a      	cmp	r2, r3
 8004056:	d005      	beq.n	8004064 <UART_SetConfig+0xa0>
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b8d      	ldr	r3, [pc, #564]	@ (8004294 <UART_SetConfig+0x2d0>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d104      	bne.n	800406e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7ff fe02 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004068:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800406c:	e003      	b.n	8004076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800406e:	f7ff fde9 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8004072:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004080:	f040 810c 	bne.w	800429c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004088:	2200      	movs	r2, #0
 800408a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800408e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004096:	4622      	mov	r2, r4
 8004098:	462b      	mov	r3, r5
 800409a:	1891      	adds	r1, r2, r2
 800409c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800409e:	415b      	adcs	r3, r3
 80040a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040a6:	4621      	mov	r1, r4
 80040a8:	eb12 0801 	adds.w	r8, r2, r1
 80040ac:	4629      	mov	r1, r5
 80040ae:	eb43 0901 	adc.w	r9, r3, r1
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040c6:	4690      	mov	r8, r2
 80040c8:	4699      	mov	r9, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	eb18 0303 	adds.w	r3, r8, r3
 80040d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040d4:	462b      	mov	r3, r5
 80040d6:	eb49 0303 	adc.w	r3, r9, r3
 80040da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040f2:	460b      	mov	r3, r1
 80040f4:	18db      	adds	r3, r3, r3
 80040f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040f8:	4613      	mov	r3, r2
 80040fa:	eb42 0303 	adc.w	r3, r2, r3
 80040fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004108:	f7fc fdae 	bl	8000c68 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <UART_SetConfig+0x2d4>)
 8004112:	fba3 2302 	umull	r2, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	011c      	lsls	r4, r3, #4
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004124:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	1891      	adds	r1, r2, r2
 8004132:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004134:	415b      	adcs	r3, r3
 8004136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800413c:	4641      	mov	r1, r8
 800413e:	eb12 0a01 	adds.w	sl, r2, r1
 8004142:	4649      	mov	r1, r9
 8004144:	eb43 0b01 	adc.w	fp, r3, r1
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415c:	4692      	mov	sl, r2
 800415e:	469b      	mov	fp, r3
 8004160:	4643      	mov	r3, r8
 8004162:	eb1a 0303 	adds.w	r3, sl, r3
 8004166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800416a:	464b      	mov	r3, r9
 800416c:	eb4b 0303 	adc.w	r3, fp, r3
 8004170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004180:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004188:	460b      	mov	r3, r1
 800418a:	18db      	adds	r3, r3, r3
 800418c:	643b      	str	r3, [r7, #64]	@ 0x40
 800418e:	4613      	mov	r3, r2
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
 8004196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800419a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800419e:	f7fc fd63 	bl	8000c68 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <UART_SetConfig+0x2d4>)
 80041aa:	fba3 2301 	umull	r2, r3, r3, r1
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2264      	movs	r2, #100	@ 0x64
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	1acb      	subs	r3, r1, r3
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041be:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <UART_SetConfig+0x2d4>)
 80041c0:	fba3 2302 	umull	r2, r3, r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041cc:	441c      	add	r4, r3
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041e8:	415b      	adcs	r3, r3
 80041ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041f0:	4641      	mov	r1, r8
 80041f2:	1851      	adds	r1, r2, r1
 80041f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80041f6:	4649      	mov	r1, r9
 80041f8:	414b      	adcs	r3, r1
 80041fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004208:	4659      	mov	r1, fp
 800420a:	00cb      	lsls	r3, r1, #3
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004212:	4651      	mov	r1, sl
 8004214:	00ca      	lsls	r2, r1, #3
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4603      	mov	r3, r0
 800421c:	4642      	mov	r2, r8
 800421e:	189b      	adds	r3, r3, r2
 8004220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004224:	464b      	mov	r3, r9
 8004226:	460a      	mov	r2, r1
 8004228:	eb42 0303 	adc.w	r3, r2, r3
 800422c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800423c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004244:	460b      	mov	r3, r1
 8004246:	18db      	adds	r3, r3, r3
 8004248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800424a:	4613      	mov	r3, r2
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800425a:	f7fc fd05 	bl	8000c68 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <UART_SetConfig+0x2d4>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	@ 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	3332      	adds	r3, #50	@ 0x32
 8004276:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <UART_SetConfig+0x2d4>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 0207 	and.w	r2, r3, #7
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4422      	add	r2, r4
 800428a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800428c:	e106      	b.n	800449c <UART_SetConfig+0x4d8>
 800428e:	bf00      	nop
 8004290:	40011000 	.word	0x40011000
 8004294:	40011400 	.word	0x40011400
 8004298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800429c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042ae:	4642      	mov	r2, r8
 80042b0:	464b      	mov	r3, r9
 80042b2:	1891      	adds	r1, r2, r2
 80042b4:	6239      	str	r1, [r7, #32]
 80042b6:	415b      	adcs	r3, r3
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042be:	4641      	mov	r1, r8
 80042c0:	1854      	adds	r4, r2, r1
 80042c2:	4649      	mov	r1, r9
 80042c4:	eb43 0501 	adc.w	r5, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	00eb      	lsls	r3, r5, #3
 80042d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d6:	00e2      	lsls	r2, r4, #3
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	18e3      	adds	r3, r4, r3
 80042e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e4:	464b      	mov	r3, r9
 80042e6:	eb45 0303 	adc.w	r3, r5, r3
 80042ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800430a:	4629      	mov	r1, r5
 800430c:	008b      	lsls	r3, r1, #2
 800430e:	4621      	mov	r1, r4
 8004310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004314:	4621      	mov	r1, r4
 8004316:	008a      	lsls	r2, r1, #2
 8004318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800431c:	f7fc fca4 	bl	8000c68 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4b60      	ldr	r3, [pc, #384]	@ (80044a8 <UART_SetConfig+0x4e4>)
 8004326:	fba3 2302 	umull	r2, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	011c      	lsls	r4, r3, #4
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004338:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800433c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	1891      	adds	r1, r2, r2
 8004346:	61b9      	str	r1, [r7, #24]
 8004348:	415b      	adcs	r3, r3
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004350:	4641      	mov	r1, r8
 8004352:	1851      	adds	r1, r2, r1
 8004354:	6139      	str	r1, [r7, #16]
 8004356:	4649      	mov	r1, r9
 8004358:	414b      	adcs	r3, r1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004368:	4659      	mov	r1, fp
 800436a:	00cb      	lsls	r3, r1, #3
 800436c:	4651      	mov	r1, sl
 800436e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004372:	4651      	mov	r1, sl
 8004374:	00ca      	lsls	r2, r1, #3
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	4603      	mov	r3, r0
 800437c:	4642      	mov	r2, r8
 800437e:	189b      	adds	r3, r3, r2
 8004380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004384:	464b      	mov	r3, r9
 8004386:	460a      	mov	r2, r1
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	67bb      	str	r3, [r7, #120]	@ 0x78
 800439a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043a8:	4649      	mov	r1, r9
 80043aa:	008b      	lsls	r3, r1, #2
 80043ac:	4641      	mov	r1, r8
 80043ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043b2:	4641      	mov	r1, r8
 80043b4:	008a      	lsls	r2, r1, #2
 80043b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043ba:	f7fc fc55 	bl	8000c68 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	4b38      	ldr	r3, [pc, #224]	@ (80044a8 <UART_SetConfig+0x4e4>)
 80043c6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2264      	movs	r2, #100	@ 0x64
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	1acb      	subs	r3, r1, r3
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	3332      	adds	r3, #50	@ 0x32
 80043d8:	4a33      	ldr	r2, [pc, #204]	@ (80044a8 <UART_SetConfig+0x4e4>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e4:	441c      	add	r4, r3
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80043f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	415b      	adcs	r3, r3
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004404:	4641      	mov	r1, r8
 8004406:	1851      	adds	r1, r2, r1
 8004408:	6039      	str	r1, [r7, #0]
 800440a:	4649      	mov	r1, r9
 800440c:	414b      	adcs	r3, r1
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800441c:	4659      	mov	r1, fp
 800441e:	00cb      	lsls	r3, r1, #3
 8004420:	4651      	mov	r1, sl
 8004422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004426:	4651      	mov	r1, sl
 8004428:	00ca      	lsls	r2, r1, #3
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	4603      	mov	r3, r0
 8004430:	4642      	mov	r2, r8
 8004432:	189b      	adds	r3, r3, r2
 8004434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004436:	464b      	mov	r3, r9
 8004438:	460a      	mov	r2, r1
 800443a:	eb42 0303 	adc.w	r3, r2, r3
 800443e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	663b      	str	r3, [r7, #96]	@ 0x60
 800444a:	667a      	str	r2, [r7, #100]	@ 0x64
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004458:	4649      	mov	r1, r9
 800445a:	008b      	lsls	r3, r1, #2
 800445c:	4641      	mov	r1, r8
 800445e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004462:	4641      	mov	r1, r8
 8004464:	008a      	lsls	r2, r1, #2
 8004466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800446a:	f7fc fbfd 	bl	8000c68 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <UART_SetConfig+0x4e4>)
 8004474:	fba3 1302 	umull	r1, r3, r3, r2
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	2164      	movs	r1, #100	@ 0x64
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	3332      	adds	r3, #50	@ 0x32
 8004486:	4a08      	ldr	r2, [pc, #32]	@ (80044a8 <UART_SetConfig+0x4e4>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4422      	add	r2, r4
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044a2:	46bd      	mov	sp, r7
 80044a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a8:	51eb851f 	.word	0x51eb851f

080044ac <srand>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <srand+0x44>)
 80044b0:	681d      	ldr	r5, [r3, #0]
 80044b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80044b4:	4604      	mov	r4, r0
 80044b6:	b9b3      	cbnz	r3, 80044e6 <srand+0x3a>
 80044b8:	2018      	movs	r0, #24
 80044ba:	f001 fd57 	bl	8005f6c <malloc>
 80044be:	4602      	mov	r2, r0
 80044c0:	6328      	str	r0, [r5, #48]	@ 0x30
 80044c2:	b920      	cbnz	r0, 80044ce <srand+0x22>
 80044c4:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <srand+0x48>)
 80044c6:	480c      	ldr	r0, [pc, #48]	@ (80044f8 <srand+0x4c>)
 80044c8:	2146      	movs	r1, #70	@ 0x46
 80044ca:	f000 fe8d 	bl	80051e8 <__assert_func>
 80044ce:	490b      	ldr	r1, [pc, #44]	@ (80044fc <srand+0x50>)
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <srand+0x54>)
 80044d2:	e9c0 1300 	strd	r1, r3, [r0]
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <srand+0x58>)
 80044d8:	6083      	str	r3, [r0, #8]
 80044da:	230b      	movs	r3, #11
 80044dc:	8183      	strh	r3, [r0, #12]
 80044de:	2100      	movs	r1, #0
 80044e0:	2001      	movs	r0, #1
 80044e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80044e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80044e8:	2200      	movs	r2, #0
 80044ea:	611c      	str	r4, [r3, #16]
 80044ec:	615a      	str	r2, [r3, #20]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	20000038 	.word	0x20000038
 80044f4:	08008544 	.word	0x08008544
 80044f8:	0800855b 	.word	0x0800855b
 80044fc:	abcd330e 	.word	0xabcd330e
 8004500:	e66d1234 	.word	0xe66d1234
 8004504:	0005deec 	.word	0x0005deec

08004508 <rand>:
 8004508:	4b16      	ldr	r3, [pc, #88]	@ (8004564 <rand+0x5c>)
 800450a:	b510      	push	{r4, lr}
 800450c:	681c      	ldr	r4, [r3, #0]
 800450e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004510:	b9b3      	cbnz	r3, 8004540 <rand+0x38>
 8004512:	2018      	movs	r0, #24
 8004514:	f001 fd2a 	bl	8005f6c <malloc>
 8004518:	4602      	mov	r2, r0
 800451a:	6320      	str	r0, [r4, #48]	@ 0x30
 800451c:	b920      	cbnz	r0, 8004528 <rand+0x20>
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <rand+0x60>)
 8004520:	4812      	ldr	r0, [pc, #72]	@ (800456c <rand+0x64>)
 8004522:	2152      	movs	r1, #82	@ 0x52
 8004524:	f000 fe60 	bl	80051e8 <__assert_func>
 8004528:	4911      	ldr	r1, [pc, #68]	@ (8004570 <rand+0x68>)
 800452a:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <rand+0x6c>)
 800452c:	e9c0 1300 	strd	r1, r3, [r0]
 8004530:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <rand+0x70>)
 8004532:	6083      	str	r3, [r0, #8]
 8004534:	230b      	movs	r3, #11
 8004536:	8183      	strh	r3, [r0, #12]
 8004538:	2100      	movs	r1, #0
 800453a:	2001      	movs	r0, #1
 800453c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004540:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004542:	480e      	ldr	r0, [pc, #56]	@ (800457c <rand+0x74>)
 8004544:	690b      	ldr	r3, [r1, #16]
 8004546:	694c      	ldr	r4, [r1, #20]
 8004548:	4a0d      	ldr	r2, [pc, #52]	@ (8004580 <rand+0x78>)
 800454a:	4358      	muls	r0, r3
 800454c:	fb02 0004 	mla	r0, r2, r4, r0
 8004550:	fba3 3202 	umull	r3, r2, r3, r2
 8004554:	3301      	adds	r3, #1
 8004556:	eb40 0002 	adc.w	r0, r0, r2
 800455a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800455e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004562:	bd10      	pop	{r4, pc}
 8004564:	20000038 	.word	0x20000038
 8004568:	08008544 	.word	0x08008544
 800456c:	0800855b 	.word	0x0800855b
 8004570:	abcd330e 	.word	0xabcd330e
 8004574:	e66d1234 	.word	0xe66d1234
 8004578:	0005deec 	.word	0x0005deec
 800457c:	5851f42d 	.word	0x5851f42d
 8004580:	4c957f2d 	.word	0x4c957f2d

08004584 <__cvt>:
 8004584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004588:	ec57 6b10 	vmov	r6, r7, d0
 800458c:	2f00      	cmp	r7, #0
 800458e:	460c      	mov	r4, r1
 8004590:	4619      	mov	r1, r3
 8004592:	463b      	mov	r3, r7
 8004594:	bfbb      	ittet	lt
 8004596:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800459a:	461f      	movlt	r7, r3
 800459c:	2300      	movge	r3, #0
 800459e:	232d      	movlt	r3, #45	@ 0x2d
 80045a0:	700b      	strb	r3, [r1, #0]
 80045a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80045a8:	4691      	mov	r9, r2
 80045aa:	f023 0820 	bic.w	r8, r3, #32
 80045ae:	bfbc      	itt	lt
 80045b0:	4632      	movlt	r2, r6
 80045b2:	4616      	movlt	r6, r2
 80045b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045b8:	d005      	beq.n	80045c6 <__cvt+0x42>
 80045ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80045be:	d100      	bne.n	80045c2 <__cvt+0x3e>
 80045c0:	3401      	adds	r4, #1
 80045c2:	2102      	movs	r1, #2
 80045c4:	e000      	b.n	80045c8 <__cvt+0x44>
 80045c6:	2103      	movs	r1, #3
 80045c8:	ab03      	add	r3, sp, #12
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	ab02      	add	r3, sp, #8
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	ec47 6b10 	vmov	d0, r6, r7
 80045d4:	4653      	mov	r3, sl
 80045d6:	4622      	mov	r2, r4
 80045d8:	f000 feae 	bl	8005338 <_dtoa_r>
 80045dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045e0:	4605      	mov	r5, r0
 80045e2:	d119      	bne.n	8004618 <__cvt+0x94>
 80045e4:	f019 0f01 	tst.w	r9, #1
 80045e8:	d00e      	beq.n	8004608 <__cvt+0x84>
 80045ea:	eb00 0904 	add.w	r9, r0, r4
 80045ee:	2200      	movs	r2, #0
 80045f0:	2300      	movs	r3, #0
 80045f2:	4630      	mov	r0, r6
 80045f4:	4639      	mov	r1, r7
 80045f6:	f7fc fa77 	bl	8000ae8 <__aeabi_dcmpeq>
 80045fa:	b108      	cbz	r0, 8004600 <__cvt+0x7c>
 80045fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004600:	2230      	movs	r2, #48	@ 0x30
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	454b      	cmp	r3, r9
 8004606:	d31e      	bcc.n	8004646 <__cvt+0xc2>
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800460c:	1b5b      	subs	r3, r3, r5
 800460e:	4628      	mov	r0, r5
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	b004      	add	sp, #16
 8004614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004618:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800461c:	eb00 0904 	add.w	r9, r0, r4
 8004620:	d1e5      	bne.n	80045ee <__cvt+0x6a>
 8004622:	7803      	ldrb	r3, [r0, #0]
 8004624:	2b30      	cmp	r3, #48	@ 0x30
 8004626:	d10a      	bne.n	800463e <__cvt+0xba>
 8004628:	2200      	movs	r2, #0
 800462a:	2300      	movs	r3, #0
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	f7fc fa5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004634:	b918      	cbnz	r0, 800463e <__cvt+0xba>
 8004636:	f1c4 0401 	rsb	r4, r4, #1
 800463a:	f8ca 4000 	str.w	r4, [sl]
 800463e:	f8da 3000 	ldr.w	r3, [sl]
 8004642:	4499      	add	r9, r3
 8004644:	e7d3      	b.n	80045ee <__cvt+0x6a>
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	9103      	str	r1, [sp, #12]
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e7d9      	b.n	8004602 <__cvt+0x7e>

0800464e <__exponent>:
 800464e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004650:	2900      	cmp	r1, #0
 8004652:	bfba      	itte	lt
 8004654:	4249      	neglt	r1, r1
 8004656:	232d      	movlt	r3, #45	@ 0x2d
 8004658:	232b      	movge	r3, #43	@ 0x2b
 800465a:	2909      	cmp	r1, #9
 800465c:	7002      	strb	r2, [r0, #0]
 800465e:	7043      	strb	r3, [r0, #1]
 8004660:	dd29      	ble.n	80046b6 <__exponent+0x68>
 8004662:	f10d 0307 	add.w	r3, sp, #7
 8004666:	461d      	mov	r5, r3
 8004668:	270a      	movs	r7, #10
 800466a:	461a      	mov	r2, r3
 800466c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004670:	fb07 1416 	mls	r4, r7, r6, r1
 8004674:	3430      	adds	r4, #48	@ 0x30
 8004676:	f802 4c01 	strb.w	r4, [r2, #-1]
 800467a:	460c      	mov	r4, r1
 800467c:	2c63      	cmp	r4, #99	@ 0x63
 800467e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004682:	4631      	mov	r1, r6
 8004684:	dcf1      	bgt.n	800466a <__exponent+0x1c>
 8004686:	3130      	adds	r1, #48	@ 0x30
 8004688:	1e94      	subs	r4, r2, #2
 800468a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800468e:	1c41      	adds	r1, r0, #1
 8004690:	4623      	mov	r3, r4
 8004692:	42ab      	cmp	r3, r5
 8004694:	d30a      	bcc.n	80046ac <__exponent+0x5e>
 8004696:	f10d 0309 	add.w	r3, sp, #9
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	42ac      	cmp	r4, r5
 800469e:	bf88      	it	hi
 80046a0:	2300      	movhi	r3, #0
 80046a2:	3302      	adds	r3, #2
 80046a4:	4403      	add	r3, r0
 80046a6:	1a18      	subs	r0, r3, r0
 80046a8:	b003      	add	sp, #12
 80046aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80046b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80046b4:	e7ed      	b.n	8004692 <__exponent+0x44>
 80046b6:	2330      	movs	r3, #48	@ 0x30
 80046b8:	3130      	adds	r1, #48	@ 0x30
 80046ba:	7083      	strb	r3, [r0, #2]
 80046bc:	70c1      	strb	r1, [r0, #3]
 80046be:	1d03      	adds	r3, r0, #4
 80046c0:	e7f1      	b.n	80046a6 <__exponent+0x58>
	...

080046c4 <_printf_float>:
 80046c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	b08d      	sub	sp, #52	@ 0x34
 80046ca:	460c      	mov	r4, r1
 80046cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80046d0:	4616      	mov	r6, r2
 80046d2:	461f      	mov	r7, r3
 80046d4:	4605      	mov	r5, r0
 80046d6:	f000 fd01 	bl	80050dc <_localeconv_r>
 80046da:	6803      	ldr	r3, [r0, #0]
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fb fdd6 	bl	8000290 <strlen>
 80046e4:	2300      	movs	r3, #0
 80046e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80046e8:	f8d8 3000 	ldr.w	r3, [r8]
 80046ec:	9005      	str	r0, [sp, #20]
 80046ee:	3307      	adds	r3, #7
 80046f0:	f023 0307 	bic.w	r3, r3, #7
 80046f4:	f103 0208 	add.w	r2, r3, #8
 80046f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046fc:	f8d4 b000 	ldr.w	fp, [r4]
 8004700:	f8c8 2000 	str.w	r2, [r8]
 8004704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004708:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800470c:	9307      	str	r3, [sp, #28]
 800470e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004712:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800471a:	4b9c      	ldr	r3, [pc, #624]	@ (800498c <_printf_float+0x2c8>)
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	f7fc fa14 	bl	8000b4c <__aeabi_dcmpun>
 8004724:	bb70      	cbnz	r0, 8004784 <_printf_float+0xc0>
 8004726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800472a:	4b98      	ldr	r3, [pc, #608]	@ (800498c <_printf_float+0x2c8>)
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	f7fc f9ee 	bl	8000b10 <__aeabi_dcmple>
 8004734:	bb30      	cbnz	r0, 8004784 <_printf_float+0xc0>
 8004736:	2200      	movs	r2, #0
 8004738:	2300      	movs	r3, #0
 800473a:	4640      	mov	r0, r8
 800473c:	4649      	mov	r1, r9
 800473e:	f7fc f9dd 	bl	8000afc <__aeabi_dcmplt>
 8004742:	b110      	cbz	r0, 800474a <_printf_float+0x86>
 8004744:	232d      	movs	r3, #45	@ 0x2d
 8004746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800474a:	4a91      	ldr	r2, [pc, #580]	@ (8004990 <_printf_float+0x2cc>)
 800474c:	4b91      	ldr	r3, [pc, #580]	@ (8004994 <_printf_float+0x2d0>)
 800474e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004752:	bf8c      	ite	hi
 8004754:	4690      	movhi	r8, r2
 8004756:	4698      	movls	r8, r3
 8004758:	2303      	movs	r3, #3
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	f02b 0304 	bic.w	r3, fp, #4
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	f04f 0900 	mov.w	r9, #0
 8004766:	9700      	str	r7, [sp, #0]
 8004768:	4633      	mov	r3, r6
 800476a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800476c:	4621      	mov	r1, r4
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f9d2 	bl	8004b18 <_printf_common>
 8004774:	3001      	adds	r0, #1
 8004776:	f040 808d 	bne.w	8004894 <_printf_float+0x1d0>
 800477a:	f04f 30ff 	mov.w	r0, #4294967295
 800477e:	b00d      	add	sp, #52	@ 0x34
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	4640      	mov	r0, r8
 800478a:	4649      	mov	r1, r9
 800478c:	f7fc f9de 	bl	8000b4c <__aeabi_dcmpun>
 8004790:	b140      	cbz	r0, 80047a4 <_printf_float+0xe0>
 8004792:	464b      	mov	r3, r9
 8004794:	2b00      	cmp	r3, #0
 8004796:	bfbc      	itt	lt
 8004798:	232d      	movlt	r3, #45	@ 0x2d
 800479a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800479e:	4a7e      	ldr	r2, [pc, #504]	@ (8004998 <_printf_float+0x2d4>)
 80047a0:	4b7e      	ldr	r3, [pc, #504]	@ (800499c <_printf_float+0x2d8>)
 80047a2:	e7d4      	b.n	800474e <_printf_float+0x8a>
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80047aa:	9206      	str	r2, [sp, #24]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	d13b      	bne.n	8004828 <_printf_float+0x164>
 80047b0:	2306      	movs	r3, #6
 80047b2:	6063      	str	r3, [r4, #4]
 80047b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80047b8:	2300      	movs	r3, #0
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	9303      	str	r3, [sp, #12]
 80047be:	ab0a      	add	r3, sp, #40	@ 0x28
 80047c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80047c4:	ab09      	add	r3, sp, #36	@ 0x24
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	6861      	ldr	r1, [r4, #4]
 80047ca:	ec49 8b10 	vmov	d0, r8, r9
 80047ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80047d2:	4628      	mov	r0, r5
 80047d4:	f7ff fed6 	bl	8004584 <__cvt>
 80047d8:	9b06      	ldr	r3, [sp, #24]
 80047da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80047dc:	2b47      	cmp	r3, #71	@ 0x47
 80047de:	4680      	mov	r8, r0
 80047e0:	d129      	bne.n	8004836 <_printf_float+0x172>
 80047e2:	1cc8      	adds	r0, r1, #3
 80047e4:	db02      	blt.n	80047ec <_printf_float+0x128>
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	4299      	cmp	r1, r3
 80047ea:	dd41      	ble.n	8004870 <_printf_float+0x1ac>
 80047ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80047f0:	fa5f fa8a 	uxtb.w	sl, sl
 80047f4:	3901      	subs	r1, #1
 80047f6:	4652      	mov	r2, sl
 80047f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80047fe:	f7ff ff26 	bl	800464e <__exponent>
 8004802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004804:	1813      	adds	r3, r2, r0
 8004806:	2a01      	cmp	r2, #1
 8004808:	4681      	mov	r9, r0
 800480a:	6123      	str	r3, [r4, #16]
 800480c:	dc02      	bgt.n	8004814 <_printf_float+0x150>
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	07d2      	lsls	r2, r2, #31
 8004812:	d501      	bpl.n	8004818 <_printf_float+0x154>
 8004814:	3301      	adds	r3, #1
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0a2      	beq.n	8004766 <_printf_float+0xa2>
 8004820:	232d      	movs	r3, #45	@ 0x2d
 8004822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004826:	e79e      	b.n	8004766 <_printf_float+0xa2>
 8004828:	9a06      	ldr	r2, [sp, #24]
 800482a:	2a47      	cmp	r2, #71	@ 0x47
 800482c:	d1c2      	bne.n	80047b4 <_printf_float+0xf0>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1c0      	bne.n	80047b4 <_printf_float+0xf0>
 8004832:	2301      	movs	r3, #1
 8004834:	e7bd      	b.n	80047b2 <_printf_float+0xee>
 8004836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800483a:	d9db      	bls.n	80047f4 <_printf_float+0x130>
 800483c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004840:	d118      	bne.n	8004874 <_printf_float+0x1b0>
 8004842:	2900      	cmp	r1, #0
 8004844:	6863      	ldr	r3, [r4, #4]
 8004846:	dd0b      	ble.n	8004860 <_printf_float+0x19c>
 8004848:	6121      	str	r1, [r4, #16]
 800484a:	b913      	cbnz	r3, 8004852 <_printf_float+0x18e>
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	07d0      	lsls	r0, r2, #31
 8004850:	d502      	bpl.n	8004858 <_printf_float+0x194>
 8004852:	3301      	adds	r3, #1
 8004854:	440b      	add	r3, r1
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	65a1      	str	r1, [r4, #88]	@ 0x58
 800485a:	f04f 0900 	mov.w	r9, #0
 800485e:	e7db      	b.n	8004818 <_printf_float+0x154>
 8004860:	b913      	cbnz	r3, 8004868 <_printf_float+0x1a4>
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	07d2      	lsls	r2, r2, #31
 8004866:	d501      	bpl.n	800486c <_printf_float+0x1a8>
 8004868:	3302      	adds	r3, #2
 800486a:	e7f4      	b.n	8004856 <_printf_float+0x192>
 800486c:	2301      	movs	r3, #1
 800486e:	e7f2      	b.n	8004856 <_printf_float+0x192>
 8004870:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004876:	4299      	cmp	r1, r3
 8004878:	db05      	blt.n	8004886 <_printf_float+0x1c2>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	6121      	str	r1, [r4, #16]
 800487e:	07d8      	lsls	r0, r3, #31
 8004880:	d5ea      	bpl.n	8004858 <_printf_float+0x194>
 8004882:	1c4b      	adds	r3, r1, #1
 8004884:	e7e7      	b.n	8004856 <_printf_float+0x192>
 8004886:	2900      	cmp	r1, #0
 8004888:	bfd4      	ite	le
 800488a:	f1c1 0202 	rsble	r2, r1, #2
 800488e:	2201      	movgt	r2, #1
 8004890:	4413      	add	r3, r2
 8004892:	e7e0      	b.n	8004856 <_printf_float+0x192>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	055a      	lsls	r2, r3, #21
 8004898:	d407      	bmi.n	80048aa <_printf_float+0x1e6>
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	4642      	mov	r2, r8
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	d12b      	bne.n	8004900 <_printf_float+0x23c>
 80048a8:	e767      	b.n	800477a <_printf_float+0xb6>
 80048aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048ae:	f240 80dd 	bls.w	8004a6c <_printf_float+0x3a8>
 80048b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048b6:	2200      	movs	r2, #0
 80048b8:	2300      	movs	r3, #0
 80048ba:	f7fc f915 	bl	8000ae8 <__aeabi_dcmpeq>
 80048be:	2800      	cmp	r0, #0
 80048c0:	d033      	beq.n	800492a <_printf_float+0x266>
 80048c2:	4a37      	ldr	r2, [pc, #220]	@ (80049a0 <_printf_float+0x2dc>)
 80048c4:	2301      	movs	r3, #1
 80048c6:	4631      	mov	r1, r6
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b8      	blx	r7
 80048cc:	3001      	adds	r0, #1
 80048ce:	f43f af54 	beq.w	800477a <_printf_float+0xb6>
 80048d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80048d6:	4543      	cmp	r3, r8
 80048d8:	db02      	blt.n	80048e0 <_printf_float+0x21c>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	07d8      	lsls	r0, r3, #31
 80048de:	d50f      	bpl.n	8004900 <_printf_float+0x23c>
 80048e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048e4:	4631      	mov	r1, r6
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	f43f af45 	beq.w	800477a <_printf_float+0xb6>
 80048f0:	f04f 0900 	mov.w	r9, #0
 80048f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80048f8:	f104 0a1a 	add.w	sl, r4, #26
 80048fc:	45c8      	cmp	r8, r9
 80048fe:	dc09      	bgt.n	8004914 <_printf_float+0x250>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	079b      	lsls	r3, r3, #30
 8004904:	f100 8103 	bmi.w	8004b0e <_printf_float+0x44a>
 8004908:	68e0      	ldr	r0, [r4, #12]
 800490a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800490c:	4298      	cmp	r0, r3
 800490e:	bfb8      	it	lt
 8004910:	4618      	movlt	r0, r3
 8004912:	e734      	b.n	800477e <_printf_float+0xba>
 8004914:	2301      	movs	r3, #1
 8004916:	4652      	mov	r2, sl
 8004918:	4631      	mov	r1, r6
 800491a:	4628      	mov	r0, r5
 800491c:	47b8      	blx	r7
 800491e:	3001      	adds	r0, #1
 8004920:	f43f af2b 	beq.w	800477a <_printf_float+0xb6>
 8004924:	f109 0901 	add.w	r9, r9, #1
 8004928:	e7e8      	b.n	80048fc <_printf_float+0x238>
 800492a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	dc39      	bgt.n	80049a4 <_printf_float+0x2e0>
 8004930:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <_printf_float+0x2dc>)
 8004932:	2301      	movs	r3, #1
 8004934:	4631      	mov	r1, r6
 8004936:	4628      	mov	r0, r5
 8004938:	47b8      	blx	r7
 800493a:	3001      	adds	r0, #1
 800493c:	f43f af1d 	beq.w	800477a <_printf_float+0xb6>
 8004940:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004944:	ea59 0303 	orrs.w	r3, r9, r3
 8004948:	d102      	bne.n	8004950 <_printf_float+0x28c>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	07d9      	lsls	r1, r3, #31
 800494e:	d5d7      	bpl.n	8004900 <_printf_float+0x23c>
 8004950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004954:	4631      	mov	r1, r6
 8004956:	4628      	mov	r0, r5
 8004958:	47b8      	blx	r7
 800495a:	3001      	adds	r0, #1
 800495c:	f43f af0d 	beq.w	800477a <_printf_float+0xb6>
 8004960:	f04f 0a00 	mov.w	sl, #0
 8004964:	f104 0b1a 	add.w	fp, r4, #26
 8004968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800496a:	425b      	negs	r3, r3
 800496c:	4553      	cmp	r3, sl
 800496e:	dc01      	bgt.n	8004974 <_printf_float+0x2b0>
 8004970:	464b      	mov	r3, r9
 8004972:	e793      	b.n	800489c <_printf_float+0x1d8>
 8004974:	2301      	movs	r3, #1
 8004976:	465a      	mov	r2, fp
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	f43f aefb 	beq.w	800477a <_printf_float+0xb6>
 8004984:	f10a 0a01 	add.w	sl, sl, #1
 8004988:	e7ee      	b.n	8004968 <_printf_float+0x2a4>
 800498a:	bf00      	nop
 800498c:	7fefffff 	.word	0x7fefffff
 8004990:	080085b7 	.word	0x080085b7
 8004994:	080085b3 	.word	0x080085b3
 8004998:	080085bf 	.word	0x080085bf
 800499c:	080085bb 	.word	0x080085bb
 80049a0:	080085c3 	.word	0x080085c3
 80049a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80049aa:	4553      	cmp	r3, sl
 80049ac:	bfa8      	it	ge
 80049ae:	4653      	movge	r3, sl
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	4699      	mov	r9, r3
 80049b4:	dc36      	bgt.n	8004a24 <_printf_float+0x360>
 80049b6:	f04f 0b00 	mov.w	fp, #0
 80049ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049be:	f104 021a 	add.w	r2, r4, #26
 80049c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049c4:	9306      	str	r3, [sp, #24]
 80049c6:	eba3 0309 	sub.w	r3, r3, r9
 80049ca:	455b      	cmp	r3, fp
 80049cc:	dc31      	bgt.n	8004a32 <_printf_float+0x36e>
 80049ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d0:	459a      	cmp	sl, r3
 80049d2:	dc3a      	bgt.n	8004a4a <_printf_float+0x386>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	07da      	lsls	r2, r3, #31
 80049d8:	d437      	bmi.n	8004a4a <_printf_float+0x386>
 80049da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049dc:	ebaa 0903 	sub.w	r9, sl, r3
 80049e0:	9b06      	ldr	r3, [sp, #24]
 80049e2:	ebaa 0303 	sub.w	r3, sl, r3
 80049e6:	4599      	cmp	r9, r3
 80049e8:	bfa8      	it	ge
 80049ea:	4699      	movge	r9, r3
 80049ec:	f1b9 0f00 	cmp.w	r9, #0
 80049f0:	dc33      	bgt.n	8004a5a <_printf_float+0x396>
 80049f2:	f04f 0800 	mov.w	r8, #0
 80049f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049fa:	f104 0b1a 	add.w	fp, r4, #26
 80049fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a00:	ebaa 0303 	sub.w	r3, sl, r3
 8004a04:	eba3 0309 	sub.w	r3, r3, r9
 8004a08:	4543      	cmp	r3, r8
 8004a0a:	f77f af79 	ble.w	8004900 <_printf_float+0x23c>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	465a      	mov	r2, fp
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f aeae 	beq.w	800477a <_printf_float+0xb6>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	e7ec      	b.n	80049fe <_printf_float+0x33a>
 8004a24:	4642      	mov	r2, r8
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d1c2      	bne.n	80049b6 <_printf_float+0x2f2>
 8004a30:	e6a3      	b.n	800477a <_printf_float+0xb6>
 8004a32:	2301      	movs	r3, #1
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	9206      	str	r2, [sp, #24]
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f ae9c 	beq.w	800477a <_printf_float+0xb6>
 8004a42:	9a06      	ldr	r2, [sp, #24]
 8004a44:	f10b 0b01 	add.w	fp, fp, #1
 8004a48:	e7bb      	b.n	80049c2 <_printf_float+0x2fe>
 8004a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a4e:	4631      	mov	r1, r6
 8004a50:	4628      	mov	r0, r5
 8004a52:	47b8      	blx	r7
 8004a54:	3001      	adds	r0, #1
 8004a56:	d1c0      	bne.n	80049da <_printf_float+0x316>
 8004a58:	e68f      	b.n	800477a <_printf_float+0xb6>
 8004a5a:	9a06      	ldr	r2, [sp, #24]
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	4442      	add	r2, r8
 8004a60:	4631      	mov	r1, r6
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	d1c3      	bne.n	80049f2 <_printf_float+0x32e>
 8004a6a:	e686      	b.n	800477a <_printf_float+0xb6>
 8004a6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a70:	f1ba 0f01 	cmp.w	sl, #1
 8004a74:	dc01      	bgt.n	8004a7a <_printf_float+0x3b6>
 8004a76:	07db      	lsls	r3, r3, #31
 8004a78:	d536      	bpl.n	8004ae8 <_printf_float+0x424>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	f43f ae78 	beq.w	800477a <_printf_float+0xb6>
 8004a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f ae70 	beq.w	800477a <_printf_float+0xb6>
 8004a9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aa6:	f7fc f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 8004aaa:	b9c0      	cbnz	r0, 8004ade <_printf_float+0x41a>
 8004aac:	4653      	mov	r3, sl
 8004aae:	f108 0201 	add.w	r2, r8, #1
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b8      	blx	r7
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d10c      	bne.n	8004ad6 <_printf_float+0x412>
 8004abc:	e65d      	b.n	800477a <_printf_float+0xb6>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	465a      	mov	r2, fp
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f43f ae56 	beq.w	800477a <_printf_float+0xb6>
 8004ace:	f108 0801 	add.w	r8, r8, #1
 8004ad2:	45d0      	cmp	r8, sl
 8004ad4:	dbf3      	blt.n	8004abe <_printf_float+0x3fa>
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004adc:	e6df      	b.n	800489e <_printf_float+0x1da>
 8004ade:	f04f 0800 	mov.w	r8, #0
 8004ae2:	f104 0b1a 	add.w	fp, r4, #26
 8004ae6:	e7f4      	b.n	8004ad2 <_printf_float+0x40e>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4642      	mov	r2, r8
 8004aec:	e7e1      	b.n	8004ab2 <_printf_float+0x3ee>
 8004aee:	2301      	movs	r3, #1
 8004af0:	464a      	mov	r2, r9
 8004af2:	4631      	mov	r1, r6
 8004af4:	4628      	mov	r0, r5
 8004af6:	47b8      	blx	r7
 8004af8:	3001      	adds	r0, #1
 8004afa:	f43f ae3e 	beq.w	800477a <_printf_float+0xb6>
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b06:	1a5b      	subs	r3, r3, r1
 8004b08:	4543      	cmp	r3, r8
 8004b0a:	dcf0      	bgt.n	8004aee <_printf_float+0x42a>
 8004b0c:	e6fc      	b.n	8004908 <_printf_float+0x244>
 8004b0e:	f04f 0800 	mov.w	r8, #0
 8004b12:	f104 0919 	add.w	r9, r4, #25
 8004b16:	e7f4      	b.n	8004b02 <_printf_float+0x43e>

08004b18 <_printf_common>:
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	4698      	mov	r8, r3
 8004b20:	688a      	ldr	r2, [r1, #8]
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bfb8      	it	lt
 8004b2c:	4613      	movlt	r3, r2
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b34:	4607      	mov	r7, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	b10a      	cbz	r2, 8004b3e <_printf_common+0x26>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	0699      	lsls	r1, r3, #26
 8004b42:	bf42      	ittt	mi
 8004b44:	6833      	ldrmi	r3, [r6, #0]
 8004b46:	3302      	addmi	r3, #2
 8004b48:	6033      	strmi	r3, [r6, #0]
 8004b4a:	6825      	ldr	r5, [r4, #0]
 8004b4c:	f015 0506 	ands.w	r5, r5, #6
 8004b50:	d106      	bne.n	8004b60 <_printf_common+0x48>
 8004b52:	f104 0a19 	add.w	sl, r4, #25
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	6832      	ldr	r2, [r6, #0]
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dc26      	bgt.n	8004bae <_printf_common+0x96>
 8004b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	3b00      	subs	r3, #0
 8004b68:	bf18      	it	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	0692      	lsls	r2, r2, #26
 8004b6e:	d42b      	bmi.n	8004bc8 <_printf_common+0xb0>
 8004b70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b74:	4641      	mov	r1, r8
 8004b76:	4638      	mov	r0, r7
 8004b78:	47c8      	blx	r9
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d01e      	beq.n	8004bbc <_printf_common+0xa4>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	6922      	ldr	r2, [r4, #16]
 8004b82:	f003 0306 	and.w	r3, r3, #6
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf02      	ittt	eq
 8004b8a:	68e5      	ldreq	r5, [r4, #12]
 8004b8c:	6833      	ldreq	r3, [r6, #0]
 8004b8e:	1aed      	subeq	r5, r5, r3
 8004b90:	68a3      	ldr	r3, [r4, #8]
 8004b92:	bf0c      	ite	eq
 8004b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b98:	2500      	movne	r5, #0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bfc4      	itt	gt
 8004b9e:	1a9b      	subgt	r3, r3, r2
 8004ba0:	18ed      	addgt	r5, r5, r3
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	341a      	adds	r4, #26
 8004ba6:	42b5      	cmp	r5, r6
 8004ba8:	d11a      	bne.n	8004be0 <_printf_common+0xc8>
 8004baa:	2000      	movs	r0, #0
 8004bac:	e008      	b.n	8004bc0 <_printf_common+0xa8>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4652      	mov	r2, sl
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	47c8      	blx	r9
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d103      	bne.n	8004bc4 <_printf_common+0xac>
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	e7c6      	b.n	8004b56 <_printf_common+0x3e>
 8004bc8:	18e1      	adds	r1, r4, r3
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	2030      	movs	r0, #48	@ 0x30
 8004bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bd2:	4422      	add	r2, r4
 8004bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bdc:	3302      	adds	r3, #2
 8004bde:	e7c7      	b.n	8004b70 <_printf_common+0x58>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4622      	mov	r2, r4
 8004be4:	4641      	mov	r1, r8
 8004be6:	4638      	mov	r0, r7
 8004be8:	47c8      	blx	r9
 8004bea:	3001      	adds	r0, #1
 8004bec:	d0e6      	beq.n	8004bbc <_printf_common+0xa4>
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7d9      	b.n	8004ba6 <_printf_common+0x8e>
	...

08004bf4 <_printf_i>:
 8004bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	7e0f      	ldrb	r7, [r1, #24]
 8004bfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bfc:	2f78      	cmp	r7, #120	@ 0x78
 8004bfe:	4691      	mov	r9, r2
 8004c00:	4680      	mov	r8, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	469a      	mov	sl, r3
 8004c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c0a:	d807      	bhi.n	8004c1c <_printf_i+0x28>
 8004c0c:	2f62      	cmp	r7, #98	@ 0x62
 8004c0e:	d80a      	bhi.n	8004c26 <_printf_i+0x32>
 8004c10:	2f00      	cmp	r7, #0
 8004c12:	f000 80d1 	beq.w	8004db8 <_printf_i+0x1c4>
 8004c16:	2f58      	cmp	r7, #88	@ 0x58
 8004c18:	f000 80b8 	beq.w	8004d8c <_printf_i+0x198>
 8004c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c24:	e03a      	b.n	8004c9c <_printf_i+0xa8>
 8004c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c2a:	2b15      	cmp	r3, #21
 8004c2c:	d8f6      	bhi.n	8004c1c <_printf_i+0x28>
 8004c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c34 <_printf_i+0x40>)
 8004c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004ca1 	.word	0x08004ca1
 8004c3c:	08004c1d 	.word	0x08004c1d
 8004c40:	08004c1d 	.word	0x08004c1d
 8004c44:	08004c1d 	.word	0x08004c1d
 8004c48:	08004c1d 	.word	0x08004c1d
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004c1d 	.word	0x08004c1d
 8004c54:	08004c1d 	.word	0x08004c1d
 8004c58:	08004c1d 	.word	0x08004c1d
 8004c5c:	08004c1d 	.word	0x08004c1d
 8004c60:	08004d9f 	.word	0x08004d9f
 8004c64:	08004ccb 	.word	0x08004ccb
 8004c68:	08004d59 	.word	0x08004d59
 8004c6c:	08004c1d 	.word	0x08004c1d
 8004c70:	08004c1d 	.word	0x08004c1d
 8004c74:	08004dc1 	.word	0x08004dc1
 8004c78:	08004c1d 	.word	0x08004c1d
 8004c7c:	08004ccb 	.word	0x08004ccb
 8004c80:	08004c1d 	.word	0x08004c1d
 8004c84:	08004c1d 	.word	0x08004c1d
 8004c88:	08004d61 	.word	0x08004d61
 8004c8c:	6833      	ldr	r3, [r6, #0]
 8004c8e:	1d1a      	adds	r2, r3, #4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6032      	str	r2, [r6, #0]
 8004c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e09c      	b.n	8004dda <_printf_i+0x1e6>
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	6820      	ldr	r0, [r4, #0]
 8004ca4:	1d19      	adds	r1, r3, #4
 8004ca6:	6031      	str	r1, [r6, #0]
 8004ca8:	0606      	lsls	r6, r0, #24
 8004caa:	d501      	bpl.n	8004cb0 <_printf_i+0xbc>
 8004cac:	681d      	ldr	r5, [r3, #0]
 8004cae:	e003      	b.n	8004cb8 <_printf_i+0xc4>
 8004cb0:	0645      	lsls	r5, r0, #25
 8004cb2:	d5fb      	bpl.n	8004cac <_printf_i+0xb8>
 8004cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	da03      	bge.n	8004cc4 <_printf_i+0xd0>
 8004cbc:	232d      	movs	r3, #45	@ 0x2d
 8004cbe:	426d      	negs	r5, r5
 8004cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cc4:	4858      	ldr	r0, [pc, #352]	@ (8004e28 <_printf_i+0x234>)
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	e011      	b.n	8004cee <_printf_i+0xfa>
 8004cca:	6821      	ldr	r1, [r4, #0]
 8004ccc:	6833      	ldr	r3, [r6, #0]
 8004cce:	0608      	lsls	r0, r1, #24
 8004cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cd4:	d402      	bmi.n	8004cdc <_printf_i+0xe8>
 8004cd6:	0649      	lsls	r1, r1, #25
 8004cd8:	bf48      	it	mi
 8004cda:	b2ad      	uxthmi	r5, r5
 8004cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cde:	4852      	ldr	r0, [pc, #328]	@ (8004e28 <_printf_i+0x234>)
 8004ce0:	6033      	str	r3, [r6, #0]
 8004ce2:	bf14      	ite	ne
 8004ce4:	230a      	movne	r3, #10
 8004ce6:	2308      	moveq	r3, #8
 8004ce8:	2100      	movs	r1, #0
 8004cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cee:	6866      	ldr	r6, [r4, #4]
 8004cf0:	60a6      	str	r6, [r4, #8]
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	db05      	blt.n	8004d02 <_printf_i+0x10e>
 8004cf6:	6821      	ldr	r1, [r4, #0]
 8004cf8:	432e      	orrs	r6, r5
 8004cfa:	f021 0104 	bic.w	r1, r1, #4
 8004cfe:	6021      	str	r1, [r4, #0]
 8004d00:	d04b      	beq.n	8004d9a <_printf_i+0x1a6>
 8004d02:	4616      	mov	r6, r2
 8004d04:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d08:	fb03 5711 	mls	r7, r3, r1, r5
 8004d0c:	5dc7      	ldrb	r7, [r0, r7]
 8004d0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d12:	462f      	mov	r7, r5
 8004d14:	42bb      	cmp	r3, r7
 8004d16:	460d      	mov	r5, r1
 8004d18:	d9f4      	bls.n	8004d04 <_printf_i+0x110>
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d10b      	bne.n	8004d36 <_printf_i+0x142>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	07df      	lsls	r7, r3, #31
 8004d22:	d508      	bpl.n	8004d36 <_printf_i+0x142>
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	6861      	ldr	r1, [r4, #4]
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	bfde      	ittt	le
 8004d2c:	2330      	movle	r3, #48	@ 0x30
 8004d2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d36:	1b92      	subs	r2, r2, r6
 8004d38:	6122      	str	r2, [r4, #16]
 8004d3a:	f8cd a000 	str.w	sl, [sp]
 8004d3e:	464b      	mov	r3, r9
 8004d40:	aa03      	add	r2, sp, #12
 8004d42:	4621      	mov	r1, r4
 8004d44:	4640      	mov	r0, r8
 8004d46:	f7ff fee7 	bl	8004b18 <_printf_common>
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d14a      	bne.n	8004de4 <_printf_i+0x1f0>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	b004      	add	sp, #16
 8004d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	f043 0320 	orr.w	r3, r3, #32
 8004d5e:	6023      	str	r3, [r4, #0]
 8004d60:	4832      	ldr	r0, [pc, #200]	@ (8004e2c <_printf_i+0x238>)
 8004d62:	2778      	movs	r7, #120	@ 0x78
 8004d64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	6831      	ldr	r1, [r6, #0]
 8004d6c:	061f      	lsls	r7, r3, #24
 8004d6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d72:	d402      	bmi.n	8004d7a <_printf_i+0x186>
 8004d74:	065f      	lsls	r7, r3, #25
 8004d76:	bf48      	it	mi
 8004d78:	b2ad      	uxthmi	r5, r5
 8004d7a:	6031      	str	r1, [r6, #0]
 8004d7c:	07d9      	lsls	r1, r3, #31
 8004d7e:	bf44      	itt	mi
 8004d80:	f043 0320 	orrmi.w	r3, r3, #32
 8004d84:	6023      	strmi	r3, [r4, #0]
 8004d86:	b11d      	cbz	r5, 8004d90 <_printf_i+0x19c>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	e7ad      	b.n	8004ce8 <_printf_i+0xf4>
 8004d8c:	4826      	ldr	r0, [pc, #152]	@ (8004e28 <_printf_i+0x234>)
 8004d8e:	e7e9      	b.n	8004d64 <_printf_i+0x170>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	f023 0320 	bic.w	r3, r3, #32
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	e7f6      	b.n	8004d88 <_printf_i+0x194>
 8004d9a:	4616      	mov	r6, r2
 8004d9c:	e7bd      	b.n	8004d1a <_printf_i+0x126>
 8004d9e:	6833      	ldr	r3, [r6, #0]
 8004da0:	6825      	ldr	r5, [r4, #0]
 8004da2:	6961      	ldr	r1, [r4, #20]
 8004da4:	1d18      	adds	r0, r3, #4
 8004da6:	6030      	str	r0, [r6, #0]
 8004da8:	062e      	lsls	r6, r5, #24
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	d501      	bpl.n	8004db2 <_printf_i+0x1be>
 8004dae:	6019      	str	r1, [r3, #0]
 8004db0:	e002      	b.n	8004db8 <_printf_i+0x1c4>
 8004db2:	0668      	lsls	r0, r5, #25
 8004db4:	d5fb      	bpl.n	8004dae <_printf_i+0x1ba>
 8004db6:	8019      	strh	r1, [r3, #0]
 8004db8:	2300      	movs	r3, #0
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	e7bc      	b.n	8004d3a <_printf_i+0x146>
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	6032      	str	r2, [r6, #0]
 8004dc6:	681e      	ldr	r6, [r3, #0]
 8004dc8:	6862      	ldr	r2, [r4, #4]
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7fb fa0f 	bl	80001f0 <memchr>
 8004dd2:	b108      	cbz	r0, 8004dd8 <_printf_i+0x1e4>
 8004dd4:	1b80      	subs	r0, r0, r6
 8004dd6:	6060      	str	r0, [r4, #4]
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de2:	e7aa      	b.n	8004d3a <_printf_i+0x146>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	4632      	mov	r2, r6
 8004de8:	4649      	mov	r1, r9
 8004dea:	4640      	mov	r0, r8
 8004dec:	47d0      	blx	sl
 8004dee:	3001      	adds	r0, #1
 8004df0:	d0ad      	beq.n	8004d4e <_printf_i+0x15a>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	079b      	lsls	r3, r3, #30
 8004df6:	d413      	bmi.n	8004e20 <_printf_i+0x22c>
 8004df8:	68e0      	ldr	r0, [r4, #12]
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	4298      	cmp	r0, r3
 8004dfe:	bfb8      	it	lt
 8004e00:	4618      	movlt	r0, r3
 8004e02:	e7a6      	b.n	8004d52 <_printf_i+0x15e>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4632      	mov	r2, r6
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	47d0      	blx	sl
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d09d      	beq.n	8004d4e <_printf_i+0x15a>
 8004e12:	3501      	adds	r5, #1
 8004e14:	68e3      	ldr	r3, [r4, #12]
 8004e16:	9903      	ldr	r1, [sp, #12]
 8004e18:	1a5b      	subs	r3, r3, r1
 8004e1a:	42ab      	cmp	r3, r5
 8004e1c:	dcf2      	bgt.n	8004e04 <_printf_i+0x210>
 8004e1e:	e7eb      	b.n	8004df8 <_printf_i+0x204>
 8004e20:	2500      	movs	r5, #0
 8004e22:	f104 0619 	add.w	r6, r4, #25
 8004e26:	e7f5      	b.n	8004e14 <_printf_i+0x220>
 8004e28:	080085c5 	.word	0x080085c5
 8004e2c:	080085d6 	.word	0x080085d6

08004e30 <std>:
 8004e30:	2300      	movs	r3, #0
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	e9c0 3300 	strd	r3, r3, [r0]
 8004e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e3e:	6083      	str	r3, [r0, #8]
 8004e40:	8181      	strh	r1, [r0, #12]
 8004e42:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e44:	81c2      	strh	r2, [r0, #14]
 8004e46:	6183      	str	r3, [r0, #24]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	305c      	adds	r0, #92	@ 0x5c
 8004e4e:	f000 f93c 	bl	80050ca <memset>
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <std+0x58>)
 8004e54:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <std+0x5c>)
 8004e58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <std+0x60>)
 8004e5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <std+0x64>)
 8004e60:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <std+0x68>)
 8004e64:	6224      	str	r4, [r4, #32]
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d006      	beq.n	8004e78 <std+0x48>
 8004e6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e6e:	4294      	cmp	r4, r2
 8004e70:	d002      	beq.n	8004e78 <std+0x48>
 8004e72:	33d0      	adds	r3, #208	@ 0xd0
 8004e74:	429c      	cmp	r4, r3
 8004e76:	d105      	bne.n	8004e84 <std+0x54>
 8004e78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e80:	f000 b9a0 	b.w	80051c4 <__retarget_lock_init_recursive>
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	bf00      	nop
 8004e88:	08005045 	.word	0x08005045
 8004e8c:	08005067 	.word	0x08005067
 8004e90:	0800509f 	.word	0x0800509f
 8004e94:	080050c3 	.word	0x080050c3
 8004e98:	20000260 	.word	0x20000260

08004e9c <stdio_exit_handler>:
 8004e9c:	4a02      	ldr	r2, [pc, #8]	@ (8004ea8 <stdio_exit_handler+0xc>)
 8004e9e:	4903      	ldr	r1, [pc, #12]	@ (8004eac <stdio_exit_handler+0x10>)
 8004ea0:	4803      	ldr	r0, [pc, #12]	@ (8004eb0 <stdio_exit_handler+0x14>)
 8004ea2:	f000 b869 	b.w	8004f78 <_fwalk_sglue>
 8004ea6:	bf00      	nop
 8004ea8:	2000002c 	.word	0x2000002c
 8004eac:	08006e09 	.word	0x08006e09
 8004eb0:	2000003c 	.word	0x2000003c

08004eb4 <cleanup_stdio>:
 8004eb4:	6841      	ldr	r1, [r0, #4]
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <cleanup_stdio+0x34>)
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	d001      	beq.n	8004ec4 <cleanup_stdio+0x10>
 8004ec0:	f001 ffa2 	bl	8006e08 <_fflush_r>
 8004ec4:	68a1      	ldr	r1, [r4, #8]
 8004ec6:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <cleanup_stdio+0x38>)
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	d002      	beq.n	8004ed2 <cleanup_stdio+0x1e>
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f001 ff9b 	bl	8006e08 <_fflush_r>
 8004ed2:	68e1      	ldr	r1, [r4, #12]
 8004ed4:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <cleanup_stdio+0x3c>)
 8004ed6:	4299      	cmp	r1, r3
 8004ed8:	d004      	beq.n	8004ee4 <cleanup_stdio+0x30>
 8004eda:	4620      	mov	r0, r4
 8004edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee0:	f001 bf92 	b.w	8006e08 <_fflush_r>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000260 	.word	0x20000260
 8004eec:	200002c8 	.word	0x200002c8
 8004ef0:	20000330 	.word	0x20000330

08004ef4 <global_stdio_init.part.0>:
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <global_stdio_init.part.0+0x30>)
 8004ef8:	4c0b      	ldr	r4, [pc, #44]	@ (8004f28 <global_stdio_init.part.0+0x34>)
 8004efa:	4a0c      	ldr	r2, [pc, #48]	@ (8004f2c <global_stdio_init.part.0+0x38>)
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	4620      	mov	r0, r4
 8004f00:	2200      	movs	r2, #0
 8004f02:	2104      	movs	r1, #4
 8004f04:	f7ff ff94 	bl	8004e30 <std>
 8004f08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2109      	movs	r1, #9
 8004f10:	f7ff ff8e 	bl	8004e30 <std>
 8004f14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f18:	2202      	movs	r2, #2
 8004f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1e:	2112      	movs	r1, #18
 8004f20:	f7ff bf86 	b.w	8004e30 <std>
 8004f24:	20000398 	.word	0x20000398
 8004f28:	20000260 	.word	0x20000260
 8004f2c:	08004e9d 	.word	0x08004e9d

08004f30 <__sfp_lock_acquire>:
 8004f30:	4801      	ldr	r0, [pc, #4]	@ (8004f38 <__sfp_lock_acquire+0x8>)
 8004f32:	f000 b948 	b.w	80051c6 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	200003a1 	.word	0x200003a1

08004f3c <__sfp_lock_release>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	@ (8004f44 <__sfp_lock_release+0x8>)
 8004f3e:	f000 b943 	b.w	80051c8 <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	200003a1 	.word	0x200003a1

08004f48 <__sinit>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	f7ff fff0 	bl	8004f30 <__sfp_lock_acquire>
 8004f50:	6a23      	ldr	r3, [r4, #32]
 8004f52:	b11b      	cbz	r3, 8004f5c <__sinit+0x14>
 8004f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f58:	f7ff bff0 	b.w	8004f3c <__sfp_lock_release>
 8004f5c:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <__sinit+0x28>)
 8004f5e:	6223      	str	r3, [r4, #32]
 8004f60:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <__sinit+0x2c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f5      	bne.n	8004f54 <__sinit+0xc>
 8004f68:	f7ff ffc4 	bl	8004ef4 <global_stdio_init.part.0>
 8004f6c:	e7f2      	b.n	8004f54 <__sinit+0xc>
 8004f6e:	bf00      	nop
 8004f70:	08004eb5 	.word	0x08004eb5
 8004f74:	20000398 	.word	0x20000398

08004f78 <_fwalk_sglue>:
 8004f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	4688      	mov	r8, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	2600      	movs	r6, #0
 8004f84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f88:	f1b9 0901 	subs.w	r9, r9, #1
 8004f8c:	d505      	bpl.n	8004f9a <_fwalk_sglue+0x22>
 8004f8e:	6824      	ldr	r4, [r4, #0]
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	d1f7      	bne.n	8004f84 <_fwalk_sglue+0xc>
 8004f94:	4630      	mov	r0, r6
 8004f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9a:	89ab      	ldrh	r3, [r5, #12]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d907      	bls.n	8004fb0 <_fwalk_sglue+0x38>
 8004fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	d003      	beq.n	8004fb0 <_fwalk_sglue+0x38>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c0      	blx	r8
 8004fae:	4306      	orrs	r6, r0
 8004fb0:	3568      	adds	r5, #104	@ 0x68
 8004fb2:	e7e9      	b.n	8004f88 <_fwalk_sglue+0x10>

08004fb4 <iprintf>:
 8004fb4:	b40f      	push	{r0, r1, r2, r3}
 8004fb6:	b507      	push	{r0, r1, r2, lr}
 8004fb8:	4906      	ldr	r1, [pc, #24]	@ (8004fd4 <iprintf+0x20>)
 8004fba:	ab04      	add	r3, sp, #16
 8004fbc:	6808      	ldr	r0, [r1, #0]
 8004fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc2:	6881      	ldr	r1, [r0, #8]
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	f001 fd83 	bl	8006ad0 <_vfiprintf_r>
 8004fca:	b003      	add	sp, #12
 8004fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fd0:	b004      	add	sp, #16
 8004fd2:	4770      	bx	lr
 8004fd4:	20000038 	.word	0x20000038

08004fd8 <sniprintf>:
 8004fd8:	b40c      	push	{r2, r3}
 8004fda:	b530      	push	{r4, r5, lr}
 8004fdc:	4b18      	ldr	r3, [pc, #96]	@ (8005040 <sniprintf+0x68>)
 8004fde:	1e0c      	subs	r4, r1, #0
 8004fe0:	681d      	ldr	r5, [r3, #0]
 8004fe2:	b09d      	sub	sp, #116	@ 0x74
 8004fe4:	da08      	bge.n	8004ff8 <sniprintf+0x20>
 8004fe6:	238b      	movs	r3, #139	@ 0x8b
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295
 8004fee:	b01d      	add	sp, #116	@ 0x74
 8004ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff4:	b002      	add	sp, #8
 8004ff6:	4770      	bx	lr
 8004ff8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005006:	bf14      	ite	ne
 8005008:	f104 33ff 	addne.w	r3, r4, #4294967295
 800500c:	4623      	moveq	r3, r4
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	9307      	str	r3, [sp, #28]
 8005012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005016:	9002      	str	r0, [sp, #8]
 8005018:	9006      	str	r0, [sp, #24]
 800501a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800501e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005020:	ab21      	add	r3, sp, #132	@ 0x84
 8005022:	a902      	add	r1, sp, #8
 8005024:	4628      	mov	r0, r5
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f001 fc2c 	bl	8006884 <_svfiprintf_r>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	bfbc      	itt	lt
 8005030:	238b      	movlt	r3, #139	@ 0x8b
 8005032:	602b      	strlt	r3, [r5, #0]
 8005034:	2c00      	cmp	r4, #0
 8005036:	d0da      	beq.n	8004fee <sniprintf+0x16>
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e7d6      	b.n	8004fee <sniprintf+0x16>
 8005040:	20000038 	.word	0x20000038

08005044 <__sread>:
 8005044:	b510      	push	{r4, lr}
 8005046:	460c      	mov	r4, r1
 8005048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504c:	f000 f86c 	bl	8005128 <_read_r>
 8005050:	2800      	cmp	r0, #0
 8005052:	bfab      	itete	ge
 8005054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005056:	89a3      	ldrhlt	r3, [r4, #12]
 8005058:	181b      	addge	r3, r3, r0
 800505a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800505e:	bfac      	ite	ge
 8005060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005062:	81a3      	strhlt	r3, [r4, #12]
 8005064:	bd10      	pop	{r4, pc}

08005066 <__swrite>:
 8005066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506a:	461f      	mov	r7, r3
 800506c:	898b      	ldrh	r3, [r1, #12]
 800506e:	05db      	lsls	r3, r3, #23
 8005070:	4605      	mov	r5, r0
 8005072:	460c      	mov	r4, r1
 8005074:	4616      	mov	r6, r2
 8005076:	d505      	bpl.n	8005084 <__swrite+0x1e>
 8005078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507c:	2302      	movs	r3, #2
 800507e:	2200      	movs	r2, #0
 8005080:	f000 f840 	bl	8005104 <_lseek_r>
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800508a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	4632      	mov	r2, r6
 8005092:	463b      	mov	r3, r7
 8005094:	4628      	mov	r0, r5
 8005096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800509a:	f000 b857 	b.w	800514c <_write_r>

0800509e <__sseek>:
 800509e:	b510      	push	{r4, lr}
 80050a0:	460c      	mov	r4, r1
 80050a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a6:	f000 f82d 	bl	8005104 <_lseek_r>
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	bf15      	itete	ne
 80050b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050ba:	81a3      	strheq	r3, [r4, #12]
 80050bc:	bf18      	it	ne
 80050be:	81a3      	strhne	r3, [r4, #12]
 80050c0:	bd10      	pop	{r4, pc}

080050c2 <__sclose>:
 80050c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c6:	f000 b80d 	b.w	80050e4 <_close_r>

080050ca <memset>:
 80050ca:	4402      	add	r2, r0
 80050cc:	4603      	mov	r3, r0
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d100      	bne.n	80050d4 <memset+0xa>
 80050d2:	4770      	bx	lr
 80050d4:	f803 1b01 	strb.w	r1, [r3], #1
 80050d8:	e7f9      	b.n	80050ce <memset+0x4>
	...

080050dc <_localeconv_r>:
 80050dc:	4800      	ldr	r0, [pc, #0]	@ (80050e0 <_localeconv_r+0x4>)
 80050de:	4770      	bx	lr
 80050e0:	20000178 	.word	0x20000178

080050e4 <_close_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d06      	ldr	r5, [pc, #24]	@ (8005100 <_close_r+0x1c>)
 80050e8:	2300      	movs	r3, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fd fce5 	bl	8002abe <_close>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_close_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_close_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	2000039c 	.word	0x2000039c

08005104 <_lseek_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d07      	ldr	r5, [pc, #28]	@ (8005124 <_lseek_r+0x20>)
 8005108:	4604      	mov	r4, r0
 800510a:	4608      	mov	r0, r1
 800510c:	4611      	mov	r1, r2
 800510e:	2200      	movs	r2, #0
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fd fcfa 	bl	8002b0c <_lseek>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_lseek_r+0x1e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_lseek_r+0x1e>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	2000039c 	.word	0x2000039c

08005128 <_read_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4d07      	ldr	r5, [pc, #28]	@ (8005148 <_read_r+0x20>)
 800512c:	4604      	mov	r4, r0
 800512e:	4608      	mov	r0, r1
 8005130:	4611      	mov	r1, r2
 8005132:	2200      	movs	r2, #0
 8005134:	602a      	str	r2, [r5, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fd fc88 	bl	8002a4c <_read>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_read_r+0x1e>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_read_r+0x1e>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	2000039c 	.word	0x2000039c

0800514c <_write_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4d07      	ldr	r5, [pc, #28]	@ (800516c <_write_r+0x20>)
 8005150:	4604      	mov	r4, r0
 8005152:	4608      	mov	r0, r1
 8005154:	4611      	mov	r1, r2
 8005156:	2200      	movs	r2, #0
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f7fd fc93 	bl	8002a86 <_write>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_write_r+0x1e>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_write_r+0x1e>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	2000039c 	.word	0x2000039c

08005170 <__errno>:
 8005170:	4b01      	ldr	r3, [pc, #4]	@ (8005178 <__errno+0x8>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000038 	.word	0x20000038

0800517c <__libc_init_array>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	4d0d      	ldr	r5, [pc, #52]	@ (80051b4 <__libc_init_array+0x38>)
 8005180:	4c0d      	ldr	r4, [pc, #52]	@ (80051b8 <__libc_init_array+0x3c>)
 8005182:	1b64      	subs	r4, r4, r5
 8005184:	10a4      	asrs	r4, r4, #2
 8005186:	2600      	movs	r6, #0
 8005188:	42a6      	cmp	r6, r4
 800518a:	d109      	bne.n	80051a0 <__libc_init_array+0x24>
 800518c:	4d0b      	ldr	r5, [pc, #44]	@ (80051bc <__libc_init_array+0x40>)
 800518e:	4c0c      	ldr	r4, [pc, #48]	@ (80051c0 <__libc_init_array+0x44>)
 8005190:	f003 f98c 	bl	80084ac <_init>
 8005194:	1b64      	subs	r4, r4, r5
 8005196:	10a4      	asrs	r4, r4, #2
 8005198:	2600      	movs	r6, #0
 800519a:	42a6      	cmp	r6, r4
 800519c:	d105      	bne.n	80051aa <__libc_init_array+0x2e>
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a4:	4798      	blx	r3
 80051a6:	3601      	adds	r6, #1
 80051a8:	e7ee      	b.n	8005188 <__libc_init_array+0xc>
 80051aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ae:	4798      	blx	r3
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7f2      	b.n	800519a <__libc_init_array+0x1e>
 80051b4:	08008990 	.word	0x08008990
 80051b8:	08008990 	.word	0x08008990
 80051bc:	08008990 	.word	0x08008990
 80051c0:	08008994 	.word	0x08008994

080051c4 <__retarget_lock_init_recursive>:
 80051c4:	4770      	bx	lr

080051c6 <__retarget_lock_acquire_recursive>:
 80051c6:	4770      	bx	lr

080051c8 <__retarget_lock_release_recursive>:
 80051c8:	4770      	bx	lr

080051ca <memcpy>:
 80051ca:	440a      	add	r2, r1
 80051cc:	4291      	cmp	r1, r2
 80051ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d2:	d100      	bne.n	80051d6 <memcpy+0xc>
 80051d4:	4770      	bx	lr
 80051d6:	b510      	push	{r4, lr}
 80051d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051e0:	4291      	cmp	r1, r2
 80051e2:	d1f9      	bne.n	80051d8 <memcpy+0xe>
 80051e4:	bd10      	pop	{r4, pc}
	...

080051e8 <__assert_func>:
 80051e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051ea:	4614      	mov	r4, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <__assert_func+0x2c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4605      	mov	r5, r0
 80051f4:	68d8      	ldr	r0, [r3, #12]
 80051f6:	b14c      	cbz	r4, 800520c <__assert_func+0x24>
 80051f8:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <__assert_func+0x30>)
 80051fa:	9100      	str	r1, [sp, #0]
 80051fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005200:	4906      	ldr	r1, [pc, #24]	@ (800521c <__assert_func+0x34>)
 8005202:	462b      	mov	r3, r5
 8005204:	f001 fe28 	bl	8006e58 <fiprintf>
 8005208:	f001 fef6 	bl	8006ff8 <abort>
 800520c:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <__assert_func+0x38>)
 800520e:	461c      	mov	r4, r3
 8005210:	e7f3      	b.n	80051fa <__assert_func+0x12>
 8005212:	bf00      	nop
 8005214:	20000038 	.word	0x20000038
 8005218:	080085e7 	.word	0x080085e7
 800521c:	080085f4 	.word	0x080085f4
 8005220:	08008622 	.word	0x08008622

08005224 <quorem>:
 8005224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	6903      	ldr	r3, [r0, #16]
 800522a:	690c      	ldr	r4, [r1, #16]
 800522c:	42a3      	cmp	r3, r4
 800522e:	4607      	mov	r7, r0
 8005230:	db7e      	blt.n	8005330 <quorem+0x10c>
 8005232:	3c01      	subs	r4, #1
 8005234:	f101 0814 	add.w	r8, r1, #20
 8005238:	00a3      	lsls	r3, r4, #2
 800523a:	f100 0514 	add.w	r5, r0, #20
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800524a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800524e:	3301      	adds	r3, #1
 8005250:	429a      	cmp	r2, r3
 8005252:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005256:	fbb2 f6f3 	udiv	r6, r2, r3
 800525a:	d32e      	bcc.n	80052ba <quorem+0x96>
 800525c:	f04f 0a00 	mov.w	sl, #0
 8005260:	46c4      	mov	ip, r8
 8005262:	46ae      	mov	lr, r5
 8005264:	46d3      	mov	fp, sl
 8005266:	f85c 3b04 	ldr.w	r3, [ip], #4
 800526a:	b298      	uxth	r0, r3
 800526c:	fb06 a000 	mla	r0, r6, r0, sl
 8005270:	0c02      	lsrs	r2, r0, #16
 8005272:	0c1b      	lsrs	r3, r3, #16
 8005274:	fb06 2303 	mla	r3, r6, r3, r2
 8005278:	f8de 2000 	ldr.w	r2, [lr]
 800527c:	b280      	uxth	r0, r0
 800527e:	b292      	uxth	r2, r2
 8005280:	1a12      	subs	r2, r2, r0
 8005282:	445a      	add	r2, fp
 8005284:	f8de 0000 	ldr.w	r0, [lr]
 8005288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800528c:	b29b      	uxth	r3, r3
 800528e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005292:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005296:	b292      	uxth	r2, r2
 8005298:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800529c:	45e1      	cmp	r9, ip
 800529e:	f84e 2b04 	str.w	r2, [lr], #4
 80052a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80052a6:	d2de      	bcs.n	8005266 <quorem+0x42>
 80052a8:	9b00      	ldr	r3, [sp, #0]
 80052aa:	58eb      	ldr	r3, [r5, r3]
 80052ac:	b92b      	cbnz	r3, 80052ba <quorem+0x96>
 80052ae:	9b01      	ldr	r3, [sp, #4]
 80052b0:	3b04      	subs	r3, #4
 80052b2:	429d      	cmp	r5, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	d32f      	bcc.n	8005318 <quorem+0xf4>
 80052b8:	613c      	str	r4, [r7, #16]
 80052ba:	4638      	mov	r0, r7
 80052bc:	f001 f97e 	bl	80065bc <__mcmp>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	db25      	blt.n	8005310 <quorem+0xec>
 80052c4:	4629      	mov	r1, r5
 80052c6:	2000      	movs	r0, #0
 80052c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80052cc:	f8d1 c000 	ldr.w	ip, [r1]
 80052d0:	fa1f fe82 	uxth.w	lr, r2
 80052d4:	fa1f f38c 	uxth.w	r3, ip
 80052d8:	eba3 030e 	sub.w	r3, r3, lr
 80052dc:	4403      	add	r3, r0
 80052de:	0c12      	lsrs	r2, r2, #16
 80052e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80052e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ee:	45c1      	cmp	r9, r8
 80052f0:	f841 3b04 	str.w	r3, [r1], #4
 80052f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052f8:	d2e6      	bcs.n	80052c8 <quorem+0xa4>
 80052fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005302:	b922      	cbnz	r2, 800530e <quorem+0xea>
 8005304:	3b04      	subs	r3, #4
 8005306:	429d      	cmp	r5, r3
 8005308:	461a      	mov	r2, r3
 800530a:	d30b      	bcc.n	8005324 <quorem+0x100>
 800530c:	613c      	str	r4, [r7, #16]
 800530e:	3601      	adds	r6, #1
 8005310:	4630      	mov	r0, r6
 8005312:	b003      	add	sp, #12
 8005314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	3b04      	subs	r3, #4
 800531c:	2a00      	cmp	r2, #0
 800531e:	d1cb      	bne.n	80052b8 <quorem+0x94>
 8005320:	3c01      	subs	r4, #1
 8005322:	e7c6      	b.n	80052b2 <quorem+0x8e>
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	3b04      	subs	r3, #4
 8005328:	2a00      	cmp	r2, #0
 800532a:	d1ef      	bne.n	800530c <quorem+0xe8>
 800532c:	3c01      	subs	r4, #1
 800532e:	e7ea      	b.n	8005306 <quorem+0xe2>
 8005330:	2000      	movs	r0, #0
 8005332:	e7ee      	b.n	8005312 <quorem+0xee>
 8005334:	0000      	movs	r0, r0
	...

08005338 <_dtoa_r>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	69c7      	ldr	r7, [r0, #28]
 800533e:	b097      	sub	sp, #92	@ 0x5c
 8005340:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005344:	ec55 4b10 	vmov	r4, r5, d0
 8005348:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800534a:	9107      	str	r1, [sp, #28]
 800534c:	4681      	mov	r9, r0
 800534e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005350:	9311      	str	r3, [sp, #68]	@ 0x44
 8005352:	b97f      	cbnz	r7, 8005374 <_dtoa_r+0x3c>
 8005354:	2010      	movs	r0, #16
 8005356:	f000 fe09 	bl	8005f6c <malloc>
 800535a:	4602      	mov	r2, r0
 800535c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005360:	b920      	cbnz	r0, 800536c <_dtoa_r+0x34>
 8005362:	4ba9      	ldr	r3, [pc, #676]	@ (8005608 <_dtoa_r+0x2d0>)
 8005364:	21ef      	movs	r1, #239	@ 0xef
 8005366:	48a9      	ldr	r0, [pc, #676]	@ (800560c <_dtoa_r+0x2d4>)
 8005368:	f7ff ff3e 	bl	80051e8 <__assert_func>
 800536c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005370:	6007      	str	r7, [r0, #0]
 8005372:	60c7      	str	r7, [r0, #12]
 8005374:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005378:	6819      	ldr	r1, [r3, #0]
 800537a:	b159      	cbz	r1, 8005394 <_dtoa_r+0x5c>
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	604a      	str	r2, [r1, #4]
 8005380:	2301      	movs	r3, #1
 8005382:	4093      	lsls	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
 8005386:	4648      	mov	r0, r9
 8005388:	f000 fee6 	bl	8006158 <_Bfree>
 800538c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	1e2b      	subs	r3, r5, #0
 8005396:	bfb9      	ittee	lt
 8005398:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800539c:	9305      	strlt	r3, [sp, #20]
 800539e:	2300      	movge	r3, #0
 80053a0:	6033      	strge	r3, [r6, #0]
 80053a2:	9f05      	ldr	r7, [sp, #20]
 80053a4:	4b9a      	ldr	r3, [pc, #616]	@ (8005610 <_dtoa_r+0x2d8>)
 80053a6:	bfbc      	itt	lt
 80053a8:	2201      	movlt	r2, #1
 80053aa:	6032      	strlt	r2, [r6, #0]
 80053ac:	43bb      	bics	r3, r7
 80053ae:	d112      	bne.n	80053d6 <_dtoa_r+0x9e>
 80053b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80053b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053bc:	4323      	orrs	r3, r4
 80053be:	f000 855a 	beq.w	8005e76 <_dtoa_r+0xb3e>
 80053c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005624 <_dtoa_r+0x2ec>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 855c 	beq.w	8005e86 <_dtoa_r+0xb4e>
 80053ce:	f10a 0303 	add.w	r3, sl, #3
 80053d2:	f000 bd56 	b.w	8005e82 <_dtoa_r+0xb4a>
 80053d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80053da:	2200      	movs	r2, #0
 80053dc:	ec51 0b17 	vmov	r0, r1, d7
 80053e0:	2300      	movs	r3, #0
 80053e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80053e6:	f7fb fb7f 	bl	8000ae8 <__aeabi_dcmpeq>
 80053ea:	4680      	mov	r8, r0
 80053ec:	b158      	cbz	r0, 8005406 <_dtoa_r+0xce>
 80053ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80053f0:	2301      	movs	r3, #1
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053f6:	b113      	cbz	r3, 80053fe <_dtoa_r+0xc6>
 80053f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80053fa:	4b86      	ldr	r3, [pc, #536]	@ (8005614 <_dtoa_r+0x2dc>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005628 <_dtoa_r+0x2f0>
 8005402:	f000 bd40 	b.w	8005e86 <_dtoa_r+0xb4e>
 8005406:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800540a:	aa14      	add	r2, sp, #80	@ 0x50
 800540c:	a915      	add	r1, sp, #84	@ 0x54
 800540e:	4648      	mov	r0, r9
 8005410:	f001 f984 	bl	800671c <__d2b>
 8005414:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005418:	9002      	str	r0, [sp, #8]
 800541a:	2e00      	cmp	r6, #0
 800541c:	d078      	beq.n	8005510 <_dtoa_r+0x1d8>
 800541e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005420:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800542c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005430:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005434:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005438:	4619      	mov	r1, r3
 800543a:	2200      	movs	r2, #0
 800543c:	4b76      	ldr	r3, [pc, #472]	@ (8005618 <_dtoa_r+0x2e0>)
 800543e:	f7fa ff33 	bl	80002a8 <__aeabi_dsub>
 8005442:	a36b      	add	r3, pc, #428	@ (adr r3, 80055f0 <_dtoa_r+0x2b8>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fb f8e6 	bl	8000618 <__aeabi_dmul>
 800544c:	a36a      	add	r3, pc, #424	@ (adr r3, 80055f8 <_dtoa_r+0x2c0>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f7fa ff2b 	bl	80002ac <__adddf3>
 8005456:	4604      	mov	r4, r0
 8005458:	4630      	mov	r0, r6
 800545a:	460d      	mov	r5, r1
 800545c:	f7fb f872 	bl	8000544 <__aeabi_i2d>
 8005460:	a367      	add	r3, pc, #412	@ (adr r3, 8005600 <_dtoa_r+0x2c8>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fb f8d7 	bl	8000618 <__aeabi_dmul>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4620      	mov	r0, r4
 8005470:	4629      	mov	r1, r5
 8005472:	f7fa ff1b 	bl	80002ac <__adddf3>
 8005476:	4604      	mov	r4, r0
 8005478:	460d      	mov	r5, r1
 800547a:	f7fb fb7d 	bl	8000b78 <__aeabi_d2iz>
 800547e:	2200      	movs	r2, #0
 8005480:	4607      	mov	r7, r0
 8005482:	2300      	movs	r3, #0
 8005484:	4620      	mov	r0, r4
 8005486:	4629      	mov	r1, r5
 8005488:	f7fb fb38 	bl	8000afc <__aeabi_dcmplt>
 800548c:	b140      	cbz	r0, 80054a0 <_dtoa_r+0x168>
 800548e:	4638      	mov	r0, r7
 8005490:	f7fb f858 	bl	8000544 <__aeabi_i2d>
 8005494:	4622      	mov	r2, r4
 8005496:	462b      	mov	r3, r5
 8005498:	f7fb fb26 	bl	8000ae8 <__aeabi_dcmpeq>
 800549c:	b900      	cbnz	r0, 80054a0 <_dtoa_r+0x168>
 800549e:	3f01      	subs	r7, #1
 80054a0:	2f16      	cmp	r7, #22
 80054a2:	d852      	bhi.n	800554a <_dtoa_r+0x212>
 80054a4:	4b5d      	ldr	r3, [pc, #372]	@ (800561c <_dtoa_r+0x2e4>)
 80054a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054b2:	f7fb fb23 	bl	8000afc <__aeabi_dcmplt>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d049      	beq.n	800554e <_dtoa_r+0x216>
 80054ba:	3f01      	subs	r7, #1
 80054bc:	2300      	movs	r3, #0
 80054be:	9310      	str	r3, [sp, #64]	@ 0x40
 80054c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054c2:	1b9b      	subs	r3, r3, r6
 80054c4:	1e5a      	subs	r2, r3, #1
 80054c6:	bf45      	ittet	mi
 80054c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80054cc:	9300      	strmi	r3, [sp, #0]
 80054ce:	2300      	movpl	r3, #0
 80054d0:	2300      	movmi	r3, #0
 80054d2:	9206      	str	r2, [sp, #24]
 80054d4:	bf54      	ite	pl
 80054d6:	9300      	strpl	r3, [sp, #0]
 80054d8:	9306      	strmi	r3, [sp, #24]
 80054da:	2f00      	cmp	r7, #0
 80054dc:	db39      	blt.n	8005552 <_dtoa_r+0x21a>
 80054de:	9b06      	ldr	r3, [sp, #24]
 80054e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80054e2:	443b      	add	r3, r7
 80054e4:	9306      	str	r3, [sp, #24]
 80054e6:	2300      	movs	r3, #0
 80054e8:	9308      	str	r3, [sp, #32]
 80054ea:	9b07      	ldr	r3, [sp, #28]
 80054ec:	2b09      	cmp	r3, #9
 80054ee:	d863      	bhi.n	80055b8 <_dtoa_r+0x280>
 80054f0:	2b05      	cmp	r3, #5
 80054f2:	bfc4      	itt	gt
 80054f4:	3b04      	subgt	r3, #4
 80054f6:	9307      	strgt	r3, [sp, #28]
 80054f8:	9b07      	ldr	r3, [sp, #28]
 80054fa:	f1a3 0302 	sub.w	r3, r3, #2
 80054fe:	bfcc      	ite	gt
 8005500:	2400      	movgt	r4, #0
 8005502:	2401      	movle	r4, #1
 8005504:	2b03      	cmp	r3, #3
 8005506:	d863      	bhi.n	80055d0 <_dtoa_r+0x298>
 8005508:	e8df f003 	tbb	[pc, r3]
 800550c:	2b375452 	.word	0x2b375452
 8005510:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005514:	441e      	add	r6, r3
 8005516:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800551a:	2b20      	cmp	r3, #32
 800551c:	bfc1      	itttt	gt
 800551e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005522:	409f      	lslgt	r7, r3
 8005524:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005528:	fa24 f303 	lsrgt.w	r3, r4, r3
 800552c:	bfd6      	itet	le
 800552e:	f1c3 0320 	rsble	r3, r3, #32
 8005532:	ea47 0003 	orrgt.w	r0, r7, r3
 8005536:	fa04 f003 	lslle.w	r0, r4, r3
 800553a:	f7fa fff3 	bl	8000524 <__aeabi_ui2d>
 800553e:	2201      	movs	r2, #1
 8005540:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005544:	3e01      	subs	r6, #1
 8005546:	9212      	str	r2, [sp, #72]	@ 0x48
 8005548:	e776      	b.n	8005438 <_dtoa_r+0x100>
 800554a:	2301      	movs	r3, #1
 800554c:	e7b7      	b.n	80054be <_dtoa_r+0x186>
 800554e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005550:	e7b6      	b.n	80054c0 <_dtoa_r+0x188>
 8005552:	9b00      	ldr	r3, [sp, #0]
 8005554:	1bdb      	subs	r3, r3, r7
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	427b      	negs	r3, r7
 800555a:	9308      	str	r3, [sp, #32]
 800555c:	2300      	movs	r3, #0
 800555e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005560:	e7c3      	b.n	80054ea <_dtoa_r+0x1b2>
 8005562:	2301      	movs	r3, #1
 8005564:	9309      	str	r3, [sp, #36]	@ 0x24
 8005566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005568:	eb07 0b03 	add.w	fp, r7, r3
 800556c:	f10b 0301 	add.w	r3, fp, #1
 8005570:	2b01      	cmp	r3, #1
 8005572:	9303      	str	r3, [sp, #12]
 8005574:	bfb8      	it	lt
 8005576:	2301      	movlt	r3, #1
 8005578:	e006      	b.n	8005588 <_dtoa_r+0x250>
 800557a:	2301      	movs	r3, #1
 800557c:	9309      	str	r3, [sp, #36]	@ 0x24
 800557e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd28      	ble.n	80055d6 <_dtoa_r+0x29e>
 8005584:	469b      	mov	fp, r3
 8005586:	9303      	str	r3, [sp, #12]
 8005588:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800558c:	2100      	movs	r1, #0
 800558e:	2204      	movs	r2, #4
 8005590:	f102 0514 	add.w	r5, r2, #20
 8005594:	429d      	cmp	r5, r3
 8005596:	d926      	bls.n	80055e6 <_dtoa_r+0x2ae>
 8005598:	6041      	str	r1, [r0, #4]
 800559a:	4648      	mov	r0, r9
 800559c:	f000 fd9c 	bl	80060d8 <_Balloc>
 80055a0:	4682      	mov	sl, r0
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d142      	bne.n	800562c <_dtoa_r+0x2f4>
 80055a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005620 <_dtoa_r+0x2e8>)
 80055a8:	4602      	mov	r2, r0
 80055aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80055ae:	e6da      	b.n	8005366 <_dtoa_r+0x2e>
 80055b0:	2300      	movs	r3, #0
 80055b2:	e7e3      	b.n	800557c <_dtoa_r+0x244>
 80055b4:	2300      	movs	r3, #0
 80055b6:	e7d5      	b.n	8005564 <_dtoa_r+0x22c>
 80055b8:	2401      	movs	r4, #1
 80055ba:	2300      	movs	r3, #0
 80055bc:	9307      	str	r3, [sp, #28]
 80055be:	9409      	str	r4, [sp, #36]	@ 0x24
 80055c0:	f04f 3bff 	mov.w	fp, #4294967295
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80055ca:	2312      	movs	r3, #18
 80055cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80055ce:	e7db      	b.n	8005588 <_dtoa_r+0x250>
 80055d0:	2301      	movs	r3, #1
 80055d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d4:	e7f4      	b.n	80055c0 <_dtoa_r+0x288>
 80055d6:	f04f 0b01 	mov.w	fp, #1
 80055da:	f8cd b00c 	str.w	fp, [sp, #12]
 80055de:	465b      	mov	r3, fp
 80055e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80055e4:	e7d0      	b.n	8005588 <_dtoa_r+0x250>
 80055e6:	3101      	adds	r1, #1
 80055e8:	0052      	lsls	r2, r2, #1
 80055ea:	e7d1      	b.n	8005590 <_dtoa_r+0x258>
 80055ec:	f3af 8000 	nop.w
 80055f0:	636f4361 	.word	0x636f4361
 80055f4:	3fd287a7 	.word	0x3fd287a7
 80055f8:	8b60c8b3 	.word	0x8b60c8b3
 80055fc:	3fc68a28 	.word	0x3fc68a28
 8005600:	509f79fb 	.word	0x509f79fb
 8005604:	3fd34413 	.word	0x3fd34413
 8005608:	08008544 	.word	0x08008544
 800560c:	08008630 	.word	0x08008630
 8005610:	7ff00000 	.word	0x7ff00000
 8005614:	080085c4 	.word	0x080085c4
 8005618:	3ff80000 	.word	0x3ff80000
 800561c:	08008748 	.word	0x08008748
 8005620:	08008688 	.word	0x08008688
 8005624:	0800862c 	.word	0x0800862c
 8005628:	080085c3 	.word	0x080085c3
 800562c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005630:	6018      	str	r0, [r3, #0]
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	2b0e      	cmp	r3, #14
 8005636:	f200 80a1 	bhi.w	800577c <_dtoa_r+0x444>
 800563a:	2c00      	cmp	r4, #0
 800563c:	f000 809e 	beq.w	800577c <_dtoa_r+0x444>
 8005640:	2f00      	cmp	r7, #0
 8005642:	dd33      	ble.n	80056ac <_dtoa_r+0x374>
 8005644:	4b9c      	ldr	r3, [pc, #624]	@ (80058b8 <_dtoa_r+0x580>)
 8005646:	f007 020f 	and.w	r2, r7, #15
 800564a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564e:	ed93 7b00 	vldr	d7, [r3]
 8005652:	05f8      	lsls	r0, r7, #23
 8005654:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005658:	ea4f 1427 	mov.w	r4, r7, asr #4
 800565c:	d516      	bpl.n	800568c <_dtoa_r+0x354>
 800565e:	4b97      	ldr	r3, [pc, #604]	@ (80058bc <_dtoa_r+0x584>)
 8005660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005668:	f7fb f900 	bl	800086c <__aeabi_ddiv>
 800566c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005670:	f004 040f 	and.w	r4, r4, #15
 8005674:	2603      	movs	r6, #3
 8005676:	4d91      	ldr	r5, [pc, #580]	@ (80058bc <_dtoa_r+0x584>)
 8005678:	b954      	cbnz	r4, 8005690 <_dtoa_r+0x358>
 800567a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800567e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005682:	f7fb f8f3 	bl	800086c <__aeabi_ddiv>
 8005686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800568a:	e028      	b.n	80056de <_dtoa_r+0x3a6>
 800568c:	2602      	movs	r6, #2
 800568e:	e7f2      	b.n	8005676 <_dtoa_r+0x33e>
 8005690:	07e1      	lsls	r1, r4, #31
 8005692:	d508      	bpl.n	80056a6 <_dtoa_r+0x36e>
 8005694:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005698:	e9d5 2300 	ldrd	r2, r3, [r5]
 800569c:	f7fa ffbc 	bl	8000618 <__aeabi_dmul>
 80056a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80056a4:	3601      	adds	r6, #1
 80056a6:	1064      	asrs	r4, r4, #1
 80056a8:	3508      	adds	r5, #8
 80056aa:	e7e5      	b.n	8005678 <_dtoa_r+0x340>
 80056ac:	f000 80af 	beq.w	800580e <_dtoa_r+0x4d6>
 80056b0:	427c      	negs	r4, r7
 80056b2:	4b81      	ldr	r3, [pc, #516]	@ (80058b8 <_dtoa_r+0x580>)
 80056b4:	4d81      	ldr	r5, [pc, #516]	@ (80058bc <_dtoa_r+0x584>)
 80056b6:	f004 020f 	and.w	r2, r4, #15
 80056ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056c6:	f7fa ffa7 	bl	8000618 <__aeabi_dmul>
 80056ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ce:	1124      	asrs	r4, r4, #4
 80056d0:	2300      	movs	r3, #0
 80056d2:	2602      	movs	r6, #2
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	f040 808f 	bne.w	80057f8 <_dtoa_r+0x4c0>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1d3      	bne.n	8005686 <_dtoa_r+0x34e>
 80056de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80056e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8094 	beq.w	8005812 <_dtoa_r+0x4da>
 80056ea:	4b75      	ldr	r3, [pc, #468]	@ (80058c0 <_dtoa_r+0x588>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fb fa03 	bl	8000afc <__aeabi_dcmplt>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f000 808b 	beq.w	8005812 <_dtoa_r+0x4da>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8087 	beq.w	8005812 <_dtoa_r+0x4da>
 8005704:	f1bb 0f00 	cmp.w	fp, #0
 8005708:	dd34      	ble.n	8005774 <_dtoa_r+0x43c>
 800570a:	4620      	mov	r0, r4
 800570c:	4b6d      	ldr	r3, [pc, #436]	@ (80058c4 <_dtoa_r+0x58c>)
 800570e:	2200      	movs	r2, #0
 8005710:	4629      	mov	r1, r5
 8005712:	f7fa ff81 	bl	8000618 <__aeabi_dmul>
 8005716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800571a:	f107 38ff 	add.w	r8, r7, #4294967295
 800571e:	3601      	adds	r6, #1
 8005720:	465c      	mov	r4, fp
 8005722:	4630      	mov	r0, r6
 8005724:	f7fa ff0e 	bl	8000544 <__aeabi_i2d>
 8005728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800572c:	f7fa ff74 	bl	8000618 <__aeabi_dmul>
 8005730:	4b65      	ldr	r3, [pc, #404]	@ (80058c8 <_dtoa_r+0x590>)
 8005732:	2200      	movs	r2, #0
 8005734:	f7fa fdba 	bl	80002ac <__adddf3>
 8005738:	4605      	mov	r5, r0
 800573a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800573e:	2c00      	cmp	r4, #0
 8005740:	d16a      	bne.n	8005818 <_dtoa_r+0x4e0>
 8005742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005746:	4b61      	ldr	r3, [pc, #388]	@ (80058cc <_dtoa_r+0x594>)
 8005748:	2200      	movs	r2, #0
 800574a:	f7fa fdad 	bl	80002a8 <__aeabi_dsub>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005756:	462a      	mov	r2, r5
 8005758:	4633      	mov	r3, r6
 800575a:	f7fb f9ed 	bl	8000b38 <__aeabi_dcmpgt>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 8298 	bne.w	8005c94 <_dtoa_r+0x95c>
 8005764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005768:	462a      	mov	r2, r5
 800576a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800576e:	f7fb f9c5 	bl	8000afc <__aeabi_dcmplt>
 8005772:	bb38      	cbnz	r0, 80057c4 <_dtoa_r+0x48c>
 8005774:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005778:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800577c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800577e:	2b00      	cmp	r3, #0
 8005780:	f2c0 8157 	blt.w	8005a32 <_dtoa_r+0x6fa>
 8005784:	2f0e      	cmp	r7, #14
 8005786:	f300 8154 	bgt.w	8005a32 <_dtoa_r+0x6fa>
 800578a:	4b4b      	ldr	r3, [pc, #300]	@ (80058b8 <_dtoa_r+0x580>)
 800578c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005790:	ed93 7b00 	vldr	d7, [r3]
 8005794:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005796:	2b00      	cmp	r3, #0
 8005798:	ed8d 7b00 	vstr	d7, [sp]
 800579c:	f280 80e5 	bge.w	800596a <_dtoa_r+0x632>
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f300 80e1 	bgt.w	800596a <_dtoa_r+0x632>
 80057a8:	d10c      	bne.n	80057c4 <_dtoa_r+0x48c>
 80057aa:	4b48      	ldr	r3, [pc, #288]	@ (80058cc <_dtoa_r+0x594>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	ec51 0b17 	vmov	r0, r1, d7
 80057b2:	f7fa ff31 	bl	8000618 <__aeabi_dmul>
 80057b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ba:	f7fb f9b3 	bl	8000b24 <__aeabi_dcmpge>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f000 8266 	beq.w	8005c90 <_dtoa_r+0x958>
 80057c4:	2400      	movs	r4, #0
 80057c6:	4625      	mov	r5, r4
 80057c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057ca:	4656      	mov	r6, sl
 80057cc:	ea6f 0803 	mvn.w	r8, r3
 80057d0:	2700      	movs	r7, #0
 80057d2:	4621      	mov	r1, r4
 80057d4:	4648      	mov	r0, r9
 80057d6:	f000 fcbf 	bl	8006158 <_Bfree>
 80057da:	2d00      	cmp	r5, #0
 80057dc:	f000 80bd 	beq.w	800595a <_dtoa_r+0x622>
 80057e0:	b12f      	cbz	r7, 80057ee <_dtoa_r+0x4b6>
 80057e2:	42af      	cmp	r7, r5
 80057e4:	d003      	beq.n	80057ee <_dtoa_r+0x4b6>
 80057e6:	4639      	mov	r1, r7
 80057e8:	4648      	mov	r0, r9
 80057ea:	f000 fcb5 	bl	8006158 <_Bfree>
 80057ee:	4629      	mov	r1, r5
 80057f0:	4648      	mov	r0, r9
 80057f2:	f000 fcb1 	bl	8006158 <_Bfree>
 80057f6:	e0b0      	b.n	800595a <_dtoa_r+0x622>
 80057f8:	07e2      	lsls	r2, r4, #31
 80057fa:	d505      	bpl.n	8005808 <_dtoa_r+0x4d0>
 80057fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005800:	f7fa ff0a 	bl	8000618 <__aeabi_dmul>
 8005804:	3601      	adds	r6, #1
 8005806:	2301      	movs	r3, #1
 8005808:	1064      	asrs	r4, r4, #1
 800580a:	3508      	adds	r5, #8
 800580c:	e762      	b.n	80056d4 <_dtoa_r+0x39c>
 800580e:	2602      	movs	r6, #2
 8005810:	e765      	b.n	80056de <_dtoa_r+0x3a6>
 8005812:	9c03      	ldr	r4, [sp, #12]
 8005814:	46b8      	mov	r8, r7
 8005816:	e784      	b.n	8005722 <_dtoa_r+0x3ea>
 8005818:	4b27      	ldr	r3, [pc, #156]	@ (80058b8 <_dtoa_r+0x580>)
 800581a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800581c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005824:	4454      	add	r4, sl
 8005826:	2900      	cmp	r1, #0
 8005828:	d054      	beq.n	80058d4 <_dtoa_r+0x59c>
 800582a:	4929      	ldr	r1, [pc, #164]	@ (80058d0 <_dtoa_r+0x598>)
 800582c:	2000      	movs	r0, #0
 800582e:	f7fb f81d 	bl	800086c <__aeabi_ddiv>
 8005832:	4633      	mov	r3, r6
 8005834:	462a      	mov	r2, r5
 8005836:	f7fa fd37 	bl	80002a8 <__aeabi_dsub>
 800583a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800583e:	4656      	mov	r6, sl
 8005840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005844:	f7fb f998 	bl	8000b78 <__aeabi_d2iz>
 8005848:	4605      	mov	r5, r0
 800584a:	f7fa fe7b 	bl	8000544 <__aeabi_i2d>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005856:	f7fa fd27 	bl	80002a8 <__aeabi_dsub>
 800585a:	3530      	adds	r5, #48	@ 0x30
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005864:	f806 5b01 	strb.w	r5, [r6], #1
 8005868:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800586c:	f7fb f946 	bl	8000afc <__aeabi_dcmplt>
 8005870:	2800      	cmp	r0, #0
 8005872:	d172      	bne.n	800595a <_dtoa_r+0x622>
 8005874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005878:	4911      	ldr	r1, [pc, #68]	@ (80058c0 <_dtoa_r+0x588>)
 800587a:	2000      	movs	r0, #0
 800587c:	f7fa fd14 	bl	80002a8 <__aeabi_dsub>
 8005880:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005884:	f7fb f93a 	bl	8000afc <__aeabi_dcmplt>
 8005888:	2800      	cmp	r0, #0
 800588a:	f040 80b4 	bne.w	80059f6 <_dtoa_r+0x6be>
 800588e:	42a6      	cmp	r6, r4
 8005890:	f43f af70 	beq.w	8005774 <_dtoa_r+0x43c>
 8005894:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005898:	4b0a      	ldr	r3, [pc, #40]	@ (80058c4 <_dtoa_r+0x58c>)
 800589a:	2200      	movs	r2, #0
 800589c:	f7fa febc 	bl	8000618 <__aeabi_dmul>
 80058a0:	4b08      	ldr	r3, [pc, #32]	@ (80058c4 <_dtoa_r+0x58c>)
 80058a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80058a6:	2200      	movs	r2, #0
 80058a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ac:	f7fa feb4 	bl	8000618 <__aeabi_dmul>
 80058b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058b4:	e7c4      	b.n	8005840 <_dtoa_r+0x508>
 80058b6:	bf00      	nop
 80058b8:	08008748 	.word	0x08008748
 80058bc:	08008720 	.word	0x08008720
 80058c0:	3ff00000 	.word	0x3ff00000
 80058c4:	40240000 	.word	0x40240000
 80058c8:	401c0000 	.word	0x401c0000
 80058cc:	40140000 	.word	0x40140000
 80058d0:	3fe00000 	.word	0x3fe00000
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	f7fa fe9e 	bl	8000618 <__aeabi_dmul>
 80058dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80058e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80058e2:	4656      	mov	r6, sl
 80058e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e8:	f7fb f946 	bl	8000b78 <__aeabi_d2iz>
 80058ec:	4605      	mov	r5, r0
 80058ee:	f7fa fe29 	bl	8000544 <__aeabi_i2d>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058fa:	f7fa fcd5 	bl	80002a8 <__aeabi_dsub>
 80058fe:	3530      	adds	r5, #48	@ 0x30
 8005900:	f806 5b01 	strb.w	r5, [r6], #1
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	42a6      	cmp	r6, r4
 800590a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	d124      	bne.n	800595e <_dtoa_r+0x626>
 8005914:	4baf      	ldr	r3, [pc, #700]	@ (8005bd4 <_dtoa_r+0x89c>)
 8005916:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800591a:	f7fa fcc7 	bl	80002ac <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005926:	f7fb f907 	bl	8000b38 <__aeabi_dcmpgt>
 800592a:	2800      	cmp	r0, #0
 800592c:	d163      	bne.n	80059f6 <_dtoa_r+0x6be>
 800592e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005932:	49a8      	ldr	r1, [pc, #672]	@ (8005bd4 <_dtoa_r+0x89c>)
 8005934:	2000      	movs	r0, #0
 8005936:	f7fa fcb7 	bl	80002a8 <__aeabi_dsub>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005942:	f7fb f8db 	bl	8000afc <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f43f af14 	beq.w	8005774 <_dtoa_r+0x43c>
 800594c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800594e:	1e73      	subs	r3, r6, #1
 8005950:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005952:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005956:	2b30      	cmp	r3, #48	@ 0x30
 8005958:	d0f8      	beq.n	800594c <_dtoa_r+0x614>
 800595a:	4647      	mov	r7, r8
 800595c:	e03b      	b.n	80059d6 <_dtoa_r+0x69e>
 800595e:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd8 <_dtoa_r+0x8a0>)
 8005960:	f7fa fe5a 	bl	8000618 <__aeabi_dmul>
 8005964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005968:	e7bc      	b.n	80058e4 <_dtoa_r+0x5ac>
 800596a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800596e:	4656      	mov	r6, sl
 8005970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005974:	4620      	mov	r0, r4
 8005976:	4629      	mov	r1, r5
 8005978:	f7fa ff78 	bl	800086c <__aeabi_ddiv>
 800597c:	f7fb f8fc 	bl	8000b78 <__aeabi_d2iz>
 8005980:	4680      	mov	r8, r0
 8005982:	f7fa fddf 	bl	8000544 <__aeabi_i2d>
 8005986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800598a:	f7fa fe45 	bl	8000618 <__aeabi_dmul>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4620      	mov	r0, r4
 8005994:	4629      	mov	r1, r5
 8005996:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800599a:	f7fa fc85 	bl	80002a8 <__aeabi_dsub>
 800599e:	f806 4b01 	strb.w	r4, [r6], #1
 80059a2:	9d03      	ldr	r5, [sp, #12]
 80059a4:	eba6 040a 	sub.w	r4, r6, sl
 80059a8:	42a5      	cmp	r5, r4
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	d133      	bne.n	8005a18 <_dtoa_r+0x6e0>
 80059b0:	f7fa fc7c 	bl	80002ac <__adddf3>
 80059b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059b8:	4604      	mov	r4, r0
 80059ba:	460d      	mov	r5, r1
 80059bc:	f7fb f8bc 	bl	8000b38 <__aeabi_dcmpgt>
 80059c0:	b9c0      	cbnz	r0, 80059f4 <_dtoa_r+0x6bc>
 80059c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fb f88d 	bl	8000ae8 <__aeabi_dcmpeq>
 80059ce:	b110      	cbz	r0, 80059d6 <_dtoa_r+0x69e>
 80059d0:	f018 0f01 	tst.w	r8, #1
 80059d4:	d10e      	bne.n	80059f4 <_dtoa_r+0x6bc>
 80059d6:	9902      	ldr	r1, [sp, #8]
 80059d8:	4648      	mov	r0, r9
 80059da:	f000 fbbd 	bl	8006158 <_Bfree>
 80059de:	2300      	movs	r3, #0
 80059e0:	7033      	strb	r3, [r6, #0]
 80059e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059e4:	3701      	adds	r7, #1
 80059e6:	601f      	str	r7, [r3, #0]
 80059e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 824b 	beq.w	8005e86 <_dtoa_r+0xb4e>
 80059f0:	601e      	str	r6, [r3, #0]
 80059f2:	e248      	b.n	8005e86 <_dtoa_r+0xb4e>
 80059f4:	46b8      	mov	r8, r7
 80059f6:	4633      	mov	r3, r6
 80059f8:	461e      	mov	r6, r3
 80059fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059fe:	2a39      	cmp	r2, #57	@ 0x39
 8005a00:	d106      	bne.n	8005a10 <_dtoa_r+0x6d8>
 8005a02:	459a      	cmp	sl, r3
 8005a04:	d1f8      	bne.n	80059f8 <_dtoa_r+0x6c0>
 8005a06:	2230      	movs	r2, #48	@ 0x30
 8005a08:	f108 0801 	add.w	r8, r8, #1
 8005a0c:	f88a 2000 	strb.w	r2, [sl]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	3201      	adds	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e7a0      	b.n	800595a <_dtoa_r+0x622>
 8005a18:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd8 <_dtoa_r+0x8a0>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f7fa fdfc 	bl	8000618 <__aeabi_dmul>
 8005a20:	2200      	movs	r2, #0
 8005a22:	2300      	movs	r3, #0
 8005a24:	4604      	mov	r4, r0
 8005a26:	460d      	mov	r5, r1
 8005a28:	f7fb f85e 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d09f      	beq.n	8005970 <_dtoa_r+0x638>
 8005a30:	e7d1      	b.n	80059d6 <_dtoa_r+0x69e>
 8005a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	f000 80ea 	beq.w	8005c0e <_dtoa_r+0x8d6>
 8005a3a:	9a07      	ldr	r2, [sp, #28]
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	f300 80cd 	bgt.w	8005bdc <_dtoa_r+0x8a4>
 8005a42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	f000 80c1 	beq.w	8005bcc <_dtoa_r+0x894>
 8005a4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a4e:	9c08      	ldr	r4, [sp, #32]
 8005a50:	9e00      	ldr	r6, [sp, #0]
 8005a52:	9a00      	ldr	r2, [sp, #0]
 8005a54:	441a      	add	r2, r3
 8005a56:	9200      	str	r2, [sp, #0]
 8005a58:	9a06      	ldr	r2, [sp, #24]
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	441a      	add	r2, r3
 8005a5e:	4648      	mov	r0, r9
 8005a60:	9206      	str	r2, [sp, #24]
 8005a62:	f000 fc2d 	bl	80062c0 <__i2b>
 8005a66:	4605      	mov	r5, r0
 8005a68:	b166      	cbz	r6, 8005a84 <_dtoa_r+0x74c>
 8005a6a:	9b06      	ldr	r3, [sp, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dd09      	ble.n	8005a84 <_dtoa_r+0x74c>
 8005a70:	42b3      	cmp	r3, r6
 8005a72:	9a00      	ldr	r2, [sp, #0]
 8005a74:	bfa8      	it	ge
 8005a76:	4633      	movge	r3, r6
 8005a78:	1ad2      	subs	r2, r2, r3
 8005a7a:	9200      	str	r2, [sp, #0]
 8005a7c:	9a06      	ldr	r2, [sp, #24]
 8005a7e:	1af6      	subs	r6, r6, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	9306      	str	r3, [sp, #24]
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	b30b      	cbz	r3, 8005acc <_dtoa_r+0x794>
 8005a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80c6 	beq.w	8005c1c <_dtoa_r+0x8e4>
 8005a90:	2c00      	cmp	r4, #0
 8005a92:	f000 80c0 	beq.w	8005c16 <_dtoa_r+0x8de>
 8005a96:	4629      	mov	r1, r5
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4648      	mov	r0, r9
 8005a9c:	f000 fcc8 	bl	8006430 <__pow5mult>
 8005aa0:	9a02      	ldr	r2, [sp, #8]
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	4648      	mov	r0, r9
 8005aa8:	f000 fc20 	bl	80062ec <__multiply>
 8005aac:	9902      	ldr	r1, [sp, #8]
 8005aae:	4680      	mov	r8, r0
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f000 fb51 	bl	8006158 <_Bfree>
 8005ab6:	9b08      	ldr	r3, [sp, #32]
 8005ab8:	1b1b      	subs	r3, r3, r4
 8005aba:	9308      	str	r3, [sp, #32]
 8005abc:	f000 80b1 	beq.w	8005c22 <_dtoa_r+0x8ea>
 8005ac0:	9a08      	ldr	r2, [sp, #32]
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	4648      	mov	r0, r9
 8005ac6:	f000 fcb3 	bl	8006430 <__pow5mult>
 8005aca:	9002      	str	r0, [sp, #8]
 8005acc:	2101      	movs	r1, #1
 8005ace:	4648      	mov	r0, r9
 8005ad0:	f000 fbf6 	bl	80062c0 <__i2b>
 8005ad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 81d8 	beq.w	8005e8e <_dtoa_r+0xb56>
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	4648      	mov	r0, r9
 8005ae4:	f000 fca4 	bl	8006430 <__pow5mult>
 8005ae8:	9b07      	ldr	r3, [sp, #28]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	4604      	mov	r4, r0
 8005aee:	f300 809f 	bgt.w	8005c30 <_dtoa_r+0x8f8>
 8005af2:	9b04      	ldr	r3, [sp, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 8097 	bne.w	8005c28 <_dtoa_r+0x8f0>
 8005afa:	9b05      	ldr	r3, [sp, #20]
 8005afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 8093 	bne.w	8005c2c <_dtoa_r+0x8f4>
 8005b06:	9b05      	ldr	r3, [sp, #20]
 8005b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b0c:	0d1b      	lsrs	r3, r3, #20
 8005b0e:	051b      	lsls	r3, r3, #20
 8005b10:	b133      	cbz	r3, 8005b20 <_dtoa_r+0x7e8>
 8005b12:	9b00      	ldr	r3, [sp, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	9b06      	ldr	r3, [sp, #24]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	9306      	str	r3, [sp, #24]
 8005b1e:	2301      	movs	r3, #1
 8005b20:	9308      	str	r3, [sp, #32]
 8005b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 81b8 	beq.w	8005e9a <_dtoa_r+0xb62>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b30:	6918      	ldr	r0, [r3, #16]
 8005b32:	f000 fb79 	bl	8006228 <__hi0bits>
 8005b36:	f1c0 0020 	rsb	r0, r0, #32
 8005b3a:	9b06      	ldr	r3, [sp, #24]
 8005b3c:	4418      	add	r0, r3
 8005b3e:	f010 001f 	ands.w	r0, r0, #31
 8005b42:	f000 8082 	beq.w	8005c4a <_dtoa_r+0x912>
 8005b46:	f1c0 0320 	rsb	r3, r0, #32
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	dd73      	ble.n	8005c36 <_dtoa_r+0x8fe>
 8005b4e:	9b00      	ldr	r3, [sp, #0]
 8005b50:	f1c0 001c 	rsb	r0, r0, #28
 8005b54:	4403      	add	r3, r0
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	9b06      	ldr	r3, [sp, #24]
 8005b5a:	4403      	add	r3, r0
 8005b5c:	4406      	add	r6, r0
 8005b5e:	9306      	str	r3, [sp, #24]
 8005b60:	9b00      	ldr	r3, [sp, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	dd05      	ble.n	8005b72 <_dtoa_r+0x83a>
 8005b66:	9902      	ldr	r1, [sp, #8]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4648      	mov	r0, r9
 8005b6c:	f000 fcba 	bl	80064e4 <__lshift>
 8005b70:	9002      	str	r0, [sp, #8]
 8005b72:	9b06      	ldr	r3, [sp, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dd05      	ble.n	8005b84 <_dtoa_r+0x84c>
 8005b78:	4621      	mov	r1, r4
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	f000 fcb1 	bl	80064e4 <__lshift>
 8005b82:	4604      	mov	r4, r0
 8005b84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d061      	beq.n	8005c4e <_dtoa_r+0x916>
 8005b8a:	9802      	ldr	r0, [sp, #8]
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	f000 fd15 	bl	80065bc <__mcmp>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	da5b      	bge.n	8005c4e <_dtoa_r+0x916>
 8005b96:	2300      	movs	r3, #0
 8005b98:	9902      	ldr	r1, [sp, #8]
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	4648      	mov	r0, r9
 8005b9e:	f000 fafd 	bl	800619c <__multadd>
 8005ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba4:	9002      	str	r0, [sp, #8]
 8005ba6:	f107 38ff 	add.w	r8, r7, #4294967295
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8177 	beq.w	8005e9e <_dtoa_r+0xb66>
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	220a      	movs	r2, #10
 8005bb6:	4648      	mov	r0, r9
 8005bb8:	f000 faf0 	bl	800619c <__multadd>
 8005bbc:	f1bb 0f00 	cmp.w	fp, #0
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	dc6f      	bgt.n	8005ca4 <_dtoa_r+0x96c>
 8005bc4:	9b07      	ldr	r3, [sp, #28]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	dc49      	bgt.n	8005c5e <_dtoa_r+0x926>
 8005bca:	e06b      	b.n	8005ca4 <_dtoa_r+0x96c>
 8005bcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005bce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005bd2:	e73c      	b.n	8005a4e <_dtoa_r+0x716>
 8005bd4:	3fe00000 	.word	0x3fe00000
 8005bd8:	40240000 	.word	0x40240000
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	1e5c      	subs	r4, r3, #1
 8005be0:	9b08      	ldr	r3, [sp, #32]
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	db09      	blt.n	8005bfa <_dtoa_r+0x8c2>
 8005be6:	1b1c      	subs	r4, r3, r4
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f6bf af30 	bge.w	8005a50 <_dtoa_r+0x718>
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	9a03      	ldr	r2, [sp, #12]
 8005bf4:	1a9e      	subs	r6, r3, r2
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e72b      	b.n	8005a52 <_dtoa_r+0x71a>
 8005bfa:	9b08      	ldr	r3, [sp, #32]
 8005bfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005bfe:	9408      	str	r4, [sp, #32]
 8005c00:	1ae3      	subs	r3, r4, r3
 8005c02:	441a      	add	r2, r3
 8005c04:	9e00      	ldr	r6, [sp, #0]
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	920d      	str	r2, [sp, #52]	@ 0x34
 8005c0a:	2400      	movs	r4, #0
 8005c0c:	e721      	b.n	8005a52 <_dtoa_r+0x71a>
 8005c0e:	9c08      	ldr	r4, [sp, #32]
 8005c10:	9e00      	ldr	r6, [sp, #0]
 8005c12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005c14:	e728      	b.n	8005a68 <_dtoa_r+0x730>
 8005c16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005c1a:	e751      	b.n	8005ac0 <_dtoa_r+0x788>
 8005c1c:	9a08      	ldr	r2, [sp, #32]
 8005c1e:	9902      	ldr	r1, [sp, #8]
 8005c20:	e750      	b.n	8005ac4 <_dtoa_r+0x78c>
 8005c22:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c26:	e751      	b.n	8005acc <_dtoa_r+0x794>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e779      	b.n	8005b20 <_dtoa_r+0x7e8>
 8005c2c:	9b04      	ldr	r3, [sp, #16]
 8005c2e:	e777      	b.n	8005b20 <_dtoa_r+0x7e8>
 8005c30:	2300      	movs	r3, #0
 8005c32:	9308      	str	r3, [sp, #32]
 8005c34:	e779      	b.n	8005b2a <_dtoa_r+0x7f2>
 8005c36:	d093      	beq.n	8005b60 <_dtoa_r+0x828>
 8005c38:	9a00      	ldr	r2, [sp, #0]
 8005c3a:	331c      	adds	r3, #28
 8005c3c:	441a      	add	r2, r3
 8005c3e:	9200      	str	r2, [sp, #0]
 8005c40:	9a06      	ldr	r2, [sp, #24]
 8005c42:	441a      	add	r2, r3
 8005c44:	441e      	add	r6, r3
 8005c46:	9206      	str	r2, [sp, #24]
 8005c48:	e78a      	b.n	8005b60 <_dtoa_r+0x828>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	e7f4      	b.n	8005c38 <_dtoa_r+0x900>
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	46b8      	mov	r8, r7
 8005c54:	dc20      	bgt.n	8005c98 <_dtoa_r+0x960>
 8005c56:	469b      	mov	fp, r3
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	dd1e      	ble.n	8005c9c <_dtoa_r+0x964>
 8005c5e:	f1bb 0f00 	cmp.w	fp, #0
 8005c62:	f47f adb1 	bne.w	80057c8 <_dtoa_r+0x490>
 8005c66:	4621      	mov	r1, r4
 8005c68:	465b      	mov	r3, fp
 8005c6a:	2205      	movs	r2, #5
 8005c6c:	4648      	mov	r0, r9
 8005c6e:	f000 fa95 	bl	800619c <__multadd>
 8005c72:	4601      	mov	r1, r0
 8005c74:	4604      	mov	r4, r0
 8005c76:	9802      	ldr	r0, [sp, #8]
 8005c78:	f000 fca0 	bl	80065bc <__mcmp>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f77f ada3 	ble.w	80057c8 <_dtoa_r+0x490>
 8005c82:	4656      	mov	r6, sl
 8005c84:	2331      	movs	r3, #49	@ 0x31
 8005c86:	f806 3b01 	strb.w	r3, [r6], #1
 8005c8a:	f108 0801 	add.w	r8, r8, #1
 8005c8e:	e59f      	b.n	80057d0 <_dtoa_r+0x498>
 8005c90:	9c03      	ldr	r4, [sp, #12]
 8005c92:	46b8      	mov	r8, r7
 8005c94:	4625      	mov	r5, r4
 8005c96:	e7f4      	b.n	8005c82 <_dtoa_r+0x94a>
 8005c98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8101 	beq.w	8005ea6 <_dtoa_r+0xb6e>
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	dd05      	ble.n	8005cb4 <_dtoa_r+0x97c>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4632      	mov	r2, r6
 8005cac:	4648      	mov	r0, r9
 8005cae:	f000 fc19 	bl	80064e4 <__lshift>
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d05c      	beq.n	8005d74 <_dtoa_r+0xa3c>
 8005cba:	6869      	ldr	r1, [r5, #4]
 8005cbc:	4648      	mov	r0, r9
 8005cbe:	f000 fa0b 	bl	80060d8 <_Balloc>
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	b928      	cbnz	r0, 8005cd2 <_dtoa_r+0x99a>
 8005cc6:	4b82      	ldr	r3, [pc, #520]	@ (8005ed0 <_dtoa_r+0xb98>)
 8005cc8:	4602      	mov	r2, r0
 8005cca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005cce:	f7ff bb4a 	b.w	8005366 <_dtoa_r+0x2e>
 8005cd2:	692a      	ldr	r2, [r5, #16]
 8005cd4:	3202      	adds	r2, #2
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	f105 010c 	add.w	r1, r5, #12
 8005cdc:	300c      	adds	r0, #12
 8005cde:	f7ff fa74 	bl	80051ca <memcpy>
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4648      	mov	r0, r9
 8005ce8:	f000 fbfc 	bl	80064e4 <__lshift>
 8005cec:	f10a 0301 	add.w	r3, sl, #1
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	eb0a 030b 	add.w	r3, sl, fp
 8005cf6:	9308      	str	r3, [sp, #32]
 8005cf8:	9b04      	ldr	r3, [sp, #16]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	462f      	mov	r7, r5
 8005d00:	9306      	str	r3, [sp, #24]
 8005d02:	4605      	mov	r5, r0
 8005d04:	9b00      	ldr	r3, [sp, #0]
 8005d06:	9802      	ldr	r0, [sp, #8]
 8005d08:	4621      	mov	r1, r4
 8005d0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d0e:	f7ff fa89 	bl	8005224 <quorem>
 8005d12:	4603      	mov	r3, r0
 8005d14:	3330      	adds	r3, #48	@ 0x30
 8005d16:	9003      	str	r0, [sp, #12]
 8005d18:	4639      	mov	r1, r7
 8005d1a:	9802      	ldr	r0, [sp, #8]
 8005d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1e:	f000 fc4d 	bl	80065bc <__mcmp>
 8005d22:	462a      	mov	r2, r5
 8005d24:	9004      	str	r0, [sp, #16]
 8005d26:	4621      	mov	r1, r4
 8005d28:	4648      	mov	r0, r9
 8005d2a:	f000 fc63 	bl	80065f4 <__mdiff>
 8005d2e:	68c2      	ldr	r2, [r0, #12]
 8005d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d32:	4606      	mov	r6, r0
 8005d34:	bb02      	cbnz	r2, 8005d78 <_dtoa_r+0xa40>
 8005d36:	4601      	mov	r1, r0
 8005d38:	9802      	ldr	r0, [sp, #8]
 8005d3a:	f000 fc3f 	bl	80065bc <__mcmp>
 8005d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d40:	4602      	mov	r2, r0
 8005d42:	4631      	mov	r1, r6
 8005d44:	4648      	mov	r0, r9
 8005d46:	920c      	str	r2, [sp, #48]	@ 0x30
 8005d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d4a:	f000 fa05 	bl	8006158 <_Bfree>
 8005d4e:	9b07      	ldr	r3, [sp, #28]
 8005d50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005d52:	9e00      	ldr	r6, [sp, #0]
 8005d54:	ea42 0103 	orr.w	r1, r2, r3
 8005d58:	9b06      	ldr	r3, [sp, #24]
 8005d5a:	4319      	orrs	r1, r3
 8005d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d5e:	d10d      	bne.n	8005d7c <_dtoa_r+0xa44>
 8005d60:	2b39      	cmp	r3, #57	@ 0x39
 8005d62:	d027      	beq.n	8005db4 <_dtoa_r+0xa7c>
 8005d64:	9a04      	ldr	r2, [sp, #16]
 8005d66:	2a00      	cmp	r2, #0
 8005d68:	dd01      	ble.n	8005d6e <_dtoa_r+0xa36>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	3331      	adds	r3, #49	@ 0x31
 8005d6e:	f88b 3000 	strb.w	r3, [fp]
 8005d72:	e52e      	b.n	80057d2 <_dtoa_r+0x49a>
 8005d74:	4628      	mov	r0, r5
 8005d76:	e7b9      	b.n	8005cec <_dtoa_r+0x9b4>
 8005d78:	2201      	movs	r2, #1
 8005d7a:	e7e2      	b.n	8005d42 <_dtoa_r+0xa0a>
 8005d7c:	9904      	ldr	r1, [sp, #16]
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	db04      	blt.n	8005d8c <_dtoa_r+0xa54>
 8005d82:	9807      	ldr	r0, [sp, #28]
 8005d84:	4301      	orrs	r1, r0
 8005d86:	9806      	ldr	r0, [sp, #24]
 8005d88:	4301      	orrs	r1, r0
 8005d8a:	d120      	bne.n	8005dce <_dtoa_r+0xa96>
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	ddee      	ble.n	8005d6e <_dtoa_r+0xa36>
 8005d90:	9902      	ldr	r1, [sp, #8]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	4648      	mov	r0, r9
 8005d98:	f000 fba4 	bl	80064e4 <__lshift>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	9002      	str	r0, [sp, #8]
 8005da0:	f000 fc0c 	bl	80065bc <__mcmp>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	9b00      	ldr	r3, [sp, #0]
 8005da8:	dc02      	bgt.n	8005db0 <_dtoa_r+0xa78>
 8005daa:	d1e0      	bne.n	8005d6e <_dtoa_r+0xa36>
 8005dac:	07da      	lsls	r2, r3, #31
 8005dae:	d5de      	bpl.n	8005d6e <_dtoa_r+0xa36>
 8005db0:	2b39      	cmp	r3, #57	@ 0x39
 8005db2:	d1da      	bne.n	8005d6a <_dtoa_r+0xa32>
 8005db4:	2339      	movs	r3, #57	@ 0x39
 8005db6:	f88b 3000 	strb.w	r3, [fp]
 8005dba:	4633      	mov	r3, r6
 8005dbc:	461e      	mov	r6, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005dc4:	2a39      	cmp	r2, #57	@ 0x39
 8005dc6:	d04e      	beq.n	8005e66 <_dtoa_r+0xb2e>
 8005dc8:	3201      	adds	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e501      	b.n	80057d2 <_dtoa_r+0x49a>
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	dd03      	ble.n	8005dda <_dtoa_r+0xaa2>
 8005dd2:	2b39      	cmp	r3, #57	@ 0x39
 8005dd4:	d0ee      	beq.n	8005db4 <_dtoa_r+0xa7c>
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e7c9      	b.n	8005d6e <_dtoa_r+0xa36>
 8005dda:	9a00      	ldr	r2, [sp, #0]
 8005ddc:	9908      	ldr	r1, [sp, #32]
 8005dde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005de2:	428a      	cmp	r2, r1
 8005de4:	d028      	beq.n	8005e38 <_dtoa_r+0xb00>
 8005de6:	9902      	ldr	r1, [sp, #8]
 8005de8:	2300      	movs	r3, #0
 8005dea:	220a      	movs	r2, #10
 8005dec:	4648      	mov	r0, r9
 8005dee:	f000 f9d5 	bl	800619c <__multadd>
 8005df2:	42af      	cmp	r7, r5
 8005df4:	9002      	str	r0, [sp, #8]
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	f04f 020a 	mov.w	r2, #10
 8005dfe:	4639      	mov	r1, r7
 8005e00:	4648      	mov	r0, r9
 8005e02:	d107      	bne.n	8005e14 <_dtoa_r+0xadc>
 8005e04:	f000 f9ca 	bl	800619c <__multadd>
 8005e08:	4607      	mov	r7, r0
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	9b00      	ldr	r3, [sp, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	e777      	b.n	8005d04 <_dtoa_r+0x9cc>
 8005e14:	f000 f9c2 	bl	800619c <__multadd>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	220a      	movs	r2, #10
 8005e20:	4648      	mov	r0, r9
 8005e22:	f000 f9bb 	bl	800619c <__multadd>
 8005e26:	4605      	mov	r5, r0
 8005e28:	e7f0      	b.n	8005e0c <_dtoa_r+0xad4>
 8005e2a:	f1bb 0f00 	cmp.w	fp, #0
 8005e2e:	bfcc      	ite	gt
 8005e30:	465e      	movgt	r6, fp
 8005e32:	2601      	movle	r6, #1
 8005e34:	4456      	add	r6, sl
 8005e36:	2700      	movs	r7, #0
 8005e38:	9902      	ldr	r1, [sp, #8]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4648      	mov	r0, r9
 8005e40:	f000 fb50 	bl	80064e4 <__lshift>
 8005e44:	4621      	mov	r1, r4
 8005e46:	9002      	str	r0, [sp, #8]
 8005e48:	f000 fbb8 	bl	80065bc <__mcmp>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	dcb4      	bgt.n	8005dba <_dtoa_r+0xa82>
 8005e50:	d102      	bne.n	8005e58 <_dtoa_r+0xb20>
 8005e52:	9b00      	ldr	r3, [sp, #0]
 8005e54:	07db      	lsls	r3, r3, #31
 8005e56:	d4b0      	bmi.n	8005dba <_dtoa_r+0xa82>
 8005e58:	4633      	mov	r3, r6
 8005e5a:	461e      	mov	r6, r3
 8005e5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e60:	2a30      	cmp	r2, #48	@ 0x30
 8005e62:	d0fa      	beq.n	8005e5a <_dtoa_r+0xb22>
 8005e64:	e4b5      	b.n	80057d2 <_dtoa_r+0x49a>
 8005e66:	459a      	cmp	sl, r3
 8005e68:	d1a8      	bne.n	8005dbc <_dtoa_r+0xa84>
 8005e6a:	2331      	movs	r3, #49	@ 0x31
 8005e6c:	f108 0801 	add.w	r8, r8, #1
 8005e70:	f88a 3000 	strb.w	r3, [sl]
 8005e74:	e4ad      	b.n	80057d2 <_dtoa_r+0x49a>
 8005e76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005ed4 <_dtoa_r+0xb9c>
 8005e7c:	b11b      	cbz	r3, 8005e86 <_dtoa_r+0xb4e>
 8005e7e:	f10a 0308 	add.w	r3, sl, #8
 8005e82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4650      	mov	r0, sl
 8005e88:	b017      	add	sp, #92	@ 0x5c
 8005e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8e:	9b07      	ldr	r3, [sp, #28]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	f77f ae2e 	ble.w	8005af2 <_dtoa_r+0x7ba>
 8005e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e98:	9308      	str	r3, [sp, #32]
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	e64d      	b.n	8005b3a <_dtoa_r+0x802>
 8005e9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ea2:	f77f aed9 	ble.w	8005c58 <_dtoa_r+0x920>
 8005ea6:	4656      	mov	r6, sl
 8005ea8:	9802      	ldr	r0, [sp, #8]
 8005eaa:	4621      	mov	r1, r4
 8005eac:	f7ff f9ba 	bl	8005224 <quorem>
 8005eb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005eb4:	f806 3b01 	strb.w	r3, [r6], #1
 8005eb8:	eba6 020a 	sub.w	r2, r6, sl
 8005ebc:	4593      	cmp	fp, r2
 8005ebe:	ddb4      	ble.n	8005e2a <_dtoa_r+0xaf2>
 8005ec0:	9902      	ldr	r1, [sp, #8]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	220a      	movs	r2, #10
 8005ec6:	4648      	mov	r0, r9
 8005ec8:	f000 f968 	bl	800619c <__multadd>
 8005ecc:	9002      	str	r0, [sp, #8]
 8005ece:	e7eb      	b.n	8005ea8 <_dtoa_r+0xb70>
 8005ed0:	08008688 	.word	0x08008688
 8005ed4:	08008623 	.word	0x08008623

08005ed8 <_free_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4605      	mov	r5, r0
 8005edc:	2900      	cmp	r1, #0
 8005ede:	d041      	beq.n	8005f64 <_free_r+0x8c>
 8005ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee4:	1f0c      	subs	r4, r1, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb8      	it	lt
 8005eea:	18e4      	addlt	r4, r4, r3
 8005eec:	f000 f8e8 	bl	80060c0 <__malloc_lock>
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f68 <_free_r+0x90>)
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	b933      	cbnz	r3, 8005f04 <_free_r+0x2c>
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	6014      	str	r4, [r2, #0]
 8005efa:	4628      	mov	r0, r5
 8005efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f00:	f000 b8e4 	b.w	80060cc <__malloc_unlock>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d908      	bls.n	8005f1a <_free_r+0x42>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	1821      	adds	r1, r4, r0
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	bf01      	itttt	eq
 8005f10:	6819      	ldreq	r1, [r3, #0]
 8005f12:	685b      	ldreq	r3, [r3, #4]
 8005f14:	1809      	addeq	r1, r1, r0
 8005f16:	6021      	streq	r1, [r4, #0]
 8005f18:	e7ed      	b.n	8005ef6 <_free_r+0x1e>
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b10b      	cbz	r3, 8005f24 <_free_r+0x4c>
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d9fa      	bls.n	8005f1a <_free_r+0x42>
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	1850      	adds	r0, r2, r1
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d10b      	bne.n	8005f44 <_free_r+0x6c>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	4401      	add	r1, r0
 8005f30:	1850      	adds	r0, r2, r1
 8005f32:	4283      	cmp	r3, r0
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	d1e0      	bne.n	8005efa <_free_r+0x22>
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	6053      	str	r3, [r2, #4]
 8005f3e:	4408      	add	r0, r1
 8005f40:	6010      	str	r0, [r2, #0]
 8005f42:	e7da      	b.n	8005efa <_free_r+0x22>
 8005f44:	d902      	bls.n	8005f4c <_free_r+0x74>
 8005f46:	230c      	movs	r3, #12
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	e7d6      	b.n	8005efa <_free_r+0x22>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf04      	itt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	bf04      	itt	eq
 8005f5c:	1809      	addeq	r1, r1, r0
 8005f5e:	6021      	streq	r1, [r4, #0]
 8005f60:	6054      	str	r4, [r2, #4]
 8005f62:	e7ca      	b.n	8005efa <_free_r+0x22>
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	200003a8 	.word	0x200003a8

08005f6c <malloc>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	@ (8005f78 <malloc+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f000 b825 	b.w	8005fc0 <_malloc_r>
 8005f76:	bf00      	nop
 8005f78:	20000038 	.word	0x20000038

08005f7c <sbrk_aligned>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005fbc <sbrk_aligned+0x40>)
 8005f80:	460c      	mov	r4, r1
 8005f82:	6831      	ldr	r1, [r6, #0]
 8005f84:	4605      	mov	r5, r0
 8005f86:	b911      	cbnz	r1, 8005f8e <sbrk_aligned+0x12>
 8005f88:	f001 f826 	bl	8006fd8 <_sbrk_r>
 8005f8c:	6030      	str	r0, [r6, #0]
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4628      	mov	r0, r5
 8005f92:	f001 f821 	bl	8006fd8 <_sbrk_r>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d103      	bne.n	8005fa2 <sbrk_aligned+0x26>
 8005f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	1cc4      	adds	r4, r0, #3
 8005fa4:	f024 0403 	bic.w	r4, r4, #3
 8005fa8:	42a0      	cmp	r0, r4
 8005faa:	d0f8      	beq.n	8005f9e <sbrk_aligned+0x22>
 8005fac:	1a21      	subs	r1, r4, r0
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f001 f812 	bl	8006fd8 <_sbrk_r>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d1f2      	bne.n	8005f9e <sbrk_aligned+0x22>
 8005fb8:	e7ef      	b.n	8005f9a <sbrk_aligned+0x1e>
 8005fba:	bf00      	nop
 8005fbc:	200003a4 	.word	0x200003a4

08005fc0 <_malloc_r>:
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	1ccd      	adds	r5, r1, #3
 8005fc6:	f025 0503 	bic.w	r5, r5, #3
 8005fca:	3508      	adds	r5, #8
 8005fcc:	2d0c      	cmp	r5, #12
 8005fce:	bf38      	it	cc
 8005fd0:	250c      	movcc	r5, #12
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	db01      	blt.n	8005fdc <_malloc_r+0x1c>
 8005fd8:	42a9      	cmp	r1, r5
 8005fda:	d904      	bls.n	8005fe6 <_malloc_r+0x26>
 8005fdc:	230c      	movs	r3, #12
 8005fde:	6033      	str	r3, [r6, #0]
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060bc <_malloc_r+0xfc>
 8005fea:	f000 f869 	bl	80060c0 <__malloc_lock>
 8005fee:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff2:	461c      	mov	r4, r3
 8005ff4:	bb44      	cbnz	r4, 8006048 <_malloc_r+0x88>
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f7ff ffbf 	bl	8005f7c <sbrk_aligned>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	4604      	mov	r4, r0
 8006002:	d158      	bne.n	80060b6 <_malloc_r+0xf6>
 8006004:	f8d8 4000 	ldr.w	r4, [r8]
 8006008:	4627      	mov	r7, r4
 800600a:	2f00      	cmp	r7, #0
 800600c:	d143      	bne.n	8006096 <_malloc_r+0xd6>
 800600e:	2c00      	cmp	r4, #0
 8006010:	d04b      	beq.n	80060aa <_malloc_r+0xea>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	4639      	mov	r1, r7
 8006016:	4630      	mov	r0, r6
 8006018:	eb04 0903 	add.w	r9, r4, r3
 800601c:	f000 ffdc 	bl	8006fd8 <_sbrk_r>
 8006020:	4581      	cmp	r9, r0
 8006022:	d142      	bne.n	80060aa <_malloc_r+0xea>
 8006024:	6821      	ldr	r1, [r4, #0]
 8006026:	1a6d      	subs	r5, r5, r1
 8006028:	4629      	mov	r1, r5
 800602a:	4630      	mov	r0, r6
 800602c:	f7ff ffa6 	bl	8005f7c <sbrk_aligned>
 8006030:	3001      	adds	r0, #1
 8006032:	d03a      	beq.n	80060aa <_malloc_r+0xea>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	442b      	add	r3, r5
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	f8d8 3000 	ldr.w	r3, [r8]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	bb62      	cbnz	r2, 800609c <_malloc_r+0xdc>
 8006042:	f8c8 7000 	str.w	r7, [r8]
 8006046:	e00f      	b.n	8006068 <_malloc_r+0xa8>
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	1b52      	subs	r2, r2, r5
 800604c:	d420      	bmi.n	8006090 <_malloc_r+0xd0>
 800604e:	2a0b      	cmp	r2, #11
 8006050:	d917      	bls.n	8006082 <_malloc_r+0xc2>
 8006052:	1961      	adds	r1, r4, r5
 8006054:	42a3      	cmp	r3, r4
 8006056:	6025      	str	r5, [r4, #0]
 8006058:	bf18      	it	ne
 800605a:	6059      	strne	r1, [r3, #4]
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	bf08      	it	eq
 8006060:	f8c8 1000 	streq.w	r1, [r8]
 8006064:	5162      	str	r2, [r4, r5]
 8006066:	604b      	str	r3, [r1, #4]
 8006068:	4630      	mov	r0, r6
 800606a:	f000 f82f 	bl	80060cc <__malloc_unlock>
 800606e:	f104 000b 	add.w	r0, r4, #11
 8006072:	1d23      	adds	r3, r4, #4
 8006074:	f020 0007 	bic.w	r0, r0, #7
 8006078:	1ac2      	subs	r2, r0, r3
 800607a:	bf1c      	itt	ne
 800607c:	1a1b      	subne	r3, r3, r0
 800607e:	50a3      	strne	r3, [r4, r2]
 8006080:	e7af      	b.n	8005fe2 <_malloc_r+0x22>
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	42a3      	cmp	r3, r4
 8006086:	bf0c      	ite	eq
 8006088:	f8c8 2000 	streq.w	r2, [r8]
 800608c:	605a      	strne	r2, [r3, #4]
 800608e:	e7eb      	b.n	8006068 <_malloc_r+0xa8>
 8006090:	4623      	mov	r3, r4
 8006092:	6864      	ldr	r4, [r4, #4]
 8006094:	e7ae      	b.n	8005ff4 <_malloc_r+0x34>
 8006096:	463c      	mov	r4, r7
 8006098:	687f      	ldr	r7, [r7, #4]
 800609a:	e7b6      	b.n	800600a <_malloc_r+0x4a>
 800609c:	461a      	mov	r2, r3
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d1fb      	bne.n	800609c <_malloc_r+0xdc>
 80060a4:	2300      	movs	r3, #0
 80060a6:	6053      	str	r3, [r2, #4]
 80060a8:	e7de      	b.n	8006068 <_malloc_r+0xa8>
 80060aa:	230c      	movs	r3, #12
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	4630      	mov	r0, r6
 80060b0:	f000 f80c 	bl	80060cc <__malloc_unlock>
 80060b4:	e794      	b.n	8005fe0 <_malloc_r+0x20>
 80060b6:	6005      	str	r5, [r0, #0]
 80060b8:	e7d6      	b.n	8006068 <_malloc_r+0xa8>
 80060ba:	bf00      	nop
 80060bc:	200003a8 	.word	0x200003a8

080060c0 <__malloc_lock>:
 80060c0:	4801      	ldr	r0, [pc, #4]	@ (80060c8 <__malloc_lock+0x8>)
 80060c2:	f7ff b880 	b.w	80051c6 <__retarget_lock_acquire_recursive>
 80060c6:	bf00      	nop
 80060c8:	200003a0 	.word	0x200003a0

080060cc <__malloc_unlock>:
 80060cc:	4801      	ldr	r0, [pc, #4]	@ (80060d4 <__malloc_unlock+0x8>)
 80060ce:	f7ff b87b 	b.w	80051c8 <__retarget_lock_release_recursive>
 80060d2:	bf00      	nop
 80060d4:	200003a0 	.word	0x200003a0

080060d8 <_Balloc>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	69c6      	ldr	r6, [r0, #28]
 80060dc:	4604      	mov	r4, r0
 80060de:	460d      	mov	r5, r1
 80060e0:	b976      	cbnz	r6, 8006100 <_Balloc+0x28>
 80060e2:	2010      	movs	r0, #16
 80060e4:	f7ff ff42 	bl	8005f6c <malloc>
 80060e8:	4602      	mov	r2, r0
 80060ea:	61e0      	str	r0, [r4, #28]
 80060ec:	b920      	cbnz	r0, 80060f8 <_Balloc+0x20>
 80060ee:	4b18      	ldr	r3, [pc, #96]	@ (8006150 <_Balloc+0x78>)
 80060f0:	4818      	ldr	r0, [pc, #96]	@ (8006154 <_Balloc+0x7c>)
 80060f2:	216b      	movs	r1, #107	@ 0x6b
 80060f4:	f7ff f878 	bl	80051e8 <__assert_func>
 80060f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060fc:	6006      	str	r6, [r0, #0]
 80060fe:	60c6      	str	r6, [r0, #12]
 8006100:	69e6      	ldr	r6, [r4, #28]
 8006102:	68f3      	ldr	r3, [r6, #12]
 8006104:	b183      	cbz	r3, 8006128 <_Balloc+0x50>
 8006106:	69e3      	ldr	r3, [r4, #28]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800610e:	b9b8      	cbnz	r0, 8006140 <_Balloc+0x68>
 8006110:	2101      	movs	r1, #1
 8006112:	fa01 f605 	lsl.w	r6, r1, r5
 8006116:	1d72      	adds	r2, r6, #5
 8006118:	0092      	lsls	r2, r2, #2
 800611a:	4620      	mov	r0, r4
 800611c:	f000 ff73 	bl	8007006 <_calloc_r>
 8006120:	b160      	cbz	r0, 800613c <_Balloc+0x64>
 8006122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006126:	e00e      	b.n	8006146 <_Balloc+0x6e>
 8006128:	2221      	movs	r2, #33	@ 0x21
 800612a:	2104      	movs	r1, #4
 800612c:	4620      	mov	r0, r4
 800612e:	f000 ff6a 	bl	8007006 <_calloc_r>
 8006132:	69e3      	ldr	r3, [r4, #28]
 8006134:	60f0      	str	r0, [r6, #12]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e4      	bne.n	8006106 <_Balloc+0x2e>
 800613c:	2000      	movs	r0, #0
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	6802      	ldr	r2, [r0, #0]
 8006142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006146:	2300      	movs	r3, #0
 8006148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800614c:	e7f7      	b.n	800613e <_Balloc+0x66>
 800614e:	bf00      	nop
 8006150:	08008544 	.word	0x08008544
 8006154:	08008699 	.word	0x08008699

08006158 <_Bfree>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	69c6      	ldr	r6, [r0, #28]
 800615c:	4605      	mov	r5, r0
 800615e:	460c      	mov	r4, r1
 8006160:	b976      	cbnz	r6, 8006180 <_Bfree+0x28>
 8006162:	2010      	movs	r0, #16
 8006164:	f7ff ff02 	bl	8005f6c <malloc>
 8006168:	4602      	mov	r2, r0
 800616a:	61e8      	str	r0, [r5, #28]
 800616c:	b920      	cbnz	r0, 8006178 <_Bfree+0x20>
 800616e:	4b09      	ldr	r3, [pc, #36]	@ (8006194 <_Bfree+0x3c>)
 8006170:	4809      	ldr	r0, [pc, #36]	@ (8006198 <_Bfree+0x40>)
 8006172:	218f      	movs	r1, #143	@ 0x8f
 8006174:	f7ff f838 	bl	80051e8 <__assert_func>
 8006178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800617c:	6006      	str	r6, [r0, #0]
 800617e:	60c6      	str	r6, [r0, #12]
 8006180:	b13c      	cbz	r4, 8006192 <_Bfree+0x3a>
 8006182:	69eb      	ldr	r3, [r5, #28]
 8006184:	6862      	ldr	r2, [r4, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800618c:	6021      	str	r1, [r4, #0]
 800618e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	08008544 	.word	0x08008544
 8006198:	08008699 	.word	0x08008699

0800619c <__multadd>:
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	690d      	ldr	r5, [r1, #16]
 80061a2:	4607      	mov	r7, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	461e      	mov	r6, r3
 80061a8:	f101 0c14 	add.w	ip, r1, #20
 80061ac:	2000      	movs	r0, #0
 80061ae:	f8dc 3000 	ldr.w	r3, [ip]
 80061b2:	b299      	uxth	r1, r3
 80061b4:	fb02 6101 	mla	r1, r2, r1, r6
 80061b8:	0c1e      	lsrs	r6, r3, #16
 80061ba:	0c0b      	lsrs	r3, r1, #16
 80061bc:	fb02 3306 	mla	r3, r2, r6, r3
 80061c0:	b289      	uxth	r1, r1
 80061c2:	3001      	adds	r0, #1
 80061c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061c8:	4285      	cmp	r5, r0
 80061ca:	f84c 1b04 	str.w	r1, [ip], #4
 80061ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061d2:	dcec      	bgt.n	80061ae <__multadd+0x12>
 80061d4:	b30e      	cbz	r6, 800621a <__multadd+0x7e>
 80061d6:	68a3      	ldr	r3, [r4, #8]
 80061d8:	42ab      	cmp	r3, r5
 80061da:	dc19      	bgt.n	8006210 <__multadd+0x74>
 80061dc:	6861      	ldr	r1, [r4, #4]
 80061de:	4638      	mov	r0, r7
 80061e0:	3101      	adds	r1, #1
 80061e2:	f7ff ff79 	bl	80060d8 <_Balloc>
 80061e6:	4680      	mov	r8, r0
 80061e8:	b928      	cbnz	r0, 80061f6 <__multadd+0x5a>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006220 <__multadd+0x84>)
 80061ee:	480d      	ldr	r0, [pc, #52]	@ (8006224 <__multadd+0x88>)
 80061f0:	21ba      	movs	r1, #186	@ 0xba
 80061f2:	f7fe fff9 	bl	80051e8 <__assert_func>
 80061f6:	6922      	ldr	r2, [r4, #16]
 80061f8:	3202      	adds	r2, #2
 80061fa:	f104 010c 	add.w	r1, r4, #12
 80061fe:	0092      	lsls	r2, r2, #2
 8006200:	300c      	adds	r0, #12
 8006202:	f7fe ffe2 	bl	80051ca <memcpy>
 8006206:	4621      	mov	r1, r4
 8006208:	4638      	mov	r0, r7
 800620a:	f7ff ffa5 	bl	8006158 <_Bfree>
 800620e:	4644      	mov	r4, r8
 8006210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006214:	3501      	adds	r5, #1
 8006216:	615e      	str	r6, [r3, #20]
 8006218:	6125      	str	r5, [r4, #16]
 800621a:	4620      	mov	r0, r4
 800621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006220:	08008688 	.word	0x08008688
 8006224:	08008699 	.word	0x08008699

08006228 <__hi0bits>:
 8006228:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800622c:	4603      	mov	r3, r0
 800622e:	bf36      	itet	cc
 8006230:	0403      	lslcc	r3, r0, #16
 8006232:	2000      	movcs	r0, #0
 8006234:	2010      	movcc	r0, #16
 8006236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800623a:	bf3c      	itt	cc
 800623c:	021b      	lslcc	r3, r3, #8
 800623e:	3008      	addcc	r0, #8
 8006240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006244:	bf3c      	itt	cc
 8006246:	011b      	lslcc	r3, r3, #4
 8006248:	3004      	addcc	r0, #4
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624e:	bf3c      	itt	cc
 8006250:	009b      	lslcc	r3, r3, #2
 8006252:	3002      	addcc	r0, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	db05      	blt.n	8006264 <__hi0bits+0x3c>
 8006258:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800625c:	f100 0001 	add.w	r0, r0, #1
 8006260:	bf08      	it	eq
 8006262:	2020      	moveq	r0, #32
 8006264:	4770      	bx	lr

08006266 <__lo0bits>:
 8006266:	6803      	ldr	r3, [r0, #0]
 8006268:	4602      	mov	r2, r0
 800626a:	f013 0007 	ands.w	r0, r3, #7
 800626e:	d00b      	beq.n	8006288 <__lo0bits+0x22>
 8006270:	07d9      	lsls	r1, r3, #31
 8006272:	d421      	bmi.n	80062b8 <__lo0bits+0x52>
 8006274:	0798      	lsls	r0, r3, #30
 8006276:	bf49      	itett	mi
 8006278:	085b      	lsrmi	r3, r3, #1
 800627a:	089b      	lsrpl	r3, r3, #2
 800627c:	2001      	movmi	r0, #1
 800627e:	6013      	strmi	r3, [r2, #0]
 8006280:	bf5c      	itt	pl
 8006282:	6013      	strpl	r3, [r2, #0]
 8006284:	2002      	movpl	r0, #2
 8006286:	4770      	bx	lr
 8006288:	b299      	uxth	r1, r3
 800628a:	b909      	cbnz	r1, 8006290 <__lo0bits+0x2a>
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	2010      	movs	r0, #16
 8006290:	b2d9      	uxtb	r1, r3
 8006292:	b909      	cbnz	r1, 8006298 <__lo0bits+0x32>
 8006294:	3008      	adds	r0, #8
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	0719      	lsls	r1, r3, #28
 800629a:	bf04      	itt	eq
 800629c:	091b      	lsreq	r3, r3, #4
 800629e:	3004      	addeq	r0, #4
 80062a0:	0799      	lsls	r1, r3, #30
 80062a2:	bf04      	itt	eq
 80062a4:	089b      	lsreq	r3, r3, #2
 80062a6:	3002      	addeq	r0, #2
 80062a8:	07d9      	lsls	r1, r3, #31
 80062aa:	d403      	bmi.n	80062b4 <__lo0bits+0x4e>
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	f100 0001 	add.w	r0, r0, #1
 80062b2:	d003      	beq.n	80062bc <__lo0bits+0x56>
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	4770      	bx	lr
 80062b8:	2000      	movs	r0, #0
 80062ba:	4770      	bx	lr
 80062bc:	2020      	movs	r0, #32
 80062be:	4770      	bx	lr

080062c0 <__i2b>:
 80062c0:	b510      	push	{r4, lr}
 80062c2:	460c      	mov	r4, r1
 80062c4:	2101      	movs	r1, #1
 80062c6:	f7ff ff07 	bl	80060d8 <_Balloc>
 80062ca:	4602      	mov	r2, r0
 80062cc:	b928      	cbnz	r0, 80062da <__i2b+0x1a>
 80062ce:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <__i2b+0x24>)
 80062d0:	4805      	ldr	r0, [pc, #20]	@ (80062e8 <__i2b+0x28>)
 80062d2:	f240 1145 	movw	r1, #325	@ 0x145
 80062d6:	f7fe ff87 	bl	80051e8 <__assert_func>
 80062da:	2301      	movs	r3, #1
 80062dc:	6144      	str	r4, [r0, #20]
 80062de:	6103      	str	r3, [r0, #16]
 80062e0:	bd10      	pop	{r4, pc}
 80062e2:	bf00      	nop
 80062e4:	08008688 	.word	0x08008688
 80062e8:	08008699 	.word	0x08008699

080062ec <__multiply>:
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f0:	4617      	mov	r7, r2
 80062f2:	690a      	ldr	r2, [r1, #16]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	bfa8      	it	ge
 80062fa:	463b      	movge	r3, r7
 80062fc:	4689      	mov	r9, r1
 80062fe:	bfa4      	itt	ge
 8006300:	460f      	movge	r7, r1
 8006302:	4699      	movge	r9, r3
 8006304:	693d      	ldr	r5, [r7, #16]
 8006306:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	eb05 060a 	add.w	r6, r5, sl
 8006312:	42b3      	cmp	r3, r6
 8006314:	b085      	sub	sp, #20
 8006316:	bfb8      	it	lt
 8006318:	3101      	addlt	r1, #1
 800631a:	f7ff fedd 	bl	80060d8 <_Balloc>
 800631e:	b930      	cbnz	r0, 800632e <__multiply+0x42>
 8006320:	4602      	mov	r2, r0
 8006322:	4b41      	ldr	r3, [pc, #260]	@ (8006428 <__multiply+0x13c>)
 8006324:	4841      	ldr	r0, [pc, #260]	@ (800642c <__multiply+0x140>)
 8006326:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800632a:	f7fe ff5d 	bl	80051e8 <__assert_func>
 800632e:	f100 0414 	add.w	r4, r0, #20
 8006332:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006336:	4623      	mov	r3, r4
 8006338:	2200      	movs	r2, #0
 800633a:	4573      	cmp	r3, lr
 800633c:	d320      	bcc.n	8006380 <__multiply+0x94>
 800633e:	f107 0814 	add.w	r8, r7, #20
 8006342:	f109 0114 	add.w	r1, r9, #20
 8006346:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800634a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800634e:	9302      	str	r3, [sp, #8]
 8006350:	1beb      	subs	r3, r5, r7
 8006352:	3b15      	subs	r3, #21
 8006354:	f023 0303 	bic.w	r3, r3, #3
 8006358:	3304      	adds	r3, #4
 800635a:	3715      	adds	r7, #21
 800635c:	42bd      	cmp	r5, r7
 800635e:	bf38      	it	cc
 8006360:	2304      	movcc	r3, #4
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	9b02      	ldr	r3, [sp, #8]
 8006366:	9103      	str	r1, [sp, #12]
 8006368:	428b      	cmp	r3, r1
 800636a:	d80c      	bhi.n	8006386 <__multiply+0x9a>
 800636c:	2e00      	cmp	r6, #0
 800636e:	dd03      	ble.n	8006378 <__multiply+0x8c>
 8006370:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006374:	2b00      	cmp	r3, #0
 8006376:	d055      	beq.n	8006424 <__multiply+0x138>
 8006378:	6106      	str	r6, [r0, #16]
 800637a:	b005      	add	sp, #20
 800637c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006380:	f843 2b04 	str.w	r2, [r3], #4
 8006384:	e7d9      	b.n	800633a <__multiply+0x4e>
 8006386:	f8b1 a000 	ldrh.w	sl, [r1]
 800638a:	f1ba 0f00 	cmp.w	sl, #0
 800638e:	d01f      	beq.n	80063d0 <__multiply+0xe4>
 8006390:	46c4      	mov	ip, r8
 8006392:	46a1      	mov	r9, r4
 8006394:	2700      	movs	r7, #0
 8006396:	f85c 2b04 	ldr.w	r2, [ip], #4
 800639a:	f8d9 3000 	ldr.w	r3, [r9]
 800639e:	fa1f fb82 	uxth.w	fp, r2
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80063a8:	443b      	add	r3, r7
 80063aa:	f8d9 7000 	ldr.w	r7, [r9]
 80063ae:	0c12      	lsrs	r2, r2, #16
 80063b0:	0c3f      	lsrs	r7, r7, #16
 80063b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80063b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063c0:	4565      	cmp	r5, ip
 80063c2:	f849 3b04 	str.w	r3, [r9], #4
 80063c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80063ca:	d8e4      	bhi.n	8006396 <__multiply+0xaa>
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	50e7      	str	r7, [r4, r3]
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80063d6:	3104      	adds	r1, #4
 80063d8:	f1b9 0f00 	cmp.w	r9, #0
 80063dc:	d020      	beq.n	8006420 <__multiply+0x134>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	4647      	mov	r7, r8
 80063e2:	46a4      	mov	ip, r4
 80063e4:	f04f 0a00 	mov.w	sl, #0
 80063e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80063ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80063f0:	fb09 220b 	mla	r2, r9, fp, r2
 80063f4:	4452      	add	r2, sl
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fc:	f84c 3b04 	str.w	r3, [ip], #4
 8006400:	f857 3b04 	ldr.w	r3, [r7], #4
 8006404:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006408:	f8bc 3000 	ldrh.w	r3, [ip]
 800640c:	fb09 330a 	mla	r3, r9, sl, r3
 8006410:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006414:	42bd      	cmp	r5, r7
 8006416:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800641a:	d8e5      	bhi.n	80063e8 <__multiply+0xfc>
 800641c:	9a01      	ldr	r2, [sp, #4]
 800641e:	50a3      	str	r3, [r4, r2]
 8006420:	3404      	adds	r4, #4
 8006422:	e79f      	b.n	8006364 <__multiply+0x78>
 8006424:	3e01      	subs	r6, #1
 8006426:	e7a1      	b.n	800636c <__multiply+0x80>
 8006428:	08008688 	.word	0x08008688
 800642c:	08008699 	.word	0x08008699

08006430 <__pow5mult>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	4615      	mov	r5, r2
 8006436:	f012 0203 	ands.w	r2, r2, #3
 800643a:	4607      	mov	r7, r0
 800643c:	460e      	mov	r6, r1
 800643e:	d007      	beq.n	8006450 <__pow5mult+0x20>
 8006440:	4c25      	ldr	r4, [pc, #148]	@ (80064d8 <__pow5mult+0xa8>)
 8006442:	3a01      	subs	r2, #1
 8006444:	2300      	movs	r3, #0
 8006446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800644a:	f7ff fea7 	bl	800619c <__multadd>
 800644e:	4606      	mov	r6, r0
 8006450:	10ad      	asrs	r5, r5, #2
 8006452:	d03d      	beq.n	80064d0 <__pow5mult+0xa0>
 8006454:	69fc      	ldr	r4, [r7, #28]
 8006456:	b97c      	cbnz	r4, 8006478 <__pow5mult+0x48>
 8006458:	2010      	movs	r0, #16
 800645a:	f7ff fd87 	bl	8005f6c <malloc>
 800645e:	4602      	mov	r2, r0
 8006460:	61f8      	str	r0, [r7, #28]
 8006462:	b928      	cbnz	r0, 8006470 <__pow5mult+0x40>
 8006464:	4b1d      	ldr	r3, [pc, #116]	@ (80064dc <__pow5mult+0xac>)
 8006466:	481e      	ldr	r0, [pc, #120]	@ (80064e0 <__pow5mult+0xb0>)
 8006468:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800646c:	f7fe febc 	bl	80051e8 <__assert_func>
 8006470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006474:	6004      	str	r4, [r0, #0]
 8006476:	60c4      	str	r4, [r0, #12]
 8006478:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800647c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006480:	b94c      	cbnz	r4, 8006496 <__pow5mult+0x66>
 8006482:	f240 2171 	movw	r1, #625	@ 0x271
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ff1a 	bl	80062c0 <__i2b>
 800648c:	2300      	movs	r3, #0
 800648e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006492:	4604      	mov	r4, r0
 8006494:	6003      	str	r3, [r0, #0]
 8006496:	f04f 0900 	mov.w	r9, #0
 800649a:	07eb      	lsls	r3, r5, #31
 800649c:	d50a      	bpl.n	80064b4 <__pow5mult+0x84>
 800649e:	4631      	mov	r1, r6
 80064a0:	4622      	mov	r2, r4
 80064a2:	4638      	mov	r0, r7
 80064a4:	f7ff ff22 	bl	80062ec <__multiply>
 80064a8:	4631      	mov	r1, r6
 80064aa:	4680      	mov	r8, r0
 80064ac:	4638      	mov	r0, r7
 80064ae:	f7ff fe53 	bl	8006158 <_Bfree>
 80064b2:	4646      	mov	r6, r8
 80064b4:	106d      	asrs	r5, r5, #1
 80064b6:	d00b      	beq.n	80064d0 <__pow5mult+0xa0>
 80064b8:	6820      	ldr	r0, [r4, #0]
 80064ba:	b938      	cbnz	r0, 80064cc <__pow5mult+0x9c>
 80064bc:	4622      	mov	r2, r4
 80064be:	4621      	mov	r1, r4
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ff13 	bl	80062ec <__multiply>
 80064c6:	6020      	str	r0, [r4, #0]
 80064c8:	f8c0 9000 	str.w	r9, [r0]
 80064cc:	4604      	mov	r4, r0
 80064ce:	e7e4      	b.n	800649a <__pow5mult+0x6a>
 80064d0:	4630      	mov	r0, r6
 80064d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d6:	bf00      	nop
 80064d8:	08008710 	.word	0x08008710
 80064dc:	08008544 	.word	0x08008544
 80064e0:	08008699 	.word	0x08008699

080064e4 <__lshift>:
 80064e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e8:	460c      	mov	r4, r1
 80064ea:	6849      	ldr	r1, [r1, #4]
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064f2:	68a3      	ldr	r3, [r4, #8]
 80064f4:	4607      	mov	r7, r0
 80064f6:	4691      	mov	r9, r2
 80064f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064fc:	f108 0601 	add.w	r6, r8, #1
 8006500:	42b3      	cmp	r3, r6
 8006502:	db0b      	blt.n	800651c <__lshift+0x38>
 8006504:	4638      	mov	r0, r7
 8006506:	f7ff fde7 	bl	80060d8 <_Balloc>
 800650a:	4605      	mov	r5, r0
 800650c:	b948      	cbnz	r0, 8006522 <__lshift+0x3e>
 800650e:	4602      	mov	r2, r0
 8006510:	4b28      	ldr	r3, [pc, #160]	@ (80065b4 <__lshift+0xd0>)
 8006512:	4829      	ldr	r0, [pc, #164]	@ (80065b8 <__lshift+0xd4>)
 8006514:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006518:	f7fe fe66 	bl	80051e8 <__assert_func>
 800651c:	3101      	adds	r1, #1
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	e7ee      	b.n	8006500 <__lshift+0x1c>
 8006522:	2300      	movs	r3, #0
 8006524:	f100 0114 	add.w	r1, r0, #20
 8006528:	f100 0210 	add.w	r2, r0, #16
 800652c:	4618      	mov	r0, r3
 800652e:	4553      	cmp	r3, sl
 8006530:	db33      	blt.n	800659a <__lshift+0xb6>
 8006532:	6920      	ldr	r0, [r4, #16]
 8006534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006538:	f104 0314 	add.w	r3, r4, #20
 800653c:	f019 091f 	ands.w	r9, r9, #31
 8006540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006544:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006548:	d02b      	beq.n	80065a2 <__lshift+0xbe>
 800654a:	f1c9 0e20 	rsb	lr, r9, #32
 800654e:	468a      	mov	sl, r1
 8006550:	2200      	movs	r2, #0
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	fa00 f009 	lsl.w	r0, r0, r9
 8006558:	4310      	orrs	r0, r2
 800655a:	f84a 0b04 	str.w	r0, [sl], #4
 800655e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006562:	459c      	cmp	ip, r3
 8006564:	fa22 f20e 	lsr.w	r2, r2, lr
 8006568:	d8f3      	bhi.n	8006552 <__lshift+0x6e>
 800656a:	ebac 0304 	sub.w	r3, ip, r4
 800656e:	3b15      	subs	r3, #21
 8006570:	f023 0303 	bic.w	r3, r3, #3
 8006574:	3304      	adds	r3, #4
 8006576:	f104 0015 	add.w	r0, r4, #21
 800657a:	4560      	cmp	r0, ip
 800657c:	bf88      	it	hi
 800657e:	2304      	movhi	r3, #4
 8006580:	50ca      	str	r2, [r1, r3]
 8006582:	b10a      	cbz	r2, 8006588 <__lshift+0xa4>
 8006584:	f108 0602 	add.w	r6, r8, #2
 8006588:	3e01      	subs	r6, #1
 800658a:	4638      	mov	r0, r7
 800658c:	612e      	str	r6, [r5, #16]
 800658e:	4621      	mov	r1, r4
 8006590:	f7ff fde2 	bl	8006158 <_Bfree>
 8006594:	4628      	mov	r0, r5
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	f842 0f04 	str.w	r0, [r2, #4]!
 800659e:	3301      	adds	r3, #1
 80065a0:	e7c5      	b.n	800652e <__lshift+0x4a>
 80065a2:	3904      	subs	r1, #4
 80065a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065ac:	459c      	cmp	ip, r3
 80065ae:	d8f9      	bhi.n	80065a4 <__lshift+0xc0>
 80065b0:	e7ea      	b.n	8006588 <__lshift+0xa4>
 80065b2:	bf00      	nop
 80065b4:	08008688 	.word	0x08008688
 80065b8:	08008699 	.word	0x08008699

080065bc <__mcmp>:
 80065bc:	690a      	ldr	r2, [r1, #16]
 80065be:	4603      	mov	r3, r0
 80065c0:	6900      	ldr	r0, [r0, #16]
 80065c2:	1a80      	subs	r0, r0, r2
 80065c4:	b530      	push	{r4, r5, lr}
 80065c6:	d10e      	bne.n	80065e6 <__mcmp+0x2a>
 80065c8:	3314      	adds	r3, #20
 80065ca:	3114      	adds	r1, #20
 80065cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065dc:	4295      	cmp	r5, r2
 80065de:	d003      	beq.n	80065e8 <__mcmp+0x2c>
 80065e0:	d205      	bcs.n	80065ee <__mcmp+0x32>
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	bd30      	pop	{r4, r5, pc}
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	d3f3      	bcc.n	80065d4 <__mcmp+0x18>
 80065ec:	e7fb      	b.n	80065e6 <__mcmp+0x2a>
 80065ee:	2001      	movs	r0, #1
 80065f0:	e7f9      	b.n	80065e6 <__mcmp+0x2a>
	...

080065f4 <__mdiff>:
 80065f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	4689      	mov	r9, r1
 80065fa:	4606      	mov	r6, r0
 80065fc:	4611      	mov	r1, r2
 80065fe:	4648      	mov	r0, r9
 8006600:	4614      	mov	r4, r2
 8006602:	f7ff ffdb 	bl	80065bc <__mcmp>
 8006606:	1e05      	subs	r5, r0, #0
 8006608:	d112      	bne.n	8006630 <__mdiff+0x3c>
 800660a:	4629      	mov	r1, r5
 800660c:	4630      	mov	r0, r6
 800660e:	f7ff fd63 	bl	80060d8 <_Balloc>
 8006612:	4602      	mov	r2, r0
 8006614:	b928      	cbnz	r0, 8006622 <__mdiff+0x2e>
 8006616:	4b3f      	ldr	r3, [pc, #252]	@ (8006714 <__mdiff+0x120>)
 8006618:	f240 2137 	movw	r1, #567	@ 0x237
 800661c:	483e      	ldr	r0, [pc, #248]	@ (8006718 <__mdiff+0x124>)
 800661e:	f7fe fde3 	bl	80051e8 <__assert_func>
 8006622:	2301      	movs	r3, #1
 8006624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006628:	4610      	mov	r0, r2
 800662a:	b003      	add	sp, #12
 800662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006630:	bfbc      	itt	lt
 8006632:	464b      	movlt	r3, r9
 8006634:	46a1      	movlt	r9, r4
 8006636:	4630      	mov	r0, r6
 8006638:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800663c:	bfba      	itte	lt
 800663e:	461c      	movlt	r4, r3
 8006640:	2501      	movlt	r5, #1
 8006642:	2500      	movge	r5, #0
 8006644:	f7ff fd48 	bl	80060d8 <_Balloc>
 8006648:	4602      	mov	r2, r0
 800664a:	b918      	cbnz	r0, 8006654 <__mdiff+0x60>
 800664c:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <__mdiff+0x120>)
 800664e:	f240 2145 	movw	r1, #581	@ 0x245
 8006652:	e7e3      	b.n	800661c <__mdiff+0x28>
 8006654:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006658:	6926      	ldr	r6, [r4, #16]
 800665a:	60c5      	str	r5, [r0, #12]
 800665c:	f109 0310 	add.w	r3, r9, #16
 8006660:	f109 0514 	add.w	r5, r9, #20
 8006664:	f104 0e14 	add.w	lr, r4, #20
 8006668:	f100 0b14 	add.w	fp, r0, #20
 800666c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006670:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	46d9      	mov	r9, fp
 8006678:	f04f 0c00 	mov.w	ip, #0
 800667c:	9b01      	ldr	r3, [sp, #4]
 800667e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006682:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	fa1f f38a 	uxth.w	r3, sl
 800668c:	4619      	mov	r1, r3
 800668e:	b283      	uxth	r3, r0
 8006690:	1acb      	subs	r3, r1, r3
 8006692:	0c00      	lsrs	r0, r0, #16
 8006694:	4463      	add	r3, ip
 8006696:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800669a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066a4:	4576      	cmp	r6, lr
 80066a6:	f849 3b04 	str.w	r3, [r9], #4
 80066aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066ae:	d8e5      	bhi.n	800667c <__mdiff+0x88>
 80066b0:	1b33      	subs	r3, r6, r4
 80066b2:	3b15      	subs	r3, #21
 80066b4:	f023 0303 	bic.w	r3, r3, #3
 80066b8:	3415      	adds	r4, #21
 80066ba:	3304      	adds	r3, #4
 80066bc:	42a6      	cmp	r6, r4
 80066be:	bf38      	it	cc
 80066c0:	2304      	movcc	r3, #4
 80066c2:	441d      	add	r5, r3
 80066c4:	445b      	add	r3, fp
 80066c6:	461e      	mov	r6, r3
 80066c8:	462c      	mov	r4, r5
 80066ca:	4544      	cmp	r4, r8
 80066cc:	d30e      	bcc.n	80066ec <__mdiff+0xf8>
 80066ce:	f108 0103 	add.w	r1, r8, #3
 80066d2:	1b49      	subs	r1, r1, r5
 80066d4:	f021 0103 	bic.w	r1, r1, #3
 80066d8:	3d03      	subs	r5, #3
 80066da:	45a8      	cmp	r8, r5
 80066dc:	bf38      	it	cc
 80066de:	2100      	movcc	r1, #0
 80066e0:	440b      	add	r3, r1
 80066e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066e6:	b191      	cbz	r1, 800670e <__mdiff+0x11a>
 80066e8:	6117      	str	r7, [r2, #16]
 80066ea:	e79d      	b.n	8006628 <__mdiff+0x34>
 80066ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80066f0:	46e6      	mov	lr, ip
 80066f2:	0c08      	lsrs	r0, r1, #16
 80066f4:	fa1c fc81 	uxtah	ip, ip, r1
 80066f8:	4471      	add	r1, lr
 80066fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80066fe:	b289      	uxth	r1, r1
 8006700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006704:	f846 1b04 	str.w	r1, [r6], #4
 8006708:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800670c:	e7dd      	b.n	80066ca <__mdiff+0xd6>
 800670e:	3f01      	subs	r7, #1
 8006710:	e7e7      	b.n	80066e2 <__mdiff+0xee>
 8006712:	bf00      	nop
 8006714:	08008688 	.word	0x08008688
 8006718:	08008699 	.word	0x08008699

0800671c <__d2b>:
 800671c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006720:	460f      	mov	r7, r1
 8006722:	2101      	movs	r1, #1
 8006724:	ec59 8b10 	vmov	r8, r9, d0
 8006728:	4616      	mov	r6, r2
 800672a:	f7ff fcd5 	bl	80060d8 <_Balloc>
 800672e:	4604      	mov	r4, r0
 8006730:	b930      	cbnz	r0, 8006740 <__d2b+0x24>
 8006732:	4602      	mov	r2, r0
 8006734:	4b23      	ldr	r3, [pc, #140]	@ (80067c4 <__d2b+0xa8>)
 8006736:	4824      	ldr	r0, [pc, #144]	@ (80067c8 <__d2b+0xac>)
 8006738:	f240 310f 	movw	r1, #783	@ 0x30f
 800673c:	f7fe fd54 	bl	80051e8 <__assert_func>
 8006740:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006744:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006748:	b10d      	cbz	r5, 800674e <__d2b+0x32>
 800674a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	f1b8 0300 	subs.w	r3, r8, #0
 8006754:	d023      	beq.n	800679e <__d2b+0x82>
 8006756:	4668      	mov	r0, sp
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	f7ff fd84 	bl	8006266 <__lo0bits>
 800675e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006762:	b1d0      	cbz	r0, 800679a <__d2b+0x7e>
 8006764:	f1c0 0320 	rsb	r3, r0, #32
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	430b      	orrs	r3, r1
 800676e:	40c2      	lsrs	r2, r0
 8006770:	6163      	str	r3, [r4, #20]
 8006772:	9201      	str	r2, [sp, #4]
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	61a3      	str	r3, [r4, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf0c      	ite	eq
 800677c:	2201      	moveq	r2, #1
 800677e:	2202      	movne	r2, #2
 8006780:	6122      	str	r2, [r4, #16]
 8006782:	b1a5      	cbz	r5, 80067ae <__d2b+0x92>
 8006784:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006788:	4405      	add	r5, r0
 800678a:	603d      	str	r5, [r7, #0]
 800678c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	4620      	mov	r0, r4
 8006794:	b003      	add	sp, #12
 8006796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800679a:	6161      	str	r1, [r4, #20]
 800679c:	e7ea      	b.n	8006774 <__d2b+0x58>
 800679e:	a801      	add	r0, sp, #4
 80067a0:	f7ff fd61 	bl	8006266 <__lo0bits>
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	6163      	str	r3, [r4, #20]
 80067a8:	3020      	adds	r0, #32
 80067aa:	2201      	movs	r2, #1
 80067ac:	e7e8      	b.n	8006780 <__d2b+0x64>
 80067ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067b6:	6038      	str	r0, [r7, #0]
 80067b8:	6918      	ldr	r0, [r3, #16]
 80067ba:	f7ff fd35 	bl	8006228 <__hi0bits>
 80067be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067c2:	e7e5      	b.n	8006790 <__d2b+0x74>
 80067c4:	08008688 	.word	0x08008688
 80067c8:	08008699 	.word	0x08008699

080067cc <__ssputs_r>:
 80067cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	688e      	ldr	r6, [r1, #8]
 80067d2:	461f      	mov	r7, r3
 80067d4:	42be      	cmp	r6, r7
 80067d6:	680b      	ldr	r3, [r1, #0]
 80067d8:	4682      	mov	sl, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	4690      	mov	r8, r2
 80067de:	d82d      	bhi.n	800683c <__ssputs_r+0x70>
 80067e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80067e8:	d026      	beq.n	8006838 <__ssputs_r+0x6c>
 80067ea:	6965      	ldr	r5, [r4, #20]
 80067ec:	6909      	ldr	r1, [r1, #16]
 80067ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067f2:	eba3 0901 	sub.w	r9, r3, r1
 80067f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067fa:	1c7b      	adds	r3, r7, #1
 80067fc:	444b      	add	r3, r9
 80067fe:	106d      	asrs	r5, r5, #1
 8006800:	429d      	cmp	r5, r3
 8006802:	bf38      	it	cc
 8006804:	461d      	movcc	r5, r3
 8006806:	0553      	lsls	r3, r2, #21
 8006808:	d527      	bpl.n	800685a <__ssputs_r+0x8e>
 800680a:	4629      	mov	r1, r5
 800680c:	f7ff fbd8 	bl	8005fc0 <_malloc_r>
 8006810:	4606      	mov	r6, r0
 8006812:	b360      	cbz	r0, 800686e <__ssputs_r+0xa2>
 8006814:	6921      	ldr	r1, [r4, #16]
 8006816:	464a      	mov	r2, r9
 8006818:	f7fe fcd7 	bl	80051ca <memcpy>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	6126      	str	r6, [r4, #16]
 800682a:	6165      	str	r5, [r4, #20]
 800682c:	444e      	add	r6, r9
 800682e:	eba5 0509 	sub.w	r5, r5, r9
 8006832:	6026      	str	r6, [r4, #0]
 8006834:	60a5      	str	r5, [r4, #8]
 8006836:	463e      	mov	r6, r7
 8006838:	42be      	cmp	r6, r7
 800683a:	d900      	bls.n	800683e <__ssputs_r+0x72>
 800683c:	463e      	mov	r6, r7
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	4632      	mov	r2, r6
 8006842:	4641      	mov	r1, r8
 8006844:	f000 fbae 	bl	8006fa4 <memmove>
 8006848:	68a3      	ldr	r3, [r4, #8]
 800684a:	1b9b      	subs	r3, r3, r6
 800684c:	60a3      	str	r3, [r4, #8]
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	4433      	add	r3, r6
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	2000      	movs	r0, #0
 8006856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685a:	462a      	mov	r2, r5
 800685c:	f000 fbf9 	bl	8007052 <_realloc_r>
 8006860:	4606      	mov	r6, r0
 8006862:	2800      	cmp	r0, #0
 8006864:	d1e0      	bne.n	8006828 <__ssputs_r+0x5c>
 8006866:	6921      	ldr	r1, [r4, #16]
 8006868:	4650      	mov	r0, sl
 800686a:	f7ff fb35 	bl	8005ed8 <_free_r>
 800686e:	230c      	movs	r3, #12
 8006870:	f8ca 3000 	str.w	r3, [sl]
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e7e9      	b.n	8006856 <__ssputs_r+0x8a>
	...

08006884 <_svfiprintf_r>:
 8006884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	4698      	mov	r8, r3
 800688a:	898b      	ldrh	r3, [r1, #12]
 800688c:	061b      	lsls	r3, r3, #24
 800688e:	b09d      	sub	sp, #116	@ 0x74
 8006890:	4607      	mov	r7, r0
 8006892:	460d      	mov	r5, r1
 8006894:	4614      	mov	r4, r2
 8006896:	d510      	bpl.n	80068ba <_svfiprintf_r+0x36>
 8006898:	690b      	ldr	r3, [r1, #16]
 800689a:	b973      	cbnz	r3, 80068ba <_svfiprintf_r+0x36>
 800689c:	2140      	movs	r1, #64	@ 0x40
 800689e:	f7ff fb8f 	bl	8005fc0 <_malloc_r>
 80068a2:	6028      	str	r0, [r5, #0]
 80068a4:	6128      	str	r0, [r5, #16]
 80068a6:	b930      	cbnz	r0, 80068b6 <_svfiprintf_r+0x32>
 80068a8:	230c      	movs	r3, #12
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	b01d      	add	sp, #116	@ 0x74
 80068b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b6:	2340      	movs	r3, #64	@ 0x40
 80068b8:	616b      	str	r3, [r5, #20]
 80068ba:	2300      	movs	r3, #0
 80068bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068be:	2320      	movs	r3, #32
 80068c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80068c8:	2330      	movs	r3, #48	@ 0x30
 80068ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a68 <_svfiprintf_r+0x1e4>
 80068ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068d2:	f04f 0901 	mov.w	r9, #1
 80068d6:	4623      	mov	r3, r4
 80068d8:	469a      	mov	sl, r3
 80068da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068de:	b10a      	cbz	r2, 80068e4 <_svfiprintf_r+0x60>
 80068e0:	2a25      	cmp	r2, #37	@ 0x25
 80068e2:	d1f9      	bne.n	80068d8 <_svfiprintf_r+0x54>
 80068e4:	ebba 0b04 	subs.w	fp, sl, r4
 80068e8:	d00b      	beq.n	8006902 <_svfiprintf_r+0x7e>
 80068ea:	465b      	mov	r3, fp
 80068ec:	4622      	mov	r2, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff ff6b 	bl	80067cc <__ssputs_r>
 80068f6:	3001      	adds	r0, #1
 80068f8:	f000 80a7 	beq.w	8006a4a <_svfiprintf_r+0x1c6>
 80068fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068fe:	445a      	add	r2, fp
 8006900:	9209      	str	r2, [sp, #36]	@ 0x24
 8006902:	f89a 3000 	ldrb.w	r3, [sl]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 809f 	beq.w	8006a4a <_svfiprintf_r+0x1c6>
 800690c:	2300      	movs	r3, #0
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006916:	f10a 0a01 	add.w	sl, sl, #1
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	9307      	str	r3, [sp, #28]
 800691e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006922:	931a      	str	r3, [sp, #104]	@ 0x68
 8006924:	4654      	mov	r4, sl
 8006926:	2205      	movs	r2, #5
 8006928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692c:	484e      	ldr	r0, [pc, #312]	@ (8006a68 <_svfiprintf_r+0x1e4>)
 800692e:	f7f9 fc5f 	bl	80001f0 <memchr>
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	b9d8      	cbnz	r0, 800696e <_svfiprintf_r+0xea>
 8006936:	06d0      	lsls	r0, r2, #27
 8006938:	bf44      	itt	mi
 800693a:	2320      	movmi	r3, #32
 800693c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006940:	0711      	lsls	r1, r2, #28
 8006942:	bf44      	itt	mi
 8006944:	232b      	movmi	r3, #43	@ 0x2b
 8006946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800694a:	f89a 3000 	ldrb.w	r3, [sl]
 800694e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006950:	d015      	beq.n	800697e <_svfiprintf_r+0xfa>
 8006952:	9a07      	ldr	r2, [sp, #28]
 8006954:	4654      	mov	r4, sl
 8006956:	2000      	movs	r0, #0
 8006958:	f04f 0c0a 	mov.w	ip, #10
 800695c:	4621      	mov	r1, r4
 800695e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006962:	3b30      	subs	r3, #48	@ 0x30
 8006964:	2b09      	cmp	r3, #9
 8006966:	d94b      	bls.n	8006a00 <_svfiprintf_r+0x17c>
 8006968:	b1b0      	cbz	r0, 8006998 <_svfiprintf_r+0x114>
 800696a:	9207      	str	r2, [sp, #28]
 800696c:	e014      	b.n	8006998 <_svfiprintf_r+0x114>
 800696e:	eba0 0308 	sub.w	r3, r0, r8
 8006972:	fa09 f303 	lsl.w	r3, r9, r3
 8006976:	4313      	orrs	r3, r2
 8006978:	9304      	str	r3, [sp, #16]
 800697a:	46a2      	mov	sl, r4
 800697c:	e7d2      	b.n	8006924 <_svfiprintf_r+0xa0>
 800697e:	9b03      	ldr	r3, [sp, #12]
 8006980:	1d19      	adds	r1, r3, #4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	9103      	str	r1, [sp, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfbb      	ittet	lt
 800698a:	425b      	neglt	r3, r3
 800698c:	f042 0202 	orrlt.w	r2, r2, #2
 8006990:	9307      	strge	r3, [sp, #28]
 8006992:	9307      	strlt	r3, [sp, #28]
 8006994:	bfb8      	it	lt
 8006996:	9204      	strlt	r2, [sp, #16]
 8006998:	7823      	ldrb	r3, [r4, #0]
 800699a:	2b2e      	cmp	r3, #46	@ 0x2e
 800699c:	d10a      	bne.n	80069b4 <_svfiprintf_r+0x130>
 800699e:	7863      	ldrb	r3, [r4, #1]
 80069a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80069a2:	d132      	bne.n	8006a0a <_svfiprintf_r+0x186>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	9203      	str	r2, [sp, #12]
 80069ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069b0:	3402      	adds	r4, #2
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a78 <_svfiprintf_r+0x1f4>
 80069b8:	7821      	ldrb	r1, [r4, #0]
 80069ba:	2203      	movs	r2, #3
 80069bc:	4650      	mov	r0, sl
 80069be:	f7f9 fc17 	bl	80001f0 <memchr>
 80069c2:	b138      	cbz	r0, 80069d4 <_svfiprintf_r+0x150>
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	eba0 000a 	sub.w	r0, r0, sl
 80069ca:	2240      	movs	r2, #64	@ 0x40
 80069cc:	4082      	lsls	r2, r0
 80069ce:	4313      	orrs	r3, r2
 80069d0:	3401      	adds	r4, #1
 80069d2:	9304      	str	r3, [sp, #16]
 80069d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d8:	4824      	ldr	r0, [pc, #144]	@ (8006a6c <_svfiprintf_r+0x1e8>)
 80069da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069de:	2206      	movs	r2, #6
 80069e0:	f7f9 fc06 	bl	80001f0 <memchr>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d036      	beq.n	8006a56 <_svfiprintf_r+0x1d2>
 80069e8:	4b21      	ldr	r3, [pc, #132]	@ (8006a70 <_svfiprintf_r+0x1ec>)
 80069ea:	bb1b      	cbnz	r3, 8006a34 <_svfiprintf_r+0x1b0>
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	3307      	adds	r3, #7
 80069f0:	f023 0307 	bic.w	r3, r3, #7
 80069f4:	3308      	adds	r3, #8
 80069f6:	9303      	str	r3, [sp, #12]
 80069f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069fa:	4433      	add	r3, r6
 80069fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fe:	e76a      	b.n	80068d6 <_svfiprintf_r+0x52>
 8006a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a04:	460c      	mov	r4, r1
 8006a06:	2001      	movs	r0, #1
 8006a08:	e7a8      	b.n	800695c <_svfiprintf_r+0xd8>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	3401      	adds	r4, #1
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f04f 0c0a 	mov.w	ip, #10
 8006a16:	4620      	mov	r0, r4
 8006a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a1c:	3a30      	subs	r2, #48	@ 0x30
 8006a1e:	2a09      	cmp	r2, #9
 8006a20:	d903      	bls.n	8006a2a <_svfiprintf_r+0x1a6>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0c6      	beq.n	80069b4 <_svfiprintf_r+0x130>
 8006a26:	9105      	str	r1, [sp, #20]
 8006a28:	e7c4      	b.n	80069b4 <_svfiprintf_r+0x130>
 8006a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a2e:	4604      	mov	r4, r0
 8006a30:	2301      	movs	r3, #1
 8006a32:	e7f0      	b.n	8006a16 <_svfiprintf_r+0x192>
 8006a34:	ab03      	add	r3, sp, #12
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	462a      	mov	r2, r5
 8006a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a74 <_svfiprintf_r+0x1f0>)
 8006a3c:	a904      	add	r1, sp, #16
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7fd fe40 	bl	80046c4 <_printf_float>
 8006a44:	1c42      	adds	r2, r0, #1
 8006a46:	4606      	mov	r6, r0
 8006a48:	d1d6      	bne.n	80069f8 <_svfiprintf_r+0x174>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	065b      	lsls	r3, r3, #25
 8006a4e:	f53f af2d 	bmi.w	80068ac <_svfiprintf_r+0x28>
 8006a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a54:	e72c      	b.n	80068b0 <_svfiprintf_r+0x2c>
 8006a56:	ab03      	add	r3, sp, #12
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	462a      	mov	r2, r5
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <_svfiprintf_r+0x1f0>)
 8006a5e:	a904      	add	r1, sp, #16
 8006a60:	4638      	mov	r0, r7
 8006a62:	f7fe f8c7 	bl	8004bf4 <_printf_i>
 8006a66:	e7ed      	b.n	8006a44 <_svfiprintf_r+0x1c0>
 8006a68:	080086f2 	.word	0x080086f2
 8006a6c:	080086fc 	.word	0x080086fc
 8006a70:	080046c5 	.word	0x080046c5
 8006a74:	080067cd 	.word	0x080067cd
 8006a78:	080086f8 	.word	0x080086f8

08006a7c <__sfputc_r>:
 8006a7c:	6893      	ldr	r3, [r2, #8]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	b410      	push	{r4}
 8006a84:	6093      	str	r3, [r2, #8]
 8006a86:	da08      	bge.n	8006a9a <__sfputc_r+0x1e>
 8006a88:	6994      	ldr	r4, [r2, #24]
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	db01      	blt.n	8006a92 <__sfputc_r+0x16>
 8006a8e:	290a      	cmp	r1, #10
 8006a90:	d103      	bne.n	8006a9a <__sfputc_r+0x1e>
 8006a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a96:	f000 b9f1 	b.w	8006e7c <__swbuf_r>
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	1c58      	adds	r0, r3, #1
 8006a9e:	6010      	str	r0, [r2, #0]
 8006aa0:	7019      	strb	r1, [r3, #0]
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <__sfputs_r>:
 8006aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aac:	4606      	mov	r6, r0
 8006aae:	460f      	mov	r7, r1
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	18d5      	adds	r5, r2, r3
 8006ab4:	42ac      	cmp	r4, r5
 8006ab6:	d101      	bne.n	8006abc <__sfputs_r+0x12>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e007      	b.n	8006acc <__sfputs_r+0x22>
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	463a      	mov	r2, r7
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffda 	bl	8006a7c <__sfputc_r>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d1f3      	bne.n	8006ab4 <__sfputs_r+0xa>
 8006acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad0 <_vfiprintf_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	b09d      	sub	sp, #116	@ 0x74
 8006ad8:	4614      	mov	r4, r2
 8006ada:	4698      	mov	r8, r3
 8006adc:	4606      	mov	r6, r0
 8006ade:	b118      	cbz	r0, 8006ae8 <_vfiprintf_r+0x18>
 8006ae0:	6a03      	ldr	r3, [r0, #32]
 8006ae2:	b90b      	cbnz	r3, 8006ae8 <_vfiprintf_r+0x18>
 8006ae4:	f7fe fa30 	bl	8004f48 <__sinit>
 8006ae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aea:	07d9      	lsls	r1, r3, #31
 8006aec:	d405      	bmi.n	8006afa <_vfiprintf_r+0x2a>
 8006aee:	89ab      	ldrh	r3, [r5, #12]
 8006af0:	059a      	lsls	r2, r3, #22
 8006af2:	d402      	bmi.n	8006afa <_vfiprintf_r+0x2a>
 8006af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006af6:	f7fe fb66 	bl	80051c6 <__retarget_lock_acquire_recursive>
 8006afa:	89ab      	ldrh	r3, [r5, #12]
 8006afc:	071b      	lsls	r3, r3, #28
 8006afe:	d501      	bpl.n	8006b04 <_vfiprintf_r+0x34>
 8006b00:	692b      	ldr	r3, [r5, #16]
 8006b02:	b99b      	cbnz	r3, 8006b2c <_vfiprintf_r+0x5c>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4630      	mov	r0, r6
 8006b08:	f000 f9f6 	bl	8006ef8 <__swsetup_r>
 8006b0c:	b170      	cbz	r0, 8006b2c <_vfiprintf_r+0x5c>
 8006b0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b10:	07dc      	lsls	r4, r3, #31
 8006b12:	d504      	bpl.n	8006b1e <_vfiprintf_r+0x4e>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	b01d      	add	sp, #116	@ 0x74
 8006b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	0598      	lsls	r0, r3, #22
 8006b22:	d4f7      	bmi.n	8006b14 <_vfiprintf_r+0x44>
 8006b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b26:	f7fe fb4f 	bl	80051c8 <__retarget_lock_release_recursive>
 8006b2a:	e7f3      	b.n	8006b14 <_vfiprintf_r+0x44>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b30:	2320      	movs	r3, #32
 8006b32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b3a:	2330      	movs	r3, #48	@ 0x30
 8006b3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cec <_vfiprintf_r+0x21c>
 8006b40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b44:	f04f 0901 	mov.w	r9, #1
 8006b48:	4623      	mov	r3, r4
 8006b4a:	469a      	mov	sl, r3
 8006b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b50:	b10a      	cbz	r2, 8006b56 <_vfiprintf_r+0x86>
 8006b52:	2a25      	cmp	r2, #37	@ 0x25
 8006b54:	d1f9      	bne.n	8006b4a <_vfiprintf_r+0x7a>
 8006b56:	ebba 0b04 	subs.w	fp, sl, r4
 8006b5a:	d00b      	beq.n	8006b74 <_vfiprintf_r+0xa4>
 8006b5c:	465b      	mov	r3, fp
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffa1 	bl	8006aaa <__sfputs_r>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f000 80a7 	beq.w	8006cbc <_vfiprintf_r+0x1ec>
 8006b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b70:	445a      	add	r2, fp
 8006b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b74:	f89a 3000 	ldrb.w	r3, [sl]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 809f 	beq.w	8006cbc <_vfiprintf_r+0x1ec>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295
 8006b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b88:	f10a 0a01 	add.w	sl, sl, #1
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	9307      	str	r3, [sp, #28]
 8006b90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b94:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b96:	4654      	mov	r4, sl
 8006b98:	2205      	movs	r2, #5
 8006b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9e:	4853      	ldr	r0, [pc, #332]	@ (8006cec <_vfiprintf_r+0x21c>)
 8006ba0:	f7f9 fb26 	bl	80001f0 <memchr>
 8006ba4:	9a04      	ldr	r2, [sp, #16]
 8006ba6:	b9d8      	cbnz	r0, 8006be0 <_vfiprintf_r+0x110>
 8006ba8:	06d1      	lsls	r1, r2, #27
 8006baa:	bf44      	itt	mi
 8006bac:	2320      	movmi	r3, #32
 8006bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bb2:	0713      	lsls	r3, r2, #28
 8006bb4:	bf44      	itt	mi
 8006bb6:	232b      	movmi	r3, #43	@ 0x2b
 8006bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc2:	d015      	beq.n	8006bf0 <_vfiprintf_r+0x120>
 8006bc4:	9a07      	ldr	r2, [sp, #28]
 8006bc6:	4654      	mov	r4, sl
 8006bc8:	2000      	movs	r0, #0
 8006bca:	f04f 0c0a 	mov.w	ip, #10
 8006bce:	4621      	mov	r1, r4
 8006bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bd4:	3b30      	subs	r3, #48	@ 0x30
 8006bd6:	2b09      	cmp	r3, #9
 8006bd8:	d94b      	bls.n	8006c72 <_vfiprintf_r+0x1a2>
 8006bda:	b1b0      	cbz	r0, 8006c0a <_vfiprintf_r+0x13a>
 8006bdc:	9207      	str	r2, [sp, #28]
 8006bde:	e014      	b.n	8006c0a <_vfiprintf_r+0x13a>
 8006be0:	eba0 0308 	sub.w	r3, r0, r8
 8006be4:	fa09 f303 	lsl.w	r3, r9, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	46a2      	mov	sl, r4
 8006bee:	e7d2      	b.n	8006b96 <_vfiprintf_r+0xc6>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	1d19      	adds	r1, r3, #4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	9103      	str	r1, [sp, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bfbb      	ittet	lt
 8006bfc:	425b      	neglt	r3, r3
 8006bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8006c02:	9307      	strge	r3, [sp, #28]
 8006c04:	9307      	strlt	r3, [sp, #28]
 8006c06:	bfb8      	it	lt
 8006c08:	9204      	strlt	r2, [sp, #16]
 8006c0a:	7823      	ldrb	r3, [r4, #0]
 8006c0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c0e:	d10a      	bne.n	8006c26 <_vfiprintf_r+0x156>
 8006c10:	7863      	ldrb	r3, [r4, #1]
 8006c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c14:	d132      	bne.n	8006c7c <_vfiprintf_r+0x1ac>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	1d1a      	adds	r2, r3, #4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	9203      	str	r2, [sp, #12]
 8006c1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c22:	3402      	adds	r4, #2
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cfc <_vfiprintf_r+0x22c>
 8006c2a:	7821      	ldrb	r1, [r4, #0]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	4650      	mov	r0, sl
 8006c30:	f7f9 fade 	bl	80001f0 <memchr>
 8006c34:	b138      	cbz	r0, 8006c46 <_vfiprintf_r+0x176>
 8006c36:	9b04      	ldr	r3, [sp, #16]
 8006c38:	eba0 000a 	sub.w	r0, r0, sl
 8006c3c:	2240      	movs	r2, #64	@ 0x40
 8006c3e:	4082      	lsls	r2, r0
 8006c40:	4313      	orrs	r3, r2
 8006c42:	3401      	adds	r4, #1
 8006c44:	9304      	str	r3, [sp, #16]
 8006c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4a:	4829      	ldr	r0, [pc, #164]	@ (8006cf0 <_vfiprintf_r+0x220>)
 8006c4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c50:	2206      	movs	r2, #6
 8006c52:	f7f9 facd 	bl	80001f0 <memchr>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d03f      	beq.n	8006cda <_vfiprintf_r+0x20a>
 8006c5a:	4b26      	ldr	r3, [pc, #152]	@ (8006cf4 <_vfiprintf_r+0x224>)
 8006c5c:	bb1b      	cbnz	r3, 8006ca6 <_vfiprintf_r+0x1d6>
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	3307      	adds	r3, #7
 8006c62:	f023 0307 	bic.w	r3, r3, #7
 8006c66:	3308      	adds	r3, #8
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6c:	443b      	add	r3, r7
 8006c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c70:	e76a      	b.n	8006b48 <_vfiprintf_r+0x78>
 8006c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c76:	460c      	mov	r4, r1
 8006c78:	2001      	movs	r0, #1
 8006c7a:	e7a8      	b.n	8006bce <_vfiprintf_r+0xfe>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	3401      	adds	r4, #1
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 0c0a 	mov.w	ip, #10
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c8e:	3a30      	subs	r2, #48	@ 0x30
 8006c90:	2a09      	cmp	r2, #9
 8006c92:	d903      	bls.n	8006c9c <_vfiprintf_r+0x1cc>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0c6      	beq.n	8006c26 <_vfiprintf_r+0x156>
 8006c98:	9105      	str	r1, [sp, #20]
 8006c9a:	e7c4      	b.n	8006c26 <_vfiprintf_r+0x156>
 8006c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7f0      	b.n	8006c88 <_vfiprintf_r+0x1b8>
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	462a      	mov	r2, r5
 8006cac:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <_vfiprintf_r+0x228>)
 8006cae:	a904      	add	r1, sp, #16
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7fd fd07 	bl	80046c4 <_printf_float>
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	1c78      	adds	r0, r7, #1
 8006cba:	d1d6      	bne.n	8006c6a <_vfiprintf_r+0x19a>
 8006cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d405      	bmi.n	8006cce <_vfiprintf_r+0x1fe>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	059a      	lsls	r2, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_vfiprintf_r+0x1fe>
 8006cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cca:	f7fe fa7d 	bl	80051c8 <__retarget_lock_release_recursive>
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	065b      	lsls	r3, r3, #25
 8006cd2:	f53f af1f 	bmi.w	8006b14 <_vfiprintf_r+0x44>
 8006cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cd8:	e71e      	b.n	8006b18 <_vfiprintf_r+0x48>
 8006cda:	ab03      	add	r3, sp, #12
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <_vfiprintf_r+0x228>)
 8006ce2:	a904      	add	r1, sp, #16
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7fd ff85 	bl	8004bf4 <_printf_i>
 8006cea:	e7e4      	b.n	8006cb6 <_vfiprintf_r+0x1e6>
 8006cec:	080086f2 	.word	0x080086f2
 8006cf0:	080086fc 	.word	0x080086fc
 8006cf4:	080046c5 	.word	0x080046c5
 8006cf8:	08006aab 	.word	0x08006aab
 8006cfc:	080086f8 	.word	0x080086f8

08006d00 <__sflush_r>:
 8006d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d08:	0716      	lsls	r6, r2, #28
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	d454      	bmi.n	8006dba <__sflush_r+0xba>
 8006d10:	684b      	ldr	r3, [r1, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dc02      	bgt.n	8006d1c <__sflush_r+0x1c>
 8006d16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dd48      	ble.n	8006dae <__sflush_r+0xae>
 8006d1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	d045      	beq.n	8006dae <__sflush_r+0xae>
 8006d22:	2300      	movs	r3, #0
 8006d24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d28:	682f      	ldr	r7, [r5, #0]
 8006d2a:	6a21      	ldr	r1, [r4, #32]
 8006d2c:	602b      	str	r3, [r5, #0]
 8006d2e:	d030      	beq.n	8006d92 <__sflush_r+0x92>
 8006d30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	0759      	lsls	r1, r3, #29
 8006d36:	d505      	bpl.n	8006d44 <__sflush_r+0x44>
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d3e:	b10b      	cbz	r3, 8006d44 <__sflush_r+0x44>
 8006d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	2300      	movs	r3, #0
 8006d46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d48:	6a21      	ldr	r1, [r4, #32]
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b0      	blx	r6
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	d106      	bne.n	8006d62 <__sflush_r+0x62>
 8006d54:	6829      	ldr	r1, [r5, #0]
 8006d56:	291d      	cmp	r1, #29
 8006d58:	d82b      	bhi.n	8006db2 <__sflush_r+0xb2>
 8006d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e04 <__sflush_r+0x104>)
 8006d5c:	40ca      	lsrs	r2, r1
 8006d5e:	07d6      	lsls	r6, r2, #31
 8006d60:	d527      	bpl.n	8006db2 <__sflush_r+0xb2>
 8006d62:	2200      	movs	r2, #0
 8006d64:	6062      	str	r2, [r4, #4]
 8006d66:	04d9      	lsls	r1, r3, #19
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	6022      	str	r2, [r4, #0]
 8006d6c:	d504      	bpl.n	8006d78 <__sflush_r+0x78>
 8006d6e:	1c42      	adds	r2, r0, #1
 8006d70:	d101      	bne.n	8006d76 <__sflush_r+0x76>
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	b903      	cbnz	r3, 8006d78 <__sflush_r+0x78>
 8006d76:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d7a:	602f      	str	r7, [r5, #0]
 8006d7c:	b1b9      	cbz	r1, 8006dae <__sflush_r+0xae>
 8006d7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d002      	beq.n	8006d8c <__sflush_r+0x8c>
 8006d86:	4628      	mov	r0, r5
 8006d88:	f7ff f8a6 	bl	8005ed8 <_free_r>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d90:	e00d      	b.n	8006dae <__sflush_r+0xae>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b0      	blx	r6
 8006d98:	4602      	mov	r2, r0
 8006d9a:	1c50      	adds	r0, r2, #1
 8006d9c:	d1c9      	bne.n	8006d32 <__sflush_r+0x32>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0c6      	beq.n	8006d32 <__sflush_r+0x32>
 8006da4:	2b1d      	cmp	r3, #29
 8006da6:	d001      	beq.n	8006dac <__sflush_r+0xac>
 8006da8:	2b16      	cmp	r3, #22
 8006daa:	d11e      	bne.n	8006dea <__sflush_r+0xea>
 8006dac:	602f      	str	r7, [r5, #0]
 8006dae:	2000      	movs	r0, #0
 8006db0:	e022      	b.n	8006df8 <__sflush_r+0xf8>
 8006db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006db6:	b21b      	sxth	r3, r3
 8006db8:	e01b      	b.n	8006df2 <__sflush_r+0xf2>
 8006dba:	690f      	ldr	r7, [r1, #16]
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	d0f6      	beq.n	8006dae <__sflush_r+0xae>
 8006dc0:	0793      	lsls	r3, r2, #30
 8006dc2:	680e      	ldr	r6, [r1, #0]
 8006dc4:	bf08      	it	eq
 8006dc6:	694b      	ldreq	r3, [r1, #20]
 8006dc8:	600f      	str	r7, [r1, #0]
 8006dca:	bf18      	it	ne
 8006dcc:	2300      	movne	r3, #0
 8006dce:	eba6 0807 	sub.w	r8, r6, r7
 8006dd2:	608b      	str	r3, [r1, #8]
 8006dd4:	f1b8 0f00 	cmp.w	r8, #0
 8006dd8:	dde9      	ble.n	8006dae <__sflush_r+0xae>
 8006dda:	6a21      	ldr	r1, [r4, #32]
 8006ddc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006dde:	4643      	mov	r3, r8
 8006de0:	463a      	mov	r2, r7
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b0      	blx	r6
 8006de6:	2800      	cmp	r0, #0
 8006de8:	dc08      	bgt.n	8006dfc <__sflush_r+0xfc>
 8006dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df2:	81a3      	strh	r3, [r4, #12]
 8006df4:	f04f 30ff 	mov.w	r0, #4294967295
 8006df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfc:	4407      	add	r7, r0
 8006dfe:	eba8 0800 	sub.w	r8, r8, r0
 8006e02:	e7e7      	b.n	8006dd4 <__sflush_r+0xd4>
 8006e04:	20400001 	.word	0x20400001

08006e08 <_fflush_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	690b      	ldr	r3, [r1, #16]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	b913      	cbnz	r3, 8006e18 <_fflush_r+0x10>
 8006e12:	2500      	movs	r5, #0
 8006e14:	4628      	mov	r0, r5
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	b118      	cbz	r0, 8006e22 <_fflush_r+0x1a>
 8006e1a:	6a03      	ldr	r3, [r0, #32]
 8006e1c:	b90b      	cbnz	r3, 8006e22 <_fflush_r+0x1a>
 8006e1e:	f7fe f893 	bl	8004f48 <__sinit>
 8006e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f3      	beq.n	8006e12 <_fflush_r+0xa>
 8006e2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e2c:	07d0      	lsls	r0, r2, #31
 8006e2e:	d404      	bmi.n	8006e3a <_fflush_r+0x32>
 8006e30:	0599      	lsls	r1, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_fflush_r+0x32>
 8006e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e36:	f7fe f9c6 	bl	80051c6 <__retarget_lock_acquire_recursive>
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	f7ff ff5f 	bl	8006d00 <__sflush_r>
 8006e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e44:	07da      	lsls	r2, r3, #31
 8006e46:	4605      	mov	r5, r0
 8006e48:	d4e4      	bmi.n	8006e14 <_fflush_r+0xc>
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	059b      	lsls	r3, r3, #22
 8006e4e:	d4e1      	bmi.n	8006e14 <_fflush_r+0xc>
 8006e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e52:	f7fe f9b9 	bl	80051c8 <__retarget_lock_release_recursive>
 8006e56:	e7dd      	b.n	8006e14 <_fflush_r+0xc>

08006e58 <fiprintf>:
 8006e58:	b40e      	push	{r1, r2, r3}
 8006e5a:	b503      	push	{r0, r1, lr}
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	4805      	ldr	r0, [pc, #20]	@ (8006e78 <fiprintf+0x20>)
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	f7ff fe31 	bl	8006ad0 <_vfiprintf_r>
 8006e6e:	b002      	add	sp, #8
 8006e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e74:	b003      	add	sp, #12
 8006e76:	4770      	bx	lr
 8006e78:	20000038 	.word	0x20000038

08006e7c <__swbuf_r>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	460e      	mov	r6, r1
 8006e80:	4614      	mov	r4, r2
 8006e82:	4605      	mov	r5, r0
 8006e84:	b118      	cbz	r0, 8006e8e <__swbuf_r+0x12>
 8006e86:	6a03      	ldr	r3, [r0, #32]
 8006e88:	b90b      	cbnz	r3, 8006e8e <__swbuf_r+0x12>
 8006e8a:	f7fe f85d 	bl	8004f48 <__sinit>
 8006e8e:	69a3      	ldr	r3, [r4, #24]
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	071a      	lsls	r2, r3, #28
 8006e96:	d501      	bpl.n	8006e9c <__swbuf_r+0x20>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	b943      	cbnz	r3, 8006eae <__swbuf_r+0x32>
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 f82a 	bl	8006ef8 <__swsetup_r>
 8006ea4:	b118      	cbz	r0, 8006eae <__swbuf_r+0x32>
 8006ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8006eaa:	4638      	mov	r0, r7
 8006eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	6922      	ldr	r2, [r4, #16]
 8006eb2:	1a98      	subs	r0, r3, r2
 8006eb4:	6963      	ldr	r3, [r4, #20]
 8006eb6:	b2f6      	uxtb	r6, r6
 8006eb8:	4283      	cmp	r3, r0
 8006eba:	4637      	mov	r7, r6
 8006ebc:	dc05      	bgt.n	8006eca <__swbuf_r+0x4e>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7ff ffa1 	bl	8006e08 <_fflush_r>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d1ed      	bne.n	8006ea6 <__swbuf_r+0x2a>
 8006eca:	68a3      	ldr	r3, [r4, #8]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	60a3      	str	r3, [r4, #8]
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	701e      	strb	r6, [r3, #0]
 8006ed8:	6962      	ldr	r2, [r4, #20]
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d004      	beq.n	8006eea <__swbuf_r+0x6e>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	07db      	lsls	r3, r3, #31
 8006ee4:	d5e1      	bpl.n	8006eaa <__swbuf_r+0x2e>
 8006ee6:	2e0a      	cmp	r6, #10
 8006ee8:	d1df      	bne.n	8006eaa <__swbuf_r+0x2e>
 8006eea:	4621      	mov	r1, r4
 8006eec:	4628      	mov	r0, r5
 8006eee:	f7ff ff8b 	bl	8006e08 <_fflush_r>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d0d9      	beq.n	8006eaa <__swbuf_r+0x2e>
 8006ef6:	e7d6      	b.n	8006ea6 <__swbuf_r+0x2a>

08006ef8 <__swsetup_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <__swsetup_r+0xa8>)
 8006efc:	4605      	mov	r5, r0
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	460c      	mov	r4, r1
 8006f02:	b118      	cbz	r0, 8006f0c <__swsetup_r+0x14>
 8006f04:	6a03      	ldr	r3, [r0, #32]
 8006f06:	b90b      	cbnz	r3, 8006f0c <__swsetup_r+0x14>
 8006f08:	f7fe f81e 	bl	8004f48 <__sinit>
 8006f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f10:	0719      	lsls	r1, r3, #28
 8006f12:	d422      	bmi.n	8006f5a <__swsetup_r+0x62>
 8006f14:	06da      	lsls	r2, r3, #27
 8006f16:	d407      	bmi.n	8006f28 <__swsetup_r+0x30>
 8006f18:	2209      	movs	r2, #9
 8006f1a:	602a      	str	r2, [r5, #0]
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	e033      	b.n	8006f90 <__swsetup_r+0x98>
 8006f28:	0758      	lsls	r0, r3, #29
 8006f2a:	d512      	bpl.n	8006f52 <__swsetup_r+0x5a>
 8006f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f2e:	b141      	cbz	r1, 8006f42 <__swsetup_r+0x4a>
 8006f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f34:	4299      	cmp	r1, r3
 8006f36:	d002      	beq.n	8006f3e <__swsetup_r+0x46>
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f7fe ffcd 	bl	8005ed8 <_free_r>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f48:	81a3      	strh	r3, [r4, #12]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6063      	str	r3, [r4, #4]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f043 0308 	orr.w	r3, r3, #8
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	6923      	ldr	r3, [r4, #16]
 8006f5c:	b94b      	cbnz	r3, 8006f72 <__swsetup_r+0x7a>
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f68:	d003      	beq.n	8006f72 <__swsetup_r+0x7a>
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 f8d1 	bl	8007114 <__smakebuf_r>
 8006f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f76:	f013 0201 	ands.w	r2, r3, #1
 8006f7a:	d00a      	beq.n	8006f92 <__swsetup_r+0x9a>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	60a2      	str	r2, [r4, #8]
 8006f80:	6962      	ldr	r2, [r4, #20]
 8006f82:	4252      	negs	r2, r2
 8006f84:	61a2      	str	r2, [r4, #24]
 8006f86:	6922      	ldr	r2, [r4, #16]
 8006f88:	b942      	cbnz	r2, 8006f9c <__swsetup_r+0xa4>
 8006f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f8e:	d1c5      	bne.n	8006f1c <__swsetup_r+0x24>
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	0799      	lsls	r1, r3, #30
 8006f94:	bf58      	it	pl
 8006f96:	6962      	ldrpl	r2, [r4, #20]
 8006f98:	60a2      	str	r2, [r4, #8]
 8006f9a:	e7f4      	b.n	8006f86 <__swsetup_r+0x8e>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e7f7      	b.n	8006f90 <__swsetup_r+0x98>
 8006fa0:	20000038 	.word	0x20000038

08006fa4 <memmove>:
 8006fa4:	4288      	cmp	r0, r1
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	eb01 0402 	add.w	r4, r1, r2
 8006fac:	d902      	bls.n	8006fb4 <memmove+0x10>
 8006fae:	4284      	cmp	r4, r0
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	d807      	bhi.n	8006fc4 <memmove+0x20>
 8006fb4:	1e43      	subs	r3, r0, #1
 8006fb6:	42a1      	cmp	r1, r4
 8006fb8:	d008      	beq.n	8006fcc <memmove+0x28>
 8006fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fc2:	e7f8      	b.n	8006fb6 <memmove+0x12>
 8006fc4:	4402      	add	r2, r0
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	428a      	cmp	r2, r1
 8006fca:	d100      	bne.n	8006fce <memmove+0x2a>
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fd6:	e7f7      	b.n	8006fc8 <memmove+0x24>

08006fd8 <_sbrk_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	@ (8006ff4 <_sbrk_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fb fda0 	bl	8002b28 <_sbrk>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_sbrk_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_sbrk_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	2000039c 	.word	0x2000039c

08006ff8 <abort>:
 8006ff8:	b508      	push	{r3, lr}
 8006ffa:	2006      	movs	r0, #6
 8006ffc:	f000 f8ee 	bl	80071dc <raise>
 8007000:	2001      	movs	r0, #1
 8007002:	f7fb fd18 	bl	8002a36 <_exit>

08007006 <_calloc_r>:
 8007006:	b570      	push	{r4, r5, r6, lr}
 8007008:	fba1 5402 	umull	r5, r4, r1, r2
 800700c:	b934      	cbnz	r4, 800701c <_calloc_r+0x16>
 800700e:	4629      	mov	r1, r5
 8007010:	f7fe ffd6 	bl	8005fc0 <_malloc_r>
 8007014:	4606      	mov	r6, r0
 8007016:	b928      	cbnz	r0, 8007024 <_calloc_r+0x1e>
 8007018:	4630      	mov	r0, r6
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	220c      	movs	r2, #12
 800701e:	6002      	str	r2, [r0, #0]
 8007020:	2600      	movs	r6, #0
 8007022:	e7f9      	b.n	8007018 <_calloc_r+0x12>
 8007024:	462a      	mov	r2, r5
 8007026:	4621      	mov	r1, r4
 8007028:	f7fe f84f 	bl	80050ca <memset>
 800702c:	e7f4      	b.n	8007018 <_calloc_r+0x12>

0800702e <__ascii_mbtowc>:
 800702e:	b082      	sub	sp, #8
 8007030:	b901      	cbnz	r1, 8007034 <__ascii_mbtowc+0x6>
 8007032:	a901      	add	r1, sp, #4
 8007034:	b142      	cbz	r2, 8007048 <__ascii_mbtowc+0x1a>
 8007036:	b14b      	cbz	r3, 800704c <__ascii_mbtowc+0x1e>
 8007038:	7813      	ldrb	r3, [r2, #0]
 800703a:	600b      	str	r3, [r1, #0]
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	1e10      	subs	r0, r2, #0
 8007040:	bf18      	it	ne
 8007042:	2001      	movne	r0, #1
 8007044:	b002      	add	sp, #8
 8007046:	4770      	bx	lr
 8007048:	4610      	mov	r0, r2
 800704a:	e7fb      	b.n	8007044 <__ascii_mbtowc+0x16>
 800704c:	f06f 0001 	mvn.w	r0, #1
 8007050:	e7f8      	b.n	8007044 <__ascii_mbtowc+0x16>

08007052 <_realloc_r>:
 8007052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	4607      	mov	r7, r0
 8007058:	4614      	mov	r4, r2
 800705a:	460d      	mov	r5, r1
 800705c:	b921      	cbnz	r1, 8007068 <_realloc_r+0x16>
 800705e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007062:	4611      	mov	r1, r2
 8007064:	f7fe bfac 	b.w	8005fc0 <_malloc_r>
 8007068:	b92a      	cbnz	r2, 8007076 <_realloc_r+0x24>
 800706a:	f7fe ff35 	bl	8005ed8 <_free_r>
 800706e:	4625      	mov	r5, r4
 8007070:	4628      	mov	r0, r5
 8007072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007076:	f000 f8ef 	bl	8007258 <_malloc_usable_size_r>
 800707a:	4284      	cmp	r4, r0
 800707c:	4606      	mov	r6, r0
 800707e:	d802      	bhi.n	8007086 <_realloc_r+0x34>
 8007080:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007084:	d8f4      	bhi.n	8007070 <_realloc_r+0x1e>
 8007086:	4621      	mov	r1, r4
 8007088:	4638      	mov	r0, r7
 800708a:	f7fe ff99 	bl	8005fc0 <_malloc_r>
 800708e:	4680      	mov	r8, r0
 8007090:	b908      	cbnz	r0, 8007096 <_realloc_r+0x44>
 8007092:	4645      	mov	r5, r8
 8007094:	e7ec      	b.n	8007070 <_realloc_r+0x1e>
 8007096:	42b4      	cmp	r4, r6
 8007098:	4622      	mov	r2, r4
 800709a:	4629      	mov	r1, r5
 800709c:	bf28      	it	cs
 800709e:	4632      	movcs	r2, r6
 80070a0:	f7fe f893 	bl	80051ca <memcpy>
 80070a4:	4629      	mov	r1, r5
 80070a6:	4638      	mov	r0, r7
 80070a8:	f7fe ff16 	bl	8005ed8 <_free_r>
 80070ac:	e7f1      	b.n	8007092 <_realloc_r+0x40>

080070ae <__ascii_wctomb>:
 80070ae:	4603      	mov	r3, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	b141      	cbz	r1, 80070c6 <__ascii_wctomb+0x18>
 80070b4:	2aff      	cmp	r2, #255	@ 0xff
 80070b6:	d904      	bls.n	80070c2 <__ascii_wctomb+0x14>
 80070b8:	228a      	movs	r2, #138	@ 0x8a
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295
 80070c0:	4770      	bx	lr
 80070c2:	700a      	strb	r2, [r1, #0]
 80070c4:	2001      	movs	r0, #1
 80070c6:	4770      	bx	lr

080070c8 <__swhatbuf_r>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	460c      	mov	r4, r1
 80070cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d0:	2900      	cmp	r1, #0
 80070d2:	b096      	sub	sp, #88	@ 0x58
 80070d4:	4615      	mov	r5, r2
 80070d6:	461e      	mov	r6, r3
 80070d8:	da0d      	bge.n	80070f6 <__swhatbuf_r+0x2e>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80070e0:	f04f 0100 	mov.w	r1, #0
 80070e4:	bf14      	ite	ne
 80070e6:	2340      	movne	r3, #64	@ 0x40
 80070e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070ec:	2000      	movs	r0, #0
 80070ee:	6031      	str	r1, [r6, #0]
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	b016      	add	sp, #88	@ 0x58
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	466a      	mov	r2, sp
 80070f8:	f000 f878 	bl	80071ec <_fstat_r>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	dbec      	blt.n	80070da <__swhatbuf_r+0x12>
 8007100:	9901      	ldr	r1, [sp, #4]
 8007102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800710a:	4259      	negs	r1, r3
 800710c:	4159      	adcs	r1, r3
 800710e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007112:	e7eb      	b.n	80070ec <__swhatbuf_r+0x24>

08007114 <__smakebuf_r>:
 8007114:	898b      	ldrh	r3, [r1, #12]
 8007116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007118:	079d      	lsls	r5, r3, #30
 800711a:	4606      	mov	r6, r0
 800711c:	460c      	mov	r4, r1
 800711e:	d507      	bpl.n	8007130 <__smakebuf_r+0x1c>
 8007120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	2301      	movs	r3, #1
 800712a:	6163      	str	r3, [r4, #20]
 800712c:	b003      	add	sp, #12
 800712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007130:	ab01      	add	r3, sp, #4
 8007132:	466a      	mov	r2, sp
 8007134:	f7ff ffc8 	bl	80070c8 <__swhatbuf_r>
 8007138:	9f00      	ldr	r7, [sp, #0]
 800713a:	4605      	mov	r5, r0
 800713c:	4639      	mov	r1, r7
 800713e:	4630      	mov	r0, r6
 8007140:	f7fe ff3e 	bl	8005fc0 <_malloc_r>
 8007144:	b948      	cbnz	r0, 800715a <__smakebuf_r+0x46>
 8007146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800714a:	059a      	lsls	r2, r3, #22
 800714c:	d4ee      	bmi.n	800712c <__smakebuf_r+0x18>
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	f043 0302 	orr.w	r3, r3, #2
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	e7e2      	b.n	8007120 <__smakebuf_r+0xc>
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	6020      	str	r0, [r4, #0]
 800715e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800716a:	b15b      	cbz	r3, 8007184 <__smakebuf_r+0x70>
 800716c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f84d 	bl	8007210 <_isatty_r>
 8007176:	b128      	cbz	r0, 8007184 <__smakebuf_r+0x70>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f023 0303 	bic.w	r3, r3, #3
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	431d      	orrs	r5, r3
 8007188:	81a5      	strh	r5, [r4, #12]
 800718a:	e7cf      	b.n	800712c <__smakebuf_r+0x18>

0800718c <_raise_r>:
 800718c:	291f      	cmp	r1, #31
 800718e:	b538      	push	{r3, r4, r5, lr}
 8007190:	4605      	mov	r5, r0
 8007192:	460c      	mov	r4, r1
 8007194:	d904      	bls.n	80071a0 <_raise_r+0x14>
 8007196:	2316      	movs	r3, #22
 8007198:	6003      	str	r3, [r0, #0]
 800719a:	f04f 30ff 	mov.w	r0, #4294967295
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071a2:	b112      	cbz	r2, 80071aa <_raise_r+0x1e>
 80071a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071a8:	b94b      	cbnz	r3, 80071be <_raise_r+0x32>
 80071aa:	4628      	mov	r0, r5
 80071ac:	f000 f852 	bl	8007254 <_getpid_r>
 80071b0:	4622      	mov	r2, r4
 80071b2:	4601      	mov	r1, r0
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ba:	f000 b839 	b.w	8007230 <_kill_r>
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d00a      	beq.n	80071d8 <_raise_r+0x4c>
 80071c2:	1c59      	adds	r1, r3, #1
 80071c4:	d103      	bne.n	80071ce <_raise_r+0x42>
 80071c6:	2316      	movs	r3, #22
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7e7      	b.n	800719e <_raise_r+0x12>
 80071ce:	2100      	movs	r1, #0
 80071d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071d4:	4620      	mov	r0, r4
 80071d6:	4798      	blx	r3
 80071d8:	2000      	movs	r0, #0
 80071da:	e7e0      	b.n	800719e <_raise_r+0x12>

080071dc <raise>:
 80071dc:	4b02      	ldr	r3, [pc, #8]	@ (80071e8 <raise+0xc>)
 80071de:	4601      	mov	r1, r0
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	f7ff bfd3 	b.w	800718c <_raise_r>
 80071e6:	bf00      	nop
 80071e8:	20000038 	.word	0x20000038

080071ec <_fstat_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	@ (800720c <_fstat_r+0x20>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	f7fb fc6c 	bl	8002ad6 <_fstat>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d102      	bne.n	8007208 <_fstat_r+0x1c>
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	b103      	cbz	r3, 8007208 <_fstat_r+0x1c>
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	bd38      	pop	{r3, r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	2000039c 	.word	0x2000039c

08007210 <_isatty_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d06      	ldr	r5, [pc, #24]	@ (800722c <_isatty_r+0x1c>)
 8007214:	2300      	movs	r3, #0
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7fb fc6b 	bl	8002af6 <_isatty>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_isatty_r+0x1a>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_isatty_r+0x1a>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	2000039c 	.word	0x2000039c

08007230 <_kill_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4d07      	ldr	r5, [pc, #28]	@ (8007250 <_kill_r+0x20>)
 8007234:	2300      	movs	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	f7fb fbea 	bl	8002a16 <_kill>
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	d102      	bne.n	800724c <_kill_r+0x1c>
 8007246:	682b      	ldr	r3, [r5, #0]
 8007248:	b103      	cbz	r3, 800724c <_kill_r+0x1c>
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	bd38      	pop	{r3, r4, r5, pc}
 800724e:	bf00      	nop
 8007250:	2000039c 	.word	0x2000039c

08007254 <_getpid_r>:
 8007254:	f7fb bbd7 	b.w	8002a06 <_getpid>

08007258 <_malloc_usable_size_r>:
 8007258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800725c:	1f18      	subs	r0, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	bfbc      	itt	lt
 8007262:	580b      	ldrlt	r3, [r1, r0]
 8007264:	18c0      	addlt	r0, r0, r3
 8007266:	4770      	bx	lr

08007268 <exp>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	ed2d 8b02 	vpush	{d8}
 800726e:	ec55 4b10 	vmov	r4, r5, d0
 8007272:	f000 f8bd 	bl	80073f0 <__ieee754_exp>
 8007276:	eeb0 8a40 	vmov.f32	s16, s0
 800727a:	eef0 8a60 	vmov.f32	s17, s1
 800727e:	ec45 4b10 	vmov	d0, r4, r5
 8007282:	f000 f8a9 	bl	80073d8 <finite>
 8007286:	b168      	cbz	r0, 80072a4 <exp+0x3c>
 8007288:	a317      	add	r3, pc, #92	@ (adr r3, 80072e8 <exp+0x80>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	4620      	mov	r0, r4
 8007290:	4629      	mov	r1, r5
 8007292:	f7f9 fc51 	bl	8000b38 <__aeabi_dcmpgt>
 8007296:	b160      	cbz	r0, 80072b2 <exp+0x4a>
 8007298:	f7fd ff6a 	bl	8005170 <__errno>
 800729c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80072d8 <exp+0x70>
 80072a0:	2322      	movs	r3, #34	@ 0x22
 80072a2:	6003      	str	r3, [r0, #0]
 80072a4:	eeb0 0a48 	vmov.f32	s0, s16
 80072a8:	eef0 0a68 	vmov.f32	s1, s17
 80072ac:	ecbd 8b02 	vpop	{d8}
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
 80072b2:	a30f      	add	r3, pc, #60	@ (adr r3, 80072f0 <exp+0x88>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	4620      	mov	r0, r4
 80072ba:	4629      	mov	r1, r5
 80072bc:	f7f9 fc1e 	bl	8000afc <__aeabi_dcmplt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d0ef      	beq.n	80072a4 <exp+0x3c>
 80072c4:	f7fd ff54 	bl	8005170 <__errno>
 80072c8:	2322      	movs	r3, #34	@ 0x22
 80072ca:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80072e0 <exp+0x78>
 80072ce:	6003      	str	r3, [r0, #0]
 80072d0:	e7e8      	b.n	80072a4 <exp+0x3c>
 80072d2:	bf00      	nop
 80072d4:	f3af 8000 	nop.w
 80072d8:	00000000 	.word	0x00000000
 80072dc:	7ff00000 	.word	0x7ff00000
	...
 80072e8:	fefa39ef 	.word	0xfefa39ef
 80072ec:	40862e42 	.word	0x40862e42
 80072f0:	d52d3051 	.word	0xd52d3051
 80072f4:	c0874910 	.word	0xc0874910

080072f8 <pow>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	ed2d 8b02 	vpush	{d8}
 80072fe:	eeb0 8a40 	vmov.f32	s16, s0
 8007302:	eef0 8a60 	vmov.f32	s17, s1
 8007306:	ec55 4b11 	vmov	r4, r5, d1
 800730a:	f000 f9ed 	bl	80076e8 <__ieee754_pow>
 800730e:	4622      	mov	r2, r4
 8007310:	462b      	mov	r3, r5
 8007312:	4620      	mov	r0, r4
 8007314:	4629      	mov	r1, r5
 8007316:	ec57 6b10 	vmov	r6, r7, d0
 800731a:	f7f9 fc17 	bl	8000b4c <__aeabi_dcmpun>
 800731e:	2800      	cmp	r0, #0
 8007320:	d13b      	bne.n	800739a <pow+0xa2>
 8007322:	ec51 0b18 	vmov	r0, r1, d8
 8007326:	2200      	movs	r2, #0
 8007328:	2300      	movs	r3, #0
 800732a:	f7f9 fbdd 	bl	8000ae8 <__aeabi_dcmpeq>
 800732e:	b1b8      	cbz	r0, 8007360 <pow+0x68>
 8007330:	2200      	movs	r2, #0
 8007332:	2300      	movs	r3, #0
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f7f9 fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800733c:	2800      	cmp	r0, #0
 800733e:	d146      	bne.n	80073ce <pow+0xd6>
 8007340:	ec45 4b10 	vmov	d0, r4, r5
 8007344:	f000 f848 	bl	80073d8 <finite>
 8007348:	b338      	cbz	r0, 800739a <pow+0xa2>
 800734a:	2200      	movs	r2, #0
 800734c:	2300      	movs	r3, #0
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f9 fbd3 	bl	8000afc <__aeabi_dcmplt>
 8007356:	b300      	cbz	r0, 800739a <pow+0xa2>
 8007358:	f7fd ff0a 	bl	8005170 <__errno>
 800735c:	2322      	movs	r3, #34	@ 0x22
 800735e:	e01b      	b.n	8007398 <pow+0xa0>
 8007360:	ec47 6b10 	vmov	d0, r6, r7
 8007364:	f000 f838 	bl	80073d8 <finite>
 8007368:	b9e0      	cbnz	r0, 80073a4 <pow+0xac>
 800736a:	eeb0 0a48 	vmov.f32	s0, s16
 800736e:	eef0 0a68 	vmov.f32	s1, s17
 8007372:	f000 f831 	bl	80073d8 <finite>
 8007376:	b1a8      	cbz	r0, 80073a4 <pow+0xac>
 8007378:	ec45 4b10 	vmov	d0, r4, r5
 800737c:	f000 f82c 	bl	80073d8 <finite>
 8007380:	b180      	cbz	r0, 80073a4 <pow+0xac>
 8007382:	4632      	mov	r2, r6
 8007384:	463b      	mov	r3, r7
 8007386:	4630      	mov	r0, r6
 8007388:	4639      	mov	r1, r7
 800738a:	f7f9 fbdf 	bl	8000b4c <__aeabi_dcmpun>
 800738e:	2800      	cmp	r0, #0
 8007390:	d0e2      	beq.n	8007358 <pow+0x60>
 8007392:	f7fd feed 	bl	8005170 <__errno>
 8007396:	2321      	movs	r3, #33	@ 0x21
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	ecbd 8b02 	vpop	{d8}
 800739e:	ec47 6b10 	vmov	d0, r6, r7
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a4:	2200      	movs	r2, #0
 80073a6:	2300      	movs	r3, #0
 80073a8:	4630      	mov	r0, r6
 80073aa:	4639      	mov	r1, r7
 80073ac:	f7f9 fb9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d0f2      	beq.n	800739a <pow+0xa2>
 80073b4:	eeb0 0a48 	vmov.f32	s0, s16
 80073b8:	eef0 0a68 	vmov.f32	s1, s17
 80073bc:	f000 f80c 	bl	80073d8 <finite>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d0ea      	beq.n	800739a <pow+0xa2>
 80073c4:	ec45 4b10 	vmov	d0, r4, r5
 80073c8:	f000 f806 	bl	80073d8 <finite>
 80073cc:	e7c3      	b.n	8007356 <pow+0x5e>
 80073ce:	4f01      	ldr	r7, [pc, #4]	@ (80073d4 <pow+0xdc>)
 80073d0:	2600      	movs	r6, #0
 80073d2:	e7e2      	b.n	800739a <pow+0xa2>
 80073d4:	3ff00000 	.word	0x3ff00000

080073d8 <finite>:
 80073d8:	b082      	sub	sp, #8
 80073da:	ed8d 0b00 	vstr	d0, [sp]
 80073de:	9801      	ldr	r0, [sp, #4]
 80073e0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80073e4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80073e8:	0fc0      	lsrs	r0, r0, #31
 80073ea:	b002      	add	sp, #8
 80073ec:	4770      	bx	lr
	...

080073f0 <__ieee754_exp>:
 80073f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	ec55 4b10 	vmov	r4, r5, d0
 80073f8:	49b1      	ldr	r1, [pc, #708]	@ (80076c0 <__ieee754_exp+0x2d0>)
 80073fa:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80073fe:	428a      	cmp	r2, r1
 8007400:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007404:	d936      	bls.n	8007474 <__ieee754_exp+0x84>
 8007406:	49af      	ldr	r1, [pc, #700]	@ (80076c4 <__ieee754_exp+0x2d4>)
 8007408:	428a      	cmp	r2, r1
 800740a:	d914      	bls.n	8007436 <__ieee754_exp+0x46>
 800740c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007410:	4323      	orrs	r3, r4
 8007412:	4622      	mov	r2, r4
 8007414:	d007      	beq.n	8007426 <__ieee754_exp+0x36>
 8007416:	462b      	mov	r3, r5
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	f7f8 ff46 	bl	80002ac <__adddf3>
 8007420:	4604      	mov	r4, r0
 8007422:	460d      	mov	r5, r1
 8007424:	e002      	b.n	800742c <__ieee754_exp+0x3c>
 8007426:	2e00      	cmp	r6, #0
 8007428:	f040 8118 	bne.w	800765c <__ieee754_exp+0x26c>
 800742c:	ec45 4b10 	vmov	d0, r4, r5
 8007430:	b004      	add	sp, #16
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007436:	a38c      	add	r3, pc, #560	@ (adr r3, 8007668 <__ieee754_exp+0x278>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	4620      	mov	r0, r4
 800743e:	4629      	mov	r1, r5
 8007440:	f7f9 fb7a 	bl	8000b38 <__aeabi_dcmpgt>
 8007444:	4607      	mov	r7, r0
 8007446:	b128      	cbz	r0, 8007454 <__ieee754_exp+0x64>
 8007448:	2000      	movs	r0, #0
 800744a:	b004      	add	sp, #16
 800744c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	f000 bf4e 	b.w	80082f0 <__math_oflow>
 8007454:	a386      	add	r3, pc, #536	@ (adr r3, 8007670 <__ieee754_exp+0x280>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	4620      	mov	r0, r4
 800745c:	4629      	mov	r1, r5
 800745e:	f7f9 fb4d 	bl	8000afc <__aeabi_dcmplt>
 8007462:	2800      	cmp	r0, #0
 8007464:	f000 8087 	beq.w	8007576 <__ieee754_exp+0x186>
 8007468:	4638      	mov	r0, r7
 800746a:	b004      	add	sp, #16
 800746c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007470:	f000 bf36 	b.w	80082e0 <__math_uflow>
 8007474:	4b94      	ldr	r3, [pc, #592]	@ (80076c8 <__ieee754_exp+0x2d8>)
 8007476:	429a      	cmp	r2, r3
 8007478:	f240 80a9 	bls.w	80075ce <__ieee754_exp+0x1de>
 800747c:	4b93      	ldr	r3, [pc, #588]	@ (80076cc <__ieee754_exp+0x2dc>)
 800747e:	429a      	cmp	r2, r3
 8007480:	d879      	bhi.n	8007576 <__ieee754_exp+0x186>
 8007482:	4b93      	ldr	r3, [pc, #588]	@ (80076d0 <__ieee754_exp+0x2e0>)
 8007484:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	4620      	mov	r0, r4
 800748e:	4629      	mov	r1, r5
 8007490:	f7f8 ff0a 	bl	80002a8 <__aeabi_dsub>
 8007494:	4b8f      	ldr	r3, [pc, #572]	@ (80076d4 <__ieee754_exp+0x2e4>)
 8007496:	00f7      	lsls	r7, r6, #3
 8007498:	443b      	add	r3, r7
 800749a:	ed93 7b00 	vldr	d7, [r3]
 800749e:	ed8d 7b00 	vstr	d7, [sp]
 80074a2:	f086 0a01 	eor.w	sl, r6, #1
 80074a6:	4680      	mov	r8, r0
 80074a8:	4689      	mov	r9, r1
 80074aa:	ebaa 0a06 	sub.w	sl, sl, r6
 80074ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	f7f8 fef7 	bl	80002a8 <__aeabi_dsub>
 80074ba:	4604      	mov	r4, r0
 80074bc:	460d      	mov	r5, r1
 80074be:	4622      	mov	r2, r4
 80074c0:	462b      	mov	r3, r5
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7f9 f8a7 	bl	8000618 <__aeabi_dmul>
 80074ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8007678 <__ieee754_exp+0x288>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	4606      	mov	r6, r0
 80074d2:	460f      	mov	r7, r1
 80074d4:	f7f9 f8a0 	bl	8000618 <__aeabi_dmul>
 80074d8:	a369      	add	r3, pc, #420	@ (adr r3, 8007680 <__ieee754_exp+0x290>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f8 fee3 	bl	80002a8 <__aeabi_dsub>
 80074e2:	4632      	mov	r2, r6
 80074e4:	463b      	mov	r3, r7
 80074e6:	f7f9 f897 	bl	8000618 <__aeabi_dmul>
 80074ea:	a367      	add	r3, pc, #412	@ (adr r3, 8007688 <__ieee754_exp+0x298>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f8 fedc 	bl	80002ac <__adddf3>
 80074f4:	4632      	mov	r2, r6
 80074f6:	463b      	mov	r3, r7
 80074f8:	f7f9 f88e 	bl	8000618 <__aeabi_dmul>
 80074fc:	a364      	add	r3, pc, #400	@ (adr r3, 8007690 <__ieee754_exp+0x2a0>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 fed1 	bl	80002a8 <__aeabi_dsub>
 8007506:	4632      	mov	r2, r6
 8007508:	463b      	mov	r3, r7
 800750a:	f7f9 f885 	bl	8000618 <__aeabi_dmul>
 800750e:	a362      	add	r3, pc, #392	@ (adr r3, 8007698 <__ieee754_exp+0x2a8>)
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f7f8 feca 	bl	80002ac <__adddf3>
 8007518:	4632      	mov	r2, r6
 800751a:	463b      	mov	r3, r7
 800751c:	f7f9 f87c 	bl	8000618 <__aeabi_dmul>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4620      	mov	r0, r4
 8007526:	4629      	mov	r1, r5
 8007528:	f7f8 febe 	bl	80002a8 <__aeabi_dsub>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4606      	mov	r6, r0
 8007532:	460f      	mov	r7, r1
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f9 f86e 	bl	8000618 <__aeabi_dmul>
 800753c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	d15c      	bne.n	8007600 <__ieee754_exp+0x210>
 8007546:	2200      	movs	r2, #0
 8007548:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f8 feaa 	bl	80002a8 <__aeabi_dsub>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755c:	f7f9 f986 	bl	800086c <__aeabi_ddiv>
 8007560:	4622      	mov	r2, r4
 8007562:	462b      	mov	r3, r5
 8007564:	f7f8 fea0 	bl	80002a8 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	2000      	movs	r0, #0
 800756e:	495a      	ldr	r1, [pc, #360]	@ (80076d8 <__ieee754_exp+0x2e8>)
 8007570:	f7f8 fe9a 	bl	80002a8 <__aeabi_dsub>
 8007574:	e754      	b.n	8007420 <__ieee754_exp+0x30>
 8007576:	4b59      	ldr	r3, [pc, #356]	@ (80076dc <__ieee754_exp+0x2ec>)
 8007578:	4620      	mov	r0, r4
 800757a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800757e:	4629      	mov	r1, r5
 8007580:	a347      	add	r3, pc, #284	@ (adr r3, 80076a0 <__ieee754_exp+0x2b0>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f9 f847 	bl	8000618 <__aeabi_dmul>
 800758a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800758e:	f7f8 fe8d 	bl	80002ac <__adddf3>
 8007592:	f7f9 faf1 	bl	8000b78 <__aeabi_d2iz>
 8007596:	4682      	mov	sl, r0
 8007598:	f7f8 ffd4 	bl	8000544 <__aeabi_i2d>
 800759c:	a342      	add	r3, pc, #264	@ (adr r3, 80076a8 <__ieee754_exp+0x2b8>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	f7f9 f837 	bl	8000618 <__aeabi_dmul>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f8 fe79 	bl	80002a8 <__aeabi_dsub>
 80075b6:	a33e      	add	r3, pc, #248	@ (adr r3, 80076b0 <__ieee754_exp+0x2c0>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	4680      	mov	r8, r0
 80075be:	4689      	mov	r9, r1
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 f828 	bl	8000618 <__aeabi_dmul>
 80075c8:	e9cd 0100 	strd	r0, r1, [sp]
 80075cc:	e76f      	b.n	80074ae <__ieee754_exp+0xbe>
 80075ce:	4b44      	ldr	r3, [pc, #272]	@ (80076e0 <__ieee754_exp+0x2f0>)
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d810      	bhi.n	80075f6 <__ieee754_exp+0x206>
 80075d4:	a338      	add	r3, pc, #224	@ (adr r3, 80076b8 <__ieee754_exp+0x2c8>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	4620      	mov	r0, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	f7f8 fe65 	bl	80002ac <__adddf3>
 80075e2:	4b3d      	ldr	r3, [pc, #244]	@ (80076d8 <__ieee754_exp+0x2e8>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	f7f9 faa7 	bl	8000b38 <__aeabi_dcmpgt>
 80075ea:	b138      	cbz	r0, 80075fc <__ieee754_exp+0x20c>
 80075ec:	4b3a      	ldr	r3, [pc, #232]	@ (80076d8 <__ieee754_exp+0x2e8>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	4620      	mov	r0, r4
 80075f2:	4629      	mov	r1, r5
 80075f4:	e712      	b.n	800741c <__ieee754_exp+0x2c>
 80075f6:	f04f 0a00 	mov.w	sl, #0
 80075fa:	e760      	b.n	80074be <__ieee754_exp+0xce>
 80075fc:	4682      	mov	sl, r0
 80075fe:	e75e      	b.n	80074be <__ieee754_exp+0xce>
 8007600:	4632      	mov	r2, r6
 8007602:	463b      	mov	r3, r7
 8007604:	2000      	movs	r0, #0
 8007606:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800760a:	f7f8 fe4d 	bl	80002a8 <__aeabi_dsub>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007616:	f7f9 f929 	bl	800086c <__aeabi_ddiv>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007622:	f7f8 fe41 	bl	80002a8 <__aeabi_dsub>
 8007626:	4642      	mov	r2, r8
 8007628:	464b      	mov	r3, r9
 800762a:	f7f8 fe3d 	bl	80002a8 <__aeabi_dsub>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	2000      	movs	r0, #0
 8007634:	4928      	ldr	r1, [pc, #160]	@ (80076d8 <__ieee754_exp+0x2e8>)
 8007636:	f7f8 fe37 	bl	80002a8 <__aeabi_dsub>
 800763a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800763e:	4592      	cmp	sl, r2
 8007640:	db02      	blt.n	8007648 <__ieee754_exp+0x258>
 8007642:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007646:	e6eb      	b.n	8007420 <__ieee754_exp+0x30>
 8007648:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800764c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007650:	2200      	movs	r2, #0
 8007652:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8007656:	f7f8 ffdf 	bl	8000618 <__aeabi_dmul>
 800765a:	e6e1      	b.n	8007420 <__ieee754_exp+0x30>
 800765c:	2400      	movs	r4, #0
 800765e:	2500      	movs	r5, #0
 8007660:	e6e4      	b.n	800742c <__ieee754_exp+0x3c>
 8007662:	bf00      	nop
 8007664:	f3af 8000 	nop.w
 8007668:	fefa39ef 	.word	0xfefa39ef
 800766c:	40862e42 	.word	0x40862e42
 8007670:	d52d3051 	.word	0xd52d3051
 8007674:	c0874910 	.word	0xc0874910
 8007678:	72bea4d0 	.word	0x72bea4d0
 800767c:	3e663769 	.word	0x3e663769
 8007680:	c5d26bf1 	.word	0xc5d26bf1
 8007684:	3ebbbd41 	.word	0x3ebbbd41
 8007688:	af25de2c 	.word	0xaf25de2c
 800768c:	3f11566a 	.word	0x3f11566a
 8007690:	16bebd93 	.word	0x16bebd93
 8007694:	3f66c16c 	.word	0x3f66c16c
 8007698:	5555553e 	.word	0x5555553e
 800769c:	3fc55555 	.word	0x3fc55555
 80076a0:	652b82fe 	.word	0x652b82fe
 80076a4:	3ff71547 	.word	0x3ff71547
 80076a8:	fee00000 	.word	0xfee00000
 80076ac:	3fe62e42 	.word	0x3fe62e42
 80076b0:	35793c76 	.word	0x35793c76
 80076b4:	3dea39ef 	.word	0x3dea39ef
 80076b8:	8800759c 	.word	0x8800759c
 80076bc:	7e37e43c 	.word	0x7e37e43c
 80076c0:	40862e41 	.word	0x40862e41
 80076c4:	7fefffff 	.word	0x7fefffff
 80076c8:	3fd62e42 	.word	0x3fd62e42
 80076cc:	3ff0a2b1 	.word	0x3ff0a2b1
 80076d0:	08008928 	.word	0x08008928
 80076d4:	08008918 	.word	0x08008918
 80076d8:	3ff00000 	.word	0x3ff00000
 80076dc:	08008938 	.word	0x08008938
 80076e0:	3defffff 	.word	0x3defffff
 80076e4:	00000000 	.word	0x00000000

080076e8 <__ieee754_pow>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	b091      	sub	sp, #68	@ 0x44
 80076ee:	ed8d 1b00 	vstr	d1, [sp]
 80076f2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80076f6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80076fa:	ea5a 0001 	orrs.w	r0, sl, r1
 80076fe:	ec57 6b10 	vmov	r6, r7, d0
 8007702:	d113      	bne.n	800772c <__ieee754_pow+0x44>
 8007704:	19b3      	adds	r3, r6, r6
 8007706:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800770a:	4152      	adcs	r2, r2
 800770c:	4298      	cmp	r0, r3
 800770e:	4b9a      	ldr	r3, [pc, #616]	@ (8007978 <__ieee754_pow+0x290>)
 8007710:	4193      	sbcs	r3, r2
 8007712:	f080 84ee 	bcs.w	80080f2 <__ieee754_pow+0xa0a>
 8007716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 fdc5 	bl	80002ac <__adddf3>
 8007722:	ec41 0b10 	vmov	d0, r0, r1
 8007726:	b011      	add	sp, #68	@ 0x44
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	4a93      	ldr	r2, [pc, #588]	@ (800797c <__ieee754_pow+0x294>)
 800772e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8007732:	4295      	cmp	r5, r2
 8007734:	46b8      	mov	r8, r7
 8007736:	4633      	mov	r3, r6
 8007738:	d80a      	bhi.n	8007750 <__ieee754_pow+0x68>
 800773a:	d104      	bne.n	8007746 <__ieee754_pow+0x5e>
 800773c:	2e00      	cmp	r6, #0
 800773e:	d1ea      	bne.n	8007716 <__ieee754_pow+0x2e>
 8007740:	45aa      	cmp	sl, r5
 8007742:	d8e8      	bhi.n	8007716 <__ieee754_pow+0x2e>
 8007744:	e001      	b.n	800774a <__ieee754_pow+0x62>
 8007746:	4592      	cmp	sl, r2
 8007748:	d802      	bhi.n	8007750 <__ieee754_pow+0x68>
 800774a:	4592      	cmp	sl, r2
 800774c:	d10f      	bne.n	800776e <__ieee754_pow+0x86>
 800774e:	b171      	cbz	r1, 800776e <__ieee754_pow+0x86>
 8007750:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007754:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007758:	ea58 0803 	orrs.w	r8, r8, r3
 800775c:	d1db      	bne.n	8007716 <__ieee754_pow+0x2e>
 800775e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007762:	18db      	adds	r3, r3, r3
 8007764:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007768:	4152      	adcs	r2, r2
 800776a:	4598      	cmp	r8, r3
 800776c:	e7cf      	b.n	800770e <__ieee754_pow+0x26>
 800776e:	f1b8 0f00 	cmp.w	r8, #0
 8007772:	46ab      	mov	fp, r5
 8007774:	da43      	bge.n	80077fe <__ieee754_pow+0x116>
 8007776:	4a82      	ldr	r2, [pc, #520]	@ (8007980 <__ieee754_pow+0x298>)
 8007778:	4592      	cmp	sl, r2
 800777a:	d856      	bhi.n	800782a <__ieee754_pow+0x142>
 800777c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007780:	4592      	cmp	sl, r2
 8007782:	f240 84c5 	bls.w	8008110 <__ieee754_pow+0xa28>
 8007786:	ea4f 522a 	mov.w	r2, sl, asr #20
 800778a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800778e:	2a14      	cmp	r2, #20
 8007790:	dd18      	ble.n	80077c4 <__ieee754_pow+0xdc>
 8007792:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007796:	fa21 f402 	lsr.w	r4, r1, r2
 800779a:	fa04 f202 	lsl.w	r2, r4, r2
 800779e:	428a      	cmp	r2, r1
 80077a0:	f040 84b6 	bne.w	8008110 <__ieee754_pow+0xa28>
 80077a4:	f004 0401 	and.w	r4, r4, #1
 80077a8:	f1c4 0402 	rsb	r4, r4, #2
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d159      	bne.n	8007864 <__ieee754_pow+0x17c>
 80077b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80077b4:	d148      	bne.n	8007848 <__ieee754_pow+0x160>
 80077b6:	4632      	mov	r2, r6
 80077b8:	463b      	mov	r3, r7
 80077ba:	4630      	mov	r0, r6
 80077bc:	4639      	mov	r1, r7
 80077be:	f7f8 ff2b 	bl	8000618 <__aeabi_dmul>
 80077c2:	e7ae      	b.n	8007722 <__ieee754_pow+0x3a>
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d14c      	bne.n	8007862 <__ieee754_pow+0x17a>
 80077c8:	f1c2 0214 	rsb	r2, r2, #20
 80077cc:	fa4a f402 	asr.w	r4, sl, r2
 80077d0:	fa04 f202 	lsl.w	r2, r4, r2
 80077d4:	4552      	cmp	r2, sl
 80077d6:	f040 8498 	bne.w	800810a <__ieee754_pow+0xa22>
 80077da:	f004 0401 	and.w	r4, r4, #1
 80077de:	f1c4 0402 	rsb	r4, r4, #2
 80077e2:	4a68      	ldr	r2, [pc, #416]	@ (8007984 <__ieee754_pow+0x29c>)
 80077e4:	4592      	cmp	sl, r2
 80077e6:	d1e3      	bne.n	80077b0 <__ieee754_pow+0xc8>
 80077e8:	f1b9 0f00 	cmp.w	r9, #0
 80077ec:	f280 8489 	bge.w	8008102 <__ieee754_pow+0xa1a>
 80077f0:	4964      	ldr	r1, [pc, #400]	@ (8007984 <__ieee754_pow+0x29c>)
 80077f2:	4632      	mov	r2, r6
 80077f4:	463b      	mov	r3, r7
 80077f6:	2000      	movs	r0, #0
 80077f8:	f7f9 f838 	bl	800086c <__aeabi_ddiv>
 80077fc:	e791      	b.n	8007722 <__ieee754_pow+0x3a>
 80077fe:	2400      	movs	r4, #0
 8007800:	bb81      	cbnz	r1, 8007864 <__ieee754_pow+0x17c>
 8007802:	4a5e      	ldr	r2, [pc, #376]	@ (800797c <__ieee754_pow+0x294>)
 8007804:	4592      	cmp	sl, r2
 8007806:	d1ec      	bne.n	80077e2 <__ieee754_pow+0xfa>
 8007808:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800780c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007810:	431a      	orrs	r2, r3
 8007812:	f000 846e 	beq.w	80080f2 <__ieee754_pow+0xa0a>
 8007816:	4b5c      	ldr	r3, [pc, #368]	@ (8007988 <__ieee754_pow+0x2a0>)
 8007818:	429d      	cmp	r5, r3
 800781a:	d908      	bls.n	800782e <__ieee754_pow+0x146>
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	f280 846b 	bge.w	80080fa <__ieee754_pow+0xa12>
 8007824:	2000      	movs	r0, #0
 8007826:	2100      	movs	r1, #0
 8007828:	e77b      	b.n	8007722 <__ieee754_pow+0x3a>
 800782a:	2402      	movs	r4, #2
 800782c:	e7e8      	b.n	8007800 <__ieee754_pow+0x118>
 800782e:	f1b9 0f00 	cmp.w	r9, #0
 8007832:	f04f 0000 	mov.w	r0, #0
 8007836:	f04f 0100 	mov.w	r1, #0
 800783a:	f6bf af72 	bge.w	8007722 <__ieee754_pow+0x3a>
 800783e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007842:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007846:	e76c      	b.n	8007722 <__ieee754_pow+0x3a>
 8007848:	4a50      	ldr	r2, [pc, #320]	@ (800798c <__ieee754_pow+0x2a4>)
 800784a:	4591      	cmp	r9, r2
 800784c:	d10a      	bne.n	8007864 <__ieee754_pow+0x17c>
 800784e:	f1b8 0f00 	cmp.w	r8, #0
 8007852:	db07      	blt.n	8007864 <__ieee754_pow+0x17c>
 8007854:	ec47 6b10 	vmov	d0, r6, r7
 8007858:	b011      	add	sp, #68	@ 0x44
 800785a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785e:	f000 bd4f 	b.w	8008300 <__ieee754_sqrt>
 8007862:	2400      	movs	r4, #0
 8007864:	ec47 6b10 	vmov	d0, r6, r7
 8007868:	9302      	str	r3, [sp, #8]
 800786a:	f000 fc87 	bl	800817c <fabs>
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	ec51 0b10 	vmov	r0, r1, d0
 8007874:	bb43      	cbnz	r3, 80078c8 <__ieee754_pow+0x1e0>
 8007876:	4b43      	ldr	r3, [pc, #268]	@ (8007984 <__ieee754_pow+0x29c>)
 8007878:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800787c:	429a      	cmp	r2, r3
 800787e:	d000      	beq.n	8007882 <__ieee754_pow+0x19a>
 8007880:	bb15      	cbnz	r5, 80078c8 <__ieee754_pow+0x1e0>
 8007882:	f1b9 0f00 	cmp.w	r9, #0
 8007886:	da05      	bge.n	8007894 <__ieee754_pow+0x1ac>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	2000      	movs	r0, #0
 800788e:	493d      	ldr	r1, [pc, #244]	@ (8007984 <__ieee754_pow+0x29c>)
 8007890:	f7f8 ffec 	bl	800086c <__aeabi_ddiv>
 8007894:	f1b8 0f00 	cmp.w	r8, #0
 8007898:	f6bf af43 	bge.w	8007722 <__ieee754_pow+0x3a>
 800789c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80078a0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80078a4:	4325      	orrs	r5, r4
 80078a6:	d108      	bne.n	80078ba <__ieee754_pow+0x1d2>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	f7f8 fcfa 	bl	80002a8 <__aeabi_dsub>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	e79e      	b.n	80077f8 <__ieee754_pow+0x110>
 80078ba:	2c01      	cmp	r4, #1
 80078bc:	f47f af31 	bne.w	8007722 <__ieee754_pow+0x3a>
 80078c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078c4:	4619      	mov	r1, r3
 80078c6:	e72c      	b.n	8007722 <__ieee754_pow+0x3a>
 80078c8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80078cc:	3b01      	subs	r3, #1
 80078ce:	ea53 0204 	orrs.w	r2, r3, r4
 80078d2:	d102      	bne.n	80078da <__ieee754_pow+0x1f2>
 80078d4:	4632      	mov	r2, r6
 80078d6:	463b      	mov	r3, r7
 80078d8:	e7e8      	b.n	80078ac <__ieee754_pow+0x1c4>
 80078da:	3c01      	subs	r4, #1
 80078dc:	431c      	orrs	r4, r3
 80078de:	d016      	beq.n	800790e <__ieee754_pow+0x226>
 80078e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007968 <__ieee754_pow+0x280>
 80078e4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80078e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078ec:	f240 8110 	bls.w	8007b10 <__ieee754_pow+0x428>
 80078f0:	4b27      	ldr	r3, [pc, #156]	@ (8007990 <__ieee754_pow+0x2a8>)
 80078f2:	459a      	cmp	sl, r3
 80078f4:	4b24      	ldr	r3, [pc, #144]	@ (8007988 <__ieee754_pow+0x2a0>)
 80078f6:	d916      	bls.n	8007926 <__ieee754_pow+0x23e>
 80078f8:	429d      	cmp	r5, r3
 80078fa:	d80b      	bhi.n	8007914 <__ieee754_pow+0x22c>
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	da0b      	bge.n	800791a <__ieee754_pow+0x232>
 8007902:	2000      	movs	r0, #0
 8007904:	b011      	add	sp, #68	@ 0x44
 8007906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	f000 bcf1 	b.w	80082f0 <__math_oflow>
 800790e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007970 <__ieee754_pow+0x288>
 8007912:	e7e7      	b.n	80078e4 <__ieee754_pow+0x1fc>
 8007914:	f1b9 0f00 	cmp.w	r9, #0
 8007918:	dcf3      	bgt.n	8007902 <__ieee754_pow+0x21a>
 800791a:	2000      	movs	r0, #0
 800791c:	b011      	add	sp, #68	@ 0x44
 800791e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007922:	f000 bcdd 	b.w	80082e0 <__math_uflow>
 8007926:	429d      	cmp	r5, r3
 8007928:	d20c      	bcs.n	8007944 <__ieee754_pow+0x25c>
 800792a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	f7f9 f8e3 	bl	8000afc <__aeabi_dcmplt>
 8007936:	3800      	subs	r0, #0
 8007938:	bf18      	it	ne
 800793a:	2001      	movne	r0, #1
 800793c:	f1b9 0f00 	cmp.w	r9, #0
 8007940:	daec      	bge.n	800791c <__ieee754_pow+0x234>
 8007942:	e7df      	b.n	8007904 <__ieee754_pow+0x21c>
 8007944:	4b0f      	ldr	r3, [pc, #60]	@ (8007984 <__ieee754_pow+0x29c>)
 8007946:	429d      	cmp	r5, r3
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	d922      	bls.n	8007994 <__ieee754_pow+0x2ac>
 800794e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007952:	2300      	movs	r3, #0
 8007954:	f7f9 f8d2 	bl	8000afc <__aeabi_dcmplt>
 8007958:	3800      	subs	r0, #0
 800795a:	bf18      	it	ne
 800795c:	2001      	movne	r0, #1
 800795e:	f1b9 0f00 	cmp.w	r9, #0
 8007962:	dccf      	bgt.n	8007904 <__ieee754_pow+0x21c>
 8007964:	e7da      	b.n	800791c <__ieee754_pow+0x234>
 8007966:	bf00      	nop
 8007968:	00000000 	.word	0x00000000
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	00000000 	.word	0x00000000
 8007974:	bff00000 	.word	0xbff00000
 8007978:	fff00000 	.word	0xfff00000
 800797c:	7ff00000 	.word	0x7ff00000
 8007980:	433fffff 	.word	0x433fffff
 8007984:	3ff00000 	.word	0x3ff00000
 8007988:	3fefffff 	.word	0x3fefffff
 800798c:	3fe00000 	.word	0x3fe00000
 8007990:	43f00000 	.word	0x43f00000
 8007994:	4b5a      	ldr	r3, [pc, #360]	@ (8007b00 <__ieee754_pow+0x418>)
 8007996:	f7f8 fc87 	bl	80002a8 <__aeabi_dsub>
 800799a:	a351      	add	r3, pc, #324	@ (adr r3, 8007ae0 <__ieee754_pow+0x3f8>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	f7f8 fe38 	bl	8000618 <__aeabi_dmul>
 80079a8:	a34f      	add	r3, pc, #316	@ (adr r3, 8007ae8 <__ieee754_pow+0x400>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	4606      	mov	r6, r0
 80079b0:	460f      	mov	r7, r1
 80079b2:	4620      	mov	r0, r4
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7f8 fe2f 	bl	8000618 <__aeabi_dmul>
 80079ba:	4b52      	ldr	r3, [pc, #328]	@ (8007b04 <__ieee754_pow+0x41c>)
 80079bc:	4682      	mov	sl, r0
 80079be:	468b      	mov	fp, r1
 80079c0:	2200      	movs	r2, #0
 80079c2:	4620      	mov	r0, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	f7f8 fe27 	bl	8000618 <__aeabi_dmul>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	a148      	add	r1, pc, #288	@ (adr r1, 8007af0 <__ieee754_pow+0x408>)
 80079d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d4:	f7f8 fc68 	bl	80002a8 <__aeabi_dsub>
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	f7f8 fe1c 	bl	8000618 <__aeabi_dmul>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	2000      	movs	r0, #0
 80079e6:	4948      	ldr	r1, [pc, #288]	@ (8007b08 <__ieee754_pow+0x420>)
 80079e8:	f7f8 fc5e 	bl	80002a8 <__aeabi_dsub>
 80079ec:	4622      	mov	r2, r4
 80079ee:	4680      	mov	r8, r0
 80079f0:	4689      	mov	r9, r1
 80079f2:	462b      	mov	r3, r5
 80079f4:	4620      	mov	r0, r4
 80079f6:	4629      	mov	r1, r5
 80079f8:	f7f8 fe0e 	bl	8000618 <__aeabi_dmul>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7f8 fe08 	bl	8000618 <__aeabi_dmul>
 8007a08:	a33b      	add	r3, pc, #236	@ (adr r3, 8007af8 <__ieee754_pow+0x410>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f7f8 fe03 	bl	8000618 <__aeabi_dmul>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4650      	mov	r0, sl
 8007a18:	4659      	mov	r1, fp
 8007a1a:	f7f8 fc45 	bl	80002a8 <__aeabi_dsub>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4680      	mov	r8, r0
 8007a24:	4689      	mov	r9, r1
 8007a26:	4630      	mov	r0, r6
 8007a28:	4639      	mov	r1, r7
 8007a2a:	f7f8 fc3f 	bl	80002ac <__adddf3>
 8007a2e:	2400      	movs	r4, #0
 8007a30:	4632      	mov	r2, r6
 8007a32:	463b      	mov	r3, r7
 8007a34:	4620      	mov	r0, r4
 8007a36:	460d      	mov	r5, r1
 8007a38:	f7f8 fc36 	bl	80002a8 <__aeabi_dsub>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4640      	mov	r0, r8
 8007a42:	4649      	mov	r1, r9
 8007a44:	f7f8 fc30 	bl	80002a8 <__aeabi_dsub>
 8007a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a50:	2300      	movs	r3, #0
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007a58:	4606      	mov	r6, r0
 8007a5a:	460f      	mov	r7, r1
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	4652      	mov	r2, sl
 8007a60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a64:	f7f8 fc20 	bl	80002a8 <__aeabi_dsub>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	f7f8 fdd4 	bl	8000618 <__aeabi_dmul>
 8007a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a74:	4680      	mov	r8, r0
 8007a76:	4689      	mov	r9, r1
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f8 fdcc 	bl	8000618 <__aeabi_dmul>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4640      	mov	r0, r8
 8007a86:	4649      	mov	r1, r9
 8007a88:	f7f8 fc10 	bl	80002ac <__adddf3>
 8007a8c:	465b      	mov	r3, fp
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	4652      	mov	r2, sl
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f8 fdbe 	bl	8000618 <__aeabi_dmul>
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	4689      	mov	r9, r1
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	f7f8 fc00 	bl	80002ac <__adddf3>
 8007aac:	4b17      	ldr	r3, [pc, #92]	@ (8007b0c <__ieee754_pow+0x424>)
 8007aae:	4299      	cmp	r1, r3
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	468b      	mov	fp, r1
 8007ab6:	f340 820b 	ble.w	8007ed0 <__ieee754_pow+0x7e8>
 8007aba:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007abe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007ac2:	4303      	orrs	r3, r0
 8007ac4:	f000 81ea 	beq.w	8007e9c <__ieee754_pow+0x7b4>
 8007ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f7f9 f814 	bl	8000afc <__aeabi_dcmplt>
 8007ad4:	3800      	subs	r0, #0
 8007ad6:	bf18      	it	ne
 8007ad8:	2001      	movne	r0, #1
 8007ada:	e713      	b.n	8007904 <__ieee754_pow+0x21c>
 8007adc:	f3af 8000 	nop.w
 8007ae0:	60000000 	.word	0x60000000
 8007ae4:	3ff71547 	.word	0x3ff71547
 8007ae8:	f85ddf44 	.word	0xf85ddf44
 8007aec:	3e54ae0b 	.word	0x3e54ae0b
 8007af0:	55555555 	.word	0x55555555
 8007af4:	3fd55555 	.word	0x3fd55555
 8007af8:	652b82fe 	.word	0x652b82fe
 8007afc:	3ff71547 	.word	0x3ff71547
 8007b00:	3ff00000 	.word	0x3ff00000
 8007b04:	3fd00000 	.word	0x3fd00000
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	408fffff 	.word	0x408fffff
 8007b10:	4bd5      	ldr	r3, [pc, #852]	@ (8007e68 <__ieee754_pow+0x780>)
 8007b12:	ea08 0303 	and.w	r3, r8, r3
 8007b16:	2200      	movs	r2, #0
 8007b18:	b92b      	cbnz	r3, 8007b26 <__ieee754_pow+0x43e>
 8007b1a:	4bd4      	ldr	r3, [pc, #848]	@ (8007e6c <__ieee754_pow+0x784>)
 8007b1c:	f7f8 fd7c 	bl	8000618 <__aeabi_dmul>
 8007b20:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007b24:	468b      	mov	fp, r1
 8007b26:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007b2a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007b2e:	4413      	add	r3, r2
 8007b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b32:	4bcf      	ldr	r3, [pc, #828]	@ (8007e70 <__ieee754_pow+0x788>)
 8007b34:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007b38:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007b3c:	459b      	cmp	fp, r3
 8007b3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007b42:	dd08      	ble.n	8007b56 <__ieee754_pow+0x46e>
 8007b44:	4bcb      	ldr	r3, [pc, #812]	@ (8007e74 <__ieee754_pow+0x78c>)
 8007b46:	459b      	cmp	fp, r3
 8007b48:	f340 81a5 	ble.w	8007e96 <__ieee754_pow+0x7ae>
 8007b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b4e:	3301      	adds	r3, #1
 8007b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b52:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007b56:	f04f 0a00 	mov.w	sl, #0
 8007b5a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b60:	4bc5      	ldr	r3, [pc, #788]	@ (8007e78 <__ieee754_pow+0x790>)
 8007b62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b66:	ed93 7b00 	vldr	d7, [r3]
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	ec53 2b17 	vmov	r2, r3, d7
 8007b70:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b78:	f7f8 fb96 	bl	80002a8 <__aeabi_dsub>
 8007b7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b80:	4606      	mov	r6, r0
 8007b82:	460f      	mov	r7, r1
 8007b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b88:	f7f8 fb90 	bl	80002ac <__adddf3>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	2000      	movs	r0, #0
 8007b92:	49ba      	ldr	r1, [pc, #744]	@ (8007e7c <__ieee754_pow+0x794>)
 8007b94:	f7f8 fe6a 	bl	800086c <__aeabi_ddiv>
 8007b98:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	f7f8 fd38 	bl	8000618 <__aeabi_dmul>
 8007ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bac:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007bb0:	106d      	asrs	r5, r5, #1
 8007bb2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007bb6:	f04f 0b00 	mov.w	fp, #0
 8007bba:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007bbe:	4661      	mov	r1, ip
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	46e1      	mov	r9, ip
 8007bca:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007bce:	4614      	mov	r4, r2
 8007bd0:	461d      	mov	r5, r3
 8007bd2:	f7f8 fd21 	bl	8000618 <__aeabi_dmul>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4630      	mov	r0, r6
 8007bdc:	4639      	mov	r1, r7
 8007bde:	f7f8 fb63 	bl	80002a8 <__aeabi_dsub>
 8007be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007be6:	4606      	mov	r6, r0
 8007be8:	460f      	mov	r7, r1
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fb5b 	bl	80002a8 <__aeabi_dsub>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bfa:	f7f8 fb55 	bl	80002a8 <__aeabi_dsub>
 8007bfe:	465a      	mov	r2, fp
 8007c00:	464b      	mov	r3, r9
 8007c02:	f7f8 fd09 	bl	8000618 <__aeabi_dmul>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 fb4b 	bl	80002a8 <__aeabi_dsub>
 8007c12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c16:	f7f8 fcff 	bl	8000618 <__aeabi_dmul>
 8007c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c22:	4610      	mov	r0, r2
 8007c24:	4619      	mov	r1, r3
 8007c26:	f7f8 fcf7 	bl	8000618 <__aeabi_dmul>
 8007c2a:	a37d      	add	r3, pc, #500	@ (adr r3, 8007e20 <__ieee754_pow+0x738>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	4604      	mov	r4, r0
 8007c32:	460d      	mov	r5, r1
 8007c34:	f7f8 fcf0 	bl	8000618 <__aeabi_dmul>
 8007c38:	a37b      	add	r3, pc, #492	@ (adr r3, 8007e28 <__ieee754_pow+0x740>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fb35 	bl	80002ac <__adddf3>
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	f7f8 fce7 	bl	8000618 <__aeabi_dmul>
 8007c4a:	a379      	add	r3, pc, #484	@ (adr r3, 8007e30 <__ieee754_pow+0x748>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fb2c 	bl	80002ac <__adddf3>
 8007c54:	4622      	mov	r2, r4
 8007c56:	462b      	mov	r3, r5
 8007c58:	f7f8 fcde 	bl	8000618 <__aeabi_dmul>
 8007c5c:	a376      	add	r3, pc, #472	@ (adr r3, 8007e38 <__ieee754_pow+0x750>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fb23 	bl	80002ac <__adddf3>
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	f7f8 fcd5 	bl	8000618 <__aeabi_dmul>
 8007c6e:	a374      	add	r3, pc, #464	@ (adr r3, 8007e40 <__ieee754_pow+0x758>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fb1a 	bl	80002ac <__adddf3>
 8007c78:	4622      	mov	r2, r4
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	f7f8 fccc 	bl	8000618 <__aeabi_dmul>
 8007c80:	a371      	add	r3, pc, #452	@ (adr r3, 8007e48 <__ieee754_pow+0x760>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fb11 	bl	80002ac <__adddf3>
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	460f      	mov	r7, r1
 8007c90:	462b      	mov	r3, r5
 8007c92:	4620      	mov	r0, r4
 8007c94:	4629      	mov	r1, r5
 8007c96:	f7f8 fcbf 	bl	8000618 <__aeabi_dmul>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	f7f8 fcb9 	bl	8000618 <__aeabi_dmul>
 8007ca6:	465a      	mov	r2, fp
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	464b      	mov	r3, r9
 8007cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb2:	f7f8 fafb 	bl	80002ac <__adddf3>
 8007cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cba:	f7f8 fcad 	bl	8000618 <__aeabi_dmul>
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	f7f8 faf3 	bl	80002ac <__adddf3>
 8007cc6:	465a      	mov	r2, fp
 8007cc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ccc:	464b      	mov	r3, r9
 8007cce:	4658      	mov	r0, fp
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	f7f8 fca1 	bl	8000618 <__aeabi_dmul>
 8007cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007e80 <__ieee754_pow+0x798>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	f7f8 fae5 	bl	80002ac <__adddf3>
 8007ce2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ce6:	f7f8 fae1 	bl	80002ac <__adddf3>
 8007cea:	46d8      	mov	r8, fp
 8007cec:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	465a      	mov	r2, fp
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007cfe:	f7f8 fc8b 	bl	8000618 <__aeabi_dmul>
 8007d02:	465c      	mov	r4, fp
 8007d04:	4680      	mov	r8, r0
 8007d06:	4689      	mov	r9, r1
 8007d08:	4b5d      	ldr	r3, [pc, #372]	@ (8007e80 <__ieee754_pow+0x798>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f7f8 faca 	bl	80002a8 <__aeabi_dsub>
 8007d14:	4632      	mov	r2, r6
 8007d16:	463b      	mov	r3, r7
 8007d18:	f7f8 fac6 	bl	80002a8 <__aeabi_dsub>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d24:	f7f8 fac0 	bl	80002a8 <__aeabi_dsub>
 8007d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d2c:	f7f8 fc74 	bl	8000618 <__aeabi_dmul>
 8007d30:	4622      	mov	r2, r4
 8007d32:	4606      	mov	r6, r0
 8007d34:	460f      	mov	r7, r1
 8007d36:	462b      	mov	r3, r5
 8007d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d3c:	f7f8 fc6c 	bl	8000618 <__aeabi_dmul>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4630      	mov	r0, r6
 8007d46:	4639      	mov	r1, r7
 8007d48:	f7f8 fab0 	bl	80002ac <__adddf3>
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	460f      	mov	r7, r1
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 faa8 	bl	80002ac <__adddf3>
 8007d5c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007d60:	a33b      	add	r3, pc, #236	@ (adr r3, 8007e50 <__ieee754_pow+0x768>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	4658      	mov	r0, fp
 8007d68:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007d6c:	460d      	mov	r5, r1
 8007d6e:	f7f8 fc53 	bl	8000618 <__aeabi_dmul>
 8007d72:	465c      	mov	r4, fp
 8007d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	4629      	mov	r1, r5
 8007d80:	f7f8 fa92 	bl	80002a8 <__aeabi_dsub>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fa8c 	bl	80002a8 <__aeabi_dsub>
 8007d90:	a331      	add	r3, pc, #196	@ (adr r3, 8007e58 <__ieee754_pow+0x770>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f7f8 fc3f 	bl	8000618 <__aeabi_dmul>
 8007d9a:	a331      	add	r3, pc, #196	@ (adr r3, 8007e60 <__ieee754_pow+0x778>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	4606      	mov	r6, r0
 8007da2:	460f      	mov	r7, r1
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fc36 	bl	8000618 <__aeabi_dmul>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4630      	mov	r0, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	f7f8 fa7a 	bl	80002ac <__adddf3>
 8007db8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007dba:	4b32      	ldr	r3, [pc, #200]	@ (8007e84 <__ieee754_pow+0x79c>)
 8007dbc:	4413      	add	r3, r2
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fa73 	bl	80002ac <__adddf3>
 8007dc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007dcc:	f7f8 fbba 	bl	8000544 <__aeabi_i2d>
 8007dd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8007e88 <__ieee754_pow+0x7a0>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dda:	4606      	mov	r6, r0
 8007ddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007de0:	460f      	mov	r7, r1
 8007de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de6:	f7f8 fa61 	bl	80002ac <__adddf3>
 8007dea:	4642      	mov	r2, r8
 8007dec:	464b      	mov	r3, r9
 8007dee:	f7f8 fa5d 	bl	80002ac <__adddf3>
 8007df2:	4632      	mov	r2, r6
 8007df4:	463b      	mov	r3, r7
 8007df6:	f7f8 fa59 	bl	80002ac <__adddf3>
 8007dfa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007dfe:	4632      	mov	r2, r6
 8007e00:	463b      	mov	r3, r7
 8007e02:	4658      	mov	r0, fp
 8007e04:	460d      	mov	r5, r1
 8007e06:	f7f8 fa4f 	bl	80002a8 <__aeabi_dsub>
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	f7f8 fa4b 	bl	80002a8 <__aeabi_dsub>
 8007e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e16:	f7f8 fa47 	bl	80002a8 <__aeabi_dsub>
 8007e1a:	465c      	mov	r4, fp
 8007e1c:	e036      	b.n	8007e8c <__ieee754_pow+0x7a4>
 8007e1e:	bf00      	nop
 8007e20:	4a454eef 	.word	0x4a454eef
 8007e24:	3fca7e28 	.word	0x3fca7e28
 8007e28:	93c9db65 	.word	0x93c9db65
 8007e2c:	3fcd864a 	.word	0x3fcd864a
 8007e30:	a91d4101 	.word	0xa91d4101
 8007e34:	3fd17460 	.word	0x3fd17460
 8007e38:	518f264d 	.word	0x518f264d
 8007e3c:	3fd55555 	.word	0x3fd55555
 8007e40:	db6fabff 	.word	0xdb6fabff
 8007e44:	3fdb6db6 	.word	0x3fdb6db6
 8007e48:	33333303 	.word	0x33333303
 8007e4c:	3fe33333 	.word	0x3fe33333
 8007e50:	e0000000 	.word	0xe0000000
 8007e54:	3feec709 	.word	0x3feec709
 8007e58:	dc3a03fd 	.word	0xdc3a03fd
 8007e5c:	3feec709 	.word	0x3feec709
 8007e60:	145b01f5 	.word	0x145b01f5
 8007e64:	be3e2fe0 	.word	0xbe3e2fe0
 8007e68:	7ff00000 	.word	0x7ff00000
 8007e6c:	43400000 	.word	0x43400000
 8007e70:	0003988e 	.word	0x0003988e
 8007e74:	000bb679 	.word	0x000bb679
 8007e78:	08008968 	.word	0x08008968
 8007e7c:	3ff00000 	.word	0x3ff00000
 8007e80:	40080000 	.word	0x40080000
 8007e84:	08008948 	.word	0x08008948
 8007e88:	08008958 	.word	0x08008958
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e94:	e5d6      	b.n	8007a44 <__ieee754_pow+0x35c>
 8007e96:	f04f 0a01 	mov.w	sl, #1
 8007e9a:	e65e      	b.n	8007b5a <__ieee754_pow+0x472>
 8007e9c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008174 <__ieee754_pow+0xa8c>)
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	f7f8 fa01 	bl	80002ac <__adddf3>
 8007eaa:	4642      	mov	r2, r8
 8007eac:	e9cd 0100 	strd	r0, r1, [sp]
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	f7f8 f9f7 	bl	80002a8 <__aeabi_dsub>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ec2:	f7f8 fe39 	bl	8000b38 <__aeabi_dcmpgt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f47f adfe 	bne.w	8007ac8 <__ieee754_pow+0x3e0>
 8007ecc:	4ba2      	ldr	r3, [pc, #648]	@ (8008158 <__ieee754_pow+0xa70>)
 8007ece:	e022      	b.n	8007f16 <__ieee754_pow+0x82e>
 8007ed0:	4ca2      	ldr	r4, [pc, #648]	@ (800815c <__ieee754_pow+0xa74>)
 8007ed2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007ed6:	42a3      	cmp	r3, r4
 8007ed8:	d919      	bls.n	8007f0e <__ieee754_pow+0x826>
 8007eda:	4ba1      	ldr	r3, [pc, #644]	@ (8008160 <__ieee754_pow+0xa78>)
 8007edc:	440b      	add	r3, r1
 8007ede:	4303      	orrs	r3, r0
 8007ee0:	d009      	beq.n	8007ef6 <__ieee754_pow+0x80e>
 8007ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f7f8 fe07 	bl	8000afc <__aeabi_dcmplt>
 8007eee:	3800      	subs	r0, #0
 8007ef0:	bf18      	it	ne
 8007ef2:	2001      	movne	r0, #1
 8007ef4:	e512      	b.n	800791c <__ieee754_pow+0x234>
 8007ef6:	4642      	mov	r2, r8
 8007ef8:	464b      	mov	r3, r9
 8007efa:	f7f8 f9d5 	bl	80002a8 <__aeabi_dsub>
 8007efe:	4632      	mov	r2, r6
 8007f00:	463b      	mov	r3, r7
 8007f02:	f7f8 fe0f 	bl	8000b24 <__aeabi_dcmpge>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d1eb      	bne.n	8007ee2 <__ieee754_pow+0x7fa>
 8007f0a:	4b96      	ldr	r3, [pc, #600]	@ (8008164 <__ieee754_pow+0xa7c>)
 8007f0c:	e003      	b.n	8007f16 <__ieee754_pow+0x82e>
 8007f0e:	4a96      	ldr	r2, [pc, #600]	@ (8008168 <__ieee754_pow+0xa80>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	f240 80e7 	bls.w	80080e4 <__ieee754_pow+0x9fc>
 8007f16:	151b      	asrs	r3, r3, #20
 8007f18:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8007f1c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8007f20:	fa4a fa03 	asr.w	sl, sl, r3
 8007f24:	44da      	add	sl, fp
 8007f26:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007f2a:	4890      	ldr	r0, [pc, #576]	@ (800816c <__ieee754_pow+0xa84>)
 8007f2c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007f30:	4108      	asrs	r0, r1
 8007f32:	ea00 030a 	and.w	r3, r0, sl
 8007f36:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007f3a:	f1c1 0114 	rsb	r1, r1, #20
 8007f3e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007f42:	fa4a fa01 	asr.w	sl, sl, r1
 8007f46:	f1bb 0f00 	cmp.w	fp, #0
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	bfb8      	it	lt
 8007f54:	f1ca 0a00 	rsblt	sl, sl, #0
 8007f58:	f7f8 f9a6 	bl	80002a8 <__aeabi_dsub>
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	4689      	mov	r9, r1
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 f9a0 	bl	80002ac <__adddf3>
 8007f6c:	2400      	movs	r4, #0
 8007f6e:	a36a      	add	r3, pc, #424	@ (adr r3, 8008118 <__ieee754_pow+0xa30>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4620      	mov	r0, r4
 8007f76:	460d      	mov	r5, r1
 8007f78:	f7f8 fb4e 	bl	8000618 <__aeabi_dmul>
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	e9cd 0100 	strd	r0, r1, [sp]
 8007f82:	464b      	mov	r3, r9
 8007f84:	4620      	mov	r0, r4
 8007f86:	4629      	mov	r1, r5
 8007f88:	f7f8 f98e 	bl	80002a8 <__aeabi_dsub>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 f988 	bl	80002a8 <__aeabi_dsub>
 8007f98:	a361      	add	r3, pc, #388	@ (adr r3, 8008120 <__ieee754_pow+0xa38>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 fb3b 	bl	8000618 <__aeabi_dmul>
 8007fa2:	a361      	add	r3, pc, #388	@ (adr r3, 8008128 <__ieee754_pow+0xa40>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4689      	mov	r9, r1
 8007fac:	4620      	mov	r0, r4
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 fb32 	bl	8000618 <__aeabi_dmul>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4640      	mov	r0, r8
 8007fba:	4649      	mov	r1, r9
 8007fbc:	f7f8 f976 	bl	80002ac <__adddf3>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	460d      	mov	r5, r1
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fcc:	f7f8 f96e 	bl	80002ac <__adddf3>
 8007fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fd4:	4680      	mov	r8, r0
 8007fd6:	4689      	mov	r9, r1
 8007fd8:	f7f8 f966 	bl	80002a8 <__aeabi_dsub>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	f7f8 f960 	bl	80002a8 <__aeabi_dsub>
 8007fe8:	4642      	mov	r2, r8
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	464b      	mov	r3, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	f7f8 fb10 	bl	8000618 <__aeabi_dmul>
 8007ff8:	a34d      	add	r3, pc, #308	@ (adr r3, 8008130 <__ieee754_pow+0xa48>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	4604      	mov	r4, r0
 8008000:	460d      	mov	r5, r1
 8008002:	f7f8 fb09 	bl	8000618 <__aeabi_dmul>
 8008006:	a34c      	add	r3, pc, #304	@ (adr r3, 8008138 <__ieee754_pow+0xa50>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f7f8 f94c 	bl	80002a8 <__aeabi_dsub>
 8008010:	4622      	mov	r2, r4
 8008012:	462b      	mov	r3, r5
 8008014:	f7f8 fb00 	bl	8000618 <__aeabi_dmul>
 8008018:	a349      	add	r3, pc, #292	@ (adr r3, 8008140 <__ieee754_pow+0xa58>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 f945 	bl	80002ac <__adddf3>
 8008022:	4622      	mov	r2, r4
 8008024:	462b      	mov	r3, r5
 8008026:	f7f8 faf7 	bl	8000618 <__aeabi_dmul>
 800802a:	a347      	add	r3, pc, #284	@ (adr r3, 8008148 <__ieee754_pow+0xa60>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f7f8 f93a 	bl	80002a8 <__aeabi_dsub>
 8008034:	4622      	mov	r2, r4
 8008036:	462b      	mov	r3, r5
 8008038:	f7f8 faee 	bl	8000618 <__aeabi_dmul>
 800803c:	a344      	add	r3, pc, #272	@ (adr r3, 8008150 <__ieee754_pow+0xa68>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f7f8 f933 	bl	80002ac <__adddf3>
 8008046:	4622      	mov	r2, r4
 8008048:	462b      	mov	r3, r5
 800804a:	f7f8 fae5 	bl	8000618 <__aeabi_dmul>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 f927 	bl	80002a8 <__aeabi_dsub>
 800805a:	4604      	mov	r4, r0
 800805c:	460d      	mov	r5, r1
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 fad7 	bl	8000618 <__aeabi_dmul>
 800806a:	2200      	movs	r2, #0
 800806c:	e9cd 0100 	strd	r0, r1, [sp]
 8008070:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 f916 	bl	80002a8 <__aeabi_dsub>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008084:	f7f8 fbf2 	bl	800086c <__aeabi_ddiv>
 8008088:	4632      	mov	r2, r6
 800808a:	4604      	mov	r4, r0
 800808c:	460d      	mov	r5, r1
 800808e:	463b      	mov	r3, r7
 8008090:	4640      	mov	r0, r8
 8008092:	4649      	mov	r1, r9
 8008094:	f7f8 fac0 	bl	8000618 <__aeabi_dmul>
 8008098:	4632      	mov	r2, r6
 800809a:	463b      	mov	r3, r7
 800809c:	f7f8 f906 	bl	80002ac <__adddf3>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7f8 f8fe 	bl	80002a8 <__aeabi_dsub>
 80080ac:	4642      	mov	r2, r8
 80080ae:	464b      	mov	r3, r9
 80080b0:	f7f8 f8fa 	bl	80002a8 <__aeabi_dsub>
 80080b4:	460b      	mov	r3, r1
 80080b6:	4602      	mov	r2, r0
 80080b8:	492d      	ldr	r1, [pc, #180]	@ (8008170 <__ieee754_pow+0xa88>)
 80080ba:	2000      	movs	r0, #0
 80080bc:	f7f8 f8f4 	bl	80002a8 <__aeabi_dsub>
 80080c0:	ec41 0b10 	vmov	d0, r0, r1
 80080c4:	ee10 3a90 	vmov	r3, s1
 80080c8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80080cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080d0:	da0b      	bge.n	80080ea <__ieee754_pow+0xa02>
 80080d2:	4650      	mov	r0, sl
 80080d4:	f000 f85c 	bl	8008190 <scalbn>
 80080d8:	ec51 0b10 	vmov	r0, r1, d0
 80080dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080e0:	f7ff bb6d 	b.w	80077be <__ieee754_pow+0xd6>
 80080e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80080e8:	e73a      	b.n	8007f60 <__ieee754_pow+0x878>
 80080ea:	ec51 0b10 	vmov	r0, r1, d0
 80080ee:	4619      	mov	r1, r3
 80080f0:	e7f4      	b.n	80080dc <__ieee754_pow+0x9f4>
 80080f2:	491f      	ldr	r1, [pc, #124]	@ (8008170 <__ieee754_pow+0xa88>)
 80080f4:	2000      	movs	r0, #0
 80080f6:	f7ff bb14 	b.w	8007722 <__ieee754_pow+0x3a>
 80080fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080fe:	f7ff bb10 	b.w	8007722 <__ieee754_pow+0x3a>
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7ff bb0c 	b.w	8007722 <__ieee754_pow+0x3a>
 800810a:	460c      	mov	r4, r1
 800810c:	f7ff bb69 	b.w	80077e2 <__ieee754_pow+0xfa>
 8008110:	2400      	movs	r4, #0
 8008112:	f7ff bb4b 	b.w	80077ac <__ieee754_pow+0xc4>
 8008116:	bf00      	nop
 8008118:	00000000 	.word	0x00000000
 800811c:	3fe62e43 	.word	0x3fe62e43
 8008120:	fefa39ef 	.word	0xfefa39ef
 8008124:	3fe62e42 	.word	0x3fe62e42
 8008128:	0ca86c39 	.word	0x0ca86c39
 800812c:	be205c61 	.word	0xbe205c61
 8008130:	72bea4d0 	.word	0x72bea4d0
 8008134:	3e663769 	.word	0x3e663769
 8008138:	c5d26bf1 	.word	0xc5d26bf1
 800813c:	3ebbbd41 	.word	0x3ebbbd41
 8008140:	af25de2c 	.word	0xaf25de2c
 8008144:	3f11566a 	.word	0x3f11566a
 8008148:	16bebd93 	.word	0x16bebd93
 800814c:	3f66c16c 	.word	0x3f66c16c
 8008150:	5555553e 	.word	0x5555553e
 8008154:	3fc55555 	.word	0x3fc55555
 8008158:	40900000 	.word	0x40900000
 800815c:	4090cbff 	.word	0x4090cbff
 8008160:	3f6f3400 	.word	0x3f6f3400
 8008164:	4090cc00 	.word	0x4090cc00
 8008168:	3fe00000 	.word	0x3fe00000
 800816c:	fff00000 	.word	0xfff00000
 8008170:	3ff00000 	.word	0x3ff00000
 8008174:	652b82fe 	.word	0x652b82fe
 8008178:	3c971547 	.word	0x3c971547

0800817c <fabs>:
 800817c:	ec51 0b10 	vmov	r0, r1, d0
 8008180:	4602      	mov	r2, r0
 8008182:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008186:	ec43 2b10 	vmov	d0, r2, r3
 800818a:	4770      	bx	lr
 800818c:	0000      	movs	r0, r0
	...

08008190 <scalbn>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	ec55 4b10 	vmov	r4, r5, d0
 8008196:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800819a:	4606      	mov	r6, r0
 800819c:	462b      	mov	r3, r5
 800819e:	b991      	cbnz	r1, 80081c6 <scalbn+0x36>
 80081a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80081a4:	4323      	orrs	r3, r4
 80081a6:	d03b      	beq.n	8008220 <scalbn+0x90>
 80081a8:	4b33      	ldr	r3, [pc, #204]	@ (8008278 <scalbn+0xe8>)
 80081aa:	4620      	mov	r0, r4
 80081ac:	4629      	mov	r1, r5
 80081ae:	2200      	movs	r2, #0
 80081b0:	f7f8 fa32 	bl	8000618 <__aeabi_dmul>
 80081b4:	4b31      	ldr	r3, [pc, #196]	@ (800827c <scalbn+0xec>)
 80081b6:	429e      	cmp	r6, r3
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	da0f      	bge.n	80081de <scalbn+0x4e>
 80081be:	a326      	add	r3, pc, #152	@ (adr r3, 8008258 <scalbn+0xc8>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	e01e      	b.n	8008204 <scalbn+0x74>
 80081c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80081ca:	4291      	cmp	r1, r2
 80081cc:	d10b      	bne.n	80081e6 <scalbn+0x56>
 80081ce:	4622      	mov	r2, r4
 80081d0:	4620      	mov	r0, r4
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7f8 f86a 	bl	80002ac <__adddf3>
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	e020      	b.n	8008220 <scalbn+0x90>
 80081de:	460b      	mov	r3, r1
 80081e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081e4:	3936      	subs	r1, #54	@ 0x36
 80081e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80081ea:	4296      	cmp	r6, r2
 80081ec:	dd0d      	ble.n	800820a <scalbn+0x7a>
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	a11b      	add	r1, pc, #108	@ (adr r1, 8008260 <scalbn+0xd0>)
 80081f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081f6:	da02      	bge.n	80081fe <scalbn+0x6e>
 80081f8:	a11b      	add	r1, pc, #108	@ (adr r1, 8008268 <scalbn+0xd8>)
 80081fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081fe:	a318      	add	r3, pc, #96	@ (adr r3, 8008260 <scalbn+0xd0>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f7f8 fa08 	bl	8000618 <__aeabi_dmul>
 8008208:	e7e6      	b.n	80081d8 <scalbn+0x48>
 800820a:	1872      	adds	r2, r6, r1
 800820c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008210:	428a      	cmp	r2, r1
 8008212:	dcec      	bgt.n	80081ee <scalbn+0x5e>
 8008214:	2a00      	cmp	r2, #0
 8008216:	dd06      	ble.n	8008226 <scalbn+0x96>
 8008218:	f36f 531e 	bfc	r3, #20, #11
 800821c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008220:	ec45 4b10 	vmov	d0, r4, r5
 8008224:	bd70      	pop	{r4, r5, r6, pc}
 8008226:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800822a:	da08      	bge.n	800823e <scalbn+0xae>
 800822c:	2d00      	cmp	r5, #0
 800822e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008258 <scalbn+0xc8>)
 8008230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008234:	dac3      	bge.n	80081be <scalbn+0x2e>
 8008236:	a10e      	add	r1, pc, #56	@ (adr r1, 8008270 <scalbn+0xe0>)
 8008238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823c:	e7bf      	b.n	80081be <scalbn+0x2e>
 800823e:	3236      	adds	r2, #54	@ 0x36
 8008240:	f36f 531e 	bfc	r3, #20, #11
 8008244:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008248:	4620      	mov	r0, r4
 800824a:	4b0d      	ldr	r3, [pc, #52]	@ (8008280 <scalbn+0xf0>)
 800824c:	4629      	mov	r1, r5
 800824e:	2200      	movs	r2, #0
 8008250:	e7d8      	b.n	8008204 <scalbn+0x74>
 8008252:	bf00      	nop
 8008254:	f3af 8000 	nop.w
 8008258:	c2f8f359 	.word	0xc2f8f359
 800825c:	01a56e1f 	.word	0x01a56e1f
 8008260:	8800759c 	.word	0x8800759c
 8008264:	7e37e43c 	.word	0x7e37e43c
 8008268:	8800759c 	.word	0x8800759c
 800826c:	fe37e43c 	.word	0xfe37e43c
 8008270:	c2f8f359 	.word	0xc2f8f359
 8008274:	81a56e1f 	.word	0x81a56e1f
 8008278:	43500000 	.word	0x43500000
 800827c:	ffff3cb0 	.word	0xffff3cb0
 8008280:	3c900000 	.word	0x3c900000

08008284 <with_errno>:
 8008284:	b510      	push	{r4, lr}
 8008286:	ed2d 8b02 	vpush	{d8}
 800828a:	eeb0 8a40 	vmov.f32	s16, s0
 800828e:	eef0 8a60 	vmov.f32	s17, s1
 8008292:	4604      	mov	r4, r0
 8008294:	f7fc ff6c 	bl	8005170 <__errno>
 8008298:	eeb0 0a48 	vmov.f32	s0, s16
 800829c:	eef0 0a68 	vmov.f32	s1, s17
 80082a0:	ecbd 8b02 	vpop	{d8}
 80082a4:	6004      	str	r4, [r0, #0]
 80082a6:	bd10      	pop	{r4, pc}

080082a8 <xflow>:
 80082a8:	4603      	mov	r3, r0
 80082aa:	b507      	push	{r0, r1, r2, lr}
 80082ac:	ec51 0b10 	vmov	r0, r1, d0
 80082b0:	b183      	cbz	r3, 80082d4 <xflow+0x2c>
 80082b2:	4602      	mov	r2, r0
 80082b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082b8:	e9cd 2300 	strd	r2, r3, [sp]
 80082bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082c0:	f7f8 f9aa 	bl	8000618 <__aeabi_dmul>
 80082c4:	ec41 0b10 	vmov	d0, r0, r1
 80082c8:	2022      	movs	r0, #34	@ 0x22
 80082ca:	b003      	add	sp, #12
 80082cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80082d0:	f7ff bfd8 	b.w	8008284 <with_errno>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	e7ee      	b.n	80082b8 <xflow+0x10>
 80082da:	0000      	movs	r0, r0
 80082dc:	0000      	movs	r0, r0
	...

080082e0 <__math_uflow>:
 80082e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082e8 <__math_uflow+0x8>
 80082e4:	f7ff bfe0 	b.w	80082a8 <xflow>
 80082e8:	00000000 	.word	0x00000000
 80082ec:	10000000 	.word	0x10000000

080082f0 <__math_oflow>:
 80082f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082f8 <__math_oflow+0x8>
 80082f4:	f7ff bfd8 	b.w	80082a8 <xflow>
 80082f8:	00000000 	.word	0x00000000
 80082fc:	70000000 	.word	0x70000000

08008300 <__ieee754_sqrt>:
 8008300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	4a66      	ldr	r2, [pc, #408]	@ (80084a0 <__ieee754_sqrt+0x1a0>)
 8008306:	ec55 4b10 	vmov	r4, r5, d0
 800830a:	43aa      	bics	r2, r5
 800830c:	462b      	mov	r3, r5
 800830e:	4621      	mov	r1, r4
 8008310:	d110      	bne.n	8008334 <__ieee754_sqrt+0x34>
 8008312:	4622      	mov	r2, r4
 8008314:	4620      	mov	r0, r4
 8008316:	4629      	mov	r1, r5
 8008318:	f7f8 f97e 	bl	8000618 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4620      	mov	r0, r4
 8008322:	4629      	mov	r1, r5
 8008324:	f7f7 ffc2 	bl	80002ac <__adddf3>
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	ec45 4b10 	vmov	d0, r4, r5
 8008330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	2d00      	cmp	r5, #0
 8008336:	dc0e      	bgt.n	8008356 <__ieee754_sqrt+0x56>
 8008338:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800833c:	4322      	orrs	r2, r4
 800833e:	d0f5      	beq.n	800832c <__ieee754_sqrt+0x2c>
 8008340:	b19d      	cbz	r5, 800836a <__ieee754_sqrt+0x6a>
 8008342:	4622      	mov	r2, r4
 8008344:	4620      	mov	r0, r4
 8008346:	4629      	mov	r1, r5
 8008348:	f7f7 ffae 	bl	80002a8 <__aeabi_dsub>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	f7f8 fa8c 	bl	800086c <__aeabi_ddiv>
 8008354:	e7e8      	b.n	8008328 <__ieee754_sqrt+0x28>
 8008356:	152a      	asrs	r2, r5, #20
 8008358:	d115      	bne.n	8008386 <__ieee754_sqrt+0x86>
 800835a:	2000      	movs	r0, #0
 800835c:	e009      	b.n	8008372 <__ieee754_sqrt+0x72>
 800835e:	0acb      	lsrs	r3, r1, #11
 8008360:	3a15      	subs	r2, #21
 8008362:	0549      	lsls	r1, r1, #21
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0fa      	beq.n	800835e <__ieee754_sqrt+0x5e>
 8008368:	e7f7      	b.n	800835a <__ieee754_sqrt+0x5a>
 800836a:	462a      	mov	r2, r5
 800836c:	e7fa      	b.n	8008364 <__ieee754_sqrt+0x64>
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	3001      	adds	r0, #1
 8008372:	02dc      	lsls	r4, r3, #11
 8008374:	d5fb      	bpl.n	800836e <__ieee754_sqrt+0x6e>
 8008376:	1e44      	subs	r4, r0, #1
 8008378:	1b12      	subs	r2, r2, r4
 800837a:	f1c0 0420 	rsb	r4, r0, #32
 800837e:	fa21 f404 	lsr.w	r4, r1, r4
 8008382:	4323      	orrs	r3, r4
 8008384:	4081      	lsls	r1, r0
 8008386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800838a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800838e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008392:	07d2      	lsls	r2, r2, #31
 8008394:	bf5c      	itt	pl
 8008396:	005b      	lslpl	r3, r3, #1
 8008398:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800839c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083a0:	bf58      	it	pl
 80083a2:	0049      	lslpl	r1, r1, #1
 80083a4:	2600      	movs	r6, #0
 80083a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80083aa:	107f      	asrs	r7, r7, #1
 80083ac:	0049      	lsls	r1, r1, #1
 80083ae:	2016      	movs	r0, #22
 80083b0:	4632      	mov	r2, r6
 80083b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80083b6:	1915      	adds	r5, r2, r4
 80083b8:	429d      	cmp	r5, r3
 80083ba:	bfde      	ittt	le
 80083bc:	192a      	addle	r2, r5, r4
 80083be:	1b5b      	suble	r3, r3, r5
 80083c0:	1936      	addle	r6, r6, r4
 80083c2:	0fcd      	lsrs	r5, r1, #31
 80083c4:	3801      	subs	r0, #1
 80083c6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80083ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80083d2:	d1f0      	bne.n	80083b6 <__ieee754_sqrt+0xb6>
 80083d4:	4605      	mov	r5, r0
 80083d6:	2420      	movs	r4, #32
 80083d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80083dc:	4293      	cmp	r3, r2
 80083de:	eb0c 0e00 	add.w	lr, ip, r0
 80083e2:	dc02      	bgt.n	80083ea <__ieee754_sqrt+0xea>
 80083e4:	d113      	bne.n	800840e <__ieee754_sqrt+0x10e>
 80083e6:	458e      	cmp	lr, r1
 80083e8:	d811      	bhi.n	800840e <__ieee754_sqrt+0x10e>
 80083ea:	f1be 0f00 	cmp.w	lr, #0
 80083ee:	eb0e 000c 	add.w	r0, lr, ip
 80083f2:	da3f      	bge.n	8008474 <__ieee754_sqrt+0x174>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	db3d      	blt.n	8008474 <__ieee754_sqrt+0x174>
 80083f8:	f102 0801 	add.w	r8, r2, #1
 80083fc:	1a9b      	subs	r3, r3, r2
 80083fe:	458e      	cmp	lr, r1
 8008400:	bf88      	it	hi
 8008402:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008406:	eba1 010e 	sub.w	r1, r1, lr
 800840a:	4465      	add	r5, ip
 800840c:	4642      	mov	r2, r8
 800840e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008412:	3c01      	subs	r4, #1
 8008414:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008418:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800841c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008420:	d1dc      	bne.n	80083dc <__ieee754_sqrt+0xdc>
 8008422:	4319      	orrs	r1, r3
 8008424:	d01b      	beq.n	800845e <__ieee754_sqrt+0x15e>
 8008426:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80084a4 <__ieee754_sqrt+0x1a4>
 800842a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80084a8 <__ieee754_sqrt+0x1a8>
 800842e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008432:	e9db 2300 	ldrd	r2, r3, [fp]
 8008436:	f7f7 ff37 	bl	80002a8 <__aeabi_dsub>
 800843a:	e9da 8900 	ldrd	r8, r9, [sl]
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4640      	mov	r0, r8
 8008444:	4649      	mov	r1, r9
 8008446:	f7f8 fb63 	bl	8000b10 <__aeabi_dcmple>
 800844a:	b140      	cbz	r0, 800845e <__ieee754_sqrt+0x15e>
 800844c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008450:	e9da 0100 	ldrd	r0, r1, [sl]
 8008454:	e9db 2300 	ldrd	r2, r3, [fp]
 8008458:	d10e      	bne.n	8008478 <__ieee754_sqrt+0x178>
 800845a:	3601      	adds	r6, #1
 800845c:	4625      	mov	r5, r4
 800845e:	1073      	asrs	r3, r6, #1
 8008460:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008464:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008468:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800846c:	086b      	lsrs	r3, r5, #1
 800846e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8008472:	e759      	b.n	8008328 <__ieee754_sqrt+0x28>
 8008474:	4690      	mov	r8, r2
 8008476:	e7c1      	b.n	80083fc <__ieee754_sqrt+0xfc>
 8008478:	f7f7 ff18 	bl	80002ac <__adddf3>
 800847c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4640      	mov	r0, r8
 8008486:	4649      	mov	r1, r9
 8008488:	f7f8 fb38 	bl	8000afc <__aeabi_dcmplt>
 800848c:	b120      	cbz	r0, 8008498 <__ieee754_sqrt+0x198>
 800848e:	1cab      	adds	r3, r5, #2
 8008490:	bf08      	it	eq
 8008492:	3601      	addeq	r6, #1
 8008494:	3502      	adds	r5, #2
 8008496:	e7e2      	b.n	800845e <__ieee754_sqrt+0x15e>
 8008498:	1c6b      	adds	r3, r5, #1
 800849a:	f023 0501 	bic.w	r5, r3, #1
 800849e:	e7de      	b.n	800845e <__ieee754_sqrt+0x15e>
 80084a0:	7ff00000 	.word	0x7ff00000
 80084a4:	08008980 	.word	0x08008980
 80084a8:	08008978 	.word	0x08008978

080084ac <_init>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr

080084b8 <_fini>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	bf00      	nop
 80084bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084be:	bc08      	pop	{r3}
 80084c0:	469e      	mov	lr, r3
 80084c2:	4770      	bx	lr
