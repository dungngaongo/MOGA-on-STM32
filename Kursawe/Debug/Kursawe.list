
Kursawe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009580  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08009730  08009730  0000a730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc8  08009dc8  0000b1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009dc8  08009dc8  0000adc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd0  08009dd0  0000b1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd0  08009dd0  0000add0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dd4  08009dd4  0000add4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08009dd8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1fc  2**0
                  CONTENTS
 10 .bss          000001b8  200001fc  200001fc  0000b1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  0000b1fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008db1  00000000  00000000  0000b22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001943  00000000  00000000  00013fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00015920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f2  00000000  00000000  000160f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023de9  00000000  00000000  000166ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f5d  00000000  00000000  0003a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d486b  00000000  00000000  00044430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118c9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003610  00000000  00000000  00118ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0011c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009718 	.word	0x08009718

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	08009718 	.word	0x08009718

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <rand01>:
float crossover_prob = 0.6;
float mutation_prob = 0.05;
int rate_local_search = 30;
float step_size = 0.02;

float rand01() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    return (float)rand() / RAND_MAX;
 8000f98:	f003 fc20 	bl	80047dc <rand>
 8000f9c:	ee07 0a90 	vmov	s15, r0
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000fb8 <rand01+0x24>
 8000fa8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fac:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	4f000000 	.word	0x4f000000

08000fbc <rand_range>:

float rand_range(float min, float max) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	ed2d 8b02 	vpush	{d8}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fca:	edc7 0a00 	vstr	s1, [r7]
    return min + (max - min) * rand01();
 8000fce:	ed97 7a00 	vldr	s14, [r7]
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000fda:	f7ff ffdb 	bl	8000f94 <rand01>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
 8000fe2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	ecbd 8b02 	vpop	{d8}
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <random_population>:

void random_population(Population *pop) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < POP_SIZE; i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e02a      	b.n	8001060 <random_population+0x64>
        for (int j = 0; j < NV; j++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	e021      	b.n	8001054 <random_population+0x58>
            pop->solutions[i].x[j] = rand_range(lb[j], ub[j]);
 8001010:	4a1a      	ldr	r2, [pc, #104]	@ (800107c <random_population+0x80>)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	4a18      	ldr	r2, [pc, #96]	@ (8001080 <random_population+0x84>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	eef0 0a47 	vmov.f32	s1, s14
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	f7ff ffc4 	bl	8000fbc <rand_range>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < NV; j++) {
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3301      	adds	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b02      	cmp	r3, #2
 8001058:	ddda      	ble.n	8001010 <random_population+0x14>
    for (int i = 0; i < POP_SIZE; i++) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b63      	cmp	r3, #99	@ 0x63
 8001064:	ddd1      	ble.n	800100a <random_population+0xe>
        }
    }
    pop->size = POP_SIZE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800106c:	461a      	mov	r2, r3
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	2000000c 	.word	0x2000000c
 8001084:	00000000 	.word	0x00000000

08001088 <evaluate>:

void evaluate(Solution *sol) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    float sum1 = 0.0;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < NV - 1; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	e06b      	b.n	8001174 <evaluate+0xec>
        float term = sqrt(pow(sol->x[i], 2) + pow(sol->x[i+1], 2));
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa5e 	bl	8000568 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	ed9f 1b67 	vldr	d1, [pc, #412]	@ 8001250 <evaluate+0x1c8>
 80010b4:	ec43 2b10 	vmov	d0, r2, r3
 80010b8:	f006 fa86 	bl	80075c8 <pow>
 80010bc:	ec55 4b10 	vmov	r4, r5, d0
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	3301      	adds	r3, #1
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa4b 	bl	8000568 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 8001250 <evaluate+0x1c8>
 80010da:	ec43 2b10 	vmov	d0, r2, r3
 80010de:	f006 fa73 	bl	80075c8 <pow>
 80010e2:	ec53 2b10 	vmov	r2, r3, d0
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff f8df 	bl	80002ac <__adddf3>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	ec43 2b17 	vmov	d7, r2, r3
 80010f6:	eeb0 0a47 	vmov.f32	s0, s14
 80010fa:	eef0 0a67 	vmov.f32	s1, s15
 80010fe:	f006 fad3 	bl	80076a8 <sqrt>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd5d 	bl	8000bc8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]
        sum1 += -10.0 * exp(-0.2 * term);
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff fa28 	bl	8000568 <__aeabi_f2d>
 8001118:	a355      	add	r3, pc, #340	@ (adr r3, 8001270 <evaluate+0x1e8>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa7b 	bl	8000618 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	ec43 2b17 	vmov	d7, r2, r3
 800112a:	eeb0 0a47 	vmov.f32	s0, s14
 800112e:	eef0 0a67 	vmov.f32	s1, s15
 8001132:	f006 fa01 	bl	8007538 <exp>
 8001136:	ec51 0b10 	vmov	r0, r1, d0
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b4a      	ldr	r3, [pc, #296]	@ (8001268 <evaluate+0x1e0>)
 8001140:	f7ff fa6a 	bl	8000618 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4614      	mov	r4, r2
 800114a:	461d      	mov	r5, r3
 800114c:	69f8      	ldr	r0, [r7, #28]
 800114e:	f7ff fa0b 	bl	8000568 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff f8a7 	bl	80002ac <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fd2f 	bl	8000bc8 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < NV - 1; i++) {
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	3301      	adds	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b01      	cmp	r3, #1
 8001178:	dd90      	ble.n	800109c <evaluate+0x14>
    }
    sol->fitness[0] = sum1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	60da      	str	r2, [r3, #12]

    float sum = 0.0;
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
    for (int j = 0; j < NV; j++) {
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	e054      	b.n	8001236 <evaluate+0x1ae>
        sum += pow(fabs(sol->x[j]), 0.8) + 5 * sin(pow(sol->x[j], 3));
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	eef0 7ae7 	vabs.f32	s15, s15
 800119c:	ee17 0a90 	vmov	r0, s15
 80011a0:	f7ff f9e2 	bl	8000568 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001258 <evaluate+0x1d0>
 80011ac:	ec43 2b10 	vmov	d0, r2, r3
 80011b0:	f006 fa0a 	bl	80075c8 <pow>
 80011b4:	ec55 4b10 	vmov	r4, r5, d0
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9d0 	bl	8000568 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8001260 <evaluate+0x1d8>
 80011d0:	ec43 2b10 	vmov	d0, r2, r3
 80011d4:	f006 f9f8 	bl	80075c8 <pow>
 80011d8:	eeb0 7a40 	vmov.f32	s14, s0
 80011dc:	eef0 7a60 	vmov.f32	s15, s1
 80011e0:	eeb0 0a47 	vmov.f32	s0, s14
 80011e4:	eef0 0a67 	vmov.f32	s1, s15
 80011e8:	f006 fa8a 	bl	8007700 <sin>
 80011ec:	ec51 0b10 	vmov	r0, r1, d0
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <evaluate+0x1e4>)
 80011f6:	f7ff fa0f 	bl	8000618 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4620      	mov	r0, r4
 8001200:	4629      	mov	r1, r5
 8001202:	f7ff f853 	bl	80002ac <__adddf3>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4614      	mov	r4, r2
 800120c:	461d      	mov	r5, r3
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff f9aa 	bl	8000568 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f846 	bl	80002ac <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcce 	bl	8000bc8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	617b      	str	r3, [r7, #20]
    for (int j = 0; j < NV; j++) {
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	3301      	adds	r3, #1
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b02      	cmp	r3, #2
 800123a:	dda7      	ble.n	800118c <evaluate+0x104>
    }
    sol->fitness[1] = sum;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	611a      	str	r2, [r3, #16]
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	00000000 	.word	0x00000000
 8001254:	40000000 	.word	0x40000000
 8001258:	9999999a 	.word	0x9999999a
 800125c:	3fe99999 	.word	0x3fe99999
 8001260:	00000000 	.word	0x00000000
 8001264:	40080000 	.word	0x40080000
 8001268:	c0240000 	.word	0xc0240000
 800126c:	40140000 	.word	0x40140000
 8001270:	9999999a 	.word	0x9999999a
 8001274:	bfc99999 	.word	0xbfc99999

08001278 <crossover>:

void crossover(Population *pop, Population *offspring) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001288:	461a      	mov	r2, r3
 800128a:	2300      	movs	r3, #0
 800128c:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size / 2; i++) {
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	e0e0      	b.n	8001458 <crossover+0x1e0>
        if (rand01() < crossover_prob) {
 8001296:	f7ff fe7d 	bl	8000f94 <rand01>
 800129a:	eeb0 7a40 	vmov.f32	s14, s0
 800129e:	4b77      	ldr	r3, [pc, #476]	@ (800147c <crossover+0x204>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	f140 80d1 	bpl.w	8001452 <crossover+0x1da>
            int r1 = rand() % pop->size;
 80012b0:	f003 fa94 	bl	80047dc <rand>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012bc:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80012c0:	fb92 f1f3 	sdiv	r1, r2, r3
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	613b      	str	r3, [r7, #16]
            int r2 = rand() % pop->size;
 80012cc:	f003 fa86 	bl	80047dc <rand>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012d8:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80012dc:	fb92 f1f3 	sdiv	r1, r2, r3
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	61bb      	str	r3, [r7, #24]
            while (r1 == r2) {
 80012e8:	e00d      	b.n	8001306 <crossover+0x8e>
                r2 = rand() % pop->size;
 80012ea:	f003 fa77 	bl	80047dc <rand>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f6:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80012fa:	fb92 f1f3 	sdiv	r1, r2, r3
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	61bb      	str	r3, [r7, #24]
            while (r1 == r2) {
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	429a      	cmp	r2, r3
 800130c:	d0ed      	beq.n	80012ea <crossover+0x72>
            }

            int cutting_point = rand() % (NV - 1) + 1;
 800130e:	f003 fa65 	bl	80047dc <rand>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	bfb8      	it	lt
 800131c:	425b      	neglt	r3, r3
 800131e:	3301      	adds	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]

            for (int j = 0; j < NV; j++) {
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e069      	b.n	80013fc <crossover+0x184>
                if (j < cutting_point) {
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	da31      	bge.n	8001394 <crossover+0x11c>
                    offspring->solutions[offspring->size].x[j] = pop->solutions[r1].x[j];
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001336:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	6939      	ldr	r1, [r7, #16]
 800133e:	460b      	mov	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	440b      	add	r3, r1
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4403      	add	r3, r0
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4403      	add	r3, r0
 800135e:	6019      	str	r1, [r3, #0]
                    offspring->solutions[offspring->size + 1].x[j] = pop->solutions[r2].x[j];
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001366:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	440b      	add	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4403      	add	r3, r0
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4403      	add	r3, r0
 8001390:	6019      	str	r1, [r3, #0]
 8001392:	e030      	b.n	80013f6 <crossover+0x17e>
                } else {
                    offspring->solutions[offspring->size].x[j] = pop->solutions[r2].x[j];
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800139a:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	69b9      	ldr	r1, [r7, #24]
 80013a2:	460b      	mov	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	6979      	ldr	r1, [r7, #20]
 80013aa:	440b      	add	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4403      	add	r3, r0
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4403      	add	r3, r0
 80013c2:	6019      	str	r1, [r3, #0]
                    offspring->solutions[offspring->size + 1].x[j] = pop->solutions[r1].x[j];
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ca:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	6939      	ldr	r1, [r7, #16]
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	6979      	ldr	r1, [r7, #20]
 80013dc:	440b      	add	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4403      	add	r3, r0
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < NV; j++) {
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	dd92      	ble.n	8001328 <crossover+0xb0>
                }
            }

            evaluate(&offspring->solutions[offspring->size]);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001408:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe35 	bl	8001088 <evaluate>
            evaluate(&offspring->solutions[offspring->size + 1]);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001424:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fe26 	bl	8001088 <evaluate>

            offspring->size += 2;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001442:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001446:	3302      	adds	r3, #2
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800144e:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size / 2; i++) {
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800145e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001462:	0fda      	lsrs	r2, r3, #31
 8001464:	4413      	add	r3, r2
 8001466:	105b      	asrs	r3, r3, #1
 8001468:	461a      	mov	r2, r3
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4293      	cmp	r3, r2
 800146e:	f6ff af12 	blt.w	8001296 <crossover+0x1e>
        }
    }
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000018 	.word	0x20000018

08001480 <mutation>:

void mutation(Population *pop, Population *offspring) {
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001490:	461a      	mov	r2, r3
 8001492:	2300      	movs	r3, #0
 8001494:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e06f      	b.n	800157e <mutation+0xfe>
        if (rand01() < mutation_prob) {
 800149e:	f7ff fd79 	bl	8000f94 <rand01>
 80014a2:	eeb0 7a40 	vmov.f32	s14, s0
 80014a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <mutation+0x118>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	d560      	bpl.n	8001578 <mutation+0xf8>
            offspring->solutions[offspring->size] = pop->solutions[i];
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014bc:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	18c8      	adds	r0, r1, r3
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	4604      	mov	r4, r0
 80014dc:	461d      	mov	r5, r3
 80014de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	6023      	str	r3, [r4, #0]
            int mutation_point = rand() % NV;
 80014e6:	f003 f979 	bl	80047dc <rand>
 80014ea:	4602      	mov	r2, r0
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <mutation+0x11c>)
 80014ee:	fb83 3102 	smull	r3, r1, r3, r2
 80014f2:	17d3      	asrs	r3, r2, #31
 80014f4:	1ac9      	subs	r1, r1, r3
 80014f6:	460b      	mov	r3, r1
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	440b      	add	r3, r1
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	60bb      	str	r3, [r7, #8]
            offspring->solutions[offspring->size].x[mutation_point] =
                rand_range(lb[mutation_point], ub[mutation_point]);
 8001500:	4a27      	ldr	r2, [pc, #156]	@ (80015a0 <mutation+0x120>)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <mutation+0x124>)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	ed93 7a00 	vldr	s14, [r3]
            offspring->solutions[offspring->size].x[mutation_point] =
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800151e:	f8d3 4770 	ldr.w	r4, [r3, #1904]	@ 0x770
                rand_range(lb[mutation_point], ub[mutation_point]);
 8001522:	eef0 0a47 	vmov.f32	s1, s14
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	f7ff fd47 	bl	8000fbc <rand_range>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
            offspring->solutions[offspring->size].x[mutation_point] =
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4623      	mov	r3, r4
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4423      	add	r3, r4
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	440b      	add	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	edc3 7a00 	vstr	s15, [r3]
            evaluate(&offspring->solutions[offspring->size]);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154c:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd93 	bl	8001088 <evaluate>
            offspring->size++;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001568:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 800156c:	3301      	adds	r3, #1
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001574:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size; i++) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001584:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	429a      	cmp	r2, r3
 800158c:	db87      	blt.n	800149e <mutation+0x1e>
        }
    }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bdb0      	pop	{r4, r5, r7, pc}
 8001598:	2000001c 	.word	0x2000001c
 800159c:	55555556 	.word	0x55555556
 80015a0:	20000000 	.word	0x20000000
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <local_search>:

void local_search(Population *pop, Population *offspring) {
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
    offspring->size = rate_local_search;
 80015b2:	4b61      	ldr	r3, [pc, #388]	@ (8001738 <local_search+0x190>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015bc:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < rate_local_search; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e0ad      	b.n	8001722 <local_search+0x17a>
        int r1 = rand() % pop->size;
 80015c6:	f003 f909 	bl	80047dc <rand>
 80015ca:	4602      	mov	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d2:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80015d6:	fb92 f1f3 	sdiv	r1, r2, r3
 80015da:	fb01 f303 	mul.w	r3, r1, r3
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	613b      	str	r3, [r7, #16]
        offspring->solutions[i] = pop->solutions[r1];
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	18c8      	adds	r0, r1, r3
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	4604      	mov	r4, r0
 8001600:	461d      	mov	r5, r3
 8001602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001606:	682b      	ldr	r3, [r5, #0]
 8001608:	6023      	str	r3, [r4, #0]
        int r2 = rand() % NV;
 800160a:	f003 f8e7 	bl	80047dc <rand>
 800160e:	4602      	mov	r2, r0
 8001610:	4b4a      	ldr	r3, [pc, #296]	@ (800173c <local_search+0x194>)
 8001612:	fb83 3102 	smull	r3, r1, r3, r2
 8001616:	17d3      	asrs	r3, r2, #31
 8001618:	1ac9      	subs	r1, r1, r3
 800161a:	460b      	mov	r3, r1
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	440b      	add	r3, r1
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
        offspring->solutions[i].x[r2] += rand_range(-step_size, step_size);
 8001624:	4b46      	ldr	r3, [pc, #280]	@ (8001740 <local_search+0x198>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef1 7a67 	vneg.f32	s15, s15
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <local_search+0x198>)
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	eef0 0a47 	vmov.f32	s1, s14
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	f7ff fcbe 	bl	8000fbc <rand_range>
 8001640:	eeb0 7a40 	vmov.f32	s14, s0
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	6839      	ldr	r1, [r7, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	edc3 7a00 	vstr	s15, [r3]

        if (offspring->solutions[i].x[r2] < lb[r2])
 8001674:	6839      	ldr	r1, [r7, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	4a2e      	ldr	r2, [pc, #184]	@ (8001744 <local_search+0x19c>)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	d50e      	bpl.n	80016be <local_search+0x116>
            offspring->solutions[i].x[r2] = lb[r2];
 80016a0:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <local_search+0x19c>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4403      	add	r3, r0
 80016bc:	6019      	str	r1, [r3, #0]
        if (offspring->solutions[i].x[r2] > ub[r2])
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <local_search+0x1a0>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	dd0e      	ble.n	8001708 <local_search+0x160>
            offspring->solutions[i].x[r2] = ub[r2];
 80016ea:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <local_search+0x1a0>)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4403      	add	r3, r0
 8001706:	6019      	str	r1, [r3, #0]

        evaluate(&offspring->solutions[i]);
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4413      	add	r3, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fcb6 	bl	8001088 <evaluate>
    for (int i = 0; i < rate_local_search; i++) {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <local_search+0x190>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	429a      	cmp	r2, r3
 800172a:	f6ff af4c 	blt.w	80015c6 <local_search+0x1e>
    }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bdb0      	pop	{r4, r5, r7, pc}
 8001738:	20000020 	.word	0x20000020
 800173c:	55555556 	.word	0x55555556
 8001740:	20000024 	.word	0x20000024
 8001744:	20000000 	.word	0x20000000
 8001748:	2000000c 	.word	0x2000000c

0800174c <dominates>:

bool dominates(Solution *sol1, Solution *sol2) {
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
    bool better = false;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	e030      	b.n	80017c2 <dominates+0x76>
        if (sol1->fitness[i] > sol2->fitness[i]) {
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3302      	adds	r3, #2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	3304      	adds	r3, #4
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3302      	adds	r3, #2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3304      	adds	r3, #4
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	dd01      	ble.n	800178e <dominates+0x42>
            return false;
 800178a:	2300      	movs	r3, #0
 800178c:	e01d      	b.n	80017ca <dominates+0x7e>
        }
        if (sol1->fitness[i] < sol2->fitness[i]) {
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3302      	adds	r3, #2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3302      	adds	r3, #2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	3304      	adds	r3, #4
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d501      	bpl.n	80017bc <dominates+0x70>
            better = true;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3301      	adds	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	ddcb      	ble.n	8001760 <dominates+0x14>
        }
    }
    return better;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <find_pareto_front>:

void find_pareto_front(Solution *solutions, int size, int *front_indices, int *front_size) {
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b088      	sub	sp, #32
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	603b      	str	r3, [r7, #0]
    *front_size = 0;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e03c      	b.n	800186a <find_pareto_front+0x94>
        bool is_dominated = false;
 80017f0:	2300      	movs	r3, #0
 80017f2:	76fb      	strb	r3, [r7, #27]
        for (int j = 0; j < size; j++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e020      	b.n	800183c <find_pareto_front+0x66>
            if (i == j) continue;
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d018      	beq.n	8001834 <find_pareto_front+0x5e>
            if (dominates(&solutions[j], &solutions[i])) {
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	461a      	mov	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1898      	adds	r0, r3, r2
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff ff92 	bl	800174c <dominates>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <find_pareto_front+0x60>
                is_dominated = true;
 800182e:	2301      	movs	r3, #1
 8001830:	76fb      	strb	r3, [r7, #27]
                break;
 8001832:	e007      	b.n	8001844 <find_pareto_front+0x6e>
            if (i == j) continue;
 8001834:	bf00      	nop
        for (int j = 0; j < size; j++) {
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbda      	blt.n	80017fa <find_pareto_front+0x24>
            }
        }
        if (!is_dominated) {
 8001844:	7efb      	ldrb	r3, [r7, #27]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <find_pareto_front+0x8e>
            front_indices[(*front_size)++] = i;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	1c59      	adds	r1, r3, #1
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6011      	str	r1, [r2, #0]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbbe      	blt.n	80017f0 <find_pareto_front+0x1a>
        }
    }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <crowding_distance>:

void crowding_distance(Solution *front, int front_size, float *distances) {
 800187c:	b480      	push	{r7}
 800187e:	f2ad 4dec 	subw	sp, sp, #1260	@ 0x4ec
 8001882:	af00      	add	r7, sp, #0
 8001884:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001888:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800188c:	6018      	str	r0, [r3, #0]
 800188e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001892:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001896:	6019      	str	r1, [r3, #0]
 8001898:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800189c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80018a0:	601a      	str	r2, [r3, #0]
    if (front_size == 0) return;
 80018a2:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018a6:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 81c4 	beq.w	8001c3a <crowding_distance+0x3be>

    for (int i = 0; i < front_size; i++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80018b8:	e010      	b.n	80018dc <crowding_distance+0x60>
        distances[i] = 0.0;
 80018ba:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 80018c4:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < front_size; i++) {
 80018d2:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80018d6:	3301      	adds	r3, #1
 80018d8:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80018dc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018e0:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80018e4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbe5      	blt.n	80018ba <crowding_distance+0x3e>
    }

    for (int obj = 0; obj < 2; obj++) {
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80018f4:	e19b      	b.n	8001c2e <crowding_distance+0x3b2>
        int indices[POP_SIZE * 3];
        for (int i = 0; i < front_size; i++) indices[i] = i;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 80018fc:	e00e      	b.n	800191c <crowding_distance+0xa0>
 80018fe:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001902:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001906:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 800190a:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	@ 0x4dc
 800190e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001912:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8001916:	3301      	adds	r3, #1
 8001918:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 800191c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001920:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001924:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	dbe7      	blt.n	80018fe <crowding_distance+0x82>

        for (int i = 0; i < front_size - 1; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8001934:	e079      	b.n	8001a2a <crowding_distance+0x1ae>
            for (int j = i + 1; j < front_size; j++) {
 8001936:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800193a:	3301      	adds	r3, #1
 800193c:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8001940:	e065      	b.n	8001a0e <crowding_distance+0x192>
                if (front[indices[i]].fitness[obj] > front[indices[j]].fitness[obj]) {
 8001942:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001946:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800194a:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	461a      	mov	r2, r3
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	461a      	mov	r2, r3
 800195e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001962:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	441a      	add	r2, r3
 800196a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800196e:	3302      	adds	r3, #2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	ed93 7a00 	vldr	s14, [r3]
 800197a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800197e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001982:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	461a      	mov	r2, r3
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	461a      	mov	r2, r3
 8001996:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800199a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	441a      	add	r2, r3
 80019a2:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80019a6:	3302      	adds	r3, #2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	dd23      	ble.n	8001a04 <crowding_distance+0x188>
                    int temp = indices[i];
 80019bc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019c0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80019c4:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
                    indices[i] = indices[j];
 80019d0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019d4:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80019d8:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 80019dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80019e0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019e4:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80019e8:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    indices[j] = temp;
 80019f0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019f4:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80019f8:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 80019fc:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = i + 1; j < front_size; j++) {
 8001a04:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8001a0e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a12:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001a16:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	db90      	blt.n	8001942 <crowding_distance+0xc6>
        for (int i = 0; i < front_size - 1; i++) {
 8001a20:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 8001a24:	3301      	adds	r3, #1
 8001a26:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8001a2a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a2e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	f6ff af7b 	blt.w	8001936 <crowding_distance+0xba>
                }
            }
        }

        distances[indices[0]] = DBL_MAX;
 8001a40:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a44:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001a50:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001a5c:	601a      	str	r2, [r3, #0]
        distances[indices[front_size - 1]] = DBL_MAX;
 8001a5e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a62:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a6e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001a7c:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001a88:	601a      	str	r2, [r3, #0]

        float fmin = front[indices[0]].fitness[obj];
 8001a8a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a8e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001aa4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	441a      	add	r2, r3
 8001aac:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f207 42cc 	addw	r2, r7, #1228	@ 0x4cc
 8001abe:	6013      	str	r3, [r2, #0]
        float fmax = front[indices[front_size - 1]].fitness[obj];
 8001ac0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001ac4:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	1e5a      	subs	r2, r3, #1
 8001acc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001ad0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001ae8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	441a      	add	r2, r3
 8001af0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001af4:	3302      	adds	r3, #2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f507 6299 	add.w	r2, r7, #1224	@ 0x4c8
 8001b02:	6013      	str	r3, [r2, #0]
        float range = fmax - fmin;
 8001b04:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	f207 43cc 	addw	r3, r7, #1228	@ 0x4cc
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8001b1c:	edc3 7a00 	vstr	s15, [r3]

        if (range > 0) {
 8001b20:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	dd78      	ble.n	8001c24 <crowding_distance+0x3a8>
            for (int i = 1; i < front_size - 1; i++) {
 8001b32:	2301      	movs	r3, #1
 8001b34:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8001b38:	e06a      	b.n	8001c10 <crowding_distance+0x394>
                distances[indices[i]] +=
 8001b3a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001b3e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001b42:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8001b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001b50:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	ed93 7a00 	vldr	s14, [r3]
                    (front[indices[i + 1]].fitness[obj] - front[indices[i - 1]].fitness[obj]) / range;
 8001b5c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001b66:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001b7e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	441a      	add	r2, r3
 8001b86:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3304      	adds	r3, #4
 8001b92:	edd3 6a00 	vldr	s13, [r3]
 8001b96:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001ba0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001bb8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	441a      	add	r2, r3
 8001bc0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001bd4:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8001bd8:	edd3 6a00 	vldr	s13, [r3]
 8001bdc:	eec6 7a26 	vdiv.f32	s15, s12, s13
                distances[indices[i]] +=
 8001be0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001be4:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001be8:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001bf6:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 1; i < front_size - 1; i++) {
 8001c06:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8001c10:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001c14:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8001c20:	429a      	cmp	r2, r3
 8001c22:	db8a      	blt.n	8001b3a <crowding_distance+0x2be>
    for (int obj = 0; obj < 2; obj++) {
 8001c24:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8001c2e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f77f ae5f 	ble.w	80018f6 <crowding_distance+0x7a>
 8001c38:	e000      	b.n	8001c3c <crowding_distance+0x3c0>
    if (front_size == 0) return;
 8001c3a:	bf00      	nop
            }
        }
    }
}
 8001c3c:	f207 47ec 	addw	r7, r7, #1260	@ 0x4ec
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <select_by_crowding>:

void select_by_crowding(Solution *solutions, int size, int num_to_select, Solution *selected) {
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	f507 649a 	add.w	r4, r7, #1232	@ 0x4d0
 8001c54:	f2a4 44c4 	subw	r4, r4, #1220	@ 0x4c4
 8001c58:	6020      	str	r0, [r4, #0]
 8001c5a:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 8001c5e:	f5a0 6099 	sub.w	r0, r0, #1224	@ 0x4c8
 8001c62:	6001      	str	r1, [r0, #0]
 8001c64:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8001c68:	f2a1 41cc 	subw	r1, r1, #1228	@ 0x4cc
 8001c6c:	600a      	str	r2, [r1, #0]
 8001c6e:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8001c72:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001c76:	6013      	str	r3, [r2, #0]
    float distances[POP_SIZE * 3];
    crowding_distance(solutions, size, distances);
 8001c78:	f107 0214 	add.w	r2, r7, #20
 8001c7c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001c80:	f5a3 6199 	sub.w	r1, r3, #1224	@ 0x4c8
 8001c84:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001c88:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001c8c:	6809      	ldr	r1, [r1, #0]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f7ff fdf4 	bl	800187c <crowding_distance>

    for (int i = 0; i < num_to_select; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001c9a:	e060      	b.n	8001d5e <select_by_crowding+0x116>
        int best = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001ca8:	e021      	b.n	8001cee <select_by_crowding+0xa6>
            if (distances[j] > distances[best]) {
 8001caa:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001cae:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001cb2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001cc2:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001cc6:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	dd03      	ble.n	8001ce4 <select_by_crowding+0x9c>
                best = j;
 8001cdc:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001ce0:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001ce4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001cee:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001cf2:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8001cf6:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbd4      	blt.n	8001caa <select_by_crowding+0x62>
            }
        }
        selected[i] = solutions[best];
 8001d00:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d12:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1899      	adds	r1, r3, r2
 8001d1a:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	461a      	mov	r2, r3
 8001d28:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d2c:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	461c      	mov	r4, r3
 8001d36:	460d      	mov	r5, r1
 8001d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	6023      	str	r3, [r4, #0]
        distances[best] = -1.0;
 8001d40:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d44:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001d48:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <select_by_crowding+0x134>)
 8001d52:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < num_to_select; i++) {
 8001d54:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001d5e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d62:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8001d66:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	db95      	blt.n	8001c9c <select_by_crowding+0x54>
    }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	f507 679a 	add.w	r7, r7, #1232	@ 0x4d0
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7c:	bf800000 	.word	0xbf800000

08001d80 <selection>:

void selection(Population *pop, Population *selected) {
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	b0ab      	sub	sp, #172	@ 0xac
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6578      	str	r0, [r7, #84]	@ 0x54
 8001d8a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001d8c:	466b      	mov	r3, sp
 8001d8e:	607b      	str	r3, [r7, #4]
    int remaining_indices[pop->size];
 8001d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d96:	f8d3 1770 	ldr.w	r1, [r3, #1904]	@ 0x770
 8001d9a:	1e4b      	subs	r3, r1, #1
 8001d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001da0:	460a      	mov	r2, r1
 8001da2:	2300      	movs	r3, #0
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	016b      	lsls	r3, r5, #5
 8001db2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001db6:	0162      	lsls	r2, r4, #5
 8001db8:	460a      	mov	r2, r1
 8001dba:	2300      	movs	r3, #0
 8001dbc:	4690      	mov	r8, r2
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001dcc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001dd0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3307      	adds	r3, #7
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	ebad 0d03 	sub.w	sp, sp, r3
 8001de2:	466b      	mov	r3, sp
 8001de4:	3303      	adds	r3, #3
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int remaining_size = pop->size;
 8001dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df2:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (int i = 0; i < pop->size; i++) remaining_indices[i] = i;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e00:	e00b      	b.n	8001e1a <selection+0x9a>
 8001e02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e04:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001e08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e14:	3301      	adds	r3, #1
 8001e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e20:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8001e24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	dbea      	blt.n	8001e02 <selection+0x82>

    selected->size = 0;
 8001e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e32:	461a      	mov	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770

    while (selected->size < POP_SIZE) {
 8001e3a:	e1df      	b.n	80021fc <selection+0x47c>
 8001e3c:	466b      	mov	r3, sp
 8001e3e:	4698      	mov	r8, r3
        int front_indices[remaining_size];
 8001e40:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e44:	1e4b      	subs	r3, r1, #1
 8001e46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e48:	460a      	mov	r2, r1
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	0143      	lsls	r3, r0, #5
 8001e60:	4620      	mov	r0, r4
 8001e62:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e66:	4620      	mov	r0, r4
 8001e68:	0142      	lsls	r2, r0, #5
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001e7e:	4628      	mov	r0, r5
 8001e80:	0143      	lsls	r3, r0, #5
 8001e82:	4620      	mov	r0, r4
 8001e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e88:	4620      	mov	r0, r4
 8001e8a:	0142      	lsls	r2, r0, #5
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	3307      	adds	r3, #7
 8001e92:	08db      	lsrs	r3, r3, #3
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	ebad 0d03 	sub.w	sp, sp, r3
 8001e9a:	466b      	mov	r3, sp
 8001e9c:	3303      	adds	r3, #3
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	677b      	str	r3, [r7, #116]	@ 0x74
        int front_size;
        find_pareto_front(pop->solutions, remaining_size, front_indices, &front_size);
 8001ea4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001ea6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001eaa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001eac:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001eb0:	f7ff fc91 	bl	80017d6 <find_pareto_front>

        if (selected->size + front_size > POP_SIZE) {
 8001eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eba:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ec0:	4413      	add	r3, r2
 8001ec2:	2b64      	cmp	r3, #100	@ 0x64
 8001ec4:	f340 811e 	ble.w	8002104 <selection+0x384>
 8001ec8:	466b      	mov	r3, sp
 8001eca:	461e      	mov	r6, r3
            int needed = POP_SIZE - selected->size;
 8001ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed2:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001ed6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001eda:	673b      	str	r3, [r7, #112]	@ 0x70
            Solution temp_front[front_size];
 8001edc:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8001ede:	1e63      	subs	r3, r4, #1
 8001ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0099      	lsls	r1, r3, #2
 8001ef8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001efc:	0090      	lsls	r0, r2, #2
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f04:	eb12 0a01 	adds.w	sl, r2, r1
 8001f08:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f0a:	eb43 0b01 	adc.w	fp, r3, r1
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001f1a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001f1e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001f22:	4622      	mov	r2, r4
 8001f24:	2300      	movs	r3, #0
 8001f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f2a:	e9d7 9a0c 	ldrd	r9, sl, [r7, #48]	@ 0x30
 8001f2e:	464a      	mov	r2, r9
 8001f30:	4653      	mov	r3, sl
 8001f32:	f04f 0000 	mov.w	r0, #0
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	0099      	lsls	r1, r3, #2
 8001f3c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f40:	0090      	lsls	r0, r2, #2
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4649      	mov	r1, r9
 8001f48:	1851      	adds	r1, r2, r1
 8001f4a:	61b9      	str	r1, [r7, #24]
 8001f4c:	4651      	mov	r1, sl
 8001f4e:	eb43 0101 	adc.w	r1, r3, r1
 8001f52:	61f9      	str	r1, [r7, #28]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	e9d7 9a06 	ldrd	r9, sl, [r7, #24]
 8001f60:	4651      	mov	r1, sl
 8001f62:	014b      	lsls	r3, r1, #5
 8001f64:	4649      	mov	r1, r9
 8001f66:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	014a      	lsls	r2, r1, #5
 8001f6e:	4622      	mov	r2, r4
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	3307      	adds	r3, #7
 8001f7a:	08db      	lsrs	r3, r3, #3
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	ebad 0d03 	sub.w	sp, sp, r3
 8001f82:	466b      	mov	r3, sp
 8001f84:	3303      	adds	r3, #3
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
            for (int i = 0; i < front_size; i++) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f92:	e01d      	b.n	8001fd0 <selection+0x250>
                temp_front[i] = pop->solutions[front_indices[i]];
 8001f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f96:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001f9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001fa0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4419      	add	r1, r3
 8001fae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	460c      	mov	r4, r1
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc2:	682b      	ldr	r3, [r5, #0]
 8001fc4:	6023      	str	r3, [r4, #0]
            for (int i = 0; i < front_size; i++) {
 8001fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fd2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbdc      	blt.n	8001f94 <selection+0x214>
            }

            Solution selected_from_front[needed];
 8001fda:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8001fdc:	1e63      	subs	r3, r4, #1
 8001fde:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fe0:	4622      	mov	r2, r4
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe8:	e9d7 9a0a 	ldrd	r9, sl, [r7, #40]	@ 0x28
 8001fec:	464a      	mov	r2, r9
 8001fee:	4653      	mov	r3, sl
 8001ff0:	f04f 0000 	mov.w	r0, #0
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	0099      	lsls	r1, r3, #2
 8001ffa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ffe:	0090      	lsls	r0, r2, #2
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4649      	mov	r1, r9
 8002006:	1851      	adds	r1, r2, r1
 8002008:	6139      	str	r1, [r7, #16]
 800200a:	4651      	mov	r1, sl
 800200c:	eb43 0101 	adc.w	r1, r3, r1
 8002010:	6179      	str	r1, [r7, #20]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9d7 9a04 	ldrd	r9, sl, [r7, #16]
 800201e:	4651      	mov	r1, sl
 8002020:	014b      	lsls	r3, r1, #5
 8002022:	4649      	mov	r1, r9
 8002024:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002028:	4649      	mov	r1, r9
 800202a:	014a      	lsls	r2, r1, #5
 800202c:	4622      	mov	r2, r4
 800202e:	2300      	movs	r3, #0
 8002030:	623a      	str	r2, [r7, #32]
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
 8002034:	e9d7 9a08 	ldrd	r9, sl, [r7, #32]
 8002038:	464a      	mov	r2, r9
 800203a:	4653      	mov	r3, sl
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	0099      	lsls	r1, r3, #2
 8002046:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800204a:	0090      	lsls	r0, r2, #2
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4649      	mov	r1, r9
 8002052:	1851      	adds	r1, r2, r1
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	4651      	mov	r1, sl
 8002058:	eb43 0101 	adc.w	r1, r3, r1
 800205c:	60f9      	str	r1, [r7, #12]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 9a02 	ldrd	r9, sl, [r7, #8]
 800206a:	4651      	mov	r1, sl
 800206c:	014b      	lsls	r3, r1, #5
 800206e:	4649      	mov	r1, r9
 8002070:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002074:	4649      	mov	r1, r9
 8002076:	014a      	lsls	r2, r1, #5
 8002078:	4622      	mov	r2, r4
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3307      	adds	r3, #7
 8002084:	08db      	lsrs	r3, r3, #3
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	ebad 0d03 	sub.w	sp, sp, r3
 800208c:	466b      	mov	r3, sp
 800208e:	3303      	adds	r3, #3
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	663b      	str	r3, [r7, #96]	@ 0x60
            select_by_crowding(temp_front, front_size, needed, selected_from_front);
 8002096:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800209a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800209c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800209e:	f7ff fdd3 	bl	8001c48 <select_by_crowding>

            for (int i = 0; i < needed; i++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020a8:	e023      	b.n	80020f2 <selection+0x372>
                selected->solutions[selected->size++] = selected_from_front[i];
 80020aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b0:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80020b4:	1c53      	adds	r3, r2, #1
 80020b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80020b8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80020bc:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 80020c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	18c8      	adds	r0, r1, r3
 80020cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80020ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	4604      	mov	r4, r0
 80020de:	461d      	mov	r5, r3
 80020e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e4:	682b      	ldr	r3, [r5, #0]
 80020e6:	6023      	str	r3, [r4, #0]
            for (int i = 0; i < needed; i++) {
 80020e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020ec:	3301      	adds	r3, #1
 80020ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80020f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbd6      	blt.n	80020aa <selection+0x32a>
            }
            break;
 80020fc:	bf00      	nop
 80020fe:	46b5      	mov	sp, r6
 8002100:	46c5      	mov	sp, r8
 8002102:	e083      	b.n	800220c <selection+0x48c>
        } else {
            for (int i = 0; i < front_size; i++) {
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800210a:	e026      	b.n	800215a <selection+0x3da>
                selected->solutions[selected->size++] = pop->solutions[front_indices[i]];
 800210c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800210e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002112:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211c:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8002120:	1c51      	adds	r1, r2, #1
 8002122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002128:	f8c3 1770 	str.w	r1, [r3, #1904]	@ 0x770
 800212c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4419      	add	r1, r3
 8002138:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800213a:	4603      	mov	r3, r0
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4403      	add	r3, r0
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	460d      	mov	r5, r1
 8002146:	461c      	mov	r4, r3
 8002148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	602b      	str	r3, [r5, #0]
            for (int i = 0; i < front_size; i++) {
 8002150:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002154:	3301      	adds	r3, #1
 8002156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800215a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800215c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002160:	4293      	cmp	r3, r2
 8002162:	dbd3      	blt.n	800210c <selection+0x38c>
            }

            int new_remaining_size = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            for (int i = 0; i < remaining_size; i++) {
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002170:	e039      	b.n	80021e6 <selection+0x466>
                bool in_front = false;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                for (int j = 0; j < front_size; j++) {
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800217e:	e014      	b.n	80021aa <selection+0x42a>
                    if (remaining_indices[i] == front_indices[j]) {
 8002180:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002186:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800218a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800218c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	4299      	cmp	r1, r3
 8002196:	d103      	bne.n	80021a0 <selection+0x420>
                        in_front = true;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                        break;
 800219e:	e009      	b.n	80021b4 <selection+0x434>
                for (int j = 0; j < front_size; j++) {
 80021a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021a4:	3301      	adds	r3, #1
 80021a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80021ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021b0:	4293      	cmp	r3, r2
 80021b2:	dbe5      	blt.n	8002180 <selection+0x400>
                    }
                }
                if (!in_front) {
 80021b4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80021b8:	f083 0301 	eor.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00c      	beq.n	80021dc <selection+0x45c>
                    remaining_indices[new_remaining_size++] = remaining_indices[i];
 80021c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80021c6:	1c4b      	adds	r3, r1, #1
 80021c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80021ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            for (int i = 0; i < remaining_size; i++) {
 80021dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021e0:	3301      	adds	r3, #1
 80021e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80021e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80021ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ee:	429a      	cmp	r2, r3
 80021f0:	dbbf      	blt.n	8002172 <selection+0x3f2>
                }
            }
            remaining_size = new_remaining_size;
 80021f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80021fa:	46c5      	mov	sp, r8
    while (selected->size < POP_SIZE) {
 80021fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002202:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8002206:	2b63      	cmp	r3, #99	@ 0x63
 8002208:	f77f ae18 	ble.w	8001e3c <selection+0xbc>
 800220c:	f8d7 d004 	ldr.w	sp, [r7, #4]
        }
    }
}
 8002210:	bf00      	nop
 8002212:	37ac      	adds	r7, #172	@ 0xac
 8002214:	46bd      	mov	sp, r7
 8002216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800221c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800221c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002220:	f5ad 4d26 	sub.w	sp, sp, #42496	@ 0xa600
 8002224:	b0a6      	sub	sp, #152	@ 0x98
 8002226:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002228:	f000 fe5a 	bl	8002ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800222c:	f000 fbc4 	bl	80029b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002230:	f000 fc5c 	bl	8002aec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002234:	f000 fc30 	bl	8002a98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Population pop, offspring_cross, offspring_mut, offspring_ls, combined, selected;

  srand(HAL_GetTick());
 8002238:	f000 feb8 	bl	8002fac <HAL_GetTick>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fa9e 	bl	8004780 <srand>

  // Initialize population
  random_population(&pop);
 8002244:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 8002248:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800224c:	3b08      	subs	r3, #8
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fed4 	bl	8000ffc <random_population>
  for (int i = 0; i < pop.size; i++) {
 8002254:	2300      	movs	r3, #0
 8002256:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800225a:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e01c      	b.n	800229c <main+0x80>
	  evaluate(&pop.solutions[i]);
 8002262:	f507 420e 	add.w	r2, r7, #36352	@ 0x8e00
 8002266:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 800226a:	3a08      	subs	r2, #8
 800226c:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002270:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	460b      	mov	r3, r1
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe ff01 	bl	8001088 <evaluate>
  for (int i = 0; i < pop.size; i++) {
 8002286:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800228a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002296:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80022a0:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80022a4:	f5a3 63f5 	sub.w	r3, r3, #1960	@ 0x7a8
 80022a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ac:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80022b0:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80022b4:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dbd1      	blt.n	8002262 <main+0x46>
  }

  uint32_t start_time = HAL_GetTick();
 80022be:	f000 fe75 	bl	8002fac <HAL_GetTick>
 80022c2:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80022c6:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 80022ca:	6018      	str	r0, [r3, #0]

  // Main optimization loop
  for (int iter = 0; iter < MAX_ITER; iter++) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80022d2:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e1cd      	b.n	8002676 <main+0x45a>
	  // Generate offspring
	  crossover(&pop, &offspring_cross);
 80022da:	f507 42ee 	add.w	r2, r7, #30464	@ 0x7700
 80022de:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80022e2:	3a1c      	subs	r2, #28
 80022e4:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 80022e8:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80022ec:	3b08      	subs	r3, #8
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe ffc1 	bl	8001278 <crossover>
	  mutation(&pop, &offspring_mut);
 80022f6:	f507 42bf 	add.w	r2, r7, #24448	@ 0x5f80
 80022fa:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80022fe:	3a10      	subs	r2, #16
 8002300:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 8002304:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002308:	3b08      	subs	r3, #8
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f8b7 	bl	8001480 <mutation>
	  local_search(&pop, &offspring_ls);
 8002312:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002316:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800231a:	3a04      	subs	r2, #4
 800231c:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 8002320:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002324:	3b08      	subs	r3, #8
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f93d 	bl	80015a8 <local_search>

	  // Combine populations
	  combined.size = 0;
 800232e:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002332:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002336:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800233a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233e:	461a      	mov	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
	  for (int i = 0; i < pop.size; i++) {
 8002346:	2300      	movs	r3, #0
 8002348:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800234c:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e040      	b.n	80023d6 <main+0x1ba>
		  combined.solutions[combined.size++] = pop.solutions[i];
 8002354:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002358:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800235c:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8002360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002364:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8002368:	1c53      	adds	r3, r2, #1
 800236a:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 800236e:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8002372:	f5a1 61af 	sub.w	r1, r1, #1400	@ 0x578
 8002376:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800237a:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 800237e:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002382:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002386:	f5a3 61af 	sub.w	r1, r3, #1400	@ 0x578
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	18c8      	adds	r0, r1, r3
 8002394:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 8002398:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800239c:	f5a3 61f5 	sub.w	r1, r3, #1960	@ 0x7a8
 80023a0:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80023a4:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	4604      	mov	r4, r0
 80023b6:	461d      	mov	r5, r3
 80023b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < pop.size; i++) {
 80023c0:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80023c4:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80023d0:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80023da:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80023de:	f5a3 63f5 	sub.w	r3, r3, #1960	@ 0x7a8
 80023e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e6:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80023ea:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80023ee:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbad      	blt.n	8002354 <main+0x138>
	  }
	  for (int i = 0; i < offspring_cross.size; i++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80023fe:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e040      	b.n	8002488 <main+0x26c>
		  combined.solutions[combined.size++] = offspring_cross.solutions[i];
 8002406:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 800240a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800240e:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8002412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002416:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800241a:	1c53      	adds	r3, r2, #1
 800241c:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 8002420:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8002424:	f5a1 61af 	sub.w	r1, r1, #1400	@ 0x578
 8002428:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800242c:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 8002430:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002434:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002438:	f5a3 61af 	sub.w	r1, r3, #1400	@ 0x578
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	18c8      	adds	r0, r1, r3
 8002446:	f507 4306 	add.w	r3, r7, #34304	@ 0x8600
 800244a:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800244e:	f6a3 711c 	subw	r1, r3, #3868	@ 0xf1c
 8002452:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002456:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	4604      	mov	r4, r0
 8002468:	461d      	mov	r5, r3
 800246a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < offspring_cross.size; i++) {
 8002472:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002476:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002482:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	f507 4306 	add.w	r3, r7, #34304	@ 0x8600
 800248c:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002490:	f6a3 731c 	subw	r3, r3, #3868	@ 0xf1c
 8002494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002498:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 800249c:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80024a0:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbad      	blt.n	8002406 <main+0x1ea>
	  }
	  for (int i = 0; i < offspring_mut.size; i++) {
 80024aa:	2300      	movs	r3, #0
 80024ac:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80024b0:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e040      	b.n	800253a <main+0x31e>
		  combined.solutions[combined.size++] = offspring_mut.solutions[i];
 80024b8:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 80024bc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80024c0:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 80024c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c8:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80024cc:	1c53      	adds	r3, r2, #1
 80024ce:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 80024d2:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80024d6:	f5a1 61af 	sub.w	r1, r1, #1400	@ 0x578
 80024da:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80024de:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 80024e2:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 80024e6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80024ea:	f5a3 61af 	sub.w	r1, r3, #1400	@ 0x578
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	18c8      	adds	r0, r1, r3
 80024f8:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 80024fc:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002500:	f5a3 61d2 	sub.w	r1, r3, #1680	@ 0x690
 8002504:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002508:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	4604      	mov	r4, r0
 800251a:	461d      	mov	r5, r3
 800251c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < offspring_mut.size; i++) {
 8002524:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002528:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002534:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 800253e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002542:	f5a3 63d2 	sub.w	r3, r3, #1680	@ 0x690
 8002546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800254a:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 800254e:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002552:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbad      	blt.n	80024b8 <main+0x29c>
	  }
	  for (int i = 0; i < offspring_ls.size; i++) {
 800255c:	2300      	movs	r3, #0
 800255e:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002562:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e040      	b.n	80025ec <main+0x3d0>
		  combined.solutions[combined.size++] = offspring_ls.solutions[i];
 800256a:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 800256e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002572:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8002576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800257a:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800257e:	1c53      	adds	r3, r2, #1
 8002580:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 8002584:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8002588:	f5a1 61af 	sub.w	r1, r1, #1400	@ 0x578
 800258c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8002590:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 8002594:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002598:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800259c:	f5a3 61af 	sub.w	r1, r3, #1400	@ 0x578
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	18c8      	adds	r0, r1, r3
 80025aa:	f507 43ac 	add.w	r3, r7, #22016	@ 0x5600
 80025ae:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80025b2:	f6a3 6104 	subw	r1, r3, #3588	@ 0xe04
 80025b6:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80025ba:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	4604      	mov	r4, r0
 80025cc:	461d      	mov	r5, r3
 80025ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d2:	682b      	ldr	r3, [r5, #0]
 80025d4:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < offspring_ls.size; i++) {
 80025d6:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80025da:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80025e6:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	f507 43ac 	add.w	r3, r7, #22016	@ 0x5600
 80025f0:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80025f4:	f6a3 6304 	subw	r3, r3, #3588	@ 0xe04
 80025f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025fc:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8002600:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002604:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	dbad      	blt.n	800256a <main+0x34e>
	  }

	  selection(&combined, &selected);
 800260e:	f507 52d3 	add.w	r2, r7, #6752	@ 0x1a60
 8002612:	f102 0218 	add.w	r2, r2, #24
 8002616:	3aec      	subs	r2, #236	@ 0xec
 8002618:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 800261c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002620:	3b78      	subs	r3, #120	@ 0x78
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fbab 	bl	8001d80 <selection>
	  pop = selected;
 800262a:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800262e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002632:	f5a3 62f5 	sub.w	r2, r3, #1960	@ 0x7a8
 8002636:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 800263a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800263e:	f6a3 43ec 	subw	r3, r3, #3308	@ 0xcec
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f241 7374 	movw	r3, #6004	@ 0x1774
 800264a:	461a      	mov	r2, r3
 800264c:	f002 ff27 	bl	800549e <memcpy>

	  printf("Iteration %d\n", iter);
 8002650:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002654:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	48d0      	ldr	r0, [pc, #832]	@ (800299c <main+0x780>)
 800265c:	f002 fe14 	bl	8005288 <iprintf>
  for (int iter = 0; iter < MAX_ITER; iter++) {
 8002660:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002664:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002670:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800267a:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2bc7      	cmp	r3, #199	@ 0xc7
 8002682:	f77f ae2a 	ble.w	80022da <main+0xbe>
  }

  uint32_t end_time = HAL_GetTick();
 8002686:	f000 fc91 	bl	8002fac <HAL_GetTick>
 800268a:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800268e:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002692:	6018      	str	r0, [r3, #0]
  uint32_t elapsed_ms = end_time - start_time;
 8002694:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002698:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026a2:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80026ae:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 80026b2:	6013      	str	r3, [r2, #0]

  float time_sec = elapsed_ms / 1000.0f;
 80026b4:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026b8:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c6:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 80029a0 <main+0x784>
 80026ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ce:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026d2:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 80026d6:	edc3 7a00 	vstr	s15, [r3]
  float energy_joules = VOLTAGE * CURRENT * time_sec;
 80026da:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026de:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80029a4 <main+0x788>
 80026ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ee:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026f2:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 80026f6:	edc3 7a00 	vstr	s15, [r3]

  // Extract Pareto front from final population
  int front_indices[POP_SIZE];
  int front_size;
  find_pareto_front(pop.solutions, pop.size, front_indices, &front_size);
 80026fa:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80026fe:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002702:	f5a3 63f5 	sub.w	r3, r3, #1960	@ 0x7a8
 8002706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270a:	f8d3 1770 	ldr.w	r1, [r3, #1904]	@ 0x770
 800270e:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8002712:	f103 0318 	add.w	r3, r3, #24
 8002716:	3b80      	subs	r3, #128	@ 0x80
 8002718:	f507 52c3 	add.w	r2, r7, #6240	@ 0x1860
 800271c:	f102 0218 	add.w	r2, r2, #24
 8002720:	3a7c      	subs	r2, #124	@ 0x7c
 8002722:	f507 400e 	add.w	r0, r7, #36352	@ 0x8e00
 8002726:	f100 00d8 	add.w	r0, r0, #216	@ 0xd8
 800272a:	3808      	subs	r0, #8
 800272c:	f7ff f853 	bl	80017d6 <find_pareto_front>

  Population pareto_front = {0};
 8002730:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002734:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8002738:	4618      	mov	r0, r3
 800273a:	f241 7374 	movw	r3, #6004	@ 0x1774
 800273e:	461a      	mov	r2, r3
 8002740:	2100      	movs	r1, #0
 8002742:	f002 fe2c 	bl	800539e <memset>
  for (int i = 0; i < front_size; i++) {
 8002746:	2300      	movs	r3, #0
 8002748:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800274c:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e036      	b.n	80027c2 <main+0x5a6>
	  pareto_front.solutions[i] = pop.solutions[front_indices[i]];
 8002754:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 8002758:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800275c:	f6a3 637c 	subw	r3, r3, #3708	@ 0xe7c
 8002760:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002764:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800276e:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002772:	f2a3 50f4 	subw	r0, r3, #1524	@ 0x5f4
 8002776:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800277a:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4418      	add	r0, r3
 800278a:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800278e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002792:	f5a3 61f5 	sub.w	r1, r3, #1960	@ 0x7a8
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	4604      	mov	r4, r0
 80027a2:	461d      	mov	r5, r3
 80027a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < front_size; i++) {
 80027ac:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80027b0:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80027bc:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 80027c6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80027ca:	f5a3 6368 	sub.w	r3, r3, #3712	@ 0xe80
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80027d4:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbba      	blt.n	8002754 <main+0x538>
  }
  pareto_front.size = front_size;
 80027de:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 80027e2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80027e6:	f5a3 6368 	sub.w	r3, r3, #3712	@ 0xe80
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f507 62cf 	add.w	r2, r7, #1656	@ 0x678
 80027f0:	f2a2 52f4 	subw	r2, r2, #1524	@ 0x5f4
 80027f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027f8:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770

  char msg[128];
  for (int i = 0; i < pareto_front.size; i++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002802:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e07b      	b.n	8002902 <main+0x6e6>
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
			  pareto_front.solutions[i].x[0], pareto_front.solutions[i].x[1],
 800280a:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 800280e:	f2a3 51f4 	subw	r1, r3, #1524	@ 0x5f4
 8002812:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002816:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe9d 	bl	8000568 <__aeabi_f2d>
 800282e:	4604      	mov	r4, r0
 8002830:	460d      	mov	r5, r1
			  pareto_front.solutions[i].x[0], pareto_front.solutions[i].x[1],
 8002832:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002836:	f2a3 51f4 	subw	r1, r3, #1524	@ 0x5f4
 800283a:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800283e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	3304      	adds	r3, #4
 8002850:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe88 	bl	8000568 <__aeabi_f2d>
 8002858:	4680      	mov	r8, r0
 800285a:	4689      	mov	r9, r1
			  pareto_front.solutions[i].fitness[0], pareto_front.solutions[i].fitness[1]);
 800285c:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002860:	f2a3 51f4 	subw	r1, r3, #1524	@ 0x5f4
 8002864:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002868:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	330c      	adds	r3, #12
 800287a:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe73 	bl	8000568 <__aeabi_f2d>
 8002882:	4682      	mov	sl, r0
 8002884:	468b      	mov	fp, r1
			  pareto_front.solutions[i].fitness[0], pareto_front.solutions[i].fitness[1]);
 8002886:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 800288a:	f2a3 51f4 	subw	r1, r3, #1524	@ 0x5f4
 800288e:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002892:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3310      	adds	r3, #16
 80028a4:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "x: %.2f, %.2f | f1: %.4f, f2: %.4f\r\n",
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe5e 	bl	8000568 <__aeabi_f2d>
 80028ac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80028b0:	3b74      	subs	r3, #116	@ 0x74
 80028b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80028b6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80028ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80028be:	e9cd 4500 	strd	r4, r5, [sp]
 80028c2:	4a39      	ldr	r2, [pc, #228]	@ (80029a8 <main+0x78c>)
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fcf0 	bl	80052ac <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80028cc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80028d0:	3b74      	subs	r3, #116	@ 0x74
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fcdc 	bl	8000290 <strlen>
 80028d8:	4603      	mov	r3, r0
 80028da:	b29a      	uxth	r2, r3
 80028dc:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80028e0:	3974      	subs	r1, #116	@ 0x74
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	4831      	ldr	r0, [pc, #196]	@ (80029ac <main+0x790>)
 80028e8:	f001 fb8e 	bl	8004008 <HAL_UART_Transmit>
  for (int i = 0; i < pareto_front.size; i++) {
 80028ec:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80028f0:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80028fc:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002906:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800290a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8002912:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002916:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	f6ff af74 	blt.w	800280a <main+0x5ee>
  }

  snprintf(msg, sizeof(msg), "Done! Time: %lums (%.2fs), Energy: %.4fJ\r\n", elapsed_ms, time_sec, energy_joules);
 8002922:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002926:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f7fd fe1c 	bl	8000568 <__aeabi_f2d>
 8002930:	4604      	mov	r4, r0
 8002932:	460d      	mov	r5, r1
 8002934:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002938:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	f7fd fe13 	bl	8000568 <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800294a:	3874      	subs	r0, #116	@ 0x74
 800294c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002950:	e9cd 4500 	strd	r4, r5, [sp]
 8002954:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002958:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <main+0x794>)
 8002960:	2180      	movs	r1, #128	@ 0x80
 8002962:	f002 fca3 	bl	80052ac <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002966:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800296a:	3b74      	subs	r3, #116	@ 0x74
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fc8f 	bl	8000290 <strlen>
 8002972:	4603      	mov	r3, r0
 8002974:	b29a      	uxth	r2, r3
 8002976:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800297a:	3974      	subs	r1, #116	@ 0x74
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	480a      	ldr	r0, [pc, #40]	@ (80029ac <main+0x790>)
 8002982:	f001 fb41 	bl	8004008 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
 8002986:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800298a:	480a      	ldr	r0, [pc, #40]	@ (80029b4 <main+0x798>)
 800298c:	f000 fde9 	bl	8003562 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8002990:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002994:	f000 fb16 	bl	8002fc4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
 8002998:	bf00      	nop
 800299a:	e7f4      	b.n	8002986 <main+0x76a>
 800299c:	08009730 	.word	0x08009730
 80029a0:	447a0000 	.word	0x447a0000
 80029a4:	3d872b02 	.word	0x3d872b02
 80029a8:	08009740 	.word	0x08009740
 80029ac:	20000218 	.word	0x20000218
 80029b0:	08009768 	.word	0x08009768
 80029b4:	40021800 	.word	0x40021800

080029b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b094      	sub	sp, #80	@ 0x50
 80029bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029be:	f107 0320 	add.w	r3, r7, #32
 80029c2:	2230      	movs	r2, #48	@ 0x30
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f002 fce9 	bl	800539e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <SystemClock_Config+0xd8>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a90 <SystemClock_Config+0xd8>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ec:	4b28      	ldr	r3, [pc, #160]	@ (8002a90 <SystemClock_Config+0xd8>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f8:	2300      	movs	r3, #0
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <SystemClock_Config+0xdc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a24      	ldr	r2, [pc, #144]	@ (8002a94 <SystemClock_Config+0xdc>)
 8002a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b22      	ldr	r3, [pc, #136]	@ (8002a94 <SystemClock_Config+0xdc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002a2c:	23b4      	movs	r3, #180	@ 0xb4
 8002a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a30:	2302      	movs	r3, #2
 8002a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a34:	2304      	movs	r3, #4
 8002a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a38:	f107 0320 	add.w	r3, r7, #32
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fdfb 	bl	8003638 <HAL_RCC_OscConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a48:	f000 f8a2 	bl	8002b90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a4c:	f000 fda4 	bl	8003598 <HAL_PWREx_EnableOverDrive>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002a56:	f000 f89b 	bl	8002b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a5a:	230f      	movs	r3, #15
 8002a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002a6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	2105      	movs	r1, #5
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 f855 	bl	8003b28 <HAL_RCC_ClockConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002a84:	f000 f884 	bl	8002b90 <Error_Handler>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3750      	adds	r7, #80	@ 0x50
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000

08002a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002a9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ae8 <MX_USART1_UART_Init+0x50>)
 8002aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002abe:	220c      	movs	r2, #12
 8002ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <MX_USART1_UART_Init+0x4c>)
 8002ad0:	f001 fa4a 	bl	8003f68 <HAL_UART_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ada:	f000 f859 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000218 	.word	0x20000218
 8002ae8:	40011000 	.word	0x40011000

08002aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a18      	ldr	r2, [pc, #96]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	4a11      	ldr	r2, [pc, #68]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <MX_GPIO_Init+0x9c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b5c:	480b      	ldr	r0, [pc, #44]	@ (8002b8c <MX_GPIO_Init+0xa0>)
 8002b5e:	f000 fce7 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4804      	ldr	r0, [pc, #16]	@ (8002b8c <MX_GPIO_Init+0xa0>)
 8002b7c:	f000 fb2c 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b80:	bf00      	nop
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40021800 	.word	0x40021800

08002b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b94:	b672      	cpsid	i
}
 8002b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <Error_Handler+0x8>

08002b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	4a0f      	ldr	r2, [pc, #60]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800

08002bec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a19      	ldr	r2, [pc, #100]	@ (8002c70 <HAL_UART_MspInit+0x84>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12c      	bne.n	8002c68 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <HAL_UART_MspInit+0x88>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <HAL_UART_MspInit+0x88>)
 8002c18:	f043 0310 	orr.w	r3, r3, #16
 8002c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_UART_MspInit+0x88>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <HAL_UART_MspInit+0x88>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a10      	ldr	r2, [pc, #64]	@ (8002c74 <HAL_UART_MspInit+0x88>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <HAL_UART_MspInit+0x88>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c58:	2307      	movs	r3, #7
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4619      	mov	r1, r3
 8002c62:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <HAL_UART_MspInit+0x8c>)
 8002c64:	f000 fab8 	bl	80031d8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	@ 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40011000 	.word	0x40011000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020000 	.word	0x40020000

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <NMI_Handler+0x4>

08002c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <HardFault_Handler+0x4>

08002c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <MemManage_Handler+0x4>

08002c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd2:	f000 f957 	bl	8002f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  return 1;
 8002cde:	2301      	movs	r3, #1
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_kill>:

int _kill(int pid, int sig)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf4:	f002 fba6 	bl	8005444 <__errno>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2216      	movs	r2, #22
 8002cfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_exit>:

void _exit (int status)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d12:	f04f 31ff 	mov.w	r1, #4294967295
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffe7 	bl	8002cea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <_exit+0x12>

08002d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e00a      	b.n	8002d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d32:	f3af 8000 	nop.w
 8002d36:	4601      	mov	r1, r0
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	b2ca      	uxtb	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbf0      	blt.n	8002d32 <_read+0x12>
  }

  return len;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e009      	b.n	8002d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf1      	blt.n	8002d6c <_write+0x12>
  }
  return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:

int _close(int file)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dba:	605a      	str	r2, [r3, #4]
  return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_isatty>:

int _isatty(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	@ (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e2c:	f002 fb0a 	bl	8005444 <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	220c      	movs	r2, #12
 8002e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e009      	b.n	8002e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e42:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a05      	ldr	r2, [pc, #20]	@ (8002e60 <_sbrk+0x64>)
 8002e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20030000 	.word	0x20030000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	20000260 	.word	0x20000260
 8002e64:	200003b8 	.word	0x200003b8

08002e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <SystemInit+0x20>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <SystemInit+0x20>)
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ec4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e90:	f7ff ffea 	bl	8002e68 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e94:	480c      	ldr	r0, [pc, #48]	@ (8002ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e96:	490d      	ldr	r1, [pc, #52]	@ (8002ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eac:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002eba:	f002 fac9 	bl	8005450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ebe:	f7ff f9ad 	bl	800221c <main>
  bx  lr    
 8002ec2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ec4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ecc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002ed0:	08009dd8 	.word	0x08009dd8
  ldr r2, =_sbss
 8002ed4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002ed8:	200003b4 	.word	0x200003b4

08002edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002edc:	e7fe      	b.n	8002edc <ADC_IRQHandler>
	...

08002ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <HAL_Init+0x40>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <HAL_Init+0x40>)
 8002ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002efc:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a07      	ldr	r2, [pc, #28]	@ (8002f20 <HAL_Init+0x40>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f000 f931 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0e:	200f      	movs	r0, #15
 8002f10:	f000 f808 	bl	8002f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f14:	f7ff fe42 	bl	8002b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00

08002f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f2c:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_InitTick+0x54>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <HAL_InitTick+0x58>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f93b 	bl	80031be <HAL_SYSTICK_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00e      	b.n	8002f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d80a      	bhi.n	8002f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f000 f911 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f64:	4a06      	ldr	r2, [pc, #24]	@ (8002f80 <HAL_InitTick+0x5c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000028 	.word	0x20000028
 8002f7c:	20000030 	.word	0x20000030
 8002f80:	2000002c 	.word	0x2000002c

08002f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000030 	.word	0x20000030
 8002fa8:	20000264 	.word	0x20000264

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000264 	.word	0x20000264

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff ffee 	bl	8002fac <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d005      	beq.n	8002fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_Delay+0x44>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fea:	bf00      	nop
 8002fec:	f7ff ffde 	bl	8002fac <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d8f7      	bhi.n	8002fec <HAL_Delay+0x28>
  {
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000030 	.word	0x20000030

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	@ (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	@ (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	@ (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	@ 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	@ 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff8e 	bl	8003070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	@ (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	@ (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff47 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff5c 	bl	8003054 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff8e 	bl	80030c4 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5d 	bl	8003070 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffb0 	bl	800312c <SysTick_Config>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e177      	b.n	80034e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f4:	2201      	movs	r2, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	429a      	cmp	r2, r3
 800320e:	f040 8166 	bne.w	80034de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d005      	beq.n	800322a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003226:	2b02      	cmp	r3, #2
 8003228:	d130      	bne.n	800328c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003260:	2201      	movs	r2, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 0201 	and.w	r2, r3, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d017      	beq.n	80032c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d123      	bne.n	800331c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	69b9      	ldr	r1, [r7, #24]
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80c0 	beq.w	80034de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b66      	ldr	r3, [pc, #408]	@ (80034fc <HAL_GPIO_Init+0x324>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	4a65      	ldr	r2, [pc, #404]	@ (80034fc <HAL_GPIO_Init+0x324>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336c:	6453      	str	r3, [r2, #68]	@ 0x44
 800336e:	4b63      	ldr	r3, [pc, #396]	@ (80034fc <HAL_GPIO_Init+0x324>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337a:	4a61      	ldr	r2, [pc, #388]	@ (8003500 <HAL_GPIO_Init+0x328>)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <HAL_GPIO_Init+0x32c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d037      	beq.n	8003416 <HAL_GPIO_Init+0x23e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a57      	ldr	r2, [pc, #348]	@ (8003508 <HAL_GPIO_Init+0x330>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_GPIO_Init+0x23a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a56      	ldr	r2, [pc, #344]	@ (800350c <HAL_GPIO_Init+0x334>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <HAL_GPIO_Init+0x236>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a55      	ldr	r2, [pc, #340]	@ (8003510 <HAL_GPIO_Init+0x338>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d025      	beq.n	800340a <HAL_GPIO_Init+0x232>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a54      	ldr	r2, [pc, #336]	@ (8003514 <HAL_GPIO_Init+0x33c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <HAL_GPIO_Init+0x22e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a53      	ldr	r2, [pc, #332]	@ (8003518 <HAL_GPIO_Init+0x340>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d019      	beq.n	8003402 <HAL_GPIO_Init+0x22a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	@ (800351c <HAL_GPIO_Init+0x344>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0x226>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a51      	ldr	r2, [pc, #324]	@ (8003520 <HAL_GPIO_Init+0x348>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00d      	beq.n	80033fa <HAL_GPIO_Init+0x222>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a50      	ldr	r2, [pc, #320]	@ (8003524 <HAL_GPIO_Init+0x34c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <HAL_GPIO_Init+0x21e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003528 <HAL_GPIO_Init+0x350>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_GPIO_Init+0x21a>
 80033ee:	2309      	movs	r3, #9
 80033f0:	e012      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033f2:	230a      	movs	r3, #10
 80033f4:	e010      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033f6:	2308      	movs	r3, #8
 80033f8:	e00e      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033fa:	2307      	movs	r3, #7
 80033fc:	e00c      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033fe:	2306      	movs	r3, #6
 8003400:	e00a      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003402:	2305      	movs	r3, #5
 8003404:	e008      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003406:	2304      	movs	r3, #4
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x240>
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <HAL_GPIO_Init+0x240>
 800340e:	2302      	movs	r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003416:	2300      	movs	r3, #0
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	4093      	lsls	r3, r2
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003428:	4935      	ldr	r1, [pc, #212]	@ (8003500 <HAL_GPIO_Init+0x328>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003436:	4b3d      	ldr	r3, [pc, #244]	@ (800352c <HAL_GPIO_Init+0x354>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345a:	4a34      	ldr	r2, [pc, #208]	@ (800352c <HAL_GPIO_Init+0x354>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003460:	4b32      	ldr	r3, [pc, #200]	@ (800352c <HAL_GPIO_Init+0x354>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003484:	4a29      	ldr	r2, [pc, #164]	@ (800352c <HAL_GPIO_Init+0x354>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800348a:	4b28      	ldr	r3, [pc, #160]	@ (800352c <HAL_GPIO_Init+0x354>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ae:	4a1f      	ldr	r2, [pc, #124]	@ (800352c <HAL_GPIO_Init+0x354>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <HAL_GPIO_Init+0x354>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <HAL_GPIO_Init+0x354>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	f67f ae84 	bls.w	80031f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3724      	adds	r7, #36	@ 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40013800 	.word	0x40013800
 8003504:	40020000 	.word	0x40020000
 8003508:	40020400 	.word	0x40020400
 800350c:	40020800 	.word	0x40020800
 8003510:	40020c00 	.word	0x40020c00
 8003514:	40021000 	.word	0x40021000
 8003518:	40021400 	.word	0x40021400
 800351c:	40021800 	.word	0x40021800
 8003520:	40021c00 	.word	0x40021c00
 8003524:	40022000 	.word	0x40022000
 8003528:	40022400 	.word	0x40022400
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003574:	887a      	ldrh	r2, [r7, #2]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4013      	ands	r3, r2
 800357a:	041a      	lsls	r2, r3, #16
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43d9      	mvns	r1, r3
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	400b      	ands	r3, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x90>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x90>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x90>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035be:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_PWREx_EnableOverDrive+0x94>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c4:	f7ff fcf2 	bl	8002fac <HAL_GetTick>
 80035c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ca:	e009      	b.n	80035e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035cc:	f7ff fcee 	bl	8002fac <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035da:	d901      	bls.n	80035e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e01f      	b.n	8003620 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x98>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d1ee      	bne.n	80035cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035ee:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f4:	f7ff fcda 	bl	8002fac <HAL_GetTick>
 80035f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035fa:	e009      	b.n	8003610 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035fc:	f7ff fcd6 	bl	8002fac <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800360a:	d901      	bls.n	8003610 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e007      	b.n	8003620 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x98>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800361c:	d1ee      	bne.n	80035fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	420e0040 	.word	0x420e0040
 8003630:	40007000 	.word	0x40007000
 8003634:	420e0044 	.word	0x420e0044

08003638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e267      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d075      	beq.n	8003742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003656:	4b88      	ldr	r3, [pc, #544]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d00c      	beq.n	800367c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003662:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800366a:	2b08      	cmp	r3, #8
 800366c:	d112      	bne.n	8003694 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4b82      	ldr	r3, [pc, #520]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003676:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800367a:	d10b      	bne.n	8003694 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	4b7e      	ldr	r3, [pc, #504]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d05b      	beq.n	8003740 <HAL_RCC_OscConfig+0x108>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d157      	bne.n	8003740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e242      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369c:	d106      	bne.n	80036ac <HAL_RCC_OscConfig+0x74>
 800369e:	4b76      	ldr	r3, [pc, #472]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a75      	ldr	r2, [pc, #468]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01d      	b.n	80036e8 <HAL_RCC_OscConfig+0xb0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x98>
 80036b6:	4b70      	ldr	r3, [pc, #448]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0xb0>
 80036d0:	4b69      	ldr	r3, [pc, #420]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a68      	ldr	r2, [pc, #416]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b66      	ldr	r3, [pc, #408]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a65      	ldr	r2, [pc, #404]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7ff fc5c 	bl	8002fac <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7ff fc58 	bl	8002fac <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	@ 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e207      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b5b      	ldr	r3, [pc, #364]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0xc0>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7ff fc48 	bl	8002fac <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7ff fc44 	bl	8002fac <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	@ 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1f3      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	4b51      	ldr	r3, [pc, #324]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0xe8>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d063      	beq.n	8003816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800374e:	4b4a      	ldr	r3, [pc, #296]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b47      	ldr	r3, [pc, #284]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b44      	ldr	r3, [pc, #272]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b41      	ldr	r3, [pc, #260]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x152>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1c7      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4937      	ldr	r1, [pc, #220]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e03a      	b.n	8003816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b34      	ldr	r3, [pc, #208]	@ (800387c <HAL_RCC_OscConfig+0x244>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7ff fbfd 	bl	8002fac <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b6:	f7ff fbf9 	bl	8002fac <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1a8      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4925      	ldr	r1, [pc, #148]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	4b24      	ldr	r3, [pc, #144]	@ (800387c <HAL_RCC_OscConfig+0x244>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7ff fbdc 	bl	8002fac <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f8:	f7ff fbd8 	bl	8002fac <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e187      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d036      	beq.n	8003890 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <HAL_RCC_OscConfig+0x248>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7ff fbbc 	bl	8002fac <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7ff fbb8 	bl	8002fac <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e167      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x200>
 8003856:	e01b      	b.n	8003890 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_OscConfig+0x248>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7ff fba5 	bl	8002fac <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e00e      	b.n	8003884 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7ff fba1 	bl	8002fac <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d907      	bls.n	8003884 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e150      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
 8003878:	40023800 	.word	0x40023800
 800387c:	42470000 	.word	0x42470000
 8003880:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ea      	bne.n	8003866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8097 	beq.w	80039cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b81      	ldr	r3, [pc, #516]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	4a7c      	ldr	r2, [pc, #496]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038be:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b77      	ldr	r3, [pc, #476]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d118      	bne.n	800390c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b74      	ldr	r3, [pc, #464]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a73      	ldr	r2, [pc, #460]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7ff fb61 	bl	8002fac <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7ff fb5d 	bl	8002fac <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e10c      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x2ea>
 8003914:	4b64      	ldr	r3, [pc, #400]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	4a63      	ldr	r2, [pc, #396]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003920:	e01c      	b.n	800395c <HAL_RCC_OscConfig+0x324>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x30c>
 800392a:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	@ 0x70
 8003936:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6713      	str	r3, [r2, #112]	@ 0x70
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0x324>
 8003944:	4b58      	ldr	r3, [pc, #352]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	4a57      	ldr	r2, [pc, #348]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003950:	4b55      	ldr	r3, [pc, #340]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a54      	ldr	r2, [pc, #336]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d015      	beq.n	8003990 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7ff fb22 	bl	8002fac <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7ff fb1e 	bl	8002fac <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0cb      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	4b49      	ldr	r3, [pc, #292]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RCC_OscConfig+0x334>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7ff fb0c 	bl	8002fac <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7ff fb08 	bl	8002fac <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0b5      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ae:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ee      	bne.n	8003998 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b39      	ldr	r3, [pc, #228]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80a1 	beq.w	8003b18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039d6:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d05c      	beq.n	8003a9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d141      	bne.n	8003a6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7ff fadc 	bl	8002fac <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7ff fad8 	bl	8002fac <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e087      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	491b      	ldr	r1, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7ff fab1 	bl	8002fac <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7ff faad 	bl	8002fac <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e05c      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	4b11      	ldr	r3, [pc, #68]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x416>
 8003a6c:	e054      	b.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7ff fa9a 	bl	8002fac <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7ff fa96 	bl	8002fac <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e045      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x444>
 8003a9a:	e03d      	b.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e038      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_OscConfig+0x4ec>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d028      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d121      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d11a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0cc      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b68      	ldr	r3, [pc, #416]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d90c      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b63      	ldr	r3, [pc, #396]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a58      	ldr	r2, [pc, #352]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a52      	ldr	r2, [pc, #328]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b50      	ldr	r3, [pc, #320]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494d      	ldr	r1, [pc, #308]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d044      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d119      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e06f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e067      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c06:	4b37      	ldr	r3, [pc, #220]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4934      	ldr	r1, [pc, #208]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c18:	f7ff f9c8 	bl	8002fac <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7ff f9c4 	bl	8002fac <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e04f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 020c 	and.w	r2, r3, #12
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1eb      	bne.n	8003c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c48:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d20c      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e032      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4916      	ldr	r1, [pc, #88]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490e      	ldr	r1, [pc, #56]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f821 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490a      	ldr	r1, [pc, #40]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a09      	ldr	r2, [pc, #36]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f928 	bl	8002f24 <HAL_InitTick>

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08009794 	.word	0x08009794
 8003cec:	20000028 	.word	0x20000028
 8003cf0:	2000002c 	.word	0x2000002c

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b094      	sub	sp, #80	@ 0x50
 8003cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0c:	4b79      	ldr	r3, [pc, #484]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d00d      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x40>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	f200 80e1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x34>
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d26:	e0db      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b73      	ldr	r3, [pc, #460]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d2c:	e0db      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2e:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x208>)
 8003d30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d32:	e0d8      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d063      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5e:	2300      	movs	r3, #0
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d78:	0150      	lsls	r0, r2, #5
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4621      	mov	r1, r4
 8003d80:	1a51      	subs	r1, r2, r1
 8003d82:	6139      	str	r1, [r7, #16]
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d98:	4659      	mov	r1, fp
 8003d9a:	018b      	lsls	r3, r1, #6
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da2:	4651      	mov	r1, sl
 8003da4:	018a      	lsls	r2, r1, #6
 8003da6:	4651      	mov	r1, sl
 8003da8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dac:	4659      	mov	r1, fp
 8003dae:	eb63 0901 	sbc.w	r9, r3, r1
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	eb18 0303 	adds.w	r3, r8, r3
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	462b      	mov	r3, r5
 8003dd4:	eb49 0303 	adc.w	r3, r9, r3
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003de6:	4629      	mov	r1, r5
 8003de8:	024b      	lsls	r3, r1, #9
 8003dea:	4621      	mov	r1, r4
 8003dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df0:	4621      	mov	r1, r4
 8003df2:	024a      	lsls	r2, r1, #9
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e04:	f7fc ff30 	bl	8000c68 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e10:	e058      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b38      	ldr	r3, [pc, #224]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3e:	0150      	lsls	r0, r2, #5
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4641      	mov	r1, r8
 8003e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e64:	ebb2 040a 	subs.w	r4, r2, sl
 8003e68:	eb63 050b 	sbc.w	r5, r3, fp
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	00eb      	lsls	r3, r5, #3
 8003e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7a:	00e2      	lsls	r2, r4, #3
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	461d      	mov	r5, r3
 8003e80:	4643      	mov	r3, r8
 8003e82:	18e3      	adds	r3, r4, r3
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	464b      	mov	r3, r9
 8003e88:	eb45 0303 	adc.w	r3, r5, r3
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	028b      	lsls	r3, r1, #10
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	028a      	lsls	r2, r1, #10
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	61fa      	str	r2, [r7, #28]
 8003eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb8:	f7fc fed6 	bl	8000c68 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ed4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3750      	adds	r7, #80	@ 0x50
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	007a1200 	.word	0x007a1200

08003f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000028 	.word	0x20000028

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4903      	ldr	r1, [pc, #12]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	080097a4 	.word	0x080097a4

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f44:	f7ff ffdc 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0b5b      	lsrs	r3, r3, #13
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4903      	ldr	r1, [pc, #12]	@ (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	080097a4 	.word	0x080097a4

08003f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e042      	b.n	8004000 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fe fe2c 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2224      	movs	r2, #36	@ 0x24
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f973 	bl	8004298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	@ 0x28
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b20      	cmp	r3, #32
 8004026:	d175      	bne.n	8004114 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_UART_Transmit+0x2c>
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e06e      	b.n	8004116 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2221      	movs	r2, #33	@ 0x21
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004046:	f7fe ffb1 	bl	8002fac <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004060:	d108      	bne.n	8004074 <HAL_UART_Transmit+0x6c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800407c:	e02e      	b.n	80040dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f848 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e03a      	b.n	8004116 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3302      	adds	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e007      	b.n	80040ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1cb      	bne.n	800407e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2140      	movs	r1, #64	@ 0x40
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f814 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e006      	b.n	8004116 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e000      	b.n	8004116 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	e03b      	b.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d037      	beq.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fe ff38 	bl	8002fac <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	6a3a      	ldr	r2, [r7, #32]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <UART_WaitOnFlagUntilTimeout+0x30>
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e03a      	b.n	80041c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d023      	beq.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b80      	cmp	r3, #128	@ 0x80
 8004164:	d020      	beq.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b40      	cmp	r3, #64	@ 0x40
 800416a:	d01d      	beq.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d116      	bne.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f81d 	bl	80041d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2208      	movs	r2, #8
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e00f      	b.n	80041c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d0b4      	beq.n	8004130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b095      	sub	sp, #84	@ 0x54
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80041fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3314      	adds	r3, #20
 8004212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	61fb      	str	r3, [r7, #28]
   return(result);
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800422c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800422e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d119      	bne.n	800427c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	60bb      	str	r3, [r7, #8]
   return(result);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0310 	bic.w	r3, r3, #16
 800425e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004268:	61ba      	str	r2, [r7, #24]
 800426a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6979      	ldr	r1, [r7, #20]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	613b      	str	r3, [r7, #16]
   return(result);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e5      	bne.n	8004248 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800428a:	bf00      	nop
 800428c:	3754      	adds	r7, #84	@ 0x54
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b0c0      	sub	sp, #256	@ 0x100
 800429e:	af00      	add	r7, sp, #0
 80042a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	68d9      	ldr	r1, [r3, #12]
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	ea40 0301 	orr.w	r3, r0, r1
 80042c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042f0:	f021 010c 	bic.w	r1, r1, #12
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042fe:	430b      	orrs	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	6999      	ldr	r1, [r3, #24]
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	ea40 0301 	orr.w	r3, r0, r1
 800431e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b8f      	ldr	r3, [pc, #572]	@ (8004564 <UART_SetConfig+0x2cc>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d005      	beq.n	8004338 <UART_SetConfig+0xa0>
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b8d      	ldr	r3, [pc, #564]	@ (8004568 <UART_SetConfig+0x2d0>)
 8004334:	429a      	cmp	r2, r3
 8004336:	d104      	bne.n	8004342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7ff fe02 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 800433c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004340:	e003      	b.n	800434a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004342:	f7ff fde9 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8004346:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004354:	f040 810c 	bne.w	8004570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004362:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	1891      	adds	r1, r2, r2
 8004370:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004372:	415b      	adcs	r3, r3
 8004374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800437a:	4621      	mov	r1, r4
 800437c:	eb12 0801 	adds.w	r8, r2, r1
 8004380:	4629      	mov	r1, r5
 8004382:	eb43 0901 	adc.w	r9, r3, r1
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439a:	4690      	mov	r8, r2
 800439c:	4699      	mov	r9, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	eb18 0303 	adds.w	r3, r8, r3
 80043a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043a8:	462b      	mov	r3, r5
 80043aa:	eb49 0303 	adc.w	r3, r9, r3
 80043ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043c6:	460b      	mov	r3, r1
 80043c8:	18db      	adds	r3, r3, r3
 80043ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80043cc:	4613      	mov	r3, r2
 80043ce:	eb42 0303 	adc.w	r3, r2, r3
 80043d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043dc:	f7fc fc44 	bl	8000c68 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4b61      	ldr	r3, [pc, #388]	@ (800456c <UART_SetConfig+0x2d4>)
 80043e6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	011c      	lsls	r4, r3, #4
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004408:	415b      	adcs	r3, r3
 800440a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800440c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004410:	4641      	mov	r1, r8
 8004412:	eb12 0a01 	adds.w	sl, r2, r1
 8004416:	4649      	mov	r1, r9
 8004418:	eb43 0b01 	adc.w	fp, r3, r1
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800442c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004430:	4692      	mov	sl, r2
 8004432:	469b      	mov	fp, r3
 8004434:	4643      	mov	r3, r8
 8004436:	eb1a 0303 	adds.w	r3, sl, r3
 800443a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800443e:	464b      	mov	r3, r9
 8004440:	eb4b 0303 	adc.w	r3, fp, r3
 8004444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004454:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800445c:	460b      	mov	r3, r1
 800445e:	18db      	adds	r3, r3, r3
 8004460:	643b      	str	r3, [r7, #64]	@ 0x40
 8004462:	4613      	mov	r3, r2
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
 800446a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800446e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004472:	f7fc fbf9 	bl	8000c68 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4611      	mov	r1, r2
 800447c:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <UART_SetConfig+0x2d4>)
 800447e:	fba3 2301 	umull	r2, r3, r3, r1
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2264      	movs	r2, #100	@ 0x64
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	1acb      	subs	r3, r1, r3
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004492:	4b36      	ldr	r3, [pc, #216]	@ (800456c <UART_SetConfig+0x2d4>)
 8004494:	fba3 2302 	umull	r2, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044a0:	441c      	add	r4, r3
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044bc:	415b      	adcs	r3, r3
 80044be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004510:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004518:	460b      	mov	r3, r1
 800451a:	18db      	adds	r3, r3, r3
 800451c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800451e:	4613      	mov	r3, r2
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800452a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800452e:	f7fc fb9b 	bl	8000c68 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <UART_SetConfig+0x2d4>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	@ 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	3332      	adds	r3, #50	@ 0x32
 800454a:	4a08      	ldr	r2, [pc, #32]	@ (800456c <UART_SetConfig+0x2d4>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 0207 	and.w	r2, r3, #7
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4422      	add	r2, r4
 800455e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004560:	e106      	b.n	8004770 <UART_SetConfig+0x4d8>
 8004562:	bf00      	nop
 8004564:	40011000 	.word	0x40011000
 8004568:	40011400 	.word	0x40011400
 800456c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004574:	2200      	movs	r2, #0
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800457a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800457e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004582:	4642      	mov	r2, r8
 8004584:	464b      	mov	r3, r9
 8004586:	1891      	adds	r1, r2, r2
 8004588:	6239      	str	r1, [r7, #32]
 800458a:	415b      	adcs	r3, r3
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
 800458e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004592:	4641      	mov	r1, r8
 8004594:	1854      	adds	r4, r2, r1
 8004596:	4649      	mov	r1, r9
 8004598:	eb43 0501 	adc.w	r5, r3, r1
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	00eb      	lsls	r3, r5, #3
 80045a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045aa:	00e2      	lsls	r2, r4, #3
 80045ac:	4614      	mov	r4, r2
 80045ae:	461d      	mov	r5, r3
 80045b0:	4643      	mov	r3, r8
 80045b2:	18e3      	adds	r3, r4, r3
 80045b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045b8:	464b      	mov	r3, r9
 80045ba:	eb45 0303 	adc.w	r3, r5, r3
 80045be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045de:	4629      	mov	r1, r5
 80045e0:	008b      	lsls	r3, r1, #2
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e8:	4621      	mov	r1, r4
 80045ea:	008a      	lsls	r2, r1, #2
 80045ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045f0:	f7fc fb3a 	bl	8000c68 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b60      	ldr	r3, [pc, #384]	@ (800477c <UART_SetConfig+0x4e4>)
 80045fa:	fba3 2302 	umull	r2, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	011c      	lsls	r4, r3, #4
 8004602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004606:	2200      	movs	r2, #0
 8004608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800460c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004614:	4642      	mov	r2, r8
 8004616:	464b      	mov	r3, r9
 8004618:	1891      	adds	r1, r2, r2
 800461a:	61b9      	str	r1, [r7, #24]
 800461c:	415b      	adcs	r3, r3
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004624:	4641      	mov	r1, r8
 8004626:	1851      	adds	r1, r2, r1
 8004628:	6139      	str	r1, [r7, #16]
 800462a:	4649      	mov	r1, r9
 800462c:	414b      	adcs	r3, r1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800463c:	4659      	mov	r1, fp
 800463e:	00cb      	lsls	r3, r1, #3
 8004640:	4651      	mov	r1, sl
 8004642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004646:	4651      	mov	r1, sl
 8004648:	00ca      	lsls	r2, r1, #3
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	4603      	mov	r3, r0
 8004650:	4642      	mov	r2, r8
 8004652:	189b      	adds	r3, r3, r2
 8004654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004658:	464b      	mov	r3, r9
 800465a:	460a      	mov	r2, r1
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800466e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800467c:	4649      	mov	r1, r9
 800467e:	008b      	lsls	r3, r1, #2
 8004680:	4641      	mov	r1, r8
 8004682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004686:	4641      	mov	r1, r8
 8004688:	008a      	lsls	r2, r1, #2
 800468a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800468e:	f7fc faeb 	bl	8000c68 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4611      	mov	r1, r2
 8004698:	4b38      	ldr	r3, [pc, #224]	@ (800477c <UART_SetConfig+0x4e4>)
 800469a:	fba3 2301 	umull	r2, r3, r3, r1
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2264      	movs	r2, #100	@ 0x64
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	1acb      	subs	r3, r1, r3
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	3332      	adds	r3, #50	@ 0x32
 80046ac:	4a33      	ldr	r2, [pc, #204]	@ (800477c <UART_SetConfig+0x4e4>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b8:	441c      	add	r4, r3
 80046ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046be:	2200      	movs	r2, #0
 80046c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80046c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80046c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	415b      	adcs	r3, r3
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800470a:	464b      	mov	r3, r9
 800470c:	460a      	mov	r2, r1
 800470e:	eb42 0303 	adc.w	r3, r2, r3
 8004712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	663b      	str	r3, [r7, #96]	@ 0x60
 800471e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800472c:	4649      	mov	r1, r9
 800472e:	008b      	lsls	r3, r1, #2
 8004730:	4641      	mov	r1, r8
 8004732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004736:	4641      	mov	r1, r8
 8004738:	008a      	lsls	r2, r1, #2
 800473a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800473e:	f7fc fa93 	bl	8000c68 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <UART_SetConfig+0x4e4>)
 8004748:	fba3 1302 	umull	r1, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	2164      	movs	r1, #100	@ 0x64
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	3332      	adds	r3, #50	@ 0x32
 800475a:	4a08      	ldr	r2, [pc, #32]	@ (800477c <UART_SetConfig+0x4e4>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	f003 020f 	and.w	r2, r3, #15
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4422      	add	r2, r4
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004776:	46bd      	mov	sp, r7
 8004778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477c:	51eb851f 	.word	0x51eb851f

08004780 <srand>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <srand+0x44>)
 8004784:	681d      	ldr	r5, [r3, #0]
 8004786:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004788:	4604      	mov	r4, r0
 800478a:	b9b3      	cbnz	r3, 80047ba <srand+0x3a>
 800478c:	2018      	movs	r0, #24
 800478e:	f001 fd55 	bl	800623c <malloc>
 8004792:	4602      	mov	r2, r0
 8004794:	6328      	str	r0, [r5, #48]	@ 0x30
 8004796:	b920      	cbnz	r0, 80047a2 <srand+0x22>
 8004798:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <srand+0x48>)
 800479a:	480c      	ldr	r0, [pc, #48]	@ (80047cc <srand+0x4c>)
 800479c:	2146      	movs	r1, #70	@ 0x46
 800479e:	f000 fe8d 	bl	80054bc <__assert_func>
 80047a2:	490b      	ldr	r1, [pc, #44]	@ (80047d0 <srand+0x50>)
 80047a4:	4b0b      	ldr	r3, [pc, #44]	@ (80047d4 <srand+0x54>)
 80047a6:	e9c0 1300 	strd	r1, r3, [r0]
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <srand+0x58>)
 80047ac:	6083      	str	r3, [r0, #8]
 80047ae:	230b      	movs	r3, #11
 80047b0:	8183      	strh	r3, [r0, #12]
 80047b2:	2100      	movs	r1, #0
 80047b4:	2001      	movs	r0, #1
 80047b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80047ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80047bc:	2200      	movs	r2, #0
 80047be:	611c      	str	r4, [r3, #16]
 80047c0:	615a      	str	r2, [r3, #20]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	20000040 	.word	0x20000040
 80047c8:	080097ac 	.word	0x080097ac
 80047cc:	080097c3 	.word	0x080097c3
 80047d0:	abcd330e 	.word	0xabcd330e
 80047d4:	e66d1234 	.word	0xe66d1234
 80047d8:	0005deec 	.word	0x0005deec

080047dc <rand>:
 80047dc:	4b16      	ldr	r3, [pc, #88]	@ (8004838 <rand+0x5c>)
 80047de:	b510      	push	{r4, lr}
 80047e0:	681c      	ldr	r4, [r3, #0]
 80047e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80047e4:	b9b3      	cbnz	r3, 8004814 <rand+0x38>
 80047e6:	2018      	movs	r0, #24
 80047e8:	f001 fd28 	bl	800623c <malloc>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6320      	str	r0, [r4, #48]	@ 0x30
 80047f0:	b920      	cbnz	r0, 80047fc <rand+0x20>
 80047f2:	4b12      	ldr	r3, [pc, #72]	@ (800483c <rand+0x60>)
 80047f4:	4812      	ldr	r0, [pc, #72]	@ (8004840 <rand+0x64>)
 80047f6:	2152      	movs	r1, #82	@ 0x52
 80047f8:	f000 fe60 	bl	80054bc <__assert_func>
 80047fc:	4911      	ldr	r1, [pc, #68]	@ (8004844 <rand+0x68>)
 80047fe:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <rand+0x6c>)
 8004800:	e9c0 1300 	strd	r1, r3, [r0]
 8004804:	4b11      	ldr	r3, [pc, #68]	@ (800484c <rand+0x70>)
 8004806:	6083      	str	r3, [r0, #8]
 8004808:	230b      	movs	r3, #11
 800480a:	8183      	strh	r3, [r0, #12]
 800480c:	2100      	movs	r1, #0
 800480e:	2001      	movs	r0, #1
 8004810:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004814:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004816:	480e      	ldr	r0, [pc, #56]	@ (8004850 <rand+0x74>)
 8004818:	690b      	ldr	r3, [r1, #16]
 800481a:	694c      	ldr	r4, [r1, #20]
 800481c:	4a0d      	ldr	r2, [pc, #52]	@ (8004854 <rand+0x78>)
 800481e:	4358      	muls	r0, r3
 8004820:	fb02 0004 	mla	r0, r2, r4, r0
 8004824:	fba3 3202 	umull	r3, r2, r3, r2
 8004828:	3301      	adds	r3, #1
 800482a:	eb40 0002 	adc.w	r0, r0, r2
 800482e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004832:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004836:	bd10      	pop	{r4, pc}
 8004838:	20000040 	.word	0x20000040
 800483c:	080097ac 	.word	0x080097ac
 8004840:	080097c3 	.word	0x080097c3
 8004844:	abcd330e 	.word	0xabcd330e
 8004848:	e66d1234 	.word	0xe66d1234
 800484c:	0005deec 	.word	0x0005deec
 8004850:	5851f42d 	.word	0x5851f42d
 8004854:	4c957f2d 	.word	0x4c957f2d

08004858 <__cvt>:
 8004858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	ec57 6b10 	vmov	r6, r7, d0
 8004860:	2f00      	cmp	r7, #0
 8004862:	460c      	mov	r4, r1
 8004864:	4619      	mov	r1, r3
 8004866:	463b      	mov	r3, r7
 8004868:	bfbb      	ittet	lt
 800486a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800486e:	461f      	movlt	r7, r3
 8004870:	2300      	movge	r3, #0
 8004872:	232d      	movlt	r3, #45	@ 0x2d
 8004874:	700b      	strb	r3, [r1, #0]
 8004876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004878:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800487c:	4691      	mov	r9, r2
 800487e:	f023 0820 	bic.w	r8, r3, #32
 8004882:	bfbc      	itt	lt
 8004884:	4632      	movlt	r2, r6
 8004886:	4616      	movlt	r6, r2
 8004888:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800488c:	d005      	beq.n	800489a <__cvt+0x42>
 800488e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004892:	d100      	bne.n	8004896 <__cvt+0x3e>
 8004894:	3401      	adds	r4, #1
 8004896:	2102      	movs	r1, #2
 8004898:	e000      	b.n	800489c <__cvt+0x44>
 800489a:	2103      	movs	r1, #3
 800489c:	ab03      	add	r3, sp, #12
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	ab02      	add	r3, sp, #8
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	ec47 6b10 	vmov	d0, r6, r7
 80048a8:	4653      	mov	r3, sl
 80048aa:	4622      	mov	r2, r4
 80048ac:	f000 feac 	bl	8005608 <_dtoa_r>
 80048b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048b4:	4605      	mov	r5, r0
 80048b6:	d119      	bne.n	80048ec <__cvt+0x94>
 80048b8:	f019 0f01 	tst.w	r9, #1
 80048bc:	d00e      	beq.n	80048dc <__cvt+0x84>
 80048be:	eb00 0904 	add.w	r9, r0, r4
 80048c2:	2200      	movs	r2, #0
 80048c4:	2300      	movs	r3, #0
 80048c6:	4630      	mov	r0, r6
 80048c8:	4639      	mov	r1, r7
 80048ca:	f7fc f90d 	bl	8000ae8 <__aeabi_dcmpeq>
 80048ce:	b108      	cbz	r0, 80048d4 <__cvt+0x7c>
 80048d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80048d4:	2230      	movs	r2, #48	@ 0x30
 80048d6:	9b03      	ldr	r3, [sp, #12]
 80048d8:	454b      	cmp	r3, r9
 80048da:	d31e      	bcc.n	800491a <__cvt+0xc2>
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048e0:	1b5b      	subs	r3, r3, r5
 80048e2:	4628      	mov	r0, r5
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	b004      	add	sp, #16
 80048e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048f0:	eb00 0904 	add.w	r9, r0, r4
 80048f4:	d1e5      	bne.n	80048c2 <__cvt+0x6a>
 80048f6:	7803      	ldrb	r3, [r0, #0]
 80048f8:	2b30      	cmp	r3, #48	@ 0x30
 80048fa:	d10a      	bne.n	8004912 <__cvt+0xba>
 80048fc:	2200      	movs	r2, #0
 80048fe:	2300      	movs	r3, #0
 8004900:	4630      	mov	r0, r6
 8004902:	4639      	mov	r1, r7
 8004904:	f7fc f8f0 	bl	8000ae8 <__aeabi_dcmpeq>
 8004908:	b918      	cbnz	r0, 8004912 <__cvt+0xba>
 800490a:	f1c4 0401 	rsb	r4, r4, #1
 800490e:	f8ca 4000 	str.w	r4, [sl]
 8004912:	f8da 3000 	ldr.w	r3, [sl]
 8004916:	4499      	add	r9, r3
 8004918:	e7d3      	b.n	80048c2 <__cvt+0x6a>
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	9103      	str	r1, [sp, #12]
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e7d9      	b.n	80048d6 <__cvt+0x7e>

08004922 <__exponent>:
 8004922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004924:	2900      	cmp	r1, #0
 8004926:	bfba      	itte	lt
 8004928:	4249      	neglt	r1, r1
 800492a:	232d      	movlt	r3, #45	@ 0x2d
 800492c:	232b      	movge	r3, #43	@ 0x2b
 800492e:	2909      	cmp	r1, #9
 8004930:	7002      	strb	r2, [r0, #0]
 8004932:	7043      	strb	r3, [r0, #1]
 8004934:	dd29      	ble.n	800498a <__exponent+0x68>
 8004936:	f10d 0307 	add.w	r3, sp, #7
 800493a:	461d      	mov	r5, r3
 800493c:	270a      	movs	r7, #10
 800493e:	461a      	mov	r2, r3
 8004940:	fbb1 f6f7 	udiv	r6, r1, r7
 8004944:	fb07 1416 	mls	r4, r7, r6, r1
 8004948:	3430      	adds	r4, #48	@ 0x30
 800494a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800494e:	460c      	mov	r4, r1
 8004950:	2c63      	cmp	r4, #99	@ 0x63
 8004952:	f103 33ff 	add.w	r3, r3, #4294967295
 8004956:	4631      	mov	r1, r6
 8004958:	dcf1      	bgt.n	800493e <__exponent+0x1c>
 800495a:	3130      	adds	r1, #48	@ 0x30
 800495c:	1e94      	subs	r4, r2, #2
 800495e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004962:	1c41      	adds	r1, r0, #1
 8004964:	4623      	mov	r3, r4
 8004966:	42ab      	cmp	r3, r5
 8004968:	d30a      	bcc.n	8004980 <__exponent+0x5e>
 800496a:	f10d 0309 	add.w	r3, sp, #9
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	42ac      	cmp	r4, r5
 8004972:	bf88      	it	hi
 8004974:	2300      	movhi	r3, #0
 8004976:	3302      	adds	r3, #2
 8004978:	4403      	add	r3, r0
 800497a:	1a18      	subs	r0, r3, r0
 800497c:	b003      	add	sp, #12
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004980:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004984:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004988:	e7ed      	b.n	8004966 <__exponent+0x44>
 800498a:	2330      	movs	r3, #48	@ 0x30
 800498c:	3130      	adds	r1, #48	@ 0x30
 800498e:	7083      	strb	r3, [r0, #2]
 8004990:	70c1      	strb	r1, [r0, #3]
 8004992:	1d03      	adds	r3, r0, #4
 8004994:	e7f1      	b.n	800497a <__exponent+0x58>
	...

08004998 <_printf_float>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	b08d      	sub	sp, #52	@ 0x34
 800499e:	460c      	mov	r4, r1
 80049a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80049a4:	4616      	mov	r6, r2
 80049a6:	461f      	mov	r7, r3
 80049a8:	4605      	mov	r5, r0
 80049aa:	f000 fd01 	bl	80053b0 <_localeconv_r>
 80049ae:	6803      	ldr	r3, [r0, #0]
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fc6c 	bl	8000290 <strlen>
 80049b8:	2300      	movs	r3, #0
 80049ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80049bc:	f8d8 3000 	ldr.w	r3, [r8]
 80049c0:	9005      	str	r0, [sp, #20]
 80049c2:	3307      	adds	r3, #7
 80049c4:	f023 0307 	bic.w	r3, r3, #7
 80049c8:	f103 0208 	add.w	r2, r3, #8
 80049cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049d0:	f8d4 b000 	ldr.w	fp, [r4]
 80049d4:	f8c8 2000 	str.w	r2, [r8]
 80049d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049e0:	9307      	str	r3, [sp, #28]
 80049e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80049e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004c60 <_printf_float+0x2c8>)
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	f7fc f8aa 	bl	8000b4c <__aeabi_dcmpun>
 80049f8:	bb70      	cbnz	r0, 8004a58 <_printf_float+0xc0>
 80049fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049fe:	4b98      	ldr	r3, [pc, #608]	@ (8004c60 <_printf_float+0x2c8>)
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	f7fc f884 	bl	8000b10 <__aeabi_dcmple>
 8004a08:	bb30      	cbnz	r0, 8004a58 <_printf_float+0xc0>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4649      	mov	r1, r9
 8004a12:	f7fc f873 	bl	8000afc <__aeabi_dcmplt>
 8004a16:	b110      	cbz	r0, 8004a1e <_printf_float+0x86>
 8004a18:	232d      	movs	r3, #45	@ 0x2d
 8004a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a1e:	4a91      	ldr	r2, [pc, #580]	@ (8004c64 <_printf_float+0x2cc>)
 8004a20:	4b91      	ldr	r3, [pc, #580]	@ (8004c68 <_printf_float+0x2d0>)
 8004a22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a26:	bf8c      	ite	hi
 8004a28:	4690      	movhi	r8, r2
 8004a2a:	4698      	movls	r8, r3
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	f02b 0304 	bic.w	r3, fp, #4
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	f04f 0900 	mov.w	r9, #0
 8004a3a:	9700      	str	r7, [sp, #0]
 8004a3c:	4633      	mov	r3, r6
 8004a3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004a40:	4621      	mov	r1, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f9d2 	bl	8004dec <_printf_common>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	f040 808d 	bne.w	8004b68 <_printf_float+0x1d0>
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a52:	b00d      	add	sp, #52	@ 0x34
 8004a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4649      	mov	r1, r9
 8004a60:	f7fc f874 	bl	8000b4c <__aeabi_dcmpun>
 8004a64:	b140      	cbz	r0, 8004a78 <_printf_float+0xe0>
 8004a66:	464b      	mov	r3, r9
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bfbc      	itt	lt
 8004a6c:	232d      	movlt	r3, #45	@ 0x2d
 8004a6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a72:	4a7e      	ldr	r2, [pc, #504]	@ (8004c6c <_printf_float+0x2d4>)
 8004a74:	4b7e      	ldr	r3, [pc, #504]	@ (8004c70 <_printf_float+0x2d8>)
 8004a76:	e7d4      	b.n	8004a22 <_printf_float+0x8a>
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004a7e:	9206      	str	r2, [sp, #24]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	d13b      	bne.n	8004afc <_printf_float+0x164>
 8004a84:	2306      	movs	r3, #6
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6022      	str	r2, [r4, #0]
 8004a90:	9303      	str	r3, [sp, #12]
 8004a92:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004a98:	ab09      	add	r3, sp, #36	@ 0x24
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	6861      	ldr	r1, [r4, #4]
 8004a9e:	ec49 8b10 	vmov	d0, r8, r9
 8004aa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7ff fed6 	bl	8004858 <__cvt>
 8004aac:	9b06      	ldr	r3, [sp, #24]
 8004aae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ab0:	2b47      	cmp	r3, #71	@ 0x47
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	d129      	bne.n	8004b0a <_printf_float+0x172>
 8004ab6:	1cc8      	adds	r0, r1, #3
 8004ab8:	db02      	blt.n	8004ac0 <_printf_float+0x128>
 8004aba:	6863      	ldr	r3, [r4, #4]
 8004abc:	4299      	cmp	r1, r3
 8004abe:	dd41      	ble.n	8004b44 <_printf_float+0x1ac>
 8004ac0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ac4:	fa5f fa8a 	uxtb.w	sl, sl
 8004ac8:	3901      	subs	r1, #1
 8004aca:	4652      	mov	r2, sl
 8004acc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ad0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ad2:	f7ff ff26 	bl	8004922 <__exponent>
 8004ad6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ad8:	1813      	adds	r3, r2, r0
 8004ada:	2a01      	cmp	r2, #1
 8004adc:	4681      	mov	r9, r0
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	dc02      	bgt.n	8004ae8 <_printf_float+0x150>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	07d2      	lsls	r2, r2, #31
 8004ae6:	d501      	bpl.n	8004aec <_printf_float+0x154>
 8004ae8:	3301      	adds	r3, #1
 8004aea:	6123      	str	r3, [r4, #16]
 8004aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0a2      	beq.n	8004a3a <_printf_float+0xa2>
 8004af4:	232d      	movs	r3, #45	@ 0x2d
 8004af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004afa:	e79e      	b.n	8004a3a <_printf_float+0xa2>
 8004afc:	9a06      	ldr	r2, [sp, #24]
 8004afe:	2a47      	cmp	r2, #71	@ 0x47
 8004b00:	d1c2      	bne.n	8004a88 <_printf_float+0xf0>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1c0      	bne.n	8004a88 <_printf_float+0xf0>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e7bd      	b.n	8004a86 <_printf_float+0xee>
 8004b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b0e:	d9db      	bls.n	8004ac8 <_printf_float+0x130>
 8004b10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b14:	d118      	bne.n	8004b48 <_printf_float+0x1b0>
 8004b16:	2900      	cmp	r1, #0
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	dd0b      	ble.n	8004b34 <_printf_float+0x19c>
 8004b1c:	6121      	str	r1, [r4, #16]
 8004b1e:	b913      	cbnz	r3, 8004b26 <_printf_float+0x18e>
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	07d0      	lsls	r0, r2, #31
 8004b24:	d502      	bpl.n	8004b2c <_printf_float+0x194>
 8004b26:	3301      	adds	r3, #1
 8004b28:	440b      	add	r3, r1
 8004b2a:	6123      	str	r3, [r4, #16]
 8004b2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b2e:	f04f 0900 	mov.w	r9, #0
 8004b32:	e7db      	b.n	8004aec <_printf_float+0x154>
 8004b34:	b913      	cbnz	r3, 8004b3c <_printf_float+0x1a4>
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	07d2      	lsls	r2, r2, #31
 8004b3a:	d501      	bpl.n	8004b40 <_printf_float+0x1a8>
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	e7f4      	b.n	8004b2a <_printf_float+0x192>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e7f2      	b.n	8004b2a <_printf_float+0x192>
 8004b44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b4a:	4299      	cmp	r1, r3
 8004b4c:	db05      	blt.n	8004b5a <_printf_float+0x1c2>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	6121      	str	r1, [r4, #16]
 8004b52:	07d8      	lsls	r0, r3, #31
 8004b54:	d5ea      	bpl.n	8004b2c <_printf_float+0x194>
 8004b56:	1c4b      	adds	r3, r1, #1
 8004b58:	e7e7      	b.n	8004b2a <_printf_float+0x192>
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	bfd4      	ite	le
 8004b5e:	f1c1 0202 	rsble	r2, r1, #2
 8004b62:	2201      	movgt	r2, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	e7e0      	b.n	8004b2a <_printf_float+0x192>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	055a      	lsls	r2, r3, #21
 8004b6c:	d407      	bmi.n	8004b7e <_printf_float+0x1e6>
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	4642      	mov	r2, r8
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	47b8      	blx	r7
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d12b      	bne.n	8004bd4 <_printf_float+0x23c>
 8004b7c:	e767      	b.n	8004a4e <_printf_float+0xb6>
 8004b7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b82:	f240 80dd 	bls.w	8004d40 <_printf_float+0x3a8>
 8004b86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f7fb ffab 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d033      	beq.n	8004bfe <_printf_float+0x266>
 8004b96:	4a37      	ldr	r2, [pc, #220]	@ (8004c74 <_printf_float+0x2dc>)
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	47b8      	blx	r7
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	f43f af54 	beq.w	8004a4e <_printf_float+0xb6>
 8004ba6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004baa:	4543      	cmp	r3, r8
 8004bac:	db02      	blt.n	8004bb4 <_printf_float+0x21c>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	07d8      	lsls	r0, r3, #31
 8004bb2:	d50f      	bpl.n	8004bd4 <_printf_float+0x23c>
 8004bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f af45 	beq.w	8004a4e <_printf_float+0xb6>
 8004bc4:	f04f 0900 	mov.w	r9, #0
 8004bc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bcc:	f104 0a1a 	add.w	sl, r4, #26
 8004bd0:	45c8      	cmp	r8, r9
 8004bd2:	dc09      	bgt.n	8004be8 <_printf_float+0x250>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	079b      	lsls	r3, r3, #30
 8004bd8:	f100 8103 	bmi.w	8004de2 <_printf_float+0x44a>
 8004bdc:	68e0      	ldr	r0, [r4, #12]
 8004bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004be0:	4298      	cmp	r0, r3
 8004be2:	bfb8      	it	lt
 8004be4:	4618      	movlt	r0, r3
 8004be6:	e734      	b.n	8004a52 <_printf_float+0xba>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4652      	mov	r2, sl
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af2b 	beq.w	8004a4e <_printf_float+0xb6>
 8004bf8:	f109 0901 	add.w	r9, r9, #1
 8004bfc:	e7e8      	b.n	8004bd0 <_printf_float+0x238>
 8004bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dc39      	bgt.n	8004c78 <_printf_float+0x2e0>
 8004c04:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <_printf_float+0x2dc>)
 8004c06:	2301      	movs	r3, #1
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	f43f af1d 	beq.w	8004a4e <_printf_float+0xb6>
 8004c14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004c18:	ea59 0303 	orrs.w	r3, r9, r3
 8004c1c:	d102      	bne.n	8004c24 <_printf_float+0x28c>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	07d9      	lsls	r1, r3, #31
 8004c22:	d5d7      	bpl.n	8004bd4 <_printf_float+0x23c>
 8004c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	47b8      	blx	r7
 8004c2e:	3001      	adds	r0, #1
 8004c30:	f43f af0d 	beq.w	8004a4e <_printf_float+0xb6>
 8004c34:	f04f 0a00 	mov.w	sl, #0
 8004c38:	f104 0b1a 	add.w	fp, r4, #26
 8004c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c3e:	425b      	negs	r3, r3
 8004c40:	4553      	cmp	r3, sl
 8004c42:	dc01      	bgt.n	8004c48 <_printf_float+0x2b0>
 8004c44:	464b      	mov	r3, r9
 8004c46:	e793      	b.n	8004b70 <_printf_float+0x1d8>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	465a      	mov	r2, fp
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f aefb 	beq.w	8004a4e <_printf_float+0xb6>
 8004c58:	f10a 0a01 	add.w	sl, sl, #1
 8004c5c:	e7ee      	b.n	8004c3c <_printf_float+0x2a4>
 8004c5e:	bf00      	nop
 8004c60:	7fefffff 	.word	0x7fefffff
 8004c64:	0800981f 	.word	0x0800981f
 8004c68:	0800981b 	.word	0x0800981b
 8004c6c:	08009827 	.word	0x08009827
 8004c70:	08009823 	.word	0x08009823
 8004c74:	0800982b 	.word	0x0800982b
 8004c78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c7e:	4553      	cmp	r3, sl
 8004c80:	bfa8      	it	ge
 8004c82:	4653      	movge	r3, sl
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	4699      	mov	r9, r3
 8004c88:	dc36      	bgt.n	8004cf8 <_printf_float+0x360>
 8004c8a:	f04f 0b00 	mov.w	fp, #0
 8004c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c92:	f104 021a 	add.w	r2, r4, #26
 8004c96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c98:	9306      	str	r3, [sp, #24]
 8004c9a:	eba3 0309 	sub.w	r3, r3, r9
 8004c9e:	455b      	cmp	r3, fp
 8004ca0:	dc31      	bgt.n	8004d06 <_printf_float+0x36e>
 8004ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca4:	459a      	cmp	sl, r3
 8004ca6:	dc3a      	bgt.n	8004d1e <_printf_float+0x386>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	07da      	lsls	r2, r3, #31
 8004cac:	d437      	bmi.n	8004d1e <_printf_float+0x386>
 8004cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb0:	ebaa 0903 	sub.w	r9, sl, r3
 8004cb4:	9b06      	ldr	r3, [sp, #24]
 8004cb6:	ebaa 0303 	sub.w	r3, sl, r3
 8004cba:	4599      	cmp	r9, r3
 8004cbc:	bfa8      	it	ge
 8004cbe:	4699      	movge	r9, r3
 8004cc0:	f1b9 0f00 	cmp.w	r9, #0
 8004cc4:	dc33      	bgt.n	8004d2e <_printf_float+0x396>
 8004cc6:	f04f 0800 	mov.w	r8, #0
 8004cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cce:	f104 0b1a 	add.w	fp, r4, #26
 8004cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8004cd8:	eba3 0309 	sub.w	r3, r3, r9
 8004cdc:	4543      	cmp	r3, r8
 8004cde:	f77f af79 	ble.w	8004bd4 <_printf_float+0x23c>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	465a      	mov	r2, fp
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4628      	mov	r0, r5
 8004cea:	47b8      	blx	r7
 8004cec:	3001      	adds	r0, #1
 8004cee:	f43f aeae 	beq.w	8004a4e <_printf_float+0xb6>
 8004cf2:	f108 0801 	add.w	r8, r8, #1
 8004cf6:	e7ec      	b.n	8004cd2 <_printf_float+0x33a>
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	d1c2      	bne.n	8004c8a <_printf_float+0x2f2>
 8004d04:	e6a3      	b.n	8004a4e <_printf_float+0xb6>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	9206      	str	r2, [sp, #24]
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f ae9c 	beq.w	8004a4e <_printf_float+0xb6>
 8004d16:	9a06      	ldr	r2, [sp, #24]
 8004d18:	f10b 0b01 	add.w	fp, fp, #1
 8004d1c:	e7bb      	b.n	8004c96 <_printf_float+0x2fe>
 8004d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d22:	4631      	mov	r1, r6
 8004d24:	4628      	mov	r0, r5
 8004d26:	47b8      	blx	r7
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d1c0      	bne.n	8004cae <_printf_float+0x316>
 8004d2c:	e68f      	b.n	8004a4e <_printf_float+0xb6>
 8004d2e:	9a06      	ldr	r2, [sp, #24]
 8004d30:	464b      	mov	r3, r9
 8004d32:	4442      	add	r2, r8
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d1c3      	bne.n	8004cc6 <_printf_float+0x32e>
 8004d3e:	e686      	b.n	8004a4e <_printf_float+0xb6>
 8004d40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d44:	f1ba 0f01 	cmp.w	sl, #1
 8004d48:	dc01      	bgt.n	8004d4e <_printf_float+0x3b6>
 8004d4a:	07db      	lsls	r3, r3, #31
 8004d4c:	d536      	bpl.n	8004dbc <_printf_float+0x424>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4642      	mov	r2, r8
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b8      	blx	r7
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f43f ae78 	beq.w	8004a4e <_printf_float+0xb6>
 8004d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f ae70 	beq.w	8004a4e <_printf_float+0xb6>
 8004d6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d72:	2200      	movs	r2, #0
 8004d74:	2300      	movs	r3, #0
 8004d76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d7a:	f7fb feb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d7e:	b9c0      	cbnz	r0, 8004db2 <_printf_float+0x41a>
 8004d80:	4653      	mov	r3, sl
 8004d82:	f108 0201 	add.w	r2, r8, #1
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d10c      	bne.n	8004daa <_printf_float+0x412>
 8004d90:	e65d      	b.n	8004a4e <_printf_float+0xb6>
 8004d92:	2301      	movs	r3, #1
 8004d94:	465a      	mov	r2, fp
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f ae56 	beq.w	8004a4e <_printf_float+0xb6>
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	45d0      	cmp	r8, sl
 8004da8:	dbf3      	blt.n	8004d92 <_printf_float+0x3fa>
 8004daa:	464b      	mov	r3, r9
 8004dac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004db0:	e6df      	b.n	8004b72 <_printf_float+0x1da>
 8004db2:	f04f 0800 	mov.w	r8, #0
 8004db6:	f104 0b1a 	add.w	fp, r4, #26
 8004dba:	e7f4      	b.n	8004da6 <_printf_float+0x40e>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	e7e1      	b.n	8004d86 <_printf_float+0x3ee>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	464a      	mov	r2, r9
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae3e 	beq.w	8004a4e <_printf_float+0xb6>
 8004dd2:	f108 0801 	add.w	r8, r8, #1
 8004dd6:	68e3      	ldr	r3, [r4, #12]
 8004dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004dda:	1a5b      	subs	r3, r3, r1
 8004ddc:	4543      	cmp	r3, r8
 8004dde:	dcf0      	bgt.n	8004dc2 <_printf_float+0x42a>
 8004de0:	e6fc      	b.n	8004bdc <_printf_float+0x244>
 8004de2:	f04f 0800 	mov.w	r8, #0
 8004de6:	f104 0919 	add.w	r9, r4, #25
 8004dea:	e7f4      	b.n	8004dd6 <_printf_float+0x43e>

08004dec <_printf_common>:
 8004dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	4616      	mov	r6, r2
 8004df2:	4698      	mov	r8, r3
 8004df4:	688a      	ldr	r2, [r1, #8]
 8004df6:	690b      	ldr	r3, [r1, #16]
 8004df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	bfb8      	it	lt
 8004e00:	4613      	movlt	r3, r2
 8004e02:	6033      	str	r3, [r6, #0]
 8004e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e08:	4607      	mov	r7, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	b10a      	cbz	r2, 8004e12 <_printf_common+0x26>
 8004e0e:	3301      	adds	r3, #1
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	0699      	lsls	r1, r3, #26
 8004e16:	bf42      	ittt	mi
 8004e18:	6833      	ldrmi	r3, [r6, #0]
 8004e1a:	3302      	addmi	r3, #2
 8004e1c:	6033      	strmi	r3, [r6, #0]
 8004e1e:	6825      	ldr	r5, [r4, #0]
 8004e20:	f015 0506 	ands.w	r5, r5, #6
 8004e24:	d106      	bne.n	8004e34 <_printf_common+0x48>
 8004e26:	f104 0a19 	add.w	sl, r4, #25
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	6832      	ldr	r2, [r6, #0]
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	dc26      	bgt.n	8004e82 <_printf_common+0x96>
 8004e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e38:	6822      	ldr	r2, [r4, #0]
 8004e3a:	3b00      	subs	r3, #0
 8004e3c:	bf18      	it	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	0692      	lsls	r2, r2, #26
 8004e42:	d42b      	bmi.n	8004e9c <_printf_common+0xb0>
 8004e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e48:	4641      	mov	r1, r8
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	47c8      	blx	r9
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d01e      	beq.n	8004e90 <_printf_common+0xa4>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	6922      	ldr	r2, [r4, #16]
 8004e56:	f003 0306 	and.w	r3, r3, #6
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	bf02      	ittt	eq
 8004e5e:	68e5      	ldreq	r5, [r4, #12]
 8004e60:	6833      	ldreq	r3, [r6, #0]
 8004e62:	1aed      	subeq	r5, r5, r3
 8004e64:	68a3      	ldr	r3, [r4, #8]
 8004e66:	bf0c      	ite	eq
 8004e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e6c:	2500      	movne	r5, #0
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	bfc4      	itt	gt
 8004e72:	1a9b      	subgt	r3, r3, r2
 8004e74:	18ed      	addgt	r5, r5, r3
 8004e76:	2600      	movs	r6, #0
 8004e78:	341a      	adds	r4, #26
 8004e7a:	42b5      	cmp	r5, r6
 8004e7c:	d11a      	bne.n	8004eb4 <_printf_common+0xc8>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e008      	b.n	8004e94 <_printf_common+0xa8>
 8004e82:	2301      	movs	r3, #1
 8004e84:	4652      	mov	r2, sl
 8004e86:	4641      	mov	r1, r8
 8004e88:	4638      	mov	r0, r7
 8004e8a:	47c8      	blx	r9
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d103      	bne.n	8004e98 <_printf_common+0xac>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	3501      	adds	r5, #1
 8004e9a:	e7c6      	b.n	8004e2a <_printf_common+0x3e>
 8004e9c:	18e1      	adds	r1, r4, r3
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	2030      	movs	r0, #48	@ 0x30
 8004ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ea6:	4422      	add	r2, r4
 8004ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	e7c7      	b.n	8004e44 <_printf_common+0x58>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	4641      	mov	r1, r8
 8004eba:	4638      	mov	r0, r7
 8004ebc:	47c8      	blx	r9
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d0e6      	beq.n	8004e90 <_printf_common+0xa4>
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7d9      	b.n	8004e7a <_printf_common+0x8e>
	...

08004ec8 <_printf_i>:
 8004ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	7e0f      	ldrb	r7, [r1, #24]
 8004ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ed0:	2f78      	cmp	r7, #120	@ 0x78
 8004ed2:	4691      	mov	r9, r2
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	469a      	mov	sl, r3
 8004eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ede:	d807      	bhi.n	8004ef0 <_printf_i+0x28>
 8004ee0:	2f62      	cmp	r7, #98	@ 0x62
 8004ee2:	d80a      	bhi.n	8004efa <_printf_i+0x32>
 8004ee4:	2f00      	cmp	r7, #0
 8004ee6:	f000 80d1 	beq.w	800508c <_printf_i+0x1c4>
 8004eea:	2f58      	cmp	r7, #88	@ 0x58
 8004eec:	f000 80b8 	beq.w	8005060 <_printf_i+0x198>
 8004ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ef8:	e03a      	b.n	8004f70 <_printf_i+0xa8>
 8004efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004efe:	2b15      	cmp	r3, #21
 8004f00:	d8f6      	bhi.n	8004ef0 <_printf_i+0x28>
 8004f02:	a101      	add	r1, pc, #4	@ (adr r1, 8004f08 <_printf_i+0x40>)
 8004f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	08004f75 	.word	0x08004f75
 8004f10:	08004ef1 	.word	0x08004ef1
 8004f14:	08004ef1 	.word	0x08004ef1
 8004f18:	08004ef1 	.word	0x08004ef1
 8004f1c:	08004ef1 	.word	0x08004ef1
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	08004ef1 	.word	0x08004ef1
 8004f28:	08004ef1 	.word	0x08004ef1
 8004f2c:	08004ef1 	.word	0x08004ef1
 8004f30:	08004ef1 	.word	0x08004ef1
 8004f34:	08005073 	.word	0x08005073
 8004f38:	08004f9f 	.word	0x08004f9f
 8004f3c:	0800502d 	.word	0x0800502d
 8004f40:	08004ef1 	.word	0x08004ef1
 8004f44:	08004ef1 	.word	0x08004ef1
 8004f48:	08005095 	.word	0x08005095
 8004f4c:	08004ef1 	.word	0x08004ef1
 8004f50:	08004f9f 	.word	0x08004f9f
 8004f54:	08004ef1 	.word	0x08004ef1
 8004f58:	08004ef1 	.word	0x08004ef1
 8004f5c:	08005035 	.word	0x08005035
 8004f60:	6833      	ldr	r3, [r6, #0]
 8004f62:	1d1a      	adds	r2, r3, #4
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6032      	str	r2, [r6, #0]
 8004f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f70:	2301      	movs	r3, #1
 8004f72:	e09c      	b.n	80050ae <_printf_i+0x1e6>
 8004f74:	6833      	ldr	r3, [r6, #0]
 8004f76:	6820      	ldr	r0, [r4, #0]
 8004f78:	1d19      	adds	r1, r3, #4
 8004f7a:	6031      	str	r1, [r6, #0]
 8004f7c:	0606      	lsls	r6, r0, #24
 8004f7e:	d501      	bpl.n	8004f84 <_printf_i+0xbc>
 8004f80:	681d      	ldr	r5, [r3, #0]
 8004f82:	e003      	b.n	8004f8c <_printf_i+0xc4>
 8004f84:	0645      	lsls	r5, r0, #25
 8004f86:	d5fb      	bpl.n	8004f80 <_printf_i+0xb8>
 8004f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f8c:	2d00      	cmp	r5, #0
 8004f8e:	da03      	bge.n	8004f98 <_printf_i+0xd0>
 8004f90:	232d      	movs	r3, #45	@ 0x2d
 8004f92:	426d      	negs	r5, r5
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f98:	4858      	ldr	r0, [pc, #352]	@ (80050fc <_printf_i+0x234>)
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e011      	b.n	8004fc2 <_printf_i+0xfa>
 8004f9e:	6821      	ldr	r1, [r4, #0]
 8004fa0:	6833      	ldr	r3, [r6, #0]
 8004fa2:	0608      	lsls	r0, r1, #24
 8004fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fa8:	d402      	bmi.n	8004fb0 <_printf_i+0xe8>
 8004faa:	0649      	lsls	r1, r1, #25
 8004fac:	bf48      	it	mi
 8004fae:	b2ad      	uxthmi	r5, r5
 8004fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fb2:	4852      	ldr	r0, [pc, #328]	@ (80050fc <_printf_i+0x234>)
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	bf14      	ite	ne
 8004fb8:	230a      	movne	r3, #10
 8004fba:	2308      	moveq	r3, #8
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fc2:	6866      	ldr	r6, [r4, #4]
 8004fc4:	60a6      	str	r6, [r4, #8]
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	db05      	blt.n	8004fd6 <_printf_i+0x10e>
 8004fca:	6821      	ldr	r1, [r4, #0]
 8004fcc:	432e      	orrs	r6, r5
 8004fce:	f021 0104 	bic.w	r1, r1, #4
 8004fd2:	6021      	str	r1, [r4, #0]
 8004fd4:	d04b      	beq.n	800506e <_printf_i+0x1a6>
 8004fd6:	4616      	mov	r6, r2
 8004fd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fdc:	fb03 5711 	mls	r7, r3, r1, r5
 8004fe0:	5dc7      	ldrb	r7, [r0, r7]
 8004fe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fe6:	462f      	mov	r7, r5
 8004fe8:	42bb      	cmp	r3, r7
 8004fea:	460d      	mov	r5, r1
 8004fec:	d9f4      	bls.n	8004fd8 <_printf_i+0x110>
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d10b      	bne.n	800500a <_printf_i+0x142>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	07df      	lsls	r7, r3, #31
 8004ff6:	d508      	bpl.n	800500a <_printf_i+0x142>
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	6861      	ldr	r1, [r4, #4]
 8004ffc:	4299      	cmp	r1, r3
 8004ffe:	bfde      	ittt	le
 8005000:	2330      	movle	r3, #48	@ 0x30
 8005002:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005006:	f106 36ff 	addle.w	r6, r6, #4294967295
 800500a:	1b92      	subs	r2, r2, r6
 800500c:	6122      	str	r2, [r4, #16]
 800500e:	f8cd a000 	str.w	sl, [sp]
 8005012:	464b      	mov	r3, r9
 8005014:	aa03      	add	r2, sp, #12
 8005016:	4621      	mov	r1, r4
 8005018:	4640      	mov	r0, r8
 800501a:	f7ff fee7 	bl	8004dec <_printf_common>
 800501e:	3001      	adds	r0, #1
 8005020:	d14a      	bne.n	80050b8 <_printf_i+0x1f0>
 8005022:	f04f 30ff 	mov.w	r0, #4294967295
 8005026:	b004      	add	sp, #16
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	f043 0320 	orr.w	r3, r3, #32
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	4832      	ldr	r0, [pc, #200]	@ (8005100 <_printf_i+0x238>)
 8005036:	2778      	movs	r7, #120	@ 0x78
 8005038:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	6831      	ldr	r1, [r6, #0]
 8005040:	061f      	lsls	r7, r3, #24
 8005042:	f851 5b04 	ldr.w	r5, [r1], #4
 8005046:	d402      	bmi.n	800504e <_printf_i+0x186>
 8005048:	065f      	lsls	r7, r3, #25
 800504a:	bf48      	it	mi
 800504c:	b2ad      	uxthmi	r5, r5
 800504e:	6031      	str	r1, [r6, #0]
 8005050:	07d9      	lsls	r1, r3, #31
 8005052:	bf44      	itt	mi
 8005054:	f043 0320 	orrmi.w	r3, r3, #32
 8005058:	6023      	strmi	r3, [r4, #0]
 800505a:	b11d      	cbz	r5, 8005064 <_printf_i+0x19c>
 800505c:	2310      	movs	r3, #16
 800505e:	e7ad      	b.n	8004fbc <_printf_i+0xf4>
 8005060:	4826      	ldr	r0, [pc, #152]	@ (80050fc <_printf_i+0x234>)
 8005062:	e7e9      	b.n	8005038 <_printf_i+0x170>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	f023 0320 	bic.w	r3, r3, #32
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	e7f6      	b.n	800505c <_printf_i+0x194>
 800506e:	4616      	mov	r6, r2
 8005070:	e7bd      	b.n	8004fee <_printf_i+0x126>
 8005072:	6833      	ldr	r3, [r6, #0]
 8005074:	6825      	ldr	r5, [r4, #0]
 8005076:	6961      	ldr	r1, [r4, #20]
 8005078:	1d18      	adds	r0, r3, #4
 800507a:	6030      	str	r0, [r6, #0]
 800507c:	062e      	lsls	r6, r5, #24
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	d501      	bpl.n	8005086 <_printf_i+0x1be>
 8005082:	6019      	str	r1, [r3, #0]
 8005084:	e002      	b.n	800508c <_printf_i+0x1c4>
 8005086:	0668      	lsls	r0, r5, #25
 8005088:	d5fb      	bpl.n	8005082 <_printf_i+0x1ba>
 800508a:	8019      	strh	r1, [r3, #0]
 800508c:	2300      	movs	r3, #0
 800508e:	6123      	str	r3, [r4, #16]
 8005090:	4616      	mov	r6, r2
 8005092:	e7bc      	b.n	800500e <_printf_i+0x146>
 8005094:	6833      	ldr	r3, [r6, #0]
 8005096:	1d1a      	adds	r2, r3, #4
 8005098:	6032      	str	r2, [r6, #0]
 800509a:	681e      	ldr	r6, [r3, #0]
 800509c:	6862      	ldr	r2, [r4, #4]
 800509e:	2100      	movs	r1, #0
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7fb f8a5 	bl	80001f0 <memchr>
 80050a6:	b108      	cbz	r0, 80050ac <_printf_i+0x1e4>
 80050a8:	1b80      	subs	r0, r0, r6
 80050aa:	6060      	str	r0, [r4, #4]
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	2300      	movs	r3, #0
 80050b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b6:	e7aa      	b.n	800500e <_printf_i+0x146>
 80050b8:	6923      	ldr	r3, [r4, #16]
 80050ba:	4632      	mov	r2, r6
 80050bc:	4649      	mov	r1, r9
 80050be:	4640      	mov	r0, r8
 80050c0:	47d0      	blx	sl
 80050c2:	3001      	adds	r0, #1
 80050c4:	d0ad      	beq.n	8005022 <_printf_i+0x15a>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	079b      	lsls	r3, r3, #30
 80050ca:	d413      	bmi.n	80050f4 <_printf_i+0x22c>
 80050cc:	68e0      	ldr	r0, [r4, #12]
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	4298      	cmp	r0, r3
 80050d2:	bfb8      	it	lt
 80050d4:	4618      	movlt	r0, r3
 80050d6:	e7a6      	b.n	8005026 <_printf_i+0x15e>
 80050d8:	2301      	movs	r3, #1
 80050da:	4632      	mov	r2, r6
 80050dc:	4649      	mov	r1, r9
 80050de:	4640      	mov	r0, r8
 80050e0:	47d0      	blx	sl
 80050e2:	3001      	adds	r0, #1
 80050e4:	d09d      	beq.n	8005022 <_printf_i+0x15a>
 80050e6:	3501      	adds	r5, #1
 80050e8:	68e3      	ldr	r3, [r4, #12]
 80050ea:	9903      	ldr	r1, [sp, #12]
 80050ec:	1a5b      	subs	r3, r3, r1
 80050ee:	42ab      	cmp	r3, r5
 80050f0:	dcf2      	bgt.n	80050d8 <_printf_i+0x210>
 80050f2:	e7eb      	b.n	80050cc <_printf_i+0x204>
 80050f4:	2500      	movs	r5, #0
 80050f6:	f104 0619 	add.w	r6, r4, #25
 80050fa:	e7f5      	b.n	80050e8 <_printf_i+0x220>
 80050fc:	0800982d 	.word	0x0800982d
 8005100:	0800983e 	.word	0x0800983e

08005104 <std>:
 8005104:	2300      	movs	r3, #0
 8005106:	b510      	push	{r4, lr}
 8005108:	4604      	mov	r4, r0
 800510a:	e9c0 3300 	strd	r3, r3, [r0]
 800510e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005112:	6083      	str	r3, [r0, #8]
 8005114:	8181      	strh	r1, [r0, #12]
 8005116:	6643      	str	r3, [r0, #100]	@ 0x64
 8005118:	81c2      	strh	r2, [r0, #14]
 800511a:	6183      	str	r3, [r0, #24]
 800511c:	4619      	mov	r1, r3
 800511e:	2208      	movs	r2, #8
 8005120:	305c      	adds	r0, #92	@ 0x5c
 8005122:	f000 f93c 	bl	800539e <memset>
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <std+0x58>)
 8005128:	6263      	str	r3, [r4, #36]	@ 0x24
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <std+0x5c>)
 800512c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800512e:	4b0d      	ldr	r3, [pc, #52]	@ (8005164 <std+0x60>)
 8005130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005132:	4b0d      	ldr	r3, [pc, #52]	@ (8005168 <std+0x64>)
 8005134:	6323      	str	r3, [r4, #48]	@ 0x30
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <std+0x68>)
 8005138:	6224      	str	r4, [r4, #32]
 800513a:	429c      	cmp	r4, r3
 800513c:	d006      	beq.n	800514c <std+0x48>
 800513e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005142:	4294      	cmp	r4, r2
 8005144:	d002      	beq.n	800514c <std+0x48>
 8005146:	33d0      	adds	r3, #208	@ 0xd0
 8005148:	429c      	cmp	r4, r3
 800514a:	d105      	bne.n	8005158 <std+0x54>
 800514c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005154:	f000 b9a0 	b.w	8005498 <__retarget_lock_init_recursive>
 8005158:	bd10      	pop	{r4, pc}
 800515a:	bf00      	nop
 800515c:	08005319 	.word	0x08005319
 8005160:	0800533b 	.word	0x0800533b
 8005164:	08005373 	.word	0x08005373
 8005168:	08005397 	.word	0x08005397
 800516c:	20000268 	.word	0x20000268

08005170 <stdio_exit_handler>:
 8005170:	4a02      	ldr	r2, [pc, #8]	@ (800517c <stdio_exit_handler+0xc>)
 8005172:	4903      	ldr	r1, [pc, #12]	@ (8005180 <stdio_exit_handler+0x10>)
 8005174:	4803      	ldr	r0, [pc, #12]	@ (8005184 <stdio_exit_handler+0x14>)
 8005176:	f000 b869 	b.w	800524c <_fwalk_sglue>
 800517a:	bf00      	nop
 800517c:	20000034 	.word	0x20000034
 8005180:	080070d9 	.word	0x080070d9
 8005184:	20000044 	.word	0x20000044

08005188 <cleanup_stdio>:
 8005188:	6841      	ldr	r1, [r0, #4]
 800518a:	4b0c      	ldr	r3, [pc, #48]	@ (80051bc <cleanup_stdio+0x34>)
 800518c:	4299      	cmp	r1, r3
 800518e:	b510      	push	{r4, lr}
 8005190:	4604      	mov	r4, r0
 8005192:	d001      	beq.n	8005198 <cleanup_stdio+0x10>
 8005194:	f001 ffa0 	bl	80070d8 <_fflush_r>
 8005198:	68a1      	ldr	r1, [r4, #8]
 800519a:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <cleanup_stdio+0x38>)
 800519c:	4299      	cmp	r1, r3
 800519e:	d002      	beq.n	80051a6 <cleanup_stdio+0x1e>
 80051a0:	4620      	mov	r0, r4
 80051a2:	f001 ff99 	bl	80070d8 <_fflush_r>
 80051a6:	68e1      	ldr	r1, [r4, #12]
 80051a8:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <cleanup_stdio+0x3c>)
 80051aa:	4299      	cmp	r1, r3
 80051ac:	d004      	beq.n	80051b8 <cleanup_stdio+0x30>
 80051ae:	4620      	mov	r0, r4
 80051b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b4:	f001 bf90 	b.w	80070d8 <_fflush_r>
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	bf00      	nop
 80051bc:	20000268 	.word	0x20000268
 80051c0:	200002d0 	.word	0x200002d0
 80051c4:	20000338 	.word	0x20000338

080051c8 <global_stdio_init.part.0>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <global_stdio_init.part.0+0x30>)
 80051cc:	4c0b      	ldr	r4, [pc, #44]	@ (80051fc <global_stdio_init.part.0+0x34>)
 80051ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005200 <global_stdio_init.part.0+0x38>)
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	4620      	mov	r0, r4
 80051d4:	2200      	movs	r2, #0
 80051d6:	2104      	movs	r1, #4
 80051d8:	f7ff ff94 	bl	8005104 <std>
 80051dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051e0:	2201      	movs	r2, #1
 80051e2:	2109      	movs	r1, #9
 80051e4:	f7ff ff8e 	bl	8005104 <std>
 80051e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051ec:	2202      	movs	r2, #2
 80051ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f2:	2112      	movs	r1, #18
 80051f4:	f7ff bf86 	b.w	8005104 <std>
 80051f8:	200003a0 	.word	0x200003a0
 80051fc:	20000268 	.word	0x20000268
 8005200:	08005171 	.word	0x08005171

08005204 <__sfp_lock_acquire>:
 8005204:	4801      	ldr	r0, [pc, #4]	@ (800520c <__sfp_lock_acquire+0x8>)
 8005206:	f000 b948 	b.w	800549a <__retarget_lock_acquire_recursive>
 800520a:	bf00      	nop
 800520c:	200003a9 	.word	0x200003a9

08005210 <__sfp_lock_release>:
 8005210:	4801      	ldr	r0, [pc, #4]	@ (8005218 <__sfp_lock_release+0x8>)
 8005212:	f000 b943 	b.w	800549c <__retarget_lock_release_recursive>
 8005216:	bf00      	nop
 8005218:	200003a9 	.word	0x200003a9

0800521c <__sinit>:
 800521c:	b510      	push	{r4, lr}
 800521e:	4604      	mov	r4, r0
 8005220:	f7ff fff0 	bl	8005204 <__sfp_lock_acquire>
 8005224:	6a23      	ldr	r3, [r4, #32]
 8005226:	b11b      	cbz	r3, 8005230 <__sinit+0x14>
 8005228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800522c:	f7ff bff0 	b.w	8005210 <__sfp_lock_release>
 8005230:	4b04      	ldr	r3, [pc, #16]	@ (8005244 <__sinit+0x28>)
 8005232:	6223      	str	r3, [r4, #32]
 8005234:	4b04      	ldr	r3, [pc, #16]	@ (8005248 <__sinit+0x2c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f5      	bne.n	8005228 <__sinit+0xc>
 800523c:	f7ff ffc4 	bl	80051c8 <global_stdio_init.part.0>
 8005240:	e7f2      	b.n	8005228 <__sinit+0xc>
 8005242:	bf00      	nop
 8005244:	08005189 	.word	0x08005189
 8005248:	200003a0 	.word	0x200003a0

0800524c <_fwalk_sglue>:
 800524c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005250:	4607      	mov	r7, r0
 8005252:	4688      	mov	r8, r1
 8005254:	4614      	mov	r4, r2
 8005256:	2600      	movs	r6, #0
 8005258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800525c:	f1b9 0901 	subs.w	r9, r9, #1
 8005260:	d505      	bpl.n	800526e <_fwalk_sglue+0x22>
 8005262:	6824      	ldr	r4, [r4, #0]
 8005264:	2c00      	cmp	r4, #0
 8005266:	d1f7      	bne.n	8005258 <_fwalk_sglue+0xc>
 8005268:	4630      	mov	r0, r6
 800526a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d907      	bls.n	8005284 <_fwalk_sglue+0x38>
 8005274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005278:	3301      	adds	r3, #1
 800527a:	d003      	beq.n	8005284 <_fwalk_sglue+0x38>
 800527c:	4629      	mov	r1, r5
 800527e:	4638      	mov	r0, r7
 8005280:	47c0      	blx	r8
 8005282:	4306      	orrs	r6, r0
 8005284:	3568      	adds	r5, #104	@ 0x68
 8005286:	e7e9      	b.n	800525c <_fwalk_sglue+0x10>

08005288 <iprintf>:
 8005288:	b40f      	push	{r0, r1, r2, r3}
 800528a:	b507      	push	{r0, r1, r2, lr}
 800528c:	4906      	ldr	r1, [pc, #24]	@ (80052a8 <iprintf+0x20>)
 800528e:	ab04      	add	r3, sp, #16
 8005290:	6808      	ldr	r0, [r1, #0]
 8005292:	f853 2b04 	ldr.w	r2, [r3], #4
 8005296:	6881      	ldr	r1, [r0, #8]
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	f001 fd81 	bl	8006da0 <_vfiprintf_r>
 800529e:	b003      	add	sp, #12
 80052a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a4:	b004      	add	sp, #16
 80052a6:	4770      	bx	lr
 80052a8:	20000040 	.word	0x20000040

080052ac <sniprintf>:
 80052ac:	b40c      	push	{r2, r3}
 80052ae:	b530      	push	{r4, r5, lr}
 80052b0:	4b18      	ldr	r3, [pc, #96]	@ (8005314 <sniprintf+0x68>)
 80052b2:	1e0c      	subs	r4, r1, #0
 80052b4:	681d      	ldr	r5, [r3, #0]
 80052b6:	b09d      	sub	sp, #116	@ 0x74
 80052b8:	da08      	bge.n	80052cc <sniprintf+0x20>
 80052ba:	238b      	movs	r3, #139	@ 0x8b
 80052bc:	602b      	str	r3, [r5, #0]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	b01d      	add	sp, #116	@ 0x74
 80052c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c8:	b002      	add	sp, #8
 80052ca:	4770      	bx	lr
 80052cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80052d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80052da:	bf14      	ite	ne
 80052dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052e0:	4623      	moveq	r3, r4
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	9307      	str	r3, [sp, #28]
 80052e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052ea:	9002      	str	r0, [sp, #8]
 80052ec:	9006      	str	r0, [sp, #24]
 80052ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80052f4:	ab21      	add	r3, sp, #132	@ 0x84
 80052f6:	a902      	add	r1, sp, #8
 80052f8:	4628      	mov	r0, r5
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	f001 fc2a 	bl	8006b54 <_svfiprintf_r>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	bfbc      	itt	lt
 8005304:	238b      	movlt	r3, #139	@ 0x8b
 8005306:	602b      	strlt	r3, [r5, #0]
 8005308:	2c00      	cmp	r4, #0
 800530a:	d0da      	beq.n	80052c2 <sniprintf+0x16>
 800530c:	9b02      	ldr	r3, [sp, #8]
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e7d6      	b.n	80052c2 <sniprintf+0x16>
 8005314:	20000040 	.word	0x20000040

08005318 <__sread>:
 8005318:	b510      	push	{r4, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	f000 f86c 	bl	80053fc <_read_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	bfab      	itete	ge
 8005328:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800532a:	89a3      	ldrhlt	r3, [r4, #12]
 800532c:	181b      	addge	r3, r3, r0
 800532e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005332:	bfac      	ite	ge
 8005334:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005336:	81a3      	strhlt	r3, [r4, #12]
 8005338:	bd10      	pop	{r4, pc}

0800533a <__swrite>:
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	461f      	mov	r7, r3
 8005340:	898b      	ldrh	r3, [r1, #12]
 8005342:	05db      	lsls	r3, r3, #23
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
 8005348:	4616      	mov	r6, r2
 800534a:	d505      	bpl.n	8005358 <__swrite+0x1e>
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	2302      	movs	r3, #2
 8005352:	2200      	movs	r2, #0
 8005354:	f000 f840 	bl	80053d8 <_lseek_r>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800535e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	4628      	mov	r0, r5
 800536a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	f000 b857 	b.w	8005420 <_write_r>

08005372 <__sseek>:
 8005372:	b510      	push	{r4, lr}
 8005374:	460c      	mov	r4, r1
 8005376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537a:	f000 f82d 	bl	80053d8 <_lseek_r>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	bf15      	itete	ne
 8005384:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005386:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800538a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800538e:	81a3      	strheq	r3, [r4, #12]
 8005390:	bf18      	it	ne
 8005392:	81a3      	strhne	r3, [r4, #12]
 8005394:	bd10      	pop	{r4, pc}

08005396 <__sclose>:
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 b80d 	b.w	80053b8 <_close_r>

0800539e <memset>:
 800539e:	4402      	add	r2, r0
 80053a0:	4603      	mov	r3, r0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d100      	bne.n	80053a8 <memset+0xa>
 80053a6:	4770      	bx	lr
 80053a8:	f803 1b01 	strb.w	r1, [r3], #1
 80053ac:	e7f9      	b.n	80053a2 <memset+0x4>
	...

080053b0 <_localeconv_r>:
 80053b0:	4800      	ldr	r0, [pc, #0]	@ (80053b4 <_localeconv_r+0x4>)
 80053b2:	4770      	bx	lr
 80053b4:	20000180 	.word	0x20000180

080053b8 <_close_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d06      	ldr	r5, [pc, #24]	@ (80053d4 <_close_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fd fce5 	bl	8002d92 <_close>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_close_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_close_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	200003a4 	.word	0x200003a4

080053d8 <_lseek_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d07      	ldr	r5, [pc, #28]	@ (80053f8 <_lseek_r+0x20>)
 80053dc:	4604      	mov	r4, r0
 80053de:	4608      	mov	r0, r1
 80053e0:	4611      	mov	r1, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	602a      	str	r2, [r5, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7fd fcfa 	bl	8002de0 <_lseek>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_lseek_r+0x1e>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_lseek_r+0x1e>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	200003a4 	.word	0x200003a4

080053fc <_read_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d07      	ldr	r5, [pc, #28]	@ (800541c <_read_r+0x20>)
 8005400:	4604      	mov	r4, r0
 8005402:	4608      	mov	r0, r1
 8005404:	4611      	mov	r1, r2
 8005406:	2200      	movs	r2, #0
 8005408:	602a      	str	r2, [r5, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	f7fd fc88 	bl	8002d20 <_read>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_read_r+0x1e>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_read_r+0x1e>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	200003a4 	.word	0x200003a4

08005420 <_write_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4d07      	ldr	r5, [pc, #28]	@ (8005440 <_write_r+0x20>)
 8005424:	4604      	mov	r4, r0
 8005426:	4608      	mov	r0, r1
 8005428:	4611      	mov	r1, r2
 800542a:	2200      	movs	r2, #0
 800542c:	602a      	str	r2, [r5, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f7fd fc93 	bl	8002d5a <_write>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_write_r+0x1e>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_write_r+0x1e>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	200003a4 	.word	0x200003a4

08005444 <__errno>:
 8005444:	4b01      	ldr	r3, [pc, #4]	@ (800544c <__errno+0x8>)
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000040 	.word	0x20000040

08005450 <__libc_init_array>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	4d0d      	ldr	r5, [pc, #52]	@ (8005488 <__libc_init_array+0x38>)
 8005454:	4c0d      	ldr	r4, [pc, #52]	@ (800548c <__libc_init_array+0x3c>)
 8005456:	1b64      	subs	r4, r4, r5
 8005458:	10a4      	asrs	r4, r4, #2
 800545a:	2600      	movs	r6, #0
 800545c:	42a6      	cmp	r6, r4
 800545e:	d109      	bne.n	8005474 <__libc_init_array+0x24>
 8005460:	4d0b      	ldr	r5, [pc, #44]	@ (8005490 <__libc_init_array+0x40>)
 8005462:	4c0c      	ldr	r4, [pc, #48]	@ (8005494 <__libc_init_array+0x44>)
 8005464:	f004 f958 	bl	8009718 <_init>
 8005468:	1b64      	subs	r4, r4, r5
 800546a:	10a4      	asrs	r4, r4, #2
 800546c:	2600      	movs	r6, #0
 800546e:	42a6      	cmp	r6, r4
 8005470:	d105      	bne.n	800547e <__libc_init_array+0x2e>
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	f855 3b04 	ldr.w	r3, [r5], #4
 8005478:	4798      	blx	r3
 800547a:	3601      	adds	r6, #1
 800547c:	e7ee      	b.n	800545c <__libc_init_array+0xc>
 800547e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005482:	4798      	blx	r3
 8005484:	3601      	adds	r6, #1
 8005486:	e7f2      	b.n	800546e <__libc_init_array+0x1e>
 8005488:	08009dd0 	.word	0x08009dd0
 800548c:	08009dd0 	.word	0x08009dd0
 8005490:	08009dd0 	.word	0x08009dd0
 8005494:	08009dd4 	.word	0x08009dd4

08005498 <__retarget_lock_init_recursive>:
 8005498:	4770      	bx	lr

0800549a <__retarget_lock_acquire_recursive>:
 800549a:	4770      	bx	lr

0800549c <__retarget_lock_release_recursive>:
 800549c:	4770      	bx	lr

0800549e <memcpy>:
 800549e:	440a      	add	r2, r1
 80054a0:	4291      	cmp	r1, r2
 80054a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80054a6:	d100      	bne.n	80054aa <memcpy+0xc>
 80054a8:	4770      	bx	lr
 80054aa:	b510      	push	{r4, lr}
 80054ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b4:	4291      	cmp	r1, r2
 80054b6:	d1f9      	bne.n	80054ac <memcpy+0xe>
 80054b8:	bd10      	pop	{r4, pc}
	...

080054bc <__assert_func>:
 80054bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054be:	4614      	mov	r4, r2
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <__assert_func+0x2c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4605      	mov	r5, r0
 80054c8:	68d8      	ldr	r0, [r3, #12]
 80054ca:	b14c      	cbz	r4, 80054e0 <__assert_func+0x24>
 80054cc:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <__assert_func+0x30>)
 80054ce:	9100      	str	r1, [sp, #0]
 80054d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054d4:	4906      	ldr	r1, [pc, #24]	@ (80054f0 <__assert_func+0x34>)
 80054d6:	462b      	mov	r3, r5
 80054d8:	f001 fe26 	bl	8007128 <fiprintf>
 80054dc:	f001 fef4 	bl	80072c8 <abort>
 80054e0:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <__assert_func+0x38>)
 80054e2:	461c      	mov	r4, r3
 80054e4:	e7f3      	b.n	80054ce <__assert_func+0x12>
 80054e6:	bf00      	nop
 80054e8:	20000040 	.word	0x20000040
 80054ec:	0800984f 	.word	0x0800984f
 80054f0:	0800985c 	.word	0x0800985c
 80054f4:	0800988a 	.word	0x0800988a

080054f8 <quorem>:
 80054f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	6903      	ldr	r3, [r0, #16]
 80054fe:	690c      	ldr	r4, [r1, #16]
 8005500:	42a3      	cmp	r3, r4
 8005502:	4607      	mov	r7, r0
 8005504:	db7e      	blt.n	8005604 <quorem+0x10c>
 8005506:	3c01      	subs	r4, #1
 8005508:	f101 0814 	add.w	r8, r1, #20
 800550c:	00a3      	lsls	r3, r4, #2
 800550e:	f100 0514 	add.w	r5, r0, #20
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800551e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005522:	3301      	adds	r3, #1
 8005524:	429a      	cmp	r2, r3
 8005526:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800552a:	fbb2 f6f3 	udiv	r6, r2, r3
 800552e:	d32e      	bcc.n	800558e <quorem+0x96>
 8005530:	f04f 0a00 	mov.w	sl, #0
 8005534:	46c4      	mov	ip, r8
 8005536:	46ae      	mov	lr, r5
 8005538:	46d3      	mov	fp, sl
 800553a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800553e:	b298      	uxth	r0, r3
 8005540:	fb06 a000 	mla	r0, r6, r0, sl
 8005544:	0c02      	lsrs	r2, r0, #16
 8005546:	0c1b      	lsrs	r3, r3, #16
 8005548:	fb06 2303 	mla	r3, r6, r3, r2
 800554c:	f8de 2000 	ldr.w	r2, [lr]
 8005550:	b280      	uxth	r0, r0
 8005552:	b292      	uxth	r2, r2
 8005554:	1a12      	subs	r2, r2, r0
 8005556:	445a      	add	r2, fp
 8005558:	f8de 0000 	ldr.w	r0, [lr]
 800555c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005560:	b29b      	uxth	r3, r3
 8005562:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005566:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800556a:	b292      	uxth	r2, r2
 800556c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005570:	45e1      	cmp	r9, ip
 8005572:	f84e 2b04 	str.w	r2, [lr], #4
 8005576:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800557a:	d2de      	bcs.n	800553a <quorem+0x42>
 800557c:	9b00      	ldr	r3, [sp, #0]
 800557e:	58eb      	ldr	r3, [r5, r3]
 8005580:	b92b      	cbnz	r3, 800558e <quorem+0x96>
 8005582:	9b01      	ldr	r3, [sp, #4]
 8005584:	3b04      	subs	r3, #4
 8005586:	429d      	cmp	r5, r3
 8005588:	461a      	mov	r2, r3
 800558a:	d32f      	bcc.n	80055ec <quorem+0xf4>
 800558c:	613c      	str	r4, [r7, #16]
 800558e:	4638      	mov	r0, r7
 8005590:	f001 f97c 	bl	800688c <__mcmp>
 8005594:	2800      	cmp	r0, #0
 8005596:	db25      	blt.n	80055e4 <quorem+0xec>
 8005598:	4629      	mov	r1, r5
 800559a:	2000      	movs	r0, #0
 800559c:	f858 2b04 	ldr.w	r2, [r8], #4
 80055a0:	f8d1 c000 	ldr.w	ip, [r1]
 80055a4:	fa1f fe82 	uxth.w	lr, r2
 80055a8:	fa1f f38c 	uxth.w	r3, ip
 80055ac:	eba3 030e 	sub.w	r3, r3, lr
 80055b0:	4403      	add	r3, r0
 80055b2:	0c12      	lsrs	r2, r2, #16
 80055b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055bc:	b29b      	uxth	r3, r3
 80055be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c2:	45c1      	cmp	r9, r8
 80055c4:	f841 3b04 	str.w	r3, [r1], #4
 80055c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055cc:	d2e6      	bcs.n	800559c <quorem+0xa4>
 80055ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055d6:	b922      	cbnz	r2, 80055e2 <quorem+0xea>
 80055d8:	3b04      	subs	r3, #4
 80055da:	429d      	cmp	r5, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	d30b      	bcc.n	80055f8 <quorem+0x100>
 80055e0:	613c      	str	r4, [r7, #16]
 80055e2:	3601      	adds	r6, #1
 80055e4:	4630      	mov	r0, r6
 80055e6:	b003      	add	sp, #12
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	3b04      	subs	r3, #4
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d1cb      	bne.n	800558c <quorem+0x94>
 80055f4:	3c01      	subs	r4, #1
 80055f6:	e7c6      	b.n	8005586 <quorem+0x8e>
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	3b04      	subs	r3, #4
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	d1ef      	bne.n	80055e0 <quorem+0xe8>
 8005600:	3c01      	subs	r4, #1
 8005602:	e7ea      	b.n	80055da <quorem+0xe2>
 8005604:	2000      	movs	r0, #0
 8005606:	e7ee      	b.n	80055e6 <quorem+0xee>

08005608 <_dtoa_r>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	69c7      	ldr	r7, [r0, #28]
 800560e:	b097      	sub	sp, #92	@ 0x5c
 8005610:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005614:	ec55 4b10 	vmov	r4, r5, d0
 8005618:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800561a:	9107      	str	r1, [sp, #28]
 800561c:	4681      	mov	r9, r0
 800561e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005620:	9311      	str	r3, [sp, #68]	@ 0x44
 8005622:	b97f      	cbnz	r7, 8005644 <_dtoa_r+0x3c>
 8005624:	2010      	movs	r0, #16
 8005626:	f000 fe09 	bl	800623c <malloc>
 800562a:	4602      	mov	r2, r0
 800562c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005630:	b920      	cbnz	r0, 800563c <_dtoa_r+0x34>
 8005632:	4ba9      	ldr	r3, [pc, #676]	@ (80058d8 <_dtoa_r+0x2d0>)
 8005634:	21ef      	movs	r1, #239	@ 0xef
 8005636:	48a9      	ldr	r0, [pc, #676]	@ (80058dc <_dtoa_r+0x2d4>)
 8005638:	f7ff ff40 	bl	80054bc <__assert_func>
 800563c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005640:	6007      	str	r7, [r0, #0]
 8005642:	60c7      	str	r7, [r0, #12]
 8005644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	b159      	cbz	r1, 8005664 <_dtoa_r+0x5c>
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	604a      	str	r2, [r1, #4]
 8005650:	2301      	movs	r3, #1
 8005652:	4093      	lsls	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
 8005656:	4648      	mov	r0, r9
 8005658:	f000 fee6 	bl	8006428 <_Bfree>
 800565c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	1e2b      	subs	r3, r5, #0
 8005666:	bfb9      	ittee	lt
 8005668:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800566c:	9305      	strlt	r3, [sp, #20]
 800566e:	2300      	movge	r3, #0
 8005670:	6033      	strge	r3, [r6, #0]
 8005672:	9f05      	ldr	r7, [sp, #20]
 8005674:	4b9a      	ldr	r3, [pc, #616]	@ (80058e0 <_dtoa_r+0x2d8>)
 8005676:	bfbc      	itt	lt
 8005678:	2201      	movlt	r2, #1
 800567a:	6032      	strlt	r2, [r6, #0]
 800567c:	43bb      	bics	r3, r7
 800567e:	d112      	bne.n	80056a6 <_dtoa_r+0x9e>
 8005680:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005682:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800568c:	4323      	orrs	r3, r4
 800568e:	f000 855a 	beq.w	8006146 <_dtoa_r+0xb3e>
 8005692:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005694:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80058f4 <_dtoa_r+0x2ec>
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 855c 	beq.w	8006156 <_dtoa_r+0xb4e>
 800569e:	f10a 0303 	add.w	r3, sl, #3
 80056a2:	f000 bd56 	b.w	8006152 <_dtoa_r+0xb4a>
 80056a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80056aa:	2200      	movs	r2, #0
 80056ac:	ec51 0b17 	vmov	r0, r1, d7
 80056b0:	2300      	movs	r3, #0
 80056b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80056b6:	f7fb fa17 	bl	8000ae8 <__aeabi_dcmpeq>
 80056ba:	4680      	mov	r8, r0
 80056bc:	b158      	cbz	r0, 80056d6 <_dtoa_r+0xce>
 80056be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80056c0:	2301      	movs	r3, #1
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056c6:	b113      	cbz	r3, 80056ce <_dtoa_r+0xc6>
 80056c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80056ca:	4b86      	ldr	r3, [pc, #536]	@ (80058e4 <_dtoa_r+0x2dc>)
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80058f8 <_dtoa_r+0x2f0>
 80056d2:	f000 bd40 	b.w	8006156 <_dtoa_r+0xb4e>
 80056d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80056da:	aa14      	add	r2, sp, #80	@ 0x50
 80056dc:	a915      	add	r1, sp, #84	@ 0x54
 80056de:	4648      	mov	r0, r9
 80056e0:	f001 f984 	bl	80069ec <__d2b>
 80056e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80056e8:	9002      	str	r0, [sp, #8]
 80056ea:	2e00      	cmp	r6, #0
 80056ec:	d078      	beq.n	80057e0 <_dtoa_r+0x1d8>
 80056ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80056f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005700:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005704:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005708:	4619      	mov	r1, r3
 800570a:	2200      	movs	r2, #0
 800570c:	4b76      	ldr	r3, [pc, #472]	@ (80058e8 <_dtoa_r+0x2e0>)
 800570e:	f7fa fdcb 	bl	80002a8 <__aeabi_dsub>
 8005712:	a36b      	add	r3, pc, #428	@ (adr r3, 80058c0 <_dtoa_r+0x2b8>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa ff7e 	bl	8000618 <__aeabi_dmul>
 800571c:	a36a      	add	r3, pc, #424	@ (adr r3, 80058c8 <_dtoa_r+0x2c0>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa fdc3 	bl	80002ac <__adddf3>
 8005726:	4604      	mov	r4, r0
 8005728:	4630      	mov	r0, r6
 800572a:	460d      	mov	r5, r1
 800572c:	f7fa ff0a 	bl	8000544 <__aeabi_i2d>
 8005730:	a367      	add	r3, pc, #412	@ (adr r3, 80058d0 <_dtoa_r+0x2c8>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa ff6f 	bl	8000618 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f7fa fdb3 	bl	80002ac <__adddf3>
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
 800574a:	f7fb fa15 	bl	8000b78 <__aeabi_d2iz>
 800574e:	2200      	movs	r2, #0
 8005750:	4607      	mov	r7, r0
 8005752:	2300      	movs	r3, #0
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fb f9d0 	bl	8000afc <__aeabi_dcmplt>
 800575c:	b140      	cbz	r0, 8005770 <_dtoa_r+0x168>
 800575e:	4638      	mov	r0, r7
 8005760:	f7fa fef0 	bl	8000544 <__aeabi_i2d>
 8005764:	4622      	mov	r2, r4
 8005766:	462b      	mov	r3, r5
 8005768:	f7fb f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 800576c:	b900      	cbnz	r0, 8005770 <_dtoa_r+0x168>
 800576e:	3f01      	subs	r7, #1
 8005770:	2f16      	cmp	r7, #22
 8005772:	d852      	bhi.n	800581a <_dtoa_r+0x212>
 8005774:	4b5d      	ldr	r3, [pc, #372]	@ (80058ec <_dtoa_r+0x2e4>)
 8005776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005782:	f7fb f9bb 	bl	8000afc <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	d049      	beq.n	800581e <_dtoa_r+0x216>
 800578a:	3f01      	subs	r7, #1
 800578c:	2300      	movs	r3, #0
 800578e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005790:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005792:	1b9b      	subs	r3, r3, r6
 8005794:	1e5a      	subs	r2, r3, #1
 8005796:	bf45      	ittet	mi
 8005798:	f1c3 0301 	rsbmi	r3, r3, #1
 800579c:	9300      	strmi	r3, [sp, #0]
 800579e:	2300      	movpl	r3, #0
 80057a0:	2300      	movmi	r3, #0
 80057a2:	9206      	str	r2, [sp, #24]
 80057a4:	bf54      	ite	pl
 80057a6:	9300      	strpl	r3, [sp, #0]
 80057a8:	9306      	strmi	r3, [sp, #24]
 80057aa:	2f00      	cmp	r7, #0
 80057ac:	db39      	blt.n	8005822 <_dtoa_r+0x21a>
 80057ae:	9b06      	ldr	r3, [sp, #24]
 80057b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80057b2:	443b      	add	r3, r7
 80057b4:	9306      	str	r3, [sp, #24]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	9b07      	ldr	r3, [sp, #28]
 80057bc:	2b09      	cmp	r3, #9
 80057be:	d863      	bhi.n	8005888 <_dtoa_r+0x280>
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	bfc4      	itt	gt
 80057c4:	3b04      	subgt	r3, #4
 80057c6:	9307      	strgt	r3, [sp, #28]
 80057c8:	9b07      	ldr	r3, [sp, #28]
 80057ca:	f1a3 0302 	sub.w	r3, r3, #2
 80057ce:	bfcc      	ite	gt
 80057d0:	2400      	movgt	r4, #0
 80057d2:	2401      	movle	r4, #1
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d863      	bhi.n	80058a0 <_dtoa_r+0x298>
 80057d8:	e8df f003 	tbb	[pc, r3]
 80057dc:	2b375452 	.word	0x2b375452
 80057e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057e4:	441e      	add	r6, r3
 80057e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	bfc1      	itttt	gt
 80057ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057f2:	409f      	lslgt	r7, r3
 80057f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057fc:	bfd6      	itet	le
 80057fe:	f1c3 0320 	rsble	r3, r3, #32
 8005802:	ea47 0003 	orrgt.w	r0, r7, r3
 8005806:	fa04 f003 	lslle.w	r0, r4, r3
 800580a:	f7fa fe8b 	bl	8000524 <__aeabi_ui2d>
 800580e:	2201      	movs	r2, #1
 8005810:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005814:	3e01      	subs	r6, #1
 8005816:	9212      	str	r2, [sp, #72]	@ 0x48
 8005818:	e776      	b.n	8005708 <_dtoa_r+0x100>
 800581a:	2301      	movs	r3, #1
 800581c:	e7b7      	b.n	800578e <_dtoa_r+0x186>
 800581e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005820:	e7b6      	b.n	8005790 <_dtoa_r+0x188>
 8005822:	9b00      	ldr	r3, [sp, #0]
 8005824:	1bdb      	subs	r3, r3, r7
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	427b      	negs	r3, r7
 800582a:	9308      	str	r3, [sp, #32]
 800582c:	2300      	movs	r3, #0
 800582e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005830:	e7c3      	b.n	80057ba <_dtoa_r+0x1b2>
 8005832:	2301      	movs	r3, #1
 8005834:	9309      	str	r3, [sp, #36]	@ 0x24
 8005836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005838:	eb07 0b03 	add.w	fp, r7, r3
 800583c:	f10b 0301 	add.w	r3, fp, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	9303      	str	r3, [sp, #12]
 8005844:	bfb8      	it	lt
 8005846:	2301      	movlt	r3, #1
 8005848:	e006      	b.n	8005858 <_dtoa_r+0x250>
 800584a:	2301      	movs	r3, #1
 800584c:	9309      	str	r3, [sp, #36]	@ 0x24
 800584e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005850:	2b00      	cmp	r3, #0
 8005852:	dd28      	ble.n	80058a6 <_dtoa_r+0x29e>
 8005854:	469b      	mov	fp, r3
 8005856:	9303      	str	r3, [sp, #12]
 8005858:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800585c:	2100      	movs	r1, #0
 800585e:	2204      	movs	r2, #4
 8005860:	f102 0514 	add.w	r5, r2, #20
 8005864:	429d      	cmp	r5, r3
 8005866:	d926      	bls.n	80058b6 <_dtoa_r+0x2ae>
 8005868:	6041      	str	r1, [r0, #4]
 800586a:	4648      	mov	r0, r9
 800586c:	f000 fd9c 	bl	80063a8 <_Balloc>
 8005870:	4682      	mov	sl, r0
 8005872:	2800      	cmp	r0, #0
 8005874:	d142      	bne.n	80058fc <_dtoa_r+0x2f4>
 8005876:	4b1e      	ldr	r3, [pc, #120]	@ (80058f0 <_dtoa_r+0x2e8>)
 8005878:	4602      	mov	r2, r0
 800587a:	f240 11af 	movw	r1, #431	@ 0x1af
 800587e:	e6da      	b.n	8005636 <_dtoa_r+0x2e>
 8005880:	2300      	movs	r3, #0
 8005882:	e7e3      	b.n	800584c <_dtoa_r+0x244>
 8005884:	2300      	movs	r3, #0
 8005886:	e7d5      	b.n	8005834 <_dtoa_r+0x22c>
 8005888:	2401      	movs	r4, #1
 800588a:	2300      	movs	r3, #0
 800588c:	9307      	str	r3, [sp, #28]
 800588e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005890:	f04f 3bff 	mov.w	fp, #4294967295
 8005894:	2200      	movs	r2, #0
 8005896:	f8cd b00c 	str.w	fp, [sp, #12]
 800589a:	2312      	movs	r3, #18
 800589c:	920c      	str	r2, [sp, #48]	@ 0x30
 800589e:	e7db      	b.n	8005858 <_dtoa_r+0x250>
 80058a0:	2301      	movs	r3, #1
 80058a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a4:	e7f4      	b.n	8005890 <_dtoa_r+0x288>
 80058a6:	f04f 0b01 	mov.w	fp, #1
 80058aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80058ae:	465b      	mov	r3, fp
 80058b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80058b4:	e7d0      	b.n	8005858 <_dtoa_r+0x250>
 80058b6:	3101      	adds	r1, #1
 80058b8:	0052      	lsls	r2, r2, #1
 80058ba:	e7d1      	b.n	8005860 <_dtoa_r+0x258>
 80058bc:	f3af 8000 	nop.w
 80058c0:	636f4361 	.word	0x636f4361
 80058c4:	3fd287a7 	.word	0x3fd287a7
 80058c8:	8b60c8b3 	.word	0x8b60c8b3
 80058cc:	3fc68a28 	.word	0x3fc68a28
 80058d0:	509f79fb 	.word	0x509f79fb
 80058d4:	3fd34413 	.word	0x3fd34413
 80058d8:	080097ac 	.word	0x080097ac
 80058dc:	08009898 	.word	0x08009898
 80058e0:	7ff00000 	.word	0x7ff00000
 80058e4:	0800982c 	.word	0x0800982c
 80058e8:	3ff80000 	.word	0x3ff80000
 80058ec:	080099b0 	.word	0x080099b0
 80058f0:	080098f0 	.word	0x080098f0
 80058f4:	08009894 	.word	0x08009894
 80058f8:	0800982b 	.word	0x0800982b
 80058fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005900:	6018      	str	r0, [r3, #0]
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	2b0e      	cmp	r3, #14
 8005906:	f200 80a1 	bhi.w	8005a4c <_dtoa_r+0x444>
 800590a:	2c00      	cmp	r4, #0
 800590c:	f000 809e 	beq.w	8005a4c <_dtoa_r+0x444>
 8005910:	2f00      	cmp	r7, #0
 8005912:	dd33      	ble.n	800597c <_dtoa_r+0x374>
 8005914:	4b9c      	ldr	r3, [pc, #624]	@ (8005b88 <_dtoa_r+0x580>)
 8005916:	f007 020f 	and.w	r2, r7, #15
 800591a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800591e:	ed93 7b00 	vldr	d7, [r3]
 8005922:	05f8      	lsls	r0, r7, #23
 8005924:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005928:	ea4f 1427 	mov.w	r4, r7, asr #4
 800592c:	d516      	bpl.n	800595c <_dtoa_r+0x354>
 800592e:	4b97      	ldr	r3, [pc, #604]	@ (8005b8c <_dtoa_r+0x584>)
 8005930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005938:	f7fa ff98 	bl	800086c <__aeabi_ddiv>
 800593c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005940:	f004 040f 	and.w	r4, r4, #15
 8005944:	2603      	movs	r6, #3
 8005946:	4d91      	ldr	r5, [pc, #580]	@ (8005b8c <_dtoa_r+0x584>)
 8005948:	b954      	cbnz	r4, 8005960 <_dtoa_r+0x358>
 800594a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800594e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005952:	f7fa ff8b 	bl	800086c <__aeabi_ddiv>
 8005956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800595a:	e028      	b.n	80059ae <_dtoa_r+0x3a6>
 800595c:	2602      	movs	r6, #2
 800595e:	e7f2      	b.n	8005946 <_dtoa_r+0x33e>
 8005960:	07e1      	lsls	r1, r4, #31
 8005962:	d508      	bpl.n	8005976 <_dtoa_r+0x36e>
 8005964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005968:	e9d5 2300 	ldrd	r2, r3, [r5]
 800596c:	f7fa fe54 	bl	8000618 <__aeabi_dmul>
 8005970:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005974:	3601      	adds	r6, #1
 8005976:	1064      	asrs	r4, r4, #1
 8005978:	3508      	adds	r5, #8
 800597a:	e7e5      	b.n	8005948 <_dtoa_r+0x340>
 800597c:	f000 80af 	beq.w	8005ade <_dtoa_r+0x4d6>
 8005980:	427c      	negs	r4, r7
 8005982:	4b81      	ldr	r3, [pc, #516]	@ (8005b88 <_dtoa_r+0x580>)
 8005984:	4d81      	ldr	r5, [pc, #516]	@ (8005b8c <_dtoa_r+0x584>)
 8005986:	f004 020f 	and.w	r2, r4, #15
 800598a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005996:	f7fa fe3f 	bl	8000618 <__aeabi_dmul>
 800599a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800599e:	1124      	asrs	r4, r4, #4
 80059a0:	2300      	movs	r3, #0
 80059a2:	2602      	movs	r6, #2
 80059a4:	2c00      	cmp	r4, #0
 80059a6:	f040 808f 	bne.w	8005ac8 <_dtoa_r+0x4c0>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1d3      	bne.n	8005956 <_dtoa_r+0x34e>
 80059ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80059b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8094 	beq.w	8005ae2 <_dtoa_r+0x4da>
 80059ba:	4b75      	ldr	r3, [pc, #468]	@ (8005b90 <_dtoa_r+0x588>)
 80059bc:	2200      	movs	r2, #0
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fb f89b 	bl	8000afc <__aeabi_dcmplt>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f000 808b 	beq.w	8005ae2 <_dtoa_r+0x4da>
 80059cc:	9b03      	ldr	r3, [sp, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8087 	beq.w	8005ae2 <_dtoa_r+0x4da>
 80059d4:	f1bb 0f00 	cmp.w	fp, #0
 80059d8:	dd34      	ble.n	8005a44 <_dtoa_r+0x43c>
 80059da:	4620      	mov	r0, r4
 80059dc:	4b6d      	ldr	r3, [pc, #436]	@ (8005b94 <_dtoa_r+0x58c>)
 80059de:	2200      	movs	r2, #0
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fa fe19 	bl	8000618 <__aeabi_dmul>
 80059e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80059ee:	3601      	adds	r6, #1
 80059f0:	465c      	mov	r4, fp
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7fa fda6 	bl	8000544 <__aeabi_i2d>
 80059f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059fc:	f7fa fe0c 	bl	8000618 <__aeabi_dmul>
 8005a00:	4b65      	ldr	r3, [pc, #404]	@ (8005b98 <_dtoa_r+0x590>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	f7fa fc52 	bl	80002ac <__adddf3>
 8005a08:	4605      	mov	r5, r0
 8005a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a0e:	2c00      	cmp	r4, #0
 8005a10:	d16a      	bne.n	8005ae8 <_dtoa_r+0x4e0>
 8005a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a16:	4b61      	ldr	r3, [pc, #388]	@ (8005b9c <_dtoa_r+0x594>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f7fa fc45 	bl	80002a8 <__aeabi_dsub>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a26:	462a      	mov	r2, r5
 8005a28:	4633      	mov	r3, r6
 8005a2a:	f7fb f885 	bl	8000b38 <__aeabi_dcmpgt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8298 	bne.w	8005f64 <_dtoa_r+0x95c>
 8005a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a38:	462a      	mov	r2, r5
 8005a3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a3e:	f7fb f85d 	bl	8000afc <__aeabi_dcmplt>
 8005a42:	bb38      	cbnz	r0, 8005a94 <_dtoa_r+0x48c>
 8005a44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005a48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f2c0 8157 	blt.w	8005d02 <_dtoa_r+0x6fa>
 8005a54:	2f0e      	cmp	r7, #14
 8005a56:	f300 8154 	bgt.w	8005d02 <_dtoa_r+0x6fa>
 8005a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <_dtoa_r+0x580>)
 8005a5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a60:	ed93 7b00 	vldr	d7, [r3]
 8005a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	ed8d 7b00 	vstr	d7, [sp]
 8005a6c:	f280 80e5 	bge.w	8005c3a <_dtoa_r+0x632>
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f300 80e1 	bgt.w	8005c3a <_dtoa_r+0x632>
 8005a78:	d10c      	bne.n	8005a94 <_dtoa_r+0x48c>
 8005a7a:	4b48      	ldr	r3, [pc, #288]	@ (8005b9c <_dtoa_r+0x594>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	ec51 0b17 	vmov	r0, r1, d7
 8005a82:	f7fa fdc9 	bl	8000618 <__aeabi_dmul>
 8005a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a8a:	f7fb f84b 	bl	8000b24 <__aeabi_dcmpge>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f000 8266 	beq.w	8005f60 <_dtoa_r+0x958>
 8005a94:	2400      	movs	r4, #0
 8005a96:	4625      	mov	r5, r4
 8005a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a9a:	4656      	mov	r6, sl
 8005a9c:	ea6f 0803 	mvn.w	r8, r3
 8005aa0:	2700      	movs	r7, #0
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4648      	mov	r0, r9
 8005aa6:	f000 fcbf 	bl	8006428 <_Bfree>
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	f000 80bd 	beq.w	8005c2a <_dtoa_r+0x622>
 8005ab0:	b12f      	cbz	r7, 8005abe <_dtoa_r+0x4b6>
 8005ab2:	42af      	cmp	r7, r5
 8005ab4:	d003      	beq.n	8005abe <_dtoa_r+0x4b6>
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f000 fcb5 	bl	8006428 <_Bfree>
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4648      	mov	r0, r9
 8005ac2:	f000 fcb1 	bl	8006428 <_Bfree>
 8005ac6:	e0b0      	b.n	8005c2a <_dtoa_r+0x622>
 8005ac8:	07e2      	lsls	r2, r4, #31
 8005aca:	d505      	bpl.n	8005ad8 <_dtoa_r+0x4d0>
 8005acc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ad0:	f7fa fda2 	bl	8000618 <__aeabi_dmul>
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	1064      	asrs	r4, r4, #1
 8005ada:	3508      	adds	r5, #8
 8005adc:	e762      	b.n	80059a4 <_dtoa_r+0x39c>
 8005ade:	2602      	movs	r6, #2
 8005ae0:	e765      	b.n	80059ae <_dtoa_r+0x3a6>
 8005ae2:	9c03      	ldr	r4, [sp, #12]
 8005ae4:	46b8      	mov	r8, r7
 8005ae6:	e784      	b.n	80059f2 <_dtoa_r+0x3ea>
 8005ae8:	4b27      	ldr	r3, [pc, #156]	@ (8005b88 <_dtoa_r+0x580>)
 8005aea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005aec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005af0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005af4:	4454      	add	r4, sl
 8005af6:	2900      	cmp	r1, #0
 8005af8:	d054      	beq.n	8005ba4 <_dtoa_r+0x59c>
 8005afa:	4929      	ldr	r1, [pc, #164]	@ (8005ba0 <_dtoa_r+0x598>)
 8005afc:	2000      	movs	r0, #0
 8005afe:	f7fa feb5 	bl	800086c <__aeabi_ddiv>
 8005b02:	4633      	mov	r3, r6
 8005b04:	462a      	mov	r2, r5
 8005b06:	f7fa fbcf 	bl	80002a8 <__aeabi_dsub>
 8005b0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b0e:	4656      	mov	r6, sl
 8005b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b14:	f7fb f830 	bl	8000b78 <__aeabi_d2iz>
 8005b18:	4605      	mov	r5, r0
 8005b1a:	f7fa fd13 	bl	8000544 <__aeabi_i2d>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b26:	f7fa fbbf 	bl	80002a8 <__aeabi_dsub>
 8005b2a:	3530      	adds	r5, #48	@ 0x30
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b34:	f806 5b01 	strb.w	r5, [r6], #1
 8005b38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b3c:	f7fa ffde 	bl	8000afc <__aeabi_dcmplt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d172      	bne.n	8005c2a <_dtoa_r+0x622>
 8005b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b48:	4911      	ldr	r1, [pc, #68]	@ (8005b90 <_dtoa_r+0x588>)
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f7fa fbac 	bl	80002a8 <__aeabi_dsub>
 8005b50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b54:	f7fa ffd2 	bl	8000afc <__aeabi_dcmplt>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	f040 80b4 	bne.w	8005cc6 <_dtoa_r+0x6be>
 8005b5e:	42a6      	cmp	r6, r4
 8005b60:	f43f af70 	beq.w	8005a44 <_dtoa_r+0x43c>
 8005b64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005b68:	4b0a      	ldr	r3, [pc, #40]	@ (8005b94 <_dtoa_r+0x58c>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f7fa fd54 	bl	8000618 <__aeabi_dmul>
 8005b70:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <_dtoa_r+0x58c>)
 8005b72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b76:	2200      	movs	r2, #0
 8005b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b7c:	f7fa fd4c 	bl	8000618 <__aeabi_dmul>
 8005b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b84:	e7c4      	b.n	8005b10 <_dtoa_r+0x508>
 8005b86:	bf00      	nop
 8005b88:	080099b0 	.word	0x080099b0
 8005b8c:	08009988 	.word	0x08009988
 8005b90:	3ff00000 	.word	0x3ff00000
 8005b94:	40240000 	.word	0x40240000
 8005b98:	401c0000 	.word	0x401c0000
 8005b9c:	40140000 	.word	0x40140000
 8005ba0:	3fe00000 	.word	0x3fe00000
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7fa fd36 	bl	8000618 <__aeabi_dmul>
 8005bac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005bb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005bb2:	4656      	mov	r6, sl
 8005bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bb8:	f7fa ffde 	bl	8000b78 <__aeabi_d2iz>
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	f7fa fcc1 	bl	8000544 <__aeabi_i2d>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bca:	f7fa fb6d 	bl	80002a8 <__aeabi_dsub>
 8005bce:	3530      	adds	r5, #48	@ 0x30
 8005bd0:	f806 5b01 	strb.w	r5, [r6], #1
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	d124      	bne.n	8005c2e <_dtoa_r+0x626>
 8005be4:	4baf      	ldr	r3, [pc, #700]	@ (8005ea4 <_dtoa_r+0x89c>)
 8005be6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005bea:	f7fa fb5f 	bl	80002ac <__adddf3>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bf6:	f7fa ff9f 	bl	8000b38 <__aeabi_dcmpgt>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d163      	bne.n	8005cc6 <_dtoa_r+0x6be>
 8005bfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c02:	49a8      	ldr	r1, [pc, #672]	@ (8005ea4 <_dtoa_r+0x89c>)
 8005c04:	2000      	movs	r0, #0
 8005c06:	f7fa fb4f 	bl	80002a8 <__aeabi_dsub>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c12:	f7fa ff73 	bl	8000afc <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f43f af14 	beq.w	8005a44 <_dtoa_r+0x43c>
 8005c1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c1e:	1e73      	subs	r3, r6, #1
 8005c20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c26:	2b30      	cmp	r3, #48	@ 0x30
 8005c28:	d0f8      	beq.n	8005c1c <_dtoa_r+0x614>
 8005c2a:	4647      	mov	r7, r8
 8005c2c:	e03b      	b.n	8005ca6 <_dtoa_r+0x69e>
 8005c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8005ea8 <_dtoa_r+0x8a0>)
 8005c30:	f7fa fcf2 	bl	8000618 <__aeabi_dmul>
 8005c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c38:	e7bc      	b.n	8005bb4 <_dtoa_r+0x5ac>
 8005c3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005c3e:	4656      	mov	r6, sl
 8005c40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c44:	4620      	mov	r0, r4
 8005c46:	4629      	mov	r1, r5
 8005c48:	f7fa fe10 	bl	800086c <__aeabi_ddiv>
 8005c4c:	f7fa ff94 	bl	8000b78 <__aeabi_d2iz>
 8005c50:	4680      	mov	r8, r0
 8005c52:	f7fa fc77 	bl	8000544 <__aeabi_i2d>
 8005c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c5a:	f7fa fcdd 	bl	8000618 <__aeabi_dmul>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c6a:	f7fa fb1d 	bl	80002a8 <__aeabi_dsub>
 8005c6e:	f806 4b01 	strb.w	r4, [r6], #1
 8005c72:	9d03      	ldr	r5, [sp, #12]
 8005c74:	eba6 040a 	sub.w	r4, r6, sl
 8005c78:	42a5      	cmp	r5, r4
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	d133      	bne.n	8005ce8 <_dtoa_r+0x6e0>
 8005c80:	f7fa fb14 	bl	80002ac <__adddf3>
 8005c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c88:	4604      	mov	r4, r0
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	f7fa ff54 	bl	8000b38 <__aeabi_dcmpgt>
 8005c90:	b9c0      	cbnz	r0, 8005cc4 <_dtoa_r+0x6bc>
 8005c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa ff25 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c9e:	b110      	cbz	r0, 8005ca6 <_dtoa_r+0x69e>
 8005ca0:	f018 0f01 	tst.w	r8, #1
 8005ca4:	d10e      	bne.n	8005cc4 <_dtoa_r+0x6bc>
 8005ca6:	9902      	ldr	r1, [sp, #8]
 8005ca8:	4648      	mov	r0, r9
 8005caa:	f000 fbbd 	bl	8006428 <_Bfree>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	7033      	strb	r3, [r6, #0]
 8005cb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cb4:	3701      	adds	r7, #1
 8005cb6:	601f      	str	r7, [r3, #0]
 8005cb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 824b 	beq.w	8006156 <_dtoa_r+0xb4e>
 8005cc0:	601e      	str	r6, [r3, #0]
 8005cc2:	e248      	b.n	8006156 <_dtoa_r+0xb4e>
 8005cc4:	46b8      	mov	r8, r7
 8005cc6:	4633      	mov	r3, r6
 8005cc8:	461e      	mov	r6, r3
 8005cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cce:	2a39      	cmp	r2, #57	@ 0x39
 8005cd0:	d106      	bne.n	8005ce0 <_dtoa_r+0x6d8>
 8005cd2:	459a      	cmp	sl, r3
 8005cd4:	d1f8      	bne.n	8005cc8 <_dtoa_r+0x6c0>
 8005cd6:	2230      	movs	r2, #48	@ 0x30
 8005cd8:	f108 0801 	add.w	r8, r8, #1
 8005cdc:	f88a 2000 	strb.w	r2, [sl]
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	3201      	adds	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e7a0      	b.n	8005c2a <_dtoa_r+0x622>
 8005ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8005ea8 <_dtoa_r+0x8a0>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	f7fa fc94 	bl	8000618 <__aeabi_dmul>
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	f7fa fef6 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d09f      	beq.n	8005c40 <_dtoa_r+0x638>
 8005d00:	e7d1      	b.n	8005ca6 <_dtoa_r+0x69e>
 8005d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	f000 80ea 	beq.w	8005ede <_dtoa_r+0x8d6>
 8005d0a:	9a07      	ldr	r2, [sp, #28]
 8005d0c:	2a01      	cmp	r2, #1
 8005d0e:	f300 80cd 	bgt.w	8005eac <_dtoa_r+0x8a4>
 8005d12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f000 80c1 	beq.w	8005e9c <_dtoa_r+0x894>
 8005d1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d1e:	9c08      	ldr	r4, [sp, #32]
 8005d20:	9e00      	ldr	r6, [sp, #0]
 8005d22:	9a00      	ldr	r2, [sp, #0]
 8005d24:	441a      	add	r2, r3
 8005d26:	9200      	str	r2, [sp, #0]
 8005d28:	9a06      	ldr	r2, [sp, #24]
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	441a      	add	r2, r3
 8005d2e:	4648      	mov	r0, r9
 8005d30:	9206      	str	r2, [sp, #24]
 8005d32:	f000 fc2d 	bl	8006590 <__i2b>
 8005d36:	4605      	mov	r5, r0
 8005d38:	b166      	cbz	r6, 8005d54 <_dtoa_r+0x74c>
 8005d3a:	9b06      	ldr	r3, [sp, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dd09      	ble.n	8005d54 <_dtoa_r+0x74c>
 8005d40:	42b3      	cmp	r3, r6
 8005d42:	9a00      	ldr	r2, [sp, #0]
 8005d44:	bfa8      	it	ge
 8005d46:	4633      	movge	r3, r6
 8005d48:	1ad2      	subs	r2, r2, r3
 8005d4a:	9200      	str	r2, [sp, #0]
 8005d4c:	9a06      	ldr	r2, [sp, #24]
 8005d4e:	1af6      	subs	r6, r6, r3
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	9306      	str	r3, [sp, #24]
 8005d54:	9b08      	ldr	r3, [sp, #32]
 8005d56:	b30b      	cbz	r3, 8005d9c <_dtoa_r+0x794>
 8005d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80c6 	beq.w	8005eec <_dtoa_r+0x8e4>
 8005d60:	2c00      	cmp	r4, #0
 8005d62:	f000 80c0 	beq.w	8005ee6 <_dtoa_r+0x8de>
 8005d66:	4629      	mov	r1, r5
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4648      	mov	r0, r9
 8005d6c:	f000 fcc8 	bl	8006700 <__pow5mult>
 8005d70:	9a02      	ldr	r2, [sp, #8]
 8005d72:	4601      	mov	r1, r0
 8005d74:	4605      	mov	r5, r0
 8005d76:	4648      	mov	r0, r9
 8005d78:	f000 fc20 	bl	80065bc <__multiply>
 8005d7c:	9902      	ldr	r1, [sp, #8]
 8005d7e:	4680      	mov	r8, r0
 8005d80:	4648      	mov	r0, r9
 8005d82:	f000 fb51 	bl	8006428 <_Bfree>
 8005d86:	9b08      	ldr	r3, [sp, #32]
 8005d88:	1b1b      	subs	r3, r3, r4
 8005d8a:	9308      	str	r3, [sp, #32]
 8005d8c:	f000 80b1 	beq.w	8005ef2 <_dtoa_r+0x8ea>
 8005d90:	9a08      	ldr	r2, [sp, #32]
 8005d92:	4641      	mov	r1, r8
 8005d94:	4648      	mov	r0, r9
 8005d96:	f000 fcb3 	bl	8006700 <__pow5mult>
 8005d9a:	9002      	str	r0, [sp, #8]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4648      	mov	r0, r9
 8005da0:	f000 fbf6 	bl	8006590 <__i2b>
 8005da4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005da6:	4604      	mov	r4, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 81d8 	beq.w	800615e <_dtoa_r+0xb56>
 8005dae:	461a      	mov	r2, r3
 8005db0:	4601      	mov	r1, r0
 8005db2:	4648      	mov	r0, r9
 8005db4:	f000 fca4 	bl	8006700 <__pow5mult>
 8005db8:	9b07      	ldr	r3, [sp, #28]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	f300 809f 	bgt.w	8005f00 <_dtoa_r+0x8f8>
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f040 8097 	bne.w	8005ef8 <_dtoa_r+0x8f0>
 8005dca:	9b05      	ldr	r3, [sp, #20]
 8005dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 8093 	bne.w	8005efc <_dtoa_r+0x8f4>
 8005dd6:	9b05      	ldr	r3, [sp, #20]
 8005dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ddc:	0d1b      	lsrs	r3, r3, #20
 8005dde:	051b      	lsls	r3, r3, #20
 8005de0:	b133      	cbz	r3, 8005df0 <_dtoa_r+0x7e8>
 8005de2:	9b00      	ldr	r3, [sp, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	9b06      	ldr	r3, [sp, #24]
 8005dea:	3301      	adds	r3, #1
 8005dec:	9306      	str	r3, [sp, #24]
 8005dee:	2301      	movs	r3, #1
 8005df0:	9308      	str	r3, [sp, #32]
 8005df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 81b8 	beq.w	800616a <_dtoa_r+0xb62>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e00:	6918      	ldr	r0, [r3, #16]
 8005e02:	f000 fb79 	bl	80064f8 <__hi0bits>
 8005e06:	f1c0 0020 	rsb	r0, r0, #32
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	4418      	add	r0, r3
 8005e0e:	f010 001f 	ands.w	r0, r0, #31
 8005e12:	f000 8082 	beq.w	8005f1a <_dtoa_r+0x912>
 8005e16:	f1c0 0320 	rsb	r3, r0, #32
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	dd73      	ble.n	8005f06 <_dtoa_r+0x8fe>
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	f1c0 001c 	rsb	r0, r0, #28
 8005e24:	4403      	add	r3, r0
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	9b06      	ldr	r3, [sp, #24]
 8005e2a:	4403      	add	r3, r0
 8005e2c:	4406      	add	r6, r0
 8005e2e:	9306      	str	r3, [sp, #24]
 8005e30:	9b00      	ldr	r3, [sp, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd05      	ble.n	8005e42 <_dtoa_r+0x83a>
 8005e36:	9902      	ldr	r1, [sp, #8]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4648      	mov	r0, r9
 8005e3c:	f000 fcba 	bl	80067b4 <__lshift>
 8005e40:	9002      	str	r0, [sp, #8]
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dd05      	ble.n	8005e54 <_dtoa_r+0x84c>
 8005e48:	4621      	mov	r1, r4
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	f000 fcb1 	bl	80067b4 <__lshift>
 8005e52:	4604      	mov	r4, r0
 8005e54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d061      	beq.n	8005f1e <_dtoa_r+0x916>
 8005e5a:	9802      	ldr	r0, [sp, #8]
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	f000 fd15 	bl	800688c <__mcmp>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	da5b      	bge.n	8005f1e <_dtoa_r+0x916>
 8005e66:	2300      	movs	r3, #0
 8005e68:	9902      	ldr	r1, [sp, #8]
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	4648      	mov	r0, r9
 8005e6e:	f000 fafd 	bl	800646c <__multadd>
 8005e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e74:	9002      	str	r0, [sp, #8]
 8005e76:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8177 	beq.w	800616e <_dtoa_r+0xb66>
 8005e80:	4629      	mov	r1, r5
 8005e82:	2300      	movs	r3, #0
 8005e84:	220a      	movs	r2, #10
 8005e86:	4648      	mov	r0, r9
 8005e88:	f000 faf0 	bl	800646c <__multadd>
 8005e8c:	f1bb 0f00 	cmp.w	fp, #0
 8005e90:	4605      	mov	r5, r0
 8005e92:	dc6f      	bgt.n	8005f74 <_dtoa_r+0x96c>
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	dc49      	bgt.n	8005f2e <_dtoa_r+0x926>
 8005e9a:	e06b      	b.n	8005f74 <_dtoa_r+0x96c>
 8005e9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005ea2:	e73c      	b.n	8005d1e <_dtoa_r+0x716>
 8005ea4:	3fe00000 	.word	0x3fe00000
 8005ea8:	40240000 	.word	0x40240000
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	1e5c      	subs	r4, r3, #1
 8005eb0:	9b08      	ldr	r3, [sp, #32]
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	db09      	blt.n	8005eca <_dtoa_r+0x8c2>
 8005eb6:	1b1c      	subs	r4, r3, r4
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f6bf af30 	bge.w	8005d20 <_dtoa_r+0x718>
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	9a03      	ldr	r2, [sp, #12]
 8005ec4:	1a9e      	subs	r6, r3, r2
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e72b      	b.n	8005d22 <_dtoa_r+0x71a>
 8005eca:	9b08      	ldr	r3, [sp, #32]
 8005ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005ece:	9408      	str	r4, [sp, #32]
 8005ed0:	1ae3      	subs	r3, r4, r3
 8005ed2:	441a      	add	r2, r3
 8005ed4:	9e00      	ldr	r6, [sp, #0]
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	920d      	str	r2, [sp, #52]	@ 0x34
 8005eda:	2400      	movs	r4, #0
 8005edc:	e721      	b.n	8005d22 <_dtoa_r+0x71a>
 8005ede:	9c08      	ldr	r4, [sp, #32]
 8005ee0:	9e00      	ldr	r6, [sp, #0]
 8005ee2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005ee4:	e728      	b.n	8005d38 <_dtoa_r+0x730>
 8005ee6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005eea:	e751      	b.n	8005d90 <_dtoa_r+0x788>
 8005eec:	9a08      	ldr	r2, [sp, #32]
 8005eee:	9902      	ldr	r1, [sp, #8]
 8005ef0:	e750      	b.n	8005d94 <_dtoa_r+0x78c>
 8005ef2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005ef6:	e751      	b.n	8005d9c <_dtoa_r+0x794>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e779      	b.n	8005df0 <_dtoa_r+0x7e8>
 8005efc:	9b04      	ldr	r3, [sp, #16]
 8005efe:	e777      	b.n	8005df0 <_dtoa_r+0x7e8>
 8005f00:	2300      	movs	r3, #0
 8005f02:	9308      	str	r3, [sp, #32]
 8005f04:	e779      	b.n	8005dfa <_dtoa_r+0x7f2>
 8005f06:	d093      	beq.n	8005e30 <_dtoa_r+0x828>
 8005f08:	9a00      	ldr	r2, [sp, #0]
 8005f0a:	331c      	adds	r3, #28
 8005f0c:	441a      	add	r2, r3
 8005f0e:	9200      	str	r2, [sp, #0]
 8005f10:	9a06      	ldr	r2, [sp, #24]
 8005f12:	441a      	add	r2, r3
 8005f14:	441e      	add	r6, r3
 8005f16:	9206      	str	r2, [sp, #24]
 8005f18:	e78a      	b.n	8005e30 <_dtoa_r+0x828>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	e7f4      	b.n	8005f08 <_dtoa_r+0x900>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	46b8      	mov	r8, r7
 8005f24:	dc20      	bgt.n	8005f68 <_dtoa_r+0x960>
 8005f26:	469b      	mov	fp, r3
 8005f28:	9b07      	ldr	r3, [sp, #28]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	dd1e      	ble.n	8005f6c <_dtoa_r+0x964>
 8005f2e:	f1bb 0f00 	cmp.w	fp, #0
 8005f32:	f47f adb1 	bne.w	8005a98 <_dtoa_r+0x490>
 8005f36:	4621      	mov	r1, r4
 8005f38:	465b      	mov	r3, fp
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	4648      	mov	r0, r9
 8005f3e:	f000 fa95 	bl	800646c <__multadd>
 8005f42:	4601      	mov	r1, r0
 8005f44:	4604      	mov	r4, r0
 8005f46:	9802      	ldr	r0, [sp, #8]
 8005f48:	f000 fca0 	bl	800688c <__mcmp>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f77f ada3 	ble.w	8005a98 <_dtoa_r+0x490>
 8005f52:	4656      	mov	r6, sl
 8005f54:	2331      	movs	r3, #49	@ 0x31
 8005f56:	f806 3b01 	strb.w	r3, [r6], #1
 8005f5a:	f108 0801 	add.w	r8, r8, #1
 8005f5e:	e59f      	b.n	8005aa0 <_dtoa_r+0x498>
 8005f60:	9c03      	ldr	r4, [sp, #12]
 8005f62:	46b8      	mov	r8, r7
 8005f64:	4625      	mov	r5, r4
 8005f66:	e7f4      	b.n	8005f52 <_dtoa_r+0x94a>
 8005f68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8101 	beq.w	8006176 <_dtoa_r+0xb6e>
 8005f74:	2e00      	cmp	r6, #0
 8005f76:	dd05      	ble.n	8005f84 <_dtoa_r+0x97c>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	4648      	mov	r0, r9
 8005f7e:	f000 fc19 	bl	80067b4 <__lshift>
 8005f82:	4605      	mov	r5, r0
 8005f84:	9b08      	ldr	r3, [sp, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d05c      	beq.n	8006044 <_dtoa_r+0xa3c>
 8005f8a:	6869      	ldr	r1, [r5, #4]
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	f000 fa0b 	bl	80063a8 <_Balloc>
 8005f92:	4606      	mov	r6, r0
 8005f94:	b928      	cbnz	r0, 8005fa2 <_dtoa_r+0x99a>
 8005f96:	4b82      	ldr	r3, [pc, #520]	@ (80061a0 <_dtoa_r+0xb98>)
 8005f98:	4602      	mov	r2, r0
 8005f9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f9e:	f7ff bb4a 	b.w	8005636 <_dtoa_r+0x2e>
 8005fa2:	692a      	ldr	r2, [r5, #16]
 8005fa4:	3202      	adds	r2, #2
 8005fa6:	0092      	lsls	r2, r2, #2
 8005fa8:	f105 010c 	add.w	r1, r5, #12
 8005fac:	300c      	adds	r0, #12
 8005fae:	f7ff fa76 	bl	800549e <memcpy>
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4648      	mov	r0, r9
 8005fb8:	f000 fbfc 	bl	80067b4 <__lshift>
 8005fbc:	f10a 0301 	add.w	r3, sl, #1
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	eb0a 030b 	add.w	r3, sl, fp
 8005fc6:	9308      	str	r3, [sp, #32]
 8005fc8:	9b04      	ldr	r3, [sp, #16]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	462f      	mov	r7, r5
 8005fd0:	9306      	str	r3, [sp, #24]
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	9b00      	ldr	r3, [sp, #0]
 8005fd6:	9802      	ldr	r0, [sp, #8]
 8005fd8:	4621      	mov	r1, r4
 8005fda:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fde:	f7ff fa8b 	bl	80054f8 <quorem>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	3330      	adds	r3, #48	@ 0x30
 8005fe6:	9003      	str	r0, [sp, #12]
 8005fe8:	4639      	mov	r1, r7
 8005fea:	9802      	ldr	r0, [sp, #8]
 8005fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fee:	f000 fc4d 	bl	800688c <__mcmp>
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	9004      	str	r0, [sp, #16]
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	4648      	mov	r0, r9
 8005ffa:	f000 fc63 	bl	80068c4 <__mdiff>
 8005ffe:	68c2      	ldr	r2, [r0, #12]
 8006000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006002:	4606      	mov	r6, r0
 8006004:	bb02      	cbnz	r2, 8006048 <_dtoa_r+0xa40>
 8006006:	4601      	mov	r1, r0
 8006008:	9802      	ldr	r0, [sp, #8]
 800600a:	f000 fc3f 	bl	800688c <__mcmp>
 800600e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006010:	4602      	mov	r2, r0
 8006012:	4631      	mov	r1, r6
 8006014:	4648      	mov	r0, r9
 8006016:	920c      	str	r2, [sp, #48]	@ 0x30
 8006018:	9309      	str	r3, [sp, #36]	@ 0x24
 800601a:	f000 fa05 	bl	8006428 <_Bfree>
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006022:	9e00      	ldr	r6, [sp, #0]
 8006024:	ea42 0103 	orr.w	r1, r2, r3
 8006028:	9b06      	ldr	r3, [sp, #24]
 800602a:	4319      	orrs	r1, r3
 800602c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800602e:	d10d      	bne.n	800604c <_dtoa_r+0xa44>
 8006030:	2b39      	cmp	r3, #57	@ 0x39
 8006032:	d027      	beq.n	8006084 <_dtoa_r+0xa7c>
 8006034:	9a04      	ldr	r2, [sp, #16]
 8006036:	2a00      	cmp	r2, #0
 8006038:	dd01      	ble.n	800603e <_dtoa_r+0xa36>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	3331      	adds	r3, #49	@ 0x31
 800603e:	f88b 3000 	strb.w	r3, [fp]
 8006042:	e52e      	b.n	8005aa2 <_dtoa_r+0x49a>
 8006044:	4628      	mov	r0, r5
 8006046:	e7b9      	b.n	8005fbc <_dtoa_r+0x9b4>
 8006048:	2201      	movs	r2, #1
 800604a:	e7e2      	b.n	8006012 <_dtoa_r+0xa0a>
 800604c:	9904      	ldr	r1, [sp, #16]
 800604e:	2900      	cmp	r1, #0
 8006050:	db04      	blt.n	800605c <_dtoa_r+0xa54>
 8006052:	9807      	ldr	r0, [sp, #28]
 8006054:	4301      	orrs	r1, r0
 8006056:	9806      	ldr	r0, [sp, #24]
 8006058:	4301      	orrs	r1, r0
 800605a:	d120      	bne.n	800609e <_dtoa_r+0xa96>
 800605c:	2a00      	cmp	r2, #0
 800605e:	ddee      	ble.n	800603e <_dtoa_r+0xa36>
 8006060:	9902      	ldr	r1, [sp, #8]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	4648      	mov	r0, r9
 8006068:	f000 fba4 	bl	80067b4 <__lshift>
 800606c:	4621      	mov	r1, r4
 800606e:	9002      	str	r0, [sp, #8]
 8006070:	f000 fc0c 	bl	800688c <__mcmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	9b00      	ldr	r3, [sp, #0]
 8006078:	dc02      	bgt.n	8006080 <_dtoa_r+0xa78>
 800607a:	d1e0      	bne.n	800603e <_dtoa_r+0xa36>
 800607c:	07da      	lsls	r2, r3, #31
 800607e:	d5de      	bpl.n	800603e <_dtoa_r+0xa36>
 8006080:	2b39      	cmp	r3, #57	@ 0x39
 8006082:	d1da      	bne.n	800603a <_dtoa_r+0xa32>
 8006084:	2339      	movs	r3, #57	@ 0x39
 8006086:	f88b 3000 	strb.w	r3, [fp]
 800608a:	4633      	mov	r3, r6
 800608c:	461e      	mov	r6, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006094:	2a39      	cmp	r2, #57	@ 0x39
 8006096:	d04e      	beq.n	8006136 <_dtoa_r+0xb2e>
 8006098:	3201      	adds	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e501      	b.n	8005aa2 <_dtoa_r+0x49a>
 800609e:	2a00      	cmp	r2, #0
 80060a0:	dd03      	ble.n	80060aa <_dtoa_r+0xaa2>
 80060a2:	2b39      	cmp	r3, #57	@ 0x39
 80060a4:	d0ee      	beq.n	8006084 <_dtoa_r+0xa7c>
 80060a6:	3301      	adds	r3, #1
 80060a8:	e7c9      	b.n	800603e <_dtoa_r+0xa36>
 80060aa:	9a00      	ldr	r2, [sp, #0]
 80060ac:	9908      	ldr	r1, [sp, #32]
 80060ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060b2:	428a      	cmp	r2, r1
 80060b4:	d028      	beq.n	8006108 <_dtoa_r+0xb00>
 80060b6:	9902      	ldr	r1, [sp, #8]
 80060b8:	2300      	movs	r3, #0
 80060ba:	220a      	movs	r2, #10
 80060bc:	4648      	mov	r0, r9
 80060be:	f000 f9d5 	bl	800646c <__multadd>
 80060c2:	42af      	cmp	r7, r5
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	f04f 020a 	mov.w	r2, #10
 80060ce:	4639      	mov	r1, r7
 80060d0:	4648      	mov	r0, r9
 80060d2:	d107      	bne.n	80060e4 <_dtoa_r+0xadc>
 80060d4:	f000 f9ca 	bl	800646c <__multadd>
 80060d8:	4607      	mov	r7, r0
 80060da:	4605      	mov	r5, r0
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	3301      	adds	r3, #1
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	e777      	b.n	8005fd4 <_dtoa_r+0x9cc>
 80060e4:	f000 f9c2 	bl	800646c <__multadd>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4607      	mov	r7, r0
 80060ec:	2300      	movs	r3, #0
 80060ee:	220a      	movs	r2, #10
 80060f0:	4648      	mov	r0, r9
 80060f2:	f000 f9bb 	bl	800646c <__multadd>
 80060f6:	4605      	mov	r5, r0
 80060f8:	e7f0      	b.n	80060dc <_dtoa_r+0xad4>
 80060fa:	f1bb 0f00 	cmp.w	fp, #0
 80060fe:	bfcc      	ite	gt
 8006100:	465e      	movgt	r6, fp
 8006102:	2601      	movle	r6, #1
 8006104:	4456      	add	r6, sl
 8006106:	2700      	movs	r7, #0
 8006108:	9902      	ldr	r1, [sp, #8]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2201      	movs	r2, #1
 800610e:	4648      	mov	r0, r9
 8006110:	f000 fb50 	bl	80067b4 <__lshift>
 8006114:	4621      	mov	r1, r4
 8006116:	9002      	str	r0, [sp, #8]
 8006118:	f000 fbb8 	bl	800688c <__mcmp>
 800611c:	2800      	cmp	r0, #0
 800611e:	dcb4      	bgt.n	800608a <_dtoa_r+0xa82>
 8006120:	d102      	bne.n	8006128 <_dtoa_r+0xb20>
 8006122:	9b00      	ldr	r3, [sp, #0]
 8006124:	07db      	lsls	r3, r3, #31
 8006126:	d4b0      	bmi.n	800608a <_dtoa_r+0xa82>
 8006128:	4633      	mov	r3, r6
 800612a:	461e      	mov	r6, r3
 800612c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006130:	2a30      	cmp	r2, #48	@ 0x30
 8006132:	d0fa      	beq.n	800612a <_dtoa_r+0xb22>
 8006134:	e4b5      	b.n	8005aa2 <_dtoa_r+0x49a>
 8006136:	459a      	cmp	sl, r3
 8006138:	d1a8      	bne.n	800608c <_dtoa_r+0xa84>
 800613a:	2331      	movs	r3, #49	@ 0x31
 800613c:	f108 0801 	add.w	r8, r8, #1
 8006140:	f88a 3000 	strb.w	r3, [sl]
 8006144:	e4ad      	b.n	8005aa2 <_dtoa_r+0x49a>
 8006146:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006148:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80061a4 <_dtoa_r+0xb9c>
 800614c:	b11b      	cbz	r3, 8006156 <_dtoa_r+0xb4e>
 800614e:	f10a 0308 	add.w	r3, sl, #8
 8006152:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4650      	mov	r0, sl
 8006158:	b017      	add	sp, #92	@ 0x5c
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	9b07      	ldr	r3, [sp, #28]
 8006160:	2b01      	cmp	r3, #1
 8006162:	f77f ae2e 	ble.w	8005dc2 <_dtoa_r+0x7ba>
 8006166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006168:	9308      	str	r3, [sp, #32]
 800616a:	2001      	movs	r0, #1
 800616c:	e64d      	b.n	8005e0a <_dtoa_r+0x802>
 800616e:	f1bb 0f00 	cmp.w	fp, #0
 8006172:	f77f aed9 	ble.w	8005f28 <_dtoa_r+0x920>
 8006176:	4656      	mov	r6, sl
 8006178:	9802      	ldr	r0, [sp, #8]
 800617a:	4621      	mov	r1, r4
 800617c:	f7ff f9bc 	bl	80054f8 <quorem>
 8006180:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006184:	f806 3b01 	strb.w	r3, [r6], #1
 8006188:	eba6 020a 	sub.w	r2, r6, sl
 800618c:	4593      	cmp	fp, r2
 800618e:	ddb4      	ble.n	80060fa <_dtoa_r+0xaf2>
 8006190:	9902      	ldr	r1, [sp, #8]
 8006192:	2300      	movs	r3, #0
 8006194:	220a      	movs	r2, #10
 8006196:	4648      	mov	r0, r9
 8006198:	f000 f968 	bl	800646c <__multadd>
 800619c:	9002      	str	r0, [sp, #8]
 800619e:	e7eb      	b.n	8006178 <_dtoa_r+0xb70>
 80061a0:	080098f0 	.word	0x080098f0
 80061a4:	0800988b 	.word	0x0800988b

080061a8 <_free_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4605      	mov	r5, r0
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d041      	beq.n	8006234 <_free_r+0x8c>
 80061b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b4:	1f0c      	subs	r4, r1, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bfb8      	it	lt
 80061ba:	18e4      	addlt	r4, r4, r3
 80061bc:	f000 f8e8 	bl	8006390 <__malloc_lock>
 80061c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006238 <_free_r+0x90>)
 80061c2:	6813      	ldr	r3, [r2, #0]
 80061c4:	b933      	cbnz	r3, 80061d4 <_free_r+0x2c>
 80061c6:	6063      	str	r3, [r4, #4]
 80061c8:	6014      	str	r4, [r2, #0]
 80061ca:	4628      	mov	r0, r5
 80061cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d0:	f000 b8e4 	b.w	800639c <__malloc_unlock>
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d908      	bls.n	80061ea <_free_r+0x42>
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	1821      	adds	r1, r4, r0
 80061dc:	428b      	cmp	r3, r1
 80061de:	bf01      	itttt	eq
 80061e0:	6819      	ldreq	r1, [r3, #0]
 80061e2:	685b      	ldreq	r3, [r3, #4]
 80061e4:	1809      	addeq	r1, r1, r0
 80061e6:	6021      	streq	r1, [r4, #0]
 80061e8:	e7ed      	b.n	80061c6 <_free_r+0x1e>
 80061ea:	461a      	mov	r2, r3
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	b10b      	cbz	r3, 80061f4 <_free_r+0x4c>
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	d9fa      	bls.n	80061ea <_free_r+0x42>
 80061f4:	6811      	ldr	r1, [r2, #0]
 80061f6:	1850      	adds	r0, r2, r1
 80061f8:	42a0      	cmp	r0, r4
 80061fa:	d10b      	bne.n	8006214 <_free_r+0x6c>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	4401      	add	r1, r0
 8006200:	1850      	adds	r0, r2, r1
 8006202:	4283      	cmp	r3, r0
 8006204:	6011      	str	r1, [r2, #0]
 8006206:	d1e0      	bne.n	80061ca <_free_r+0x22>
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	6053      	str	r3, [r2, #4]
 800620e:	4408      	add	r0, r1
 8006210:	6010      	str	r0, [r2, #0]
 8006212:	e7da      	b.n	80061ca <_free_r+0x22>
 8006214:	d902      	bls.n	800621c <_free_r+0x74>
 8006216:	230c      	movs	r3, #12
 8006218:	602b      	str	r3, [r5, #0]
 800621a:	e7d6      	b.n	80061ca <_free_r+0x22>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	1821      	adds	r1, r4, r0
 8006220:	428b      	cmp	r3, r1
 8006222:	bf04      	itt	eq
 8006224:	6819      	ldreq	r1, [r3, #0]
 8006226:	685b      	ldreq	r3, [r3, #4]
 8006228:	6063      	str	r3, [r4, #4]
 800622a:	bf04      	itt	eq
 800622c:	1809      	addeq	r1, r1, r0
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	6054      	str	r4, [r2, #4]
 8006232:	e7ca      	b.n	80061ca <_free_r+0x22>
 8006234:	bd38      	pop	{r3, r4, r5, pc}
 8006236:	bf00      	nop
 8006238:	200003b0 	.word	0x200003b0

0800623c <malloc>:
 800623c:	4b02      	ldr	r3, [pc, #8]	@ (8006248 <malloc+0xc>)
 800623e:	4601      	mov	r1, r0
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f000 b825 	b.w	8006290 <_malloc_r>
 8006246:	bf00      	nop
 8006248:	20000040 	.word	0x20000040

0800624c <sbrk_aligned>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	4e0f      	ldr	r6, [pc, #60]	@ (800628c <sbrk_aligned+0x40>)
 8006250:	460c      	mov	r4, r1
 8006252:	6831      	ldr	r1, [r6, #0]
 8006254:	4605      	mov	r5, r0
 8006256:	b911      	cbnz	r1, 800625e <sbrk_aligned+0x12>
 8006258:	f001 f826 	bl	80072a8 <_sbrk_r>
 800625c:	6030      	str	r0, [r6, #0]
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f001 f821 	bl	80072a8 <_sbrk_r>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d103      	bne.n	8006272 <sbrk_aligned+0x26>
 800626a:	f04f 34ff 	mov.w	r4, #4294967295
 800626e:	4620      	mov	r0, r4
 8006270:	bd70      	pop	{r4, r5, r6, pc}
 8006272:	1cc4      	adds	r4, r0, #3
 8006274:	f024 0403 	bic.w	r4, r4, #3
 8006278:	42a0      	cmp	r0, r4
 800627a:	d0f8      	beq.n	800626e <sbrk_aligned+0x22>
 800627c:	1a21      	subs	r1, r4, r0
 800627e:	4628      	mov	r0, r5
 8006280:	f001 f812 	bl	80072a8 <_sbrk_r>
 8006284:	3001      	adds	r0, #1
 8006286:	d1f2      	bne.n	800626e <sbrk_aligned+0x22>
 8006288:	e7ef      	b.n	800626a <sbrk_aligned+0x1e>
 800628a:	bf00      	nop
 800628c:	200003ac 	.word	0x200003ac

08006290 <_malloc_r>:
 8006290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006294:	1ccd      	adds	r5, r1, #3
 8006296:	f025 0503 	bic.w	r5, r5, #3
 800629a:	3508      	adds	r5, #8
 800629c:	2d0c      	cmp	r5, #12
 800629e:	bf38      	it	cc
 80062a0:	250c      	movcc	r5, #12
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	4606      	mov	r6, r0
 80062a6:	db01      	blt.n	80062ac <_malloc_r+0x1c>
 80062a8:	42a9      	cmp	r1, r5
 80062aa:	d904      	bls.n	80062b6 <_malloc_r+0x26>
 80062ac:	230c      	movs	r3, #12
 80062ae:	6033      	str	r3, [r6, #0]
 80062b0:	2000      	movs	r0, #0
 80062b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800638c <_malloc_r+0xfc>
 80062ba:	f000 f869 	bl	8006390 <__malloc_lock>
 80062be:	f8d8 3000 	ldr.w	r3, [r8]
 80062c2:	461c      	mov	r4, r3
 80062c4:	bb44      	cbnz	r4, 8006318 <_malloc_r+0x88>
 80062c6:	4629      	mov	r1, r5
 80062c8:	4630      	mov	r0, r6
 80062ca:	f7ff ffbf 	bl	800624c <sbrk_aligned>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	4604      	mov	r4, r0
 80062d2:	d158      	bne.n	8006386 <_malloc_r+0xf6>
 80062d4:	f8d8 4000 	ldr.w	r4, [r8]
 80062d8:	4627      	mov	r7, r4
 80062da:	2f00      	cmp	r7, #0
 80062dc:	d143      	bne.n	8006366 <_malloc_r+0xd6>
 80062de:	2c00      	cmp	r4, #0
 80062e0:	d04b      	beq.n	800637a <_malloc_r+0xea>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	4639      	mov	r1, r7
 80062e6:	4630      	mov	r0, r6
 80062e8:	eb04 0903 	add.w	r9, r4, r3
 80062ec:	f000 ffdc 	bl	80072a8 <_sbrk_r>
 80062f0:	4581      	cmp	r9, r0
 80062f2:	d142      	bne.n	800637a <_malloc_r+0xea>
 80062f4:	6821      	ldr	r1, [r4, #0]
 80062f6:	1a6d      	subs	r5, r5, r1
 80062f8:	4629      	mov	r1, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff ffa6 	bl	800624c <sbrk_aligned>
 8006300:	3001      	adds	r0, #1
 8006302:	d03a      	beq.n	800637a <_malloc_r+0xea>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	442b      	add	r3, r5
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	f8d8 3000 	ldr.w	r3, [r8]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	bb62      	cbnz	r2, 800636c <_malloc_r+0xdc>
 8006312:	f8c8 7000 	str.w	r7, [r8]
 8006316:	e00f      	b.n	8006338 <_malloc_r+0xa8>
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	1b52      	subs	r2, r2, r5
 800631c:	d420      	bmi.n	8006360 <_malloc_r+0xd0>
 800631e:	2a0b      	cmp	r2, #11
 8006320:	d917      	bls.n	8006352 <_malloc_r+0xc2>
 8006322:	1961      	adds	r1, r4, r5
 8006324:	42a3      	cmp	r3, r4
 8006326:	6025      	str	r5, [r4, #0]
 8006328:	bf18      	it	ne
 800632a:	6059      	strne	r1, [r3, #4]
 800632c:	6863      	ldr	r3, [r4, #4]
 800632e:	bf08      	it	eq
 8006330:	f8c8 1000 	streq.w	r1, [r8]
 8006334:	5162      	str	r2, [r4, r5]
 8006336:	604b      	str	r3, [r1, #4]
 8006338:	4630      	mov	r0, r6
 800633a:	f000 f82f 	bl	800639c <__malloc_unlock>
 800633e:	f104 000b 	add.w	r0, r4, #11
 8006342:	1d23      	adds	r3, r4, #4
 8006344:	f020 0007 	bic.w	r0, r0, #7
 8006348:	1ac2      	subs	r2, r0, r3
 800634a:	bf1c      	itt	ne
 800634c:	1a1b      	subne	r3, r3, r0
 800634e:	50a3      	strne	r3, [r4, r2]
 8006350:	e7af      	b.n	80062b2 <_malloc_r+0x22>
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	42a3      	cmp	r3, r4
 8006356:	bf0c      	ite	eq
 8006358:	f8c8 2000 	streq.w	r2, [r8]
 800635c:	605a      	strne	r2, [r3, #4]
 800635e:	e7eb      	b.n	8006338 <_malloc_r+0xa8>
 8006360:	4623      	mov	r3, r4
 8006362:	6864      	ldr	r4, [r4, #4]
 8006364:	e7ae      	b.n	80062c4 <_malloc_r+0x34>
 8006366:	463c      	mov	r4, r7
 8006368:	687f      	ldr	r7, [r7, #4]
 800636a:	e7b6      	b.n	80062da <_malloc_r+0x4a>
 800636c:	461a      	mov	r2, r3
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	42a3      	cmp	r3, r4
 8006372:	d1fb      	bne.n	800636c <_malloc_r+0xdc>
 8006374:	2300      	movs	r3, #0
 8006376:	6053      	str	r3, [r2, #4]
 8006378:	e7de      	b.n	8006338 <_malloc_r+0xa8>
 800637a:	230c      	movs	r3, #12
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	4630      	mov	r0, r6
 8006380:	f000 f80c 	bl	800639c <__malloc_unlock>
 8006384:	e794      	b.n	80062b0 <_malloc_r+0x20>
 8006386:	6005      	str	r5, [r0, #0]
 8006388:	e7d6      	b.n	8006338 <_malloc_r+0xa8>
 800638a:	bf00      	nop
 800638c:	200003b0 	.word	0x200003b0

08006390 <__malloc_lock>:
 8006390:	4801      	ldr	r0, [pc, #4]	@ (8006398 <__malloc_lock+0x8>)
 8006392:	f7ff b882 	b.w	800549a <__retarget_lock_acquire_recursive>
 8006396:	bf00      	nop
 8006398:	200003a8 	.word	0x200003a8

0800639c <__malloc_unlock>:
 800639c:	4801      	ldr	r0, [pc, #4]	@ (80063a4 <__malloc_unlock+0x8>)
 800639e:	f7ff b87d 	b.w	800549c <__retarget_lock_release_recursive>
 80063a2:	bf00      	nop
 80063a4:	200003a8 	.word	0x200003a8

080063a8 <_Balloc>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	69c6      	ldr	r6, [r0, #28]
 80063ac:	4604      	mov	r4, r0
 80063ae:	460d      	mov	r5, r1
 80063b0:	b976      	cbnz	r6, 80063d0 <_Balloc+0x28>
 80063b2:	2010      	movs	r0, #16
 80063b4:	f7ff ff42 	bl	800623c <malloc>
 80063b8:	4602      	mov	r2, r0
 80063ba:	61e0      	str	r0, [r4, #28]
 80063bc:	b920      	cbnz	r0, 80063c8 <_Balloc+0x20>
 80063be:	4b18      	ldr	r3, [pc, #96]	@ (8006420 <_Balloc+0x78>)
 80063c0:	4818      	ldr	r0, [pc, #96]	@ (8006424 <_Balloc+0x7c>)
 80063c2:	216b      	movs	r1, #107	@ 0x6b
 80063c4:	f7ff f87a 	bl	80054bc <__assert_func>
 80063c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063cc:	6006      	str	r6, [r0, #0]
 80063ce:	60c6      	str	r6, [r0, #12]
 80063d0:	69e6      	ldr	r6, [r4, #28]
 80063d2:	68f3      	ldr	r3, [r6, #12]
 80063d4:	b183      	cbz	r3, 80063f8 <_Balloc+0x50>
 80063d6:	69e3      	ldr	r3, [r4, #28]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063de:	b9b8      	cbnz	r0, 8006410 <_Balloc+0x68>
 80063e0:	2101      	movs	r1, #1
 80063e2:	fa01 f605 	lsl.w	r6, r1, r5
 80063e6:	1d72      	adds	r2, r6, #5
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 ff73 	bl	80072d6 <_calloc_r>
 80063f0:	b160      	cbz	r0, 800640c <_Balloc+0x64>
 80063f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063f6:	e00e      	b.n	8006416 <_Balloc+0x6e>
 80063f8:	2221      	movs	r2, #33	@ 0x21
 80063fa:	2104      	movs	r1, #4
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 ff6a 	bl	80072d6 <_calloc_r>
 8006402:	69e3      	ldr	r3, [r4, #28]
 8006404:	60f0      	str	r0, [r6, #12]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e4      	bne.n	80063d6 <_Balloc+0x2e>
 800640c:	2000      	movs	r0, #0
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	6802      	ldr	r2, [r0, #0]
 8006412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006416:	2300      	movs	r3, #0
 8006418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800641c:	e7f7      	b.n	800640e <_Balloc+0x66>
 800641e:	bf00      	nop
 8006420:	080097ac 	.word	0x080097ac
 8006424:	08009901 	.word	0x08009901

08006428 <_Bfree>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	69c6      	ldr	r6, [r0, #28]
 800642c:	4605      	mov	r5, r0
 800642e:	460c      	mov	r4, r1
 8006430:	b976      	cbnz	r6, 8006450 <_Bfree+0x28>
 8006432:	2010      	movs	r0, #16
 8006434:	f7ff ff02 	bl	800623c <malloc>
 8006438:	4602      	mov	r2, r0
 800643a:	61e8      	str	r0, [r5, #28]
 800643c:	b920      	cbnz	r0, 8006448 <_Bfree+0x20>
 800643e:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <_Bfree+0x3c>)
 8006440:	4809      	ldr	r0, [pc, #36]	@ (8006468 <_Bfree+0x40>)
 8006442:	218f      	movs	r1, #143	@ 0x8f
 8006444:	f7ff f83a 	bl	80054bc <__assert_func>
 8006448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800644c:	6006      	str	r6, [r0, #0]
 800644e:	60c6      	str	r6, [r0, #12]
 8006450:	b13c      	cbz	r4, 8006462 <_Bfree+0x3a>
 8006452:	69eb      	ldr	r3, [r5, #28]
 8006454:	6862      	ldr	r2, [r4, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800645c:	6021      	str	r1, [r4, #0]
 800645e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	080097ac 	.word	0x080097ac
 8006468:	08009901 	.word	0x08009901

0800646c <__multadd>:
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	690d      	ldr	r5, [r1, #16]
 8006472:	4607      	mov	r7, r0
 8006474:	460c      	mov	r4, r1
 8006476:	461e      	mov	r6, r3
 8006478:	f101 0c14 	add.w	ip, r1, #20
 800647c:	2000      	movs	r0, #0
 800647e:	f8dc 3000 	ldr.w	r3, [ip]
 8006482:	b299      	uxth	r1, r3
 8006484:	fb02 6101 	mla	r1, r2, r1, r6
 8006488:	0c1e      	lsrs	r6, r3, #16
 800648a:	0c0b      	lsrs	r3, r1, #16
 800648c:	fb02 3306 	mla	r3, r2, r6, r3
 8006490:	b289      	uxth	r1, r1
 8006492:	3001      	adds	r0, #1
 8006494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006498:	4285      	cmp	r5, r0
 800649a:	f84c 1b04 	str.w	r1, [ip], #4
 800649e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064a2:	dcec      	bgt.n	800647e <__multadd+0x12>
 80064a4:	b30e      	cbz	r6, 80064ea <__multadd+0x7e>
 80064a6:	68a3      	ldr	r3, [r4, #8]
 80064a8:	42ab      	cmp	r3, r5
 80064aa:	dc19      	bgt.n	80064e0 <__multadd+0x74>
 80064ac:	6861      	ldr	r1, [r4, #4]
 80064ae:	4638      	mov	r0, r7
 80064b0:	3101      	adds	r1, #1
 80064b2:	f7ff ff79 	bl	80063a8 <_Balloc>
 80064b6:	4680      	mov	r8, r0
 80064b8:	b928      	cbnz	r0, 80064c6 <__multadd+0x5a>
 80064ba:	4602      	mov	r2, r0
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <__multadd+0x84>)
 80064be:	480d      	ldr	r0, [pc, #52]	@ (80064f4 <__multadd+0x88>)
 80064c0:	21ba      	movs	r1, #186	@ 0xba
 80064c2:	f7fe fffb 	bl	80054bc <__assert_func>
 80064c6:	6922      	ldr	r2, [r4, #16]
 80064c8:	3202      	adds	r2, #2
 80064ca:	f104 010c 	add.w	r1, r4, #12
 80064ce:	0092      	lsls	r2, r2, #2
 80064d0:	300c      	adds	r0, #12
 80064d2:	f7fe ffe4 	bl	800549e <memcpy>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4638      	mov	r0, r7
 80064da:	f7ff ffa5 	bl	8006428 <_Bfree>
 80064de:	4644      	mov	r4, r8
 80064e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064e4:	3501      	adds	r5, #1
 80064e6:	615e      	str	r6, [r3, #20]
 80064e8:	6125      	str	r5, [r4, #16]
 80064ea:	4620      	mov	r0, r4
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f0:	080098f0 	.word	0x080098f0
 80064f4:	08009901 	.word	0x08009901

080064f8 <__hi0bits>:
 80064f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064fc:	4603      	mov	r3, r0
 80064fe:	bf36      	itet	cc
 8006500:	0403      	lslcc	r3, r0, #16
 8006502:	2000      	movcs	r0, #0
 8006504:	2010      	movcc	r0, #16
 8006506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800650a:	bf3c      	itt	cc
 800650c:	021b      	lslcc	r3, r3, #8
 800650e:	3008      	addcc	r0, #8
 8006510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006514:	bf3c      	itt	cc
 8006516:	011b      	lslcc	r3, r3, #4
 8006518:	3004      	addcc	r0, #4
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651e:	bf3c      	itt	cc
 8006520:	009b      	lslcc	r3, r3, #2
 8006522:	3002      	addcc	r0, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	db05      	blt.n	8006534 <__hi0bits+0x3c>
 8006528:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800652c:	f100 0001 	add.w	r0, r0, #1
 8006530:	bf08      	it	eq
 8006532:	2020      	moveq	r0, #32
 8006534:	4770      	bx	lr

08006536 <__lo0bits>:
 8006536:	6803      	ldr	r3, [r0, #0]
 8006538:	4602      	mov	r2, r0
 800653a:	f013 0007 	ands.w	r0, r3, #7
 800653e:	d00b      	beq.n	8006558 <__lo0bits+0x22>
 8006540:	07d9      	lsls	r1, r3, #31
 8006542:	d421      	bmi.n	8006588 <__lo0bits+0x52>
 8006544:	0798      	lsls	r0, r3, #30
 8006546:	bf49      	itett	mi
 8006548:	085b      	lsrmi	r3, r3, #1
 800654a:	089b      	lsrpl	r3, r3, #2
 800654c:	2001      	movmi	r0, #1
 800654e:	6013      	strmi	r3, [r2, #0]
 8006550:	bf5c      	itt	pl
 8006552:	6013      	strpl	r3, [r2, #0]
 8006554:	2002      	movpl	r0, #2
 8006556:	4770      	bx	lr
 8006558:	b299      	uxth	r1, r3
 800655a:	b909      	cbnz	r1, 8006560 <__lo0bits+0x2a>
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	2010      	movs	r0, #16
 8006560:	b2d9      	uxtb	r1, r3
 8006562:	b909      	cbnz	r1, 8006568 <__lo0bits+0x32>
 8006564:	3008      	adds	r0, #8
 8006566:	0a1b      	lsrs	r3, r3, #8
 8006568:	0719      	lsls	r1, r3, #28
 800656a:	bf04      	itt	eq
 800656c:	091b      	lsreq	r3, r3, #4
 800656e:	3004      	addeq	r0, #4
 8006570:	0799      	lsls	r1, r3, #30
 8006572:	bf04      	itt	eq
 8006574:	089b      	lsreq	r3, r3, #2
 8006576:	3002      	addeq	r0, #2
 8006578:	07d9      	lsls	r1, r3, #31
 800657a:	d403      	bmi.n	8006584 <__lo0bits+0x4e>
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	f100 0001 	add.w	r0, r0, #1
 8006582:	d003      	beq.n	800658c <__lo0bits+0x56>
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	4770      	bx	lr
 8006588:	2000      	movs	r0, #0
 800658a:	4770      	bx	lr
 800658c:	2020      	movs	r0, #32
 800658e:	4770      	bx	lr

08006590 <__i2b>:
 8006590:	b510      	push	{r4, lr}
 8006592:	460c      	mov	r4, r1
 8006594:	2101      	movs	r1, #1
 8006596:	f7ff ff07 	bl	80063a8 <_Balloc>
 800659a:	4602      	mov	r2, r0
 800659c:	b928      	cbnz	r0, 80065aa <__i2b+0x1a>
 800659e:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <__i2b+0x24>)
 80065a0:	4805      	ldr	r0, [pc, #20]	@ (80065b8 <__i2b+0x28>)
 80065a2:	f240 1145 	movw	r1, #325	@ 0x145
 80065a6:	f7fe ff89 	bl	80054bc <__assert_func>
 80065aa:	2301      	movs	r3, #1
 80065ac:	6144      	str	r4, [r0, #20]
 80065ae:	6103      	str	r3, [r0, #16]
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	bf00      	nop
 80065b4:	080098f0 	.word	0x080098f0
 80065b8:	08009901 	.word	0x08009901

080065bc <__multiply>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	4617      	mov	r7, r2
 80065c2:	690a      	ldr	r2, [r1, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bfa8      	it	ge
 80065ca:	463b      	movge	r3, r7
 80065cc:	4689      	mov	r9, r1
 80065ce:	bfa4      	itt	ge
 80065d0:	460f      	movge	r7, r1
 80065d2:	4699      	movge	r9, r3
 80065d4:	693d      	ldr	r5, [r7, #16]
 80065d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	eb05 060a 	add.w	r6, r5, sl
 80065e2:	42b3      	cmp	r3, r6
 80065e4:	b085      	sub	sp, #20
 80065e6:	bfb8      	it	lt
 80065e8:	3101      	addlt	r1, #1
 80065ea:	f7ff fedd 	bl	80063a8 <_Balloc>
 80065ee:	b930      	cbnz	r0, 80065fe <__multiply+0x42>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b41      	ldr	r3, [pc, #260]	@ (80066f8 <__multiply+0x13c>)
 80065f4:	4841      	ldr	r0, [pc, #260]	@ (80066fc <__multiply+0x140>)
 80065f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065fa:	f7fe ff5f 	bl	80054bc <__assert_func>
 80065fe:	f100 0414 	add.w	r4, r0, #20
 8006602:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006606:	4623      	mov	r3, r4
 8006608:	2200      	movs	r2, #0
 800660a:	4573      	cmp	r3, lr
 800660c:	d320      	bcc.n	8006650 <__multiply+0x94>
 800660e:	f107 0814 	add.w	r8, r7, #20
 8006612:	f109 0114 	add.w	r1, r9, #20
 8006616:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800661a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800661e:	9302      	str	r3, [sp, #8]
 8006620:	1beb      	subs	r3, r5, r7
 8006622:	3b15      	subs	r3, #21
 8006624:	f023 0303 	bic.w	r3, r3, #3
 8006628:	3304      	adds	r3, #4
 800662a:	3715      	adds	r7, #21
 800662c:	42bd      	cmp	r5, r7
 800662e:	bf38      	it	cc
 8006630:	2304      	movcc	r3, #4
 8006632:	9301      	str	r3, [sp, #4]
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	9103      	str	r1, [sp, #12]
 8006638:	428b      	cmp	r3, r1
 800663a:	d80c      	bhi.n	8006656 <__multiply+0x9a>
 800663c:	2e00      	cmp	r6, #0
 800663e:	dd03      	ble.n	8006648 <__multiply+0x8c>
 8006640:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006644:	2b00      	cmp	r3, #0
 8006646:	d055      	beq.n	80066f4 <__multiply+0x138>
 8006648:	6106      	str	r6, [r0, #16]
 800664a:	b005      	add	sp, #20
 800664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006650:	f843 2b04 	str.w	r2, [r3], #4
 8006654:	e7d9      	b.n	800660a <__multiply+0x4e>
 8006656:	f8b1 a000 	ldrh.w	sl, [r1]
 800665a:	f1ba 0f00 	cmp.w	sl, #0
 800665e:	d01f      	beq.n	80066a0 <__multiply+0xe4>
 8006660:	46c4      	mov	ip, r8
 8006662:	46a1      	mov	r9, r4
 8006664:	2700      	movs	r7, #0
 8006666:	f85c 2b04 	ldr.w	r2, [ip], #4
 800666a:	f8d9 3000 	ldr.w	r3, [r9]
 800666e:	fa1f fb82 	uxth.w	fp, r2
 8006672:	b29b      	uxth	r3, r3
 8006674:	fb0a 330b 	mla	r3, sl, fp, r3
 8006678:	443b      	add	r3, r7
 800667a:	f8d9 7000 	ldr.w	r7, [r9]
 800667e:	0c12      	lsrs	r2, r2, #16
 8006680:	0c3f      	lsrs	r7, r7, #16
 8006682:	fb0a 7202 	mla	r2, sl, r2, r7
 8006686:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006690:	4565      	cmp	r5, ip
 8006692:	f849 3b04 	str.w	r3, [r9], #4
 8006696:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800669a:	d8e4      	bhi.n	8006666 <__multiply+0xaa>
 800669c:	9b01      	ldr	r3, [sp, #4]
 800669e:	50e7      	str	r7, [r4, r3]
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066a6:	3104      	adds	r1, #4
 80066a8:	f1b9 0f00 	cmp.w	r9, #0
 80066ac:	d020      	beq.n	80066f0 <__multiply+0x134>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	4647      	mov	r7, r8
 80066b2:	46a4      	mov	ip, r4
 80066b4:	f04f 0a00 	mov.w	sl, #0
 80066b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80066bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80066c0:	fb09 220b 	mla	r2, r9, fp, r2
 80066c4:	4452      	add	r2, sl
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066cc:	f84c 3b04 	str.w	r3, [ip], #4
 80066d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80066d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80066dc:	fb09 330a 	mla	r3, r9, sl, r3
 80066e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80066e4:	42bd      	cmp	r5, r7
 80066e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066ea:	d8e5      	bhi.n	80066b8 <__multiply+0xfc>
 80066ec:	9a01      	ldr	r2, [sp, #4]
 80066ee:	50a3      	str	r3, [r4, r2]
 80066f0:	3404      	adds	r4, #4
 80066f2:	e79f      	b.n	8006634 <__multiply+0x78>
 80066f4:	3e01      	subs	r6, #1
 80066f6:	e7a1      	b.n	800663c <__multiply+0x80>
 80066f8:	080098f0 	.word	0x080098f0
 80066fc:	08009901 	.word	0x08009901

08006700 <__pow5mult>:
 8006700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006704:	4615      	mov	r5, r2
 8006706:	f012 0203 	ands.w	r2, r2, #3
 800670a:	4607      	mov	r7, r0
 800670c:	460e      	mov	r6, r1
 800670e:	d007      	beq.n	8006720 <__pow5mult+0x20>
 8006710:	4c25      	ldr	r4, [pc, #148]	@ (80067a8 <__pow5mult+0xa8>)
 8006712:	3a01      	subs	r2, #1
 8006714:	2300      	movs	r3, #0
 8006716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800671a:	f7ff fea7 	bl	800646c <__multadd>
 800671e:	4606      	mov	r6, r0
 8006720:	10ad      	asrs	r5, r5, #2
 8006722:	d03d      	beq.n	80067a0 <__pow5mult+0xa0>
 8006724:	69fc      	ldr	r4, [r7, #28]
 8006726:	b97c      	cbnz	r4, 8006748 <__pow5mult+0x48>
 8006728:	2010      	movs	r0, #16
 800672a:	f7ff fd87 	bl	800623c <malloc>
 800672e:	4602      	mov	r2, r0
 8006730:	61f8      	str	r0, [r7, #28]
 8006732:	b928      	cbnz	r0, 8006740 <__pow5mult+0x40>
 8006734:	4b1d      	ldr	r3, [pc, #116]	@ (80067ac <__pow5mult+0xac>)
 8006736:	481e      	ldr	r0, [pc, #120]	@ (80067b0 <__pow5mult+0xb0>)
 8006738:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800673c:	f7fe febe 	bl	80054bc <__assert_func>
 8006740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006744:	6004      	str	r4, [r0, #0]
 8006746:	60c4      	str	r4, [r0, #12]
 8006748:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800674c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006750:	b94c      	cbnz	r4, 8006766 <__pow5mult+0x66>
 8006752:	f240 2171 	movw	r1, #625	@ 0x271
 8006756:	4638      	mov	r0, r7
 8006758:	f7ff ff1a 	bl	8006590 <__i2b>
 800675c:	2300      	movs	r3, #0
 800675e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006762:	4604      	mov	r4, r0
 8006764:	6003      	str	r3, [r0, #0]
 8006766:	f04f 0900 	mov.w	r9, #0
 800676a:	07eb      	lsls	r3, r5, #31
 800676c:	d50a      	bpl.n	8006784 <__pow5mult+0x84>
 800676e:	4631      	mov	r1, r6
 8006770:	4622      	mov	r2, r4
 8006772:	4638      	mov	r0, r7
 8006774:	f7ff ff22 	bl	80065bc <__multiply>
 8006778:	4631      	mov	r1, r6
 800677a:	4680      	mov	r8, r0
 800677c:	4638      	mov	r0, r7
 800677e:	f7ff fe53 	bl	8006428 <_Bfree>
 8006782:	4646      	mov	r6, r8
 8006784:	106d      	asrs	r5, r5, #1
 8006786:	d00b      	beq.n	80067a0 <__pow5mult+0xa0>
 8006788:	6820      	ldr	r0, [r4, #0]
 800678a:	b938      	cbnz	r0, 800679c <__pow5mult+0x9c>
 800678c:	4622      	mov	r2, r4
 800678e:	4621      	mov	r1, r4
 8006790:	4638      	mov	r0, r7
 8006792:	f7ff ff13 	bl	80065bc <__multiply>
 8006796:	6020      	str	r0, [r4, #0]
 8006798:	f8c0 9000 	str.w	r9, [r0]
 800679c:	4604      	mov	r4, r0
 800679e:	e7e4      	b.n	800676a <__pow5mult+0x6a>
 80067a0:	4630      	mov	r0, r6
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	bf00      	nop
 80067a8:	08009978 	.word	0x08009978
 80067ac:	080097ac 	.word	0x080097ac
 80067b0:	08009901 	.word	0x08009901

080067b4 <__lshift>:
 80067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	460c      	mov	r4, r1
 80067ba:	6849      	ldr	r1, [r1, #4]
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	4607      	mov	r7, r0
 80067c6:	4691      	mov	r9, r2
 80067c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067cc:	f108 0601 	add.w	r6, r8, #1
 80067d0:	42b3      	cmp	r3, r6
 80067d2:	db0b      	blt.n	80067ec <__lshift+0x38>
 80067d4:	4638      	mov	r0, r7
 80067d6:	f7ff fde7 	bl	80063a8 <_Balloc>
 80067da:	4605      	mov	r5, r0
 80067dc:	b948      	cbnz	r0, 80067f2 <__lshift+0x3e>
 80067de:	4602      	mov	r2, r0
 80067e0:	4b28      	ldr	r3, [pc, #160]	@ (8006884 <__lshift+0xd0>)
 80067e2:	4829      	ldr	r0, [pc, #164]	@ (8006888 <__lshift+0xd4>)
 80067e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067e8:	f7fe fe68 	bl	80054bc <__assert_func>
 80067ec:	3101      	adds	r1, #1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	e7ee      	b.n	80067d0 <__lshift+0x1c>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f100 0114 	add.w	r1, r0, #20
 80067f8:	f100 0210 	add.w	r2, r0, #16
 80067fc:	4618      	mov	r0, r3
 80067fe:	4553      	cmp	r3, sl
 8006800:	db33      	blt.n	800686a <__lshift+0xb6>
 8006802:	6920      	ldr	r0, [r4, #16]
 8006804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006808:	f104 0314 	add.w	r3, r4, #20
 800680c:	f019 091f 	ands.w	r9, r9, #31
 8006810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006818:	d02b      	beq.n	8006872 <__lshift+0xbe>
 800681a:	f1c9 0e20 	rsb	lr, r9, #32
 800681e:	468a      	mov	sl, r1
 8006820:	2200      	movs	r2, #0
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	fa00 f009 	lsl.w	r0, r0, r9
 8006828:	4310      	orrs	r0, r2
 800682a:	f84a 0b04 	str.w	r0, [sl], #4
 800682e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006832:	459c      	cmp	ip, r3
 8006834:	fa22 f20e 	lsr.w	r2, r2, lr
 8006838:	d8f3      	bhi.n	8006822 <__lshift+0x6e>
 800683a:	ebac 0304 	sub.w	r3, ip, r4
 800683e:	3b15      	subs	r3, #21
 8006840:	f023 0303 	bic.w	r3, r3, #3
 8006844:	3304      	adds	r3, #4
 8006846:	f104 0015 	add.w	r0, r4, #21
 800684a:	4560      	cmp	r0, ip
 800684c:	bf88      	it	hi
 800684e:	2304      	movhi	r3, #4
 8006850:	50ca      	str	r2, [r1, r3]
 8006852:	b10a      	cbz	r2, 8006858 <__lshift+0xa4>
 8006854:	f108 0602 	add.w	r6, r8, #2
 8006858:	3e01      	subs	r6, #1
 800685a:	4638      	mov	r0, r7
 800685c:	612e      	str	r6, [r5, #16]
 800685e:	4621      	mov	r1, r4
 8006860:	f7ff fde2 	bl	8006428 <_Bfree>
 8006864:	4628      	mov	r0, r5
 8006866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686a:	f842 0f04 	str.w	r0, [r2, #4]!
 800686e:	3301      	adds	r3, #1
 8006870:	e7c5      	b.n	80067fe <__lshift+0x4a>
 8006872:	3904      	subs	r1, #4
 8006874:	f853 2b04 	ldr.w	r2, [r3], #4
 8006878:	f841 2f04 	str.w	r2, [r1, #4]!
 800687c:	459c      	cmp	ip, r3
 800687e:	d8f9      	bhi.n	8006874 <__lshift+0xc0>
 8006880:	e7ea      	b.n	8006858 <__lshift+0xa4>
 8006882:	bf00      	nop
 8006884:	080098f0 	.word	0x080098f0
 8006888:	08009901 	.word	0x08009901

0800688c <__mcmp>:
 800688c:	690a      	ldr	r2, [r1, #16]
 800688e:	4603      	mov	r3, r0
 8006890:	6900      	ldr	r0, [r0, #16]
 8006892:	1a80      	subs	r0, r0, r2
 8006894:	b530      	push	{r4, r5, lr}
 8006896:	d10e      	bne.n	80068b6 <__mcmp+0x2a>
 8006898:	3314      	adds	r3, #20
 800689a:	3114      	adds	r1, #20
 800689c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068ac:	4295      	cmp	r5, r2
 80068ae:	d003      	beq.n	80068b8 <__mcmp+0x2c>
 80068b0:	d205      	bcs.n	80068be <__mcmp+0x32>
 80068b2:	f04f 30ff 	mov.w	r0, #4294967295
 80068b6:	bd30      	pop	{r4, r5, pc}
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d3f3      	bcc.n	80068a4 <__mcmp+0x18>
 80068bc:	e7fb      	b.n	80068b6 <__mcmp+0x2a>
 80068be:	2001      	movs	r0, #1
 80068c0:	e7f9      	b.n	80068b6 <__mcmp+0x2a>
	...

080068c4 <__mdiff>:
 80068c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	4689      	mov	r9, r1
 80068ca:	4606      	mov	r6, r0
 80068cc:	4611      	mov	r1, r2
 80068ce:	4648      	mov	r0, r9
 80068d0:	4614      	mov	r4, r2
 80068d2:	f7ff ffdb 	bl	800688c <__mcmp>
 80068d6:	1e05      	subs	r5, r0, #0
 80068d8:	d112      	bne.n	8006900 <__mdiff+0x3c>
 80068da:	4629      	mov	r1, r5
 80068dc:	4630      	mov	r0, r6
 80068de:	f7ff fd63 	bl	80063a8 <_Balloc>
 80068e2:	4602      	mov	r2, r0
 80068e4:	b928      	cbnz	r0, 80068f2 <__mdiff+0x2e>
 80068e6:	4b3f      	ldr	r3, [pc, #252]	@ (80069e4 <__mdiff+0x120>)
 80068e8:	f240 2137 	movw	r1, #567	@ 0x237
 80068ec:	483e      	ldr	r0, [pc, #248]	@ (80069e8 <__mdiff+0x124>)
 80068ee:	f7fe fde5 	bl	80054bc <__assert_func>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068f8:	4610      	mov	r0, r2
 80068fa:	b003      	add	sp, #12
 80068fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006900:	bfbc      	itt	lt
 8006902:	464b      	movlt	r3, r9
 8006904:	46a1      	movlt	r9, r4
 8006906:	4630      	mov	r0, r6
 8006908:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800690c:	bfba      	itte	lt
 800690e:	461c      	movlt	r4, r3
 8006910:	2501      	movlt	r5, #1
 8006912:	2500      	movge	r5, #0
 8006914:	f7ff fd48 	bl	80063a8 <_Balloc>
 8006918:	4602      	mov	r2, r0
 800691a:	b918      	cbnz	r0, 8006924 <__mdiff+0x60>
 800691c:	4b31      	ldr	r3, [pc, #196]	@ (80069e4 <__mdiff+0x120>)
 800691e:	f240 2145 	movw	r1, #581	@ 0x245
 8006922:	e7e3      	b.n	80068ec <__mdiff+0x28>
 8006924:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006928:	6926      	ldr	r6, [r4, #16]
 800692a:	60c5      	str	r5, [r0, #12]
 800692c:	f109 0310 	add.w	r3, r9, #16
 8006930:	f109 0514 	add.w	r5, r9, #20
 8006934:	f104 0e14 	add.w	lr, r4, #20
 8006938:	f100 0b14 	add.w	fp, r0, #20
 800693c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006940:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	46d9      	mov	r9, fp
 8006948:	f04f 0c00 	mov.w	ip, #0
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006952:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	fa1f f38a 	uxth.w	r3, sl
 800695c:	4619      	mov	r1, r3
 800695e:	b283      	uxth	r3, r0
 8006960:	1acb      	subs	r3, r1, r3
 8006962:	0c00      	lsrs	r0, r0, #16
 8006964:	4463      	add	r3, ip
 8006966:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800696a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006974:	4576      	cmp	r6, lr
 8006976:	f849 3b04 	str.w	r3, [r9], #4
 800697a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800697e:	d8e5      	bhi.n	800694c <__mdiff+0x88>
 8006980:	1b33      	subs	r3, r6, r4
 8006982:	3b15      	subs	r3, #21
 8006984:	f023 0303 	bic.w	r3, r3, #3
 8006988:	3415      	adds	r4, #21
 800698a:	3304      	adds	r3, #4
 800698c:	42a6      	cmp	r6, r4
 800698e:	bf38      	it	cc
 8006990:	2304      	movcc	r3, #4
 8006992:	441d      	add	r5, r3
 8006994:	445b      	add	r3, fp
 8006996:	461e      	mov	r6, r3
 8006998:	462c      	mov	r4, r5
 800699a:	4544      	cmp	r4, r8
 800699c:	d30e      	bcc.n	80069bc <__mdiff+0xf8>
 800699e:	f108 0103 	add.w	r1, r8, #3
 80069a2:	1b49      	subs	r1, r1, r5
 80069a4:	f021 0103 	bic.w	r1, r1, #3
 80069a8:	3d03      	subs	r5, #3
 80069aa:	45a8      	cmp	r8, r5
 80069ac:	bf38      	it	cc
 80069ae:	2100      	movcc	r1, #0
 80069b0:	440b      	add	r3, r1
 80069b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069b6:	b191      	cbz	r1, 80069de <__mdiff+0x11a>
 80069b8:	6117      	str	r7, [r2, #16]
 80069ba:	e79d      	b.n	80068f8 <__mdiff+0x34>
 80069bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80069c0:	46e6      	mov	lr, ip
 80069c2:	0c08      	lsrs	r0, r1, #16
 80069c4:	fa1c fc81 	uxtah	ip, ip, r1
 80069c8:	4471      	add	r1, lr
 80069ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069ce:	b289      	uxth	r1, r1
 80069d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069d4:	f846 1b04 	str.w	r1, [r6], #4
 80069d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069dc:	e7dd      	b.n	800699a <__mdiff+0xd6>
 80069de:	3f01      	subs	r7, #1
 80069e0:	e7e7      	b.n	80069b2 <__mdiff+0xee>
 80069e2:	bf00      	nop
 80069e4:	080098f0 	.word	0x080098f0
 80069e8:	08009901 	.word	0x08009901

080069ec <__d2b>:
 80069ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069f0:	460f      	mov	r7, r1
 80069f2:	2101      	movs	r1, #1
 80069f4:	ec59 8b10 	vmov	r8, r9, d0
 80069f8:	4616      	mov	r6, r2
 80069fa:	f7ff fcd5 	bl	80063a8 <_Balloc>
 80069fe:	4604      	mov	r4, r0
 8006a00:	b930      	cbnz	r0, 8006a10 <__d2b+0x24>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b23      	ldr	r3, [pc, #140]	@ (8006a94 <__d2b+0xa8>)
 8006a06:	4824      	ldr	r0, [pc, #144]	@ (8006a98 <__d2b+0xac>)
 8006a08:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a0c:	f7fe fd56 	bl	80054bc <__assert_func>
 8006a10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a18:	b10d      	cbz	r5, 8006a1e <__d2b+0x32>
 8006a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	f1b8 0300 	subs.w	r3, r8, #0
 8006a24:	d023      	beq.n	8006a6e <__d2b+0x82>
 8006a26:	4668      	mov	r0, sp
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	f7ff fd84 	bl	8006536 <__lo0bits>
 8006a2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a32:	b1d0      	cbz	r0, 8006a6a <__d2b+0x7e>
 8006a34:	f1c0 0320 	rsb	r3, r0, #32
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	40c2      	lsrs	r2, r0
 8006a40:	6163      	str	r3, [r4, #20]
 8006a42:	9201      	str	r2, [sp, #4]
 8006a44:	9b01      	ldr	r3, [sp, #4]
 8006a46:	61a3      	str	r3, [r4, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2201      	moveq	r2, #1
 8006a4e:	2202      	movne	r2, #2
 8006a50:	6122      	str	r2, [r4, #16]
 8006a52:	b1a5      	cbz	r5, 8006a7e <__d2b+0x92>
 8006a54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a58:	4405      	add	r5, r0
 8006a5a:	603d      	str	r5, [r7, #0]
 8006a5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a60:	6030      	str	r0, [r6, #0]
 8006a62:	4620      	mov	r0, r4
 8006a64:	b003      	add	sp, #12
 8006a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a6a:	6161      	str	r1, [r4, #20]
 8006a6c:	e7ea      	b.n	8006a44 <__d2b+0x58>
 8006a6e:	a801      	add	r0, sp, #4
 8006a70:	f7ff fd61 	bl	8006536 <__lo0bits>
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	6163      	str	r3, [r4, #20]
 8006a78:	3020      	adds	r0, #32
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	e7e8      	b.n	8006a50 <__d2b+0x64>
 8006a7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a86:	6038      	str	r0, [r7, #0]
 8006a88:	6918      	ldr	r0, [r3, #16]
 8006a8a:	f7ff fd35 	bl	80064f8 <__hi0bits>
 8006a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a92:	e7e5      	b.n	8006a60 <__d2b+0x74>
 8006a94:	080098f0 	.word	0x080098f0
 8006a98:	08009901 	.word	0x08009901

08006a9c <__ssputs_r>:
 8006a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa0:	688e      	ldr	r6, [r1, #8]
 8006aa2:	461f      	mov	r7, r3
 8006aa4:	42be      	cmp	r6, r7
 8006aa6:	680b      	ldr	r3, [r1, #0]
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4690      	mov	r8, r2
 8006aae:	d82d      	bhi.n	8006b0c <__ssputs_r+0x70>
 8006ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ab8:	d026      	beq.n	8006b08 <__ssputs_r+0x6c>
 8006aba:	6965      	ldr	r5, [r4, #20]
 8006abc:	6909      	ldr	r1, [r1, #16]
 8006abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ac2:	eba3 0901 	sub.w	r9, r3, r1
 8006ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aca:	1c7b      	adds	r3, r7, #1
 8006acc:	444b      	add	r3, r9
 8006ace:	106d      	asrs	r5, r5, #1
 8006ad0:	429d      	cmp	r5, r3
 8006ad2:	bf38      	it	cc
 8006ad4:	461d      	movcc	r5, r3
 8006ad6:	0553      	lsls	r3, r2, #21
 8006ad8:	d527      	bpl.n	8006b2a <__ssputs_r+0x8e>
 8006ada:	4629      	mov	r1, r5
 8006adc:	f7ff fbd8 	bl	8006290 <_malloc_r>
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	b360      	cbz	r0, 8006b3e <__ssputs_r+0xa2>
 8006ae4:	6921      	ldr	r1, [r4, #16]
 8006ae6:	464a      	mov	r2, r9
 8006ae8:	f7fe fcd9 	bl	800549e <memcpy>
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af6:	81a3      	strh	r3, [r4, #12]
 8006af8:	6126      	str	r6, [r4, #16]
 8006afa:	6165      	str	r5, [r4, #20]
 8006afc:	444e      	add	r6, r9
 8006afe:	eba5 0509 	sub.w	r5, r5, r9
 8006b02:	6026      	str	r6, [r4, #0]
 8006b04:	60a5      	str	r5, [r4, #8]
 8006b06:	463e      	mov	r6, r7
 8006b08:	42be      	cmp	r6, r7
 8006b0a:	d900      	bls.n	8006b0e <__ssputs_r+0x72>
 8006b0c:	463e      	mov	r6, r7
 8006b0e:	6820      	ldr	r0, [r4, #0]
 8006b10:	4632      	mov	r2, r6
 8006b12:	4641      	mov	r1, r8
 8006b14:	f000 fbae 	bl	8007274 <memmove>
 8006b18:	68a3      	ldr	r3, [r4, #8]
 8006b1a:	1b9b      	subs	r3, r3, r6
 8006b1c:	60a3      	str	r3, [r4, #8]
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	4433      	add	r3, r6
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	2000      	movs	r0, #0
 8006b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	f000 fbf9 	bl	8007322 <_realloc_r>
 8006b30:	4606      	mov	r6, r0
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d1e0      	bne.n	8006af8 <__ssputs_r+0x5c>
 8006b36:	6921      	ldr	r1, [r4, #16]
 8006b38:	4650      	mov	r0, sl
 8006b3a:	f7ff fb35 	bl	80061a8 <_free_r>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	f8ca 3000 	str.w	r3, [sl]
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	e7e9      	b.n	8006b26 <__ssputs_r+0x8a>
	...

08006b54 <_svfiprintf_r>:
 8006b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b58:	4698      	mov	r8, r3
 8006b5a:	898b      	ldrh	r3, [r1, #12]
 8006b5c:	061b      	lsls	r3, r3, #24
 8006b5e:	b09d      	sub	sp, #116	@ 0x74
 8006b60:	4607      	mov	r7, r0
 8006b62:	460d      	mov	r5, r1
 8006b64:	4614      	mov	r4, r2
 8006b66:	d510      	bpl.n	8006b8a <_svfiprintf_r+0x36>
 8006b68:	690b      	ldr	r3, [r1, #16]
 8006b6a:	b973      	cbnz	r3, 8006b8a <_svfiprintf_r+0x36>
 8006b6c:	2140      	movs	r1, #64	@ 0x40
 8006b6e:	f7ff fb8f 	bl	8006290 <_malloc_r>
 8006b72:	6028      	str	r0, [r5, #0]
 8006b74:	6128      	str	r0, [r5, #16]
 8006b76:	b930      	cbnz	r0, 8006b86 <_svfiprintf_r+0x32>
 8006b78:	230c      	movs	r3, #12
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	b01d      	add	sp, #116	@ 0x74
 8006b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b86:	2340      	movs	r3, #64	@ 0x40
 8006b88:	616b      	str	r3, [r5, #20]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b8e:	2320      	movs	r3, #32
 8006b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b98:	2330      	movs	r3, #48	@ 0x30
 8006b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d38 <_svfiprintf_r+0x1e4>
 8006b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ba2:	f04f 0901 	mov.w	r9, #1
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bae:	b10a      	cbz	r2, 8006bb4 <_svfiprintf_r+0x60>
 8006bb0:	2a25      	cmp	r2, #37	@ 0x25
 8006bb2:	d1f9      	bne.n	8006ba8 <_svfiprintf_r+0x54>
 8006bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8006bb8:	d00b      	beq.n	8006bd2 <_svfiprintf_r+0x7e>
 8006bba:	465b      	mov	r3, fp
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ff6b 	bl	8006a9c <__ssputs_r>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f000 80a7 	beq.w	8006d1a <_svfiprintf_r+0x1c6>
 8006bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bce:	445a      	add	r2, fp
 8006bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 809f 	beq.w	8006d1a <_svfiprintf_r+0x1c6>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be6:	f10a 0a01 	add.w	sl, sl, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	9307      	str	r3, [sp, #28]
 8006bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bf4:	4654      	mov	r4, sl
 8006bf6:	2205      	movs	r2, #5
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	484e      	ldr	r0, [pc, #312]	@ (8006d38 <_svfiprintf_r+0x1e4>)
 8006bfe:	f7f9 faf7 	bl	80001f0 <memchr>
 8006c02:	9a04      	ldr	r2, [sp, #16]
 8006c04:	b9d8      	cbnz	r0, 8006c3e <_svfiprintf_r+0xea>
 8006c06:	06d0      	lsls	r0, r2, #27
 8006c08:	bf44      	itt	mi
 8006c0a:	2320      	movmi	r3, #32
 8006c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c10:	0711      	lsls	r1, r2, #28
 8006c12:	bf44      	itt	mi
 8006c14:	232b      	movmi	r3, #43	@ 0x2b
 8006c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c20:	d015      	beq.n	8006c4e <_svfiprintf_r+0xfa>
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	4654      	mov	r4, sl
 8006c26:	2000      	movs	r0, #0
 8006c28:	f04f 0c0a 	mov.w	ip, #10
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c32:	3b30      	subs	r3, #48	@ 0x30
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d94b      	bls.n	8006cd0 <_svfiprintf_r+0x17c>
 8006c38:	b1b0      	cbz	r0, 8006c68 <_svfiprintf_r+0x114>
 8006c3a:	9207      	str	r2, [sp, #28]
 8006c3c:	e014      	b.n	8006c68 <_svfiprintf_r+0x114>
 8006c3e:	eba0 0308 	sub.w	r3, r0, r8
 8006c42:	fa09 f303 	lsl.w	r3, r9, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	46a2      	mov	sl, r4
 8006c4c:	e7d2      	b.n	8006bf4 <_svfiprintf_r+0xa0>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	9103      	str	r1, [sp, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfbb      	ittet	lt
 8006c5a:	425b      	neglt	r3, r3
 8006c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c60:	9307      	strge	r3, [sp, #28]
 8006c62:	9307      	strlt	r3, [sp, #28]
 8006c64:	bfb8      	it	lt
 8006c66:	9204      	strlt	r2, [sp, #16]
 8006c68:	7823      	ldrb	r3, [r4, #0]
 8006c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c6c:	d10a      	bne.n	8006c84 <_svfiprintf_r+0x130>
 8006c6e:	7863      	ldrb	r3, [r4, #1]
 8006c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c72:	d132      	bne.n	8006cda <_svfiprintf_r+0x186>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	9203      	str	r2, [sp, #12]
 8006c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c80:	3402      	adds	r4, #2
 8006c82:	9305      	str	r3, [sp, #20]
 8006c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d48 <_svfiprintf_r+0x1f4>
 8006c88:	7821      	ldrb	r1, [r4, #0]
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	f7f9 faaf 	bl	80001f0 <memchr>
 8006c92:	b138      	cbz	r0, 8006ca4 <_svfiprintf_r+0x150>
 8006c94:	9b04      	ldr	r3, [sp, #16]
 8006c96:	eba0 000a 	sub.w	r0, r0, sl
 8006c9a:	2240      	movs	r2, #64	@ 0x40
 8006c9c:	4082      	lsls	r2, r0
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	3401      	adds	r4, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca8:	4824      	ldr	r0, [pc, #144]	@ (8006d3c <_svfiprintf_r+0x1e8>)
 8006caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cae:	2206      	movs	r2, #6
 8006cb0:	f7f9 fa9e 	bl	80001f0 <memchr>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d036      	beq.n	8006d26 <_svfiprintf_r+0x1d2>
 8006cb8:	4b21      	ldr	r3, [pc, #132]	@ (8006d40 <_svfiprintf_r+0x1ec>)
 8006cba:	bb1b      	cbnz	r3, 8006d04 <_svfiprintf_r+0x1b0>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	f023 0307 	bic.w	r3, r3, #7
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	9303      	str	r3, [sp, #12]
 8006cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cca:	4433      	add	r3, r6
 8006ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cce:	e76a      	b.n	8006ba6 <_svfiprintf_r+0x52>
 8006cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	e7a8      	b.n	8006c2c <_svfiprintf_r+0xd8>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	3401      	adds	r4, #1
 8006cde:	9305      	str	r3, [sp, #20]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f04f 0c0a 	mov.w	ip, #10
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cec:	3a30      	subs	r2, #48	@ 0x30
 8006cee:	2a09      	cmp	r2, #9
 8006cf0:	d903      	bls.n	8006cfa <_svfiprintf_r+0x1a6>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0c6      	beq.n	8006c84 <_svfiprintf_r+0x130>
 8006cf6:	9105      	str	r1, [sp, #20]
 8006cf8:	e7c4      	b.n	8006c84 <_svfiprintf_r+0x130>
 8006cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cfe:	4604      	mov	r4, r0
 8006d00:	2301      	movs	r3, #1
 8006d02:	e7f0      	b.n	8006ce6 <_svfiprintf_r+0x192>
 8006d04:	ab03      	add	r3, sp, #12
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	462a      	mov	r2, r5
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d44 <_svfiprintf_r+0x1f0>)
 8006d0c:	a904      	add	r1, sp, #16
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7fd fe42 	bl	8004998 <_printf_float>
 8006d14:	1c42      	adds	r2, r0, #1
 8006d16:	4606      	mov	r6, r0
 8006d18:	d1d6      	bne.n	8006cc8 <_svfiprintf_r+0x174>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	065b      	lsls	r3, r3, #25
 8006d1e:	f53f af2d 	bmi.w	8006b7c <_svfiprintf_r+0x28>
 8006d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d24:	e72c      	b.n	8006b80 <_svfiprintf_r+0x2c>
 8006d26:	ab03      	add	r3, sp, #12
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <_svfiprintf_r+0x1f0>)
 8006d2e:	a904      	add	r1, sp, #16
 8006d30:	4638      	mov	r0, r7
 8006d32:	f7fe f8c9 	bl	8004ec8 <_printf_i>
 8006d36:	e7ed      	b.n	8006d14 <_svfiprintf_r+0x1c0>
 8006d38:	0800995a 	.word	0x0800995a
 8006d3c:	08009964 	.word	0x08009964
 8006d40:	08004999 	.word	0x08004999
 8006d44:	08006a9d 	.word	0x08006a9d
 8006d48:	08009960 	.word	0x08009960

08006d4c <__sfputc_r>:
 8006d4c:	6893      	ldr	r3, [r2, #8]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	b410      	push	{r4}
 8006d54:	6093      	str	r3, [r2, #8]
 8006d56:	da08      	bge.n	8006d6a <__sfputc_r+0x1e>
 8006d58:	6994      	ldr	r4, [r2, #24]
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	db01      	blt.n	8006d62 <__sfputc_r+0x16>
 8006d5e:	290a      	cmp	r1, #10
 8006d60:	d103      	bne.n	8006d6a <__sfputc_r+0x1e>
 8006d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d66:	f000 b9f1 	b.w	800714c <__swbuf_r>
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	1c58      	adds	r0, r3, #1
 8006d6e:	6010      	str	r0, [r2, #0]
 8006d70:	7019      	strb	r1, [r3, #0]
 8006d72:	4608      	mov	r0, r1
 8006d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <__sfputs_r>:
 8006d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	460f      	mov	r7, r1
 8006d80:	4614      	mov	r4, r2
 8006d82:	18d5      	adds	r5, r2, r3
 8006d84:	42ac      	cmp	r4, r5
 8006d86:	d101      	bne.n	8006d8c <__sfputs_r+0x12>
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e007      	b.n	8006d9c <__sfputs_r+0x22>
 8006d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d90:	463a      	mov	r2, r7
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff ffda 	bl	8006d4c <__sfputc_r>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d1f3      	bne.n	8006d84 <__sfputs_r+0xa>
 8006d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006da0 <_vfiprintf_r>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	460d      	mov	r5, r1
 8006da6:	b09d      	sub	sp, #116	@ 0x74
 8006da8:	4614      	mov	r4, r2
 8006daa:	4698      	mov	r8, r3
 8006dac:	4606      	mov	r6, r0
 8006dae:	b118      	cbz	r0, 8006db8 <_vfiprintf_r+0x18>
 8006db0:	6a03      	ldr	r3, [r0, #32]
 8006db2:	b90b      	cbnz	r3, 8006db8 <_vfiprintf_r+0x18>
 8006db4:	f7fe fa32 	bl	800521c <__sinit>
 8006db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dba:	07d9      	lsls	r1, r3, #31
 8006dbc:	d405      	bmi.n	8006dca <_vfiprintf_r+0x2a>
 8006dbe:	89ab      	ldrh	r3, [r5, #12]
 8006dc0:	059a      	lsls	r2, r3, #22
 8006dc2:	d402      	bmi.n	8006dca <_vfiprintf_r+0x2a>
 8006dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dc6:	f7fe fb68 	bl	800549a <__retarget_lock_acquire_recursive>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	071b      	lsls	r3, r3, #28
 8006dce:	d501      	bpl.n	8006dd4 <_vfiprintf_r+0x34>
 8006dd0:	692b      	ldr	r3, [r5, #16]
 8006dd2:	b99b      	cbnz	r3, 8006dfc <_vfiprintf_r+0x5c>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f000 f9f6 	bl	80071c8 <__swsetup_r>
 8006ddc:	b170      	cbz	r0, 8006dfc <_vfiprintf_r+0x5c>
 8006dde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006de0:	07dc      	lsls	r4, r3, #31
 8006de2:	d504      	bpl.n	8006dee <_vfiprintf_r+0x4e>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	b01d      	add	sp, #116	@ 0x74
 8006dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	0598      	lsls	r0, r3, #22
 8006df2:	d4f7      	bmi.n	8006de4 <_vfiprintf_r+0x44>
 8006df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006df6:	f7fe fb51 	bl	800549c <__retarget_lock_release_recursive>
 8006dfa:	e7f3      	b.n	8006de4 <_vfiprintf_r+0x44>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e00:	2320      	movs	r3, #32
 8006e02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e0a:	2330      	movs	r3, #48	@ 0x30
 8006e0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fbc <_vfiprintf_r+0x21c>
 8006e10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e14:	f04f 0901 	mov.w	r9, #1
 8006e18:	4623      	mov	r3, r4
 8006e1a:	469a      	mov	sl, r3
 8006e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e20:	b10a      	cbz	r2, 8006e26 <_vfiprintf_r+0x86>
 8006e22:	2a25      	cmp	r2, #37	@ 0x25
 8006e24:	d1f9      	bne.n	8006e1a <_vfiprintf_r+0x7a>
 8006e26:	ebba 0b04 	subs.w	fp, sl, r4
 8006e2a:	d00b      	beq.n	8006e44 <_vfiprintf_r+0xa4>
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	4630      	mov	r0, r6
 8006e34:	f7ff ffa1 	bl	8006d7a <__sfputs_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f000 80a7 	beq.w	8006f8c <_vfiprintf_r+0x1ec>
 8006e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e40:	445a      	add	r2, fp
 8006e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e44:	f89a 3000 	ldrb.w	r3, [sl]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 809f 	beq.w	8006f8c <_vfiprintf_r+0x1ec>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295
 8006e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e58:	f10a 0a01 	add.w	sl, sl, #1
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	9307      	str	r3, [sp, #28]
 8006e60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e64:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e66:	4654      	mov	r4, sl
 8006e68:	2205      	movs	r2, #5
 8006e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6e:	4853      	ldr	r0, [pc, #332]	@ (8006fbc <_vfiprintf_r+0x21c>)
 8006e70:	f7f9 f9be 	bl	80001f0 <memchr>
 8006e74:	9a04      	ldr	r2, [sp, #16]
 8006e76:	b9d8      	cbnz	r0, 8006eb0 <_vfiprintf_r+0x110>
 8006e78:	06d1      	lsls	r1, r2, #27
 8006e7a:	bf44      	itt	mi
 8006e7c:	2320      	movmi	r3, #32
 8006e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e82:	0713      	lsls	r3, r2, #28
 8006e84:	bf44      	itt	mi
 8006e86:	232b      	movmi	r3, #43	@ 0x2b
 8006e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e92:	d015      	beq.n	8006ec0 <_vfiprintf_r+0x120>
 8006e94:	9a07      	ldr	r2, [sp, #28]
 8006e96:	4654      	mov	r4, sl
 8006e98:	2000      	movs	r0, #0
 8006e9a:	f04f 0c0a 	mov.w	ip, #10
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea4:	3b30      	subs	r3, #48	@ 0x30
 8006ea6:	2b09      	cmp	r3, #9
 8006ea8:	d94b      	bls.n	8006f42 <_vfiprintf_r+0x1a2>
 8006eaa:	b1b0      	cbz	r0, 8006eda <_vfiprintf_r+0x13a>
 8006eac:	9207      	str	r2, [sp, #28]
 8006eae:	e014      	b.n	8006eda <_vfiprintf_r+0x13a>
 8006eb0:	eba0 0308 	sub.w	r3, r0, r8
 8006eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	46a2      	mov	sl, r4
 8006ebe:	e7d2      	b.n	8006e66 <_vfiprintf_r+0xc6>
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	1d19      	adds	r1, r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	9103      	str	r1, [sp, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfbb      	ittet	lt
 8006ecc:	425b      	neglt	r3, r3
 8006ece:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed2:	9307      	strge	r3, [sp, #28]
 8006ed4:	9307      	strlt	r3, [sp, #28]
 8006ed6:	bfb8      	it	lt
 8006ed8:	9204      	strlt	r2, [sp, #16]
 8006eda:	7823      	ldrb	r3, [r4, #0]
 8006edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ede:	d10a      	bne.n	8006ef6 <_vfiprintf_r+0x156>
 8006ee0:	7863      	ldrb	r3, [r4, #1]
 8006ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee4:	d132      	bne.n	8006f4c <_vfiprintf_r+0x1ac>
 8006ee6:	9b03      	ldr	r3, [sp, #12]
 8006ee8:	1d1a      	adds	r2, r3, #4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	9203      	str	r2, [sp, #12]
 8006eee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ef2:	3402      	adds	r4, #2
 8006ef4:	9305      	str	r3, [sp, #20]
 8006ef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fcc <_vfiprintf_r+0x22c>
 8006efa:	7821      	ldrb	r1, [r4, #0]
 8006efc:	2203      	movs	r2, #3
 8006efe:	4650      	mov	r0, sl
 8006f00:	f7f9 f976 	bl	80001f0 <memchr>
 8006f04:	b138      	cbz	r0, 8006f16 <_vfiprintf_r+0x176>
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	eba0 000a 	sub.w	r0, r0, sl
 8006f0c:	2240      	movs	r2, #64	@ 0x40
 8006f0e:	4082      	lsls	r2, r0
 8006f10:	4313      	orrs	r3, r2
 8006f12:	3401      	adds	r4, #1
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1a:	4829      	ldr	r0, [pc, #164]	@ (8006fc0 <_vfiprintf_r+0x220>)
 8006f1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f20:	2206      	movs	r2, #6
 8006f22:	f7f9 f965 	bl	80001f0 <memchr>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d03f      	beq.n	8006faa <_vfiprintf_r+0x20a>
 8006f2a:	4b26      	ldr	r3, [pc, #152]	@ (8006fc4 <_vfiprintf_r+0x224>)
 8006f2c:	bb1b      	cbnz	r3, 8006f76 <_vfiprintf_r+0x1d6>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	3307      	adds	r3, #7
 8006f32:	f023 0307 	bic.w	r3, r3, #7
 8006f36:	3308      	adds	r3, #8
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3c:	443b      	add	r3, r7
 8006f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f40:	e76a      	b.n	8006e18 <_vfiprintf_r+0x78>
 8006f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f46:	460c      	mov	r4, r1
 8006f48:	2001      	movs	r0, #1
 8006f4a:	e7a8      	b.n	8006e9e <_vfiprintf_r+0xfe>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	3401      	adds	r4, #1
 8006f50:	9305      	str	r3, [sp, #20]
 8006f52:	4619      	mov	r1, r3
 8006f54:	f04f 0c0a 	mov.w	ip, #10
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f5e:	3a30      	subs	r2, #48	@ 0x30
 8006f60:	2a09      	cmp	r2, #9
 8006f62:	d903      	bls.n	8006f6c <_vfiprintf_r+0x1cc>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0c6      	beq.n	8006ef6 <_vfiprintf_r+0x156>
 8006f68:	9105      	str	r1, [sp, #20]
 8006f6a:	e7c4      	b.n	8006ef6 <_vfiprintf_r+0x156>
 8006f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f70:	4604      	mov	r4, r0
 8006f72:	2301      	movs	r3, #1
 8006f74:	e7f0      	b.n	8006f58 <_vfiprintf_r+0x1b8>
 8006f76:	ab03      	add	r3, sp, #12
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4b12      	ldr	r3, [pc, #72]	@ (8006fc8 <_vfiprintf_r+0x228>)
 8006f7e:	a904      	add	r1, sp, #16
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7fd fd09 	bl	8004998 <_printf_float>
 8006f86:	4607      	mov	r7, r0
 8006f88:	1c78      	adds	r0, r7, #1
 8006f8a:	d1d6      	bne.n	8006f3a <_vfiprintf_r+0x19a>
 8006f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f8e:	07d9      	lsls	r1, r3, #31
 8006f90:	d405      	bmi.n	8006f9e <_vfiprintf_r+0x1fe>
 8006f92:	89ab      	ldrh	r3, [r5, #12]
 8006f94:	059a      	lsls	r2, r3, #22
 8006f96:	d402      	bmi.n	8006f9e <_vfiprintf_r+0x1fe>
 8006f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f9a:	f7fe fa7f 	bl	800549c <__retarget_lock_release_recursive>
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	065b      	lsls	r3, r3, #25
 8006fa2:	f53f af1f 	bmi.w	8006de4 <_vfiprintf_r+0x44>
 8006fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fa8:	e71e      	b.n	8006de8 <_vfiprintf_r+0x48>
 8006faa:	ab03      	add	r3, sp, #12
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	462a      	mov	r2, r5
 8006fb0:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <_vfiprintf_r+0x228>)
 8006fb2:	a904      	add	r1, sp, #16
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7fd ff87 	bl	8004ec8 <_printf_i>
 8006fba:	e7e4      	b.n	8006f86 <_vfiprintf_r+0x1e6>
 8006fbc:	0800995a 	.word	0x0800995a
 8006fc0:	08009964 	.word	0x08009964
 8006fc4:	08004999 	.word	0x08004999
 8006fc8:	08006d7b 	.word	0x08006d7b
 8006fcc:	08009960 	.word	0x08009960

08006fd0 <__sflush_r>:
 8006fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd8:	0716      	lsls	r6, r2, #28
 8006fda:	4605      	mov	r5, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	d454      	bmi.n	800708a <__sflush_r+0xba>
 8006fe0:	684b      	ldr	r3, [r1, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dc02      	bgt.n	8006fec <__sflush_r+0x1c>
 8006fe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dd48      	ble.n	800707e <__sflush_r+0xae>
 8006fec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	d045      	beq.n	800707e <__sflush_r+0xae>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ff8:	682f      	ldr	r7, [r5, #0]
 8006ffa:	6a21      	ldr	r1, [r4, #32]
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	d030      	beq.n	8007062 <__sflush_r+0x92>
 8007000:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	0759      	lsls	r1, r3, #29
 8007006:	d505      	bpl.n	8007014 <__sflush_r+0x44>
 8007008:	6863      	ldr	r3, [r4, #4]
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800700e:	b10b      	cbz	r3, 8007014 <__sflush_r+0x44>
 8007010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007012:	1ad2      	subs	r2, r2, r3
 8007014:	2300      	movs	r3, #0
 8007016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007018:	6a21      	ldr	r1, [r4, #32]
 800701a:	4628      	mov	r0, r5
 800701c:	47b0      	blx	r6
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	d106      	bne.n	8007032 <__sflush_r+0x62>
 8007024:	6829      	ldr	r1, [r5, #0]
 8007026:	291d      	cmp	r1, #29
 8007028:	d82b      	bhi.n	8007082 <__sflush_r+0xb2>
 800702a:	4a2a      	ldr	r2, [pc, #168]	@ (80070d4 <__sflush_r+0x104>)
 800702c:	40ca      	lsrs	r2, r1
 800702e:	07d6      	lsls	r6, r2, #31
 8007030:	d527      	bpl.n	8007082 <__sflush_r+0xb2>
 8007032:	2200      	movs	r2, #0
 8007034:	6062      	str	r2, [r4, #4]
 8007036:	04d9      	lsls	r1, r3, #19
 8007038:	6922      	ldr	r2, [r4, #16]
 800703a:	6022      	str	r2, [r4, #0]
 800703c:	d504      	bpl.n	8007048 <__sflush_r+0x78>
 800703e:	1c42      	adds	r2, r0, #1
 8007040:	d101      	bne.n	8007046 <__sflush_r+0x76>
 8007042:	682b      	ldr	r3, [r5, #0]
 8007044:	b903      	cbnz	r3, 8007048 <__sflush_r+0x78>
 8007046:	6560      	str	r0, [r4, #84]	@ 0x54
 8007048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800704a:	602f      	str	r7, [r5, #0]
 800704c:	b1b9      	cbz	r1, 800707e <__sflush_r+0xae>
 800704e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007052:	4299      	cmp	r1, r3
 8007054:	d002      	beq.n	800705c <__sflush_r+0x8c>
 8007056:	4628      	mov	r0, r5
 8007058:	f7ff f8a6 	bl	80061a8 <_free_r>
 800705c:	2300      	movs	r3, #0
 800705e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007060:	e00d      	b.n	800707e <__sflush_r+0xae>
 8007062:	2301      	movs	r3, #1
 8007064:	4628      	mov	r0, r5
 8007066:	47b0      	blx	r6
 8007068:	4602      	mov	r2, r0
 800706a:	1c50      	adds	r0, r2, #1
 800706c:	d1c9      	bne.n	8007002 <__sflush_r+0x32>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0c6      	beq.n	8007002 <__sflush_r+0x32>
 8007074:	2b1d      	cmp	r3, #29
 8007076:	d001      	beq.n	800707c <__sflush_r+0xac>
 8007078:	2b16      	cmp	r3, #22
 800707a:	d11e      	bne.n	80070ba <__sflush_r+0xea>
 800707c:	602f      	str	r7, [r5, #0]
 800707e:	2000      	movs	r0, #0
 8007080:	e022      	b.n	80070c8 <__sflush_r+0xf8>
 8007082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007086:	b21b      	sxth	r3, r3
 8007088:	e01b      	b.n	80070c2 <__sflush_r+0xf2>
 800708a:	690f      	ldr	r7, [r1, #16]
 800708c:	2f00      	cmp	r7, #0
 800708e:	d0f6      	beq.n	800707e <__sflush_r+0xae>
 8007090:	0793      	lsls	r3, r2, #30
 8007092:	680e      	ldr	r6, [r1, #0]
 8007094:	bf08      	it	eq
 8007096:	694b      	ldreq	r3, [r1, #20]
 8007098:	600f      	str	r7, [r1, #0]
 800709a:	bf18      	it	ne
 800709c:	2300      	movne	r3, #0
 800709e:	eba6 0807 	sub.w	r8, r6, r7
 80070a2:	608b      	str	r3, [r1, #8]
 80070a4:	f1b8 0f00 	cmp.w	r8, #0
 80070a8:	dde9      	ble.n	800707e <__sflush_r+0xae>
 80070aa:	6a21      	ldr	r1, [r4, #32]
 80070ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070ae:	4643      	mov	r3, r8
 80070b0:	463a      	mov	r2, r7
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b0      	blx	r6
 80070b6:	2800      	cmp	r0, #0
 80070b8:	dc08      	bgt.n	80070cc <__sflush_r+0xfc>
 80070ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	4407      	add	r7, r0
 80070ce:	eba8 0800 	sub.w	r8, r8, r0
 80070d2:	e7e7      	b.n	80070a4 <__sflush_r+0xd4>
 80070d4:	20400001 	.word	0x20400001

080070d8 <_fflush_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	690b      	ldr	r3, [r1, #16]
 80070dc:	4605      	mov	r5, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	b913      	cbnz	r3, 80070e8 <_fflush_r+0x10>
 80070e2:	2500      	movs	r5, #0
 80070e4:	4628      	mov	r0, r5
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	b118      	cbz	r0, 80070f2 <_fflush_r+0x1a>
 80070ea:	6a03      	ldr	r3, [r0, #32]
 80070ec:	b90b      	cbnz	r3, 80070f2 <_fflush_r+0x1a>
 80070ee:	f7fe f895 	bl	800521c <__sinit>
 80070f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0f3      	beq.n	80070e2 <_fflush_r+0xa>
 80070fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070fc:	07d0      	lsls	r0, r2, #31
 80070fe:	d404      	bmi.n	800710a <_fflush_r+0x32>
 8007100:	0599      	lsls	r1, r3, #22
 8007102:	d402      	bmi.n	800710a <_fflush_r+0x32>
 8007104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007106:	f7fe f9c8 	bl	800549a <__retarget_lock_acquire_recursive>
 800710a:	4628      	mov	r0, r5
 800710c:	4621      	mov	r1, r4
 800710e:	f7ff ff5f 	bl	8006fd0 <__sflush_r>
 8007112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007114:	07da      	lsls	r2, r3, #31
 8007116:	4605      	mov	r5, r0
 8007118:	d4e4      	bmi.n	80070e4 <_fflush_r+0xc>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	059b      	lsls	r3, r3, #22
 800711e:	d4e1      	bmi.n	80070e4 <_fflush_r+0xc>
 8007120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007122:	f7fe f9bb 	bl	800549c <__retarget_lock_release_recursive>
 8007126:	e7dd      	b.n	80070e4 <_fflush_r+0xc>

08007128 <fiprintf>:
 8007128:	b40e      	push	{r1, r2, r3}
 800712a:	b503      	push	{r0, r1, lr}
 800712c:	4601      	mov	r1, r0
 800712e:	ab03      	add	r3, sp, #12
 8007130:	4805      	ldr	r0, [pc, #20]	@ (8007148 <fiprintf+0x20>)
 8007132:	f853 2b04 	ldr.w	r2, [r3], #4
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	f7ff fe31 	bl	8006da0 <_vfiprintf_r>
 800713e:	b002      	add	sp, #8
 8007140:	f85d eb04 	ldr.w	lr, [sp], #4
 8007144:	b003      	add	sp, #12
 8007146:	4770      	bx	lr
 8007148:	20000040 	.word	0x20000040

0800714c <__swbuf_r>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	460e      	mov	r6, r1
 8007150:	4614      	mov	r4, r2
 8007152:	4605      	mov	r5, r0
 8007154:	b118      	cbz	r0, 800715e <__swbuf_r+0x12>
 8007156:	6a03      	ldr	r3, [r0, #32]
 8007158:	b90b      	cbnz	r3, 800715e <__swbuf_r+0x12>
 800715a:	f7fe f85f 	bl	800521c <__sinit>
 800715e:	69a3      	ldr	r3, [r4, #24]
 8007160:	60a3      	str	r3, [r4, #8]
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	071a      	lsls	r2, r3, #28
 8007166:	d501      	bpl.n	800716c <__swbuf_r+0x20>
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	b943      	cbnz	r3, 800717e <__swbuf_r+0x32>
 800716c:	4621      	mov	r1, r4
 800716e:	4628      	mov	r0, r5
 8007170:	f000 f82a 	bl	80071c8 <__swsetup_r>
 8007174:	b118      	cbz	r0, 800717e <__swbuf_r+0x32>
 8007176:	f04f 37ff 	mov.w	r7, #4294967295
 800717a:	4638      	mov	r0, r7
 800717c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	6922      	ldr	r2, [r4, #16]
 8007182:	1a98      	subs	r0, r3, r2
 8007184:	6963      	ldr	r3, [r4, #20]
 8007186:	b2f6      	uxtb	r6, r6
 8007188:	4283      	cmp	r3, r0
 800718a:	4637      	mov	r7, r6
 800718c:	dc05      	bgt.n	800719a <__swbuf_r+0x4e>
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f7ff ffa1 	bl	80070d8 <_fflush_r>
 8007196:	2800      	cmp	r0, #0
 8007198:	d1ed      	bne.n	8007176 <__swbuf_r+0x2a>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	6022      	str	r2, [r4, #0]
 80071a6:	701e      	strb	r6, [r3, #0]
 80071a8:	6962      	ldr	r2, [r4, #20]
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d004      	beq.n	80071ba <__swbuf_r+0x6e>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	07db      	lsls	r3, r3, #31
 80071b4:	d5e1      	bpl.n	800717a <__swbuf_r+0x2e>
 80071b6:	2e0a      	cmp	r6, #10
 80071b8:	d1df      	bne.n	800717a <__swbuf_r+0x2e>
 80071ba:	4621      	mov	r1, r4
 80071bc:	4628      	mov	r0, r5
 80071be:	f7ff ff8b 	bl	80070d8 <_fflush_r>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d0d9      	beq.n	800717a <__swbuf_r+0x2e>
 80071c6:	e7d6      	b.n	8007176 <__swbuf_r+0x2a>

080071c8 <__swsetup_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <__swsetup_r+0xa8>)
 80071cc:	4605      	mov	r5, r0
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	460c      	mov	r4, r1
 80071d2:	b118      	cbz	r0, 80071dc <__swsetup_r+0x14>
 80071d4:	6a03      	ldr	r3, [r0, #32]
 80071d6:	b90b      	cbnz	r3, 80071dc <__swsetup_r+0x14>
 80071d8:	f7fe f820 	bl	800521c <__sinit>
 80071dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e0:	0719      	lsls	r1, r3, #28
 80071e2:	d422      	bmi.n	800722a <__swsetup_r+0x62>
 80071e4:	06da      	lsls	r2, r3, #27
 80071e6:	d407      	bmi.n	80071f8 <__swsetup_r+0x30>
 80071e8:	2209      	movs	r2, #9
 80071ea:	602a      	str	r2, [r5, #0]
 80071ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	e033      	b.n	8007260 <__swsetup_r+0x98>
 80071f8:	0758      	lsls	r0, r3, #29
 80071fa:	d512      	bpl.n	8007222 <__swsetup_r+0x5a>
 80071fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071fe:	b141      	cbz	r1, 8007212 <__swsetup_r+0x4a>
 8007200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007204:	4299      	cmp	r1, r3
 8007206:	d002      	beq.n	800720e <__swsetup_r+0x46>
 8007208:	4628      	mov	r0, r5
 800720a:	f7fe ffcd 	bl	80061a8 <_free_r>
 800720e:	2300      	movs	r3, #0
 8007210:	6363      	str	r3, [r4, #52]	@ 0x34
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	2300      	movs	r3, #0
 800721c:	6063      	str	r3, [r4, #4]
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	f043 0308 	orr.w	r3, r3, #8
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	b94b      	cbnz	r3, 8007242 <__swsetup_r+0x7a>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007238:	d003      	beq.n	8007242 <__swsetup_r+0x7a>
 800723a:	4621      	mov	r1, r4
 800723c:	4628      	mov	r0, r5
 800723e:	f000 f8d1 	bl	80073e4 <__smakebuf_r>
 8007242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007246:	f013 0201 	ands.w	r2, r3, #1
 800724a:	d00a      	beq.n	8007262 <__swsetup_r+0x9a>
 800724c:	2200      	movs	r2, #0
 800724e:	60a2      	str	r2, [r4, #8]
 8007250:	6962      	ldr	r2, [r4, #20]
 8007252:	4252      	negs	r2, r2
 8007254:	61a2      	str	r2, [r4, #24]
 8007256:	6922      	ldr	r2, [r4, #16]
 8007258:	b942      	cbnz	r2, 800726c <__swsetup_r+0xa4>
 800725a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800725e:	d1c5      	bne.n	80071ec <__swsetup_r+0x24>
 8007260:	bd38      	pop	{r3, r4, r5, pc}
 8007262:	0799      	lsls	r1, r3, #30
 8007264:	bf58      	it	pl
 8007266:	6962      	ldrpl	r2, [r4, #20]
 8007268:	60a2      	str	r2, [r4, #8]
 800726a:	e7f4      	b.n	8007256 <__swsetup_r+0x8e>
 800726c:	2000      	movs	r0, #0
 800726e:	e7f7      	b.n	8007260 <__swsetup_r+0x98>
 8007270:	20000040 	.word	0x20000040

08007274 <memmove>:
 8007274:	4288      	cmp	r0, r1
 8007276:	b510      	push	{r4, lr}
 8007278:	eb01 0402 	add.w	r4, r1, r2
 800727c:	d902      	bls.n	8007284 <memmove+0x10>
 800727e:	4284      	cmp	r4, r0
 8007280:	4623      	mov	r3, r4
 8007282:	d807      	bhi.n	8007294 <memmove+0x20>
 8007284:	1e43      	subs	r3, r0, #1
 8007286:	42a1      	cmp	r1, r4
 8007288:	d008      	beq.n	800729c <memmove+0x28>
 800728a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800728e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007292:	e7f8      	b.n	8007286 <memmove+0x12>
 8007294:	4402      	add	r2, r0
 8007296:	4601      	mov	r1, r0
 8007298:	428a      	cmp	r2, r1
 800729a:	d100      	bne.n	800729e <memmove+0x2a>
 800729c:	bd10      	pop	{r4, pc}
 800729e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072a6:	e7f7      	b.n	8007298 <memmove+0x24>

080072a8 <_sbrk_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d06      	ldr	r5, [pc, #24]	@ (80072c4 <_sbrk_r+0x1c>)
 80072ac:	2300      	movs	r3, #0
 80072ae:	4604      	mov	r4, r0
 80072b0:	4608      	mov	r0, r1
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	f7fb fda2 	bl	8002dfc <_sbrk>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_sbrk_r+0x1a>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_sbrk_r+0x1a>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	200003a4 	.word	0x200003a4

080072c8 <abort>:
 80072c8:	b508      	push	{r3, lr}
 80072ca:	2006      	movs	r0, #6
 80072cc:	f000 f8ee 	bl	80074ac <raise>
 80072d0:	2001      	movs	r0, #1
 80072d2:	f7fb fd1a 	bl	8002d0a <_exit>

080072d6 <_calloc_r>:
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	fba1 5402 	umull	r5, r4, r1, r2
 80072dc:	b934      	cbnz	r4, 80072ec <_calloc_r+0x16>
 80072de:	4629      	mov	r1, r5
 80072e0:	f7fe ffd6 	bl	8006290 <_malloc_r>
 80072e4:	4606      	mov	r6, r0
 80072e6:	b928      	cbnz	r0, 80072f4 <_calloc_r+0x1e>
 80072e8:	4630      	mov	r0, r6
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	220c      	movs	r2, #12
 80072ee:	6002      	str	r2, [r0, #0]
 80072f0:	2600      	movs	r6, #0
 80072f2:	e7f9      	b.n	80072e8 <_calloc_r+0x12>
 80072f4:	462a      	mov	r2, r5
 80072f6:	4621      	mov	r1, r4
 80072f8:	f7fe f851 	bl	800539e <memset>
 80072fc:	e7f4      	b.n	80072e8 <_calloc_r+0x12>

080072fe <__ascii_mbtowc>:
 80072fe:	b082      	sub	sp, #8
 8007300:	b901      	cbnz	r1, 8007304 <__ascii_mbtowc+0x6>
 8007302:	a901      	add	r1, sp, #4
 8007304:	b142      	cbz	r2, 8007318 <__ascii_mbtowc+0x1a>
 8007306:	b14b      	cbz	r3, 800731c <__ascii_mbtowc+0x1e>
 8007308:	7813      	ldrb	r3, [r2, #0]
 800730a:	600b      	str	r3, [r1, #0]
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	1e10      	subs	r0, r2, #0
 8007310:	bf18      	it	ne
 8007312:	2001      	movne	r0, #1
 8007314:	b002      	add	sp, #8
 8007316:	4770      	bx	lr
 8007318:	4610      	mov	r0, r2
 800731a:	e7fb      	b.n	8007314 <__ascii_mbtowc+0x16>
 800731c:	f06f 0001 	mvn.w	r0, #1
 8007320:	e7f8      	b.n	8007314 <__ascii_mbtowc+0x16>

08007322 <_realloc_r>:
 8007322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	4607      	mov	r7, r0
 8007328:	4614      	mov	r4, r2
 800732a:	460d      	mov	r5, r1
 800732c:	b921      	cbnz	r1, 8007338 <_realloc_r+0x16>
 800732e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007332:	4611      	mov	r1, r2
 8007334:	f7fe bfac 	b.w	8006290 <_malloc_r>
 8007338:	b92a      	cbnz	r2, 8007346 <_realloc_r+0x24>
 800733a:	f7fe ff35 	bl	80061a8 <_free_r>
 800733e:	4625      	mov	r5, r4
 8007340:	4628      	mov	r0, r5
 8007342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007346:	f000 f8ef 	bl	8007528 <_malloc_usable_size_r>
 800734a:	4284      	cmp	r4, r0
 800734c:	4606      	mov	r6, r0
 800734e:	d802      	bhi.n	8007356 <_realloc_r+0x34>
 8007350:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007354:	d8f4      	bhi.n	8007340 <_realloc_r+0x1e>
 8007356:	4621      	mov	r1, r4
 8007358:	4638      	mov	r0, r7
 800735a:	f7fe ff99 	bl	8006290 <_malloc_r>
 800735e:	4680      	mov	r8, r0
 8007360:	b908      	cbnz	r0, 8007366 <_realloc_r+0x44>
 8007362:	4645      	mov	r5, r8
 8007364:	e7ec      	b.n	8007340 <_realloc_r+0x1e>
 8007366:	42b4      	cmp	r4, r6
 8007368:	4622      	mov	r2, r4
 800736a:	4629      	mov	r1, r5
 800736c:	bf28      	it	cs
 800736e:	4632      	movcs	r2, r6
 8007370:	f7fe f895 	bl	800549e <memcpy>
 8007374:	4629      	mov	r1, r5
 8007376:	4638      	mov	r0, r7
 8007378:	f7fe ff16 	bl	80061a8 <_free_r>
 800737c:	e7f1      	b.n	8007362 <_realloc_r+0x40>

0800737e <__ascii_wctomb>:
 800737e:	4603      	mov	r3, r0
 8007380:	4608      	mov	r0, r1
 8007382:	b141      	cbz	r1, 8007396 <__ascii_wctomb+0x18>
 8007384:	2aff      	cmp	r2, #255	@ 0xff
 8007386:	d904      	bls.n	8007392 <__ascii_wctomb+0x14>
 8007388:	228a      	movs	r2, #138	@ 0x8a
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	4770      	bx	lr
 8007392:	700a      	strb	r2, [r1, #0]
 8007394:	2001      	movs	r0, #1
 8007396:	4770      	bx	lr

08007398 <__swhatbuf_r>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	460c      	mov	r4, r1
 800739c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a0:	2900      	cmp	r1, #0
 80073a2:	b096      	sub	sp, #88	@ 0x58
 80073a4:	4615      	mov	r5, r2
 80073a6:	461e      	mov	r6, r3
 80073a8:	da0d      	bge.n	80073c6 <__swhatbuf_r+0x2e>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073b0:	f04f 0100 	mov.w	r1, #0
 80073b4:	bf14      	ite	ne
 80073b6:	2340      	movne	r3, #64	@ 0x40
 80073b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073bc:	2000      	movs	r0, #0
 80073be:	6031      	str	r1, [r6, #0]
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	b016      	add	sp, #88	@ 0x58
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
 80073c6:	466a      	mov	r2, sp
 80073c8:	f000 f878 	bl	80074bc <_fstat_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	dbec      	blt.n	80073aa <__swhatbuf_r+0x12>
 80073d0:	9901      	ldr	r1, [sp, #4]
 80073d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073da:	4259      	negs	r1, r3
 80073dc:	4159      	adcs	r1, r3
 80073de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073e2:	e7eb      	b.n	80073bc <__swhatbuf_r+0x24>

080073e4 <__smakebuf_r>:
 80073e4:	898b      	ldrh	r3, [r1, #12]
 80073e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e8:	079d      	lsls	r5, r3, #30
 80073ea:	4606      	mov	r6, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	d507      	bpl.n	8007400 <__smakebuf_r+0x1c>
 80073f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	2301      	movs	r3, #1
 80073fa:	6163      	str	r3, [r4, #20]
 80073fc:	b003      	add	sp, #12
 80073fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007400:	ab01      	add	r3, sp, #4
 8007402:	466a      	mov	r2, sp
 8007404:	f7ff ffc8 	bl	8007398 <__swhatbuf_r>
 8007408:	9f00      	ldr	r7, [sp, #0]
 800740a:	4605      	mov	r5, r0
 800740c:	4639      	mov	r1, r7
 800740e:	4630      	mov	r0, r6
 8007410:	f7fe ff3e 	bl	8006290 <_malloc_r>
 8007414:	b948      	cbnz	r0, 800742a <__smakebuf_r+0x46>
 8007416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800741a:	059a      	lsls	r2, r3, #22
 800741c:	d4ee      	bmi.n	80073fc <__smakebuf_r+0x18>
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	f043 0302 	orr.w	r3, r3, #2
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	e7e2      	b.n	80073f0 <__smakebuf_r+0xc>
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	6020      	str	r0, [r4, #0]
 800742e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800743a:	b15b      	cbz	r3, 8007454 <__smakebuf_r+0x70>
 800743c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007440:	4630      	mov	r0, r6
 8007442:	f000 f84d 	bl	80074e0 <_isatty_r>
 8007446:	b128      	cbz	r0, 8007454 <__smakebuf_r+0x70>
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	431d      	orrs	r5, r3
 8007458:	81a5      	strh	r5, [r4, #12]
 800745a:	e7cf      	b.n	80073fc <__smakebuf_r+0x18>

0800745c <_raise_r>:
 800745c:	291f      	cmp	r1, #31
 800745e:	b538      	push	{r3, r4, r5, lr}
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	d904      	bls.n	8007470 <_raise_r+0x14>
 8007466:	2316      	movs	r3, #22
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007472:	b112      	cbz	r2, 800747a <_raise_r+0x1e>
 8007474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007478:	b94b      	cbnz	r3, 800748e <_raise_r+0x32>
 800747a:	4628      	mov	r0, r5
 800747c:	f000 f852 	bl	8007524 <_getpid_r>
 8007480:	4622      	mov	r2, r4
 8007482:	4601      	mov	r1, r0
 8007484:	4628      	mov	r0, r5
 8007486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800748a:	f000 b839 	b.w	8007500 <_kill_r>
 800748e:	2b01      	cmp	r3, #1
 8007490:	d00a      	beq.n	80074a8 <_raise_r+0x4c>
 8007492:	1c59      	adds	r1, r3, #1
 8007494:	d103      	bne.n	800749e <_raise_r+0x42>
 8007496:	2316      	movs	r3, #22
 8007498:	6003      	str	r3, [r0, #0]
 800749a:	2001      	movs	r0, #1
 800749c:	e7e7      	b.n	800746e <_raise_r+0x12>
 800749e:	2100      	movs	r1, #0
 80074a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074a4:	4620      	mov	r0, r4
 80074a6:	4798      	blx	r3
 80074a8:	2000      	movs	r0, #0
 80074aa:	e7e0      	b.n	800746e <_raise_r+0x12>

080074ac <raise>:
 80074ac:	4b02      	ldr	r3, [pc, #8]	@ (80074b8 <raise+0xc>)
 80074ae:	4601      	mov	r1, r0
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	f7ff bfd3 	b.w	800745c <_raise_r>
 80074b6:	bf00      	nop
 80074b8:	20000040 	.word	0x20000040

080074bc <_fstat_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4d07      	ldr	r5, [pc, #28]	@ (80074dc <_fstat_r+0x20>)
 80074c0:	2300      	movs	r3, #0
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	f7fb fc6e 	bl	8002daa <_fstat>
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	d102      	bne.n	80074d8 <_fstat_r+0x1c>
 80074d2:	682b      	ldr	r3, [r5, #0]
 80074d4:	b103      	cbz	r3, 80074d8 <_fstat_r+0x1c>
 80074d6:	6023      	str	r3, [r4, #0]
 80074d8:	bd38      	pop	{r3, r4, r5, pc}
 80074da:	bf00      	nop
 80074dc:	200003a4 	.word	0x200003a4

080074e0 <_isatty_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d06      	ldr	r5, [pc, #24]	@ (80074fc <_isatty_r+0x1c>)
 80074e4:	2300      	movs	r3, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	f7fb fc6d 	bl	8002dca <_isatty>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_isatty_r+0x1a>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_isatty_r+0x1a>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	200003a4 	.word	0x200003a4

08007500 <_kill_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	@ (8007520 <_kill_r+0x20>)
 8007504:	2300      	movs	r3, #0
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	4611      	mov	r1, r2
 800750c:	602b      	str	r3, [r5, #0]
 800750e:	f7fb fbec 	bl	8002cea <_kill>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d102      	bne.n	800751c <_kill_r+0x1c>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	b103      	cbz	r3, 800751c <_kill_r+0x1c>
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	bd38      	pop	{r3, r4, r5, pc}
 800751e:	bf00      	nop
 8007520:	200003a4 	.word	0x200003a4

08007524 <_getpid_r>:
 8007524:	f7fb bbd9 	b.w	8002cda <_getpid>

08007528 <_malloc_usable_size_r>:
 8007528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800752c:	1f18      	subs	r0, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	bfbc      	itt	lt
 8007532:	580b      	ldrlt	r3, [r1, r0]
 8007534:	18c0      	addlt	r0, r0, r3
 8007536:	4770      	bx	lr

08007538 <exp>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	ed2d 8b02 	vpush	{d8}
 800753e:	ec55 4b10 	vmov	r4, r5, d0
 8007542:	f000 fb99 	bl	8007c78 <__ieee754_exp>
 8007546:	eeb0 8a40 	vmov.f32	s16, s0
 800754a:	eef0 8a60 	vmov.f32	s17, s1
 800754e:	ec45 4b10 	vmov	d0, r4, r5
 8007552:	f000 f929 	bl	80077a8 <finite>
 8007556:	b168      	cbz	r0, 8007574 <exp+0x3c>
 8007558:	a317      	add	r3, pc, #92	@ (adr r3, 80075b8 <exp+0x80>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	4620      	mov	r0, r4
 8007560:	4629      	mov	r1, r5
 8007562:	f7f9 fae9 	bl	8000b38 <__aeabi_dcmpgt>
 8007566:	b160      	cbz	r0, 8007582 <exp+0x4a>
 8007568:	f7fd ff6c 	bl	8005444 <__errno>
 800756c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80075a8 <exp+0x70>
 8007570:	2322      	movs	r3, #34	@ 0x22
 8007572:	6003      	str	r3, [r0, #0]
 8007574:	eeb0 0a48 	vmov.f32	s0, s16
 8007578:	eef0 0a68 	vmov.f32	s1, s17
 800757c:	ecbd 8b02 	vpop	{d8}
 8007580:	bd38      	pop	{r3, r4, r5, pc}
 8007582:	a30f      	add	r3, pc, #60	@ (adr r3, 80075c0 <exp+0x88>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	4620      	mov	r0, r4
 800758a:	4629      	mov	r1, r5
 800758c:	f7f9 fab6 	bl	8000afc <__aeabi_dcmplt>
 8007590:	2800      	cmp	r0, #0
 8007592:	d0ef      	beq.n	8007574 <exp+0x3c>
 8007594:	f7fd ff56 	bl	8005444 <__errno>
 8007598:	2322      	movs	r3, #34	@ 0x22
 800759a:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80075b0 <exp+0x78>
 800759e:	6003      	str	r3, [r0, #0]
 80075a0:	e7e8      	b.n	8007574 <exp+0x3c>
 80075a2:	bf00      	nop
 80075a4:	f3af 8000 	nop.w
 80075a8:	00000000 	.word	0x00000000
 80075ac:	7ff00000 	.word	0x7ff00000
	...
 80075b8:	fefa39ef 	.word	0xfefa39ef
 80075bc:	40862e42 	.word	0x40862e42
 80075c0:	d52d3051 	.word	0xd52d3051
 80075c4:	c0874910 	.word	0xc0874910

080075c8 <pow>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	ed2d 8b02 	vpush	{d8}
 80075ce:	eeb0 8a40 	vmov.f32	s16, s0
 80075d2:	eef0 8a60 	vmov.f32	s17, s1
 80075d6:	ec55 4b11 	vmov	r4, r5, d1
 80075da:	f000 fcc9 	bl	8007f70 <__ieee754_pow>
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	4620      	mov	r0, r4
 80075e4:	4629      	mov	r1, r5
 80075e6:	ec57 6b10 	vmov	r6, r7, d0
 80075ea:	f7f9 faaf 	bl	8000b4c <__aeabi_dcmpun>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d13b      	bne.n	800766a <pow+0xa2>
 80075f2:	ec51 0b18 	vmov	r0, r1, d8
 80075f6:	2200      	movs	r2, #0
 80075f8:	2300      	movs	r3, #0
 80075fa:	f7f9 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 80075fe:	b1b8      	cbz	r0, 8007630 <pow+0x68>
 8007600:	2200      	movs	r2, #0
 8007602:	2300      	movs	r3, #0
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f9 fa6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800760c:	2800      	cmp	r0, #0
 800760e:	d146      	bne.n	800769e <pow+0xd6>
 8007610:	ec45 4b10 	vmov	d0, r4, r5
 8007614:	f000 f8c8 	bl	80077a8 <finite>
 8007618:	b338      	cbz	r0, 800766a <pow+0xa2>
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	4620      	mov	r0, r4
 8007620:	4629      	mov	r1, r5
 8007622:	f7f9 fa6b 	bl	8000afc <__aeabi_dcmplt>
 8007626:	b300      	cbz	r0, 800766a <pow+0xa2>
 8007628:	f7fd ff0c 	bl	8005444 <__errno>
 800762c:	2322      	movs	r3, #34	@ 0x22
 800762e:	e01b      	b.n	8007668 <pow+0xa0>
 8007630:	ec47 6b10 	vmov	d0, r6, r7
 8007634:	f000 f8b8 	bl	80077a8 <finite>
 8007638:	b9e0      	cbnz	r0, 8007674 <pow+0xac>
 800763a:	eeb0 0a48 	vmov.f32	s0, s16
 800763e:	eef0 0a68 	vmov.f32	s1, s17
 8007642:	f000 f8b1 	bl	80077a8 <finite>
 8007646:	b1a8      	cbz	r0, 8007674 <pow+0xac>
 8007648:	ec45 4b10 	vmov	d0, r4, r5
 800764c:	f000 f8ac 	bl	80077a8 <finite>
 8007650:	b180      	cbz	r0, 8007674 <pow+0xac>
 8007652:	4632      	mov	r2, r6
 8007654:	463b      	mov	r3, r7
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7f9 fa77 	bl	8000b4c <__aeabi_dcmpun>
 800765e:	2800      	cmp	r0, #0
 8007660:	d0e2      	beq.n	8007628 <pow+0x60>
 8007662:	f7fd feef 	bl	8005444 <__errno>
 8007666:	2321      	movs	r3, #33	@ 0x21
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	ecbd 8b02 	vpop	{d8}
 800766e:	ec47 6b10 	vmov	d0, r6, r7
 8007672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa34 	bl	8000ae8 <__aeabi_dcmpeq>
 8007680:	2800      	cmp	r0, #0
 8007682:	d0f2      	beq.n	800766a <pow+0xa2>
 8007684:	eeb0 0a48 	vmov.f32	s0, s16
 8007688:	eef0 0a68 	vmov.f32	s1, s17
 800768c:	f000 f88c 	bl	80077a8 <finite>
 8007690:	2800      	cmp	r0, #0
 8007692:	d0ea      	beq.n	800766a <pow+0xa2>
 8007694:	ec45 4b10 	vmov	d0, r4, r5
 8007698:	f000 f886 	bl	80077a8 <finite>
 800769c:	e7c3      	b.n	8007626 <pow+0x5e>
 800769e:	4f01      	ldr	r7, [pc, #4]	@ (80076a4 <pow+0xdc>)
 80076a0:	2600      	movs	r6, #0
 80076a2:	e7e2      	b.n	800766a <pow+0xa2>
 80076a4:	3ff00000 	.word	0x3ff00000

080076a8 <sqrt>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	ed2d 8b02 	vpush	{d8}
 80076ae:	ec55 4b10 	vmov	r4, r5, d0
 80076b2:	f000 f885 	bl	80077c0 <__ieee754_sqrt>
 80076b6:	4622      	mov	r2, r4
 80076b8:	462b      	mov	r3, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	4629      	mov	r1, r5
 80076be:	eeb0 8a40 	vmov.f32	s16, s0
 80076c2:	eef0 8a60 	vmov.f32	s17, s1
 80076c6:	f7f9 fa41 	bl	8000b4c <__aeabi_dcmpun>
 80076ca:	b990      	cbnz	r0, 80076f2 <sqrt+0x4a>
 80076cc:	2200      	movs	r2, #0
 80076ce:	2300      	movs	r3, #0
 80076d0:	4620      	mov	r0, r4
 80076d2:	4629      	mov	r1, r5
 80076d4:	f7f9 fa12 	bl	8000afc <__aeabi_dcmplt>
 80076d8:	b158      	cbz	r0, 80076f2 <sqrt+0x4a>
 80076da:	f7fd feb3 	bl	8005444 <__errno>
 80076de:	2321      	movs	r3, #33	@ 0x21
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	2300      	movs	r3, #0
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	f7f9 f8bf 	bl	800086c <__aeabi_ddiv>
 80076ee:	ec41 0b18 	vmov	d8, r0, r1
 80076f2:	eeb0 0a48 	vmov.f32	s0, s16
 80076f6:	eef0 0a68 	vmov.f32	s1, s17
 80076fa:	ecbd 8b02 	vpop	{d8}
 80076fe:	bd38      	pop	{r3, r4, r5, pc}

08007700 <sin>:
 8007700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007702:	ec53 2b10 	vmov	r2, r3, d0
 8007706:	4826      	ldr	r0, [pc, #152]	@ (80077a0 <sin+0xa0>)
 8007708:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800770c:	4281      	cmp	r1, r0
 800770e:	d807      	bhi.n	8007720 <sin+0x20>
 8007710:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007798 <sin+0x98>
 8007714:	2000      	movs	r0, #0
 8007716:	b005      	add	sp, #20
 8007718:	f85d eb04 	ldr.w	lr, [sp], #4
 800771c:	f000 b9f0 	b.w	8007b00 <__kernel_sin>
 8007720:	4820      	ldr	r0, [pc, #128]	@ (80077a4 <sin+0xa4>)
 8007722:	4281      	cmp	r1, r0
 8007724:	d908      	bls.n	8007738 <sin+0x38>
 8007726:	4610      	mov	r0, r2
 8007728:	4619      	mov	r1, r3
 800772a:	f7f8 fdbd 	bl	80002a8 <__aeabi_dsub>
 800772e:	ec41 0b10 	vmov	d0, r0, r1
 8007732:	b005      	add	sp, #20
 8007734:	f85d fb04 	ldr.w	pc, [sp], #4
 8007738:	4668      	mov	r0, sp
 800773a:	f001 f965 	bl	8008a08 <__ieee754_rem_pio2>
 800773e:	f000 0003 	and.w	r0, r0, #3
 8007742:	2801      	cmp	r0, #1
 8007744:	d00c      	beq.n	8007760 <sin+0x60>
 8007746:	2802      	cmp	r0, #2
 8007748:	d011      	beq.n	800776e <sin+0x6e>
 800774a:	b9e8      	cbnz	r0, 8007788 <sin+0x88>
 800774c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007750:	ed9d 0b00 	vldr	d0, [sp]
 8007754:	2001      	movs	r0, #1
 8007756:	f000 f9d3 	bl	8007b00 <__kernel_sin>
 800775a:	ec51 0b10 	vmov	r0, r1, d0
 800775e:	e7e6      	b.n	800772e <sin+0x2e>
 8007760:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007764:	ed9d 0b00 	vldr	d0, [sp]
 8007768:	f000 f902 	bl	8007970 <__kernel_cos>
 800776c:	e7f5      	b.n	800775a <sin+0x5a>
 800776e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007772:	ed9d 0b00 	vldr	d0, [sp]
 8007776:	2001      	movs	r0, #1
 8007778:	f000 f9c2 	bl	8007b00 <__kernel_sin>
 800777c:	ec53 2b10 	vmov	r2, r3, d0
 8007780:	4610      	mov	r0, r2
 8007782:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007786:	e7d2      	b.n	800772e <sin+0x2e>
 8007788:	ed9d 1b02 	vldr	d1, [sp, #8]
 800778c:	ed9d 0b00 	vldr	d0, [sp]
 8007790:	f000 f8ee 	bl	8007970 <__kernel_cos>
 8007794:	e7f2      	b.n	800777c <sin+0x7c>
 8007796:	bf00      	nop
	...
 80077a0:	3fe921fb 	.word	0x3fe921fb
 80077a4:	7fefffff 	.word	0x7fefffff

080077a8 <finite>:
 80077a8:	b082      	sub	sp, #8
 80077aa:	ed8d 0b00 	vstr	d0, [sp]
 80077ae:	9801      	ldr	r0, [sp, #4]
 80077b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80077b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80077b8:	0fc0      	lsrs	r0, r0, #31
 80077ba:	b002      	add	sp, #8
 80077bc:	4770      	bx	lr
	...

080077c0 <__ieee754_sqrt>:
 80077c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	4a66      	ldr	r2, [pc, #408]	@ (8007960 <__ieee754_sqrt+0x1a0>)
 80077c6:	ec55 4b10 	vmov	r4, r5, d0
 80077ca:	43aa      	bics	r2, r5
 80077cc:	462b      	mov	r3, r5
 80077ce:	4621      	mov	r1, r4
 80077d0:	d110      	bne.n	80077f4 <__ieee754_sqrt+0x34>
 80077d2:	4622      	mov	r2, r4
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	f7f8 ff1e 	bl	8000618 <__aeabi_dmul>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 fd62 	bl	80002ac <__adddf3>
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	ec45 4b10 	vmov	d0, r4, r5
 80077f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	dc0e      	bgt.n	8007816 <__ieee754_sqrt+0x56>
 80077f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80077fc:	4322      	orrs	r2, r4
 80077fe:	d0f5      	beq.n	80077ec <__ieee754_sqrt+0x2c>
 8007800:	b19d      	cbz	r5, 800782a <__ieee754_sqrt+0x6a>
 8007802:	4622      	mov	r2, r4
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 fd4e 	bl	80002a8 <__aeabi_dsub>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	f7f9 f82c 	bl	800086c <__aeabi_ddiv>
 8007814:	e7e8      	b.n	80077e8 <__ieee754_sqrt+0x28>
 8007816:	152a      	asrs	r2, r5, #20
 8007818:	d115      	bne.n	8007846 <__ieee754_sqrt+0x86>
 800781a:	2000      	movs	r0, #0
 800781c:	e009      	b.n	8007832 <__ieee754_sqrt+0x72>
 800781e:	0acb      	lsrs	r3, r1, #11
 8007820:	3a15      	subs	r2, #21
 8007822:	0549      	lsls	r1, r1, #21
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0fa      	beq.n	800781e <__ieee754_sqrt+0x5e>
 8007828:	e7f7      	b.n	800781a <__ieee754_sqrt+0x5a>
 800782a:	462a      	mov	r2, r5
 800782c:	e7fa      	b.n	8007824 <__ieee754_sqrt+0x64>
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	3001      	adds	r0, #1
 8007832:	02dc      	lsls	r4, r3, #11
 8007834:	d5fb      	bpl.n	800782e <__ieee754_sqrt+0x6e>
 8007836:	1e44      	subs	r4, r0, #1
 8007838:	1b12      	subs	r2, r2, r4
 800783a:	f1c0 0420 	rsb	r4, r0, #32
 800783e:	fa21 f404 	lsr.w	r4, r1, r4
 8007842:	4323      	orrs	r3, r4
 8007844:	4081      	lsls	r1, r0
 8007846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800784a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800784e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007852:	07d2      	lsls	r2, r2, #31
 8007854:	bf5c      	itt	pl
 8007856:	005b      	lslpl	r3, r3, #1
 8007858:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800785c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007860:	bf58      	it	pl
 8007862:	0049      	lslpl	r1, r1, #1
 8007864:	2600      	movs	r6, #0
 8007866:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800786a:	107f      	asrs	r7, r7, #1
 800786c:	0049      	lsls	r1, r1, #1
 800786e:	2016      	movs	r0, #22
 8007870:	4632      	mov	r2, r6
 8007872:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007876:	1915      	adds	r5, r2, r4
 8007878:	429d      	cmp	r5, r3
 800787a:	bfde      	ittt	le
 800787c:	192a      	addle	r2, r5, r4
 800787e:	1b5b      	suble	r3, r3, r5
 8007880:	1936      	addle	r6, r6, r4
 8007882:	0fcd      	lsrs	r5, r1, #31
 8007884:	3801      	subs	r0, #1
 8007886:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800788a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800788e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007892:	d1f0      	bne.n	8007876 <__ieee754_sqrt+0xb6>
 8007894:	4605      	mov	r5, r0
 8007896:	2420      	movs	r4, #32
 8007898:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800789c:	4293      	cmp	r3, r2
 800789e:	eb0c 0e00 	add.w	lr, ip, r0
 80078a2:	dc02      	bgt.n	80078aa <__ieee754_sqrt+0xea>
 80078a4:	d113      	bne.n	80078ce <__ieee754_sqrt+0x10e>
 80078a6:	458e      	cmp	lr, r1
 80078a8:	d811      	bhi.n	80078ce <__ieee754_sqrt+0x10e>
 80078aa:	f1be 0f00 	cmp.w	lr, #0
 80078ae:	eb0e 000c 	add.w	r0, lr, ip
 80078b2:	da3f      	bge.n	8007934 <__ieee754_sqrt+0x174>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	db3d      	blt.n	8007934 <__ieee754_sqrt+0x174>
 80078b8:	f102 0801 	add.w	r8, r2, #1
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	458e      	cmp	lr, r1
 80078c0:	bf88      	it	hi
 80078c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80078c6:	eba1 010e 	sub.w	r1, r1, lr
 80078ca:	4465      	add	r5, ip
 80078cc:	4642      	mov	r2, r8
 80078ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80078d2:	3c01      	subs	r4, #1
 80078d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80078d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80078dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80078e0:	d1dc      	bne.n	800789c <__ieee754_sqrt+0xdc>
 80078e2:	4319      	orrs	r1, r3
 80078e4:	d01b      	beq.n	800791e <__ieee754_sqrt+0x15e>
 80078e6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007964 <__ieee754_sqrt+0x1a4>
 80078ea:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007968 <__ieee754_sqrt+0x1a8>
 80078ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80078f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80078f6:	f7f8 fcd7 	bl	80002a8 <__aeabi_dsub>
 80078fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4640      	mov	r0, r8
 8007904:	4649      	mov	r1, r9
 8007906:	f7f9 f903 	bl	8000b10 <__aeabi_dcmple>
 800790a:	b140      	cbz	r0, 800791e <__ieee754_sqrt+0x15e>
 800790c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007910:	e9da 0100 	ldrd	r0, r1, [sl]
 8007914:	e9db 2300 	ldrd	r2, r3, [fp]
 8007918:	d10e      	bne.n	8007938 <__ieee754_sqrt+0x178>
 800791a:	3601      	adds	r6, #1
 800791c:	4625      	mov	r5, r4
 800791e:	1073      	asrs	r3, r6, #1
 8007920:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007924:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007928:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800792c:	086b      	lsrs	r3, r5, #1
 800792e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8007932:	e759      	b.n	80077e8 <__ieee754_sqrt+0x28>
 8007934:	4690      	mov	r8, r2
 8007936:	e7c1      	b.n	80078bc <__ieee754_sqrt+0xfc>
 8007938:	f7f8 fcb8 	bl	80002ac <__adddf3>
 800793c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4640      	mov	r0, r8
 8007946:	4649      	mov	r1, r9
 8007948:	f7f9 f8d8 	bl	8000afc <__aeabi_dcmplt>
 800794c:	b120      	cbz	r0, 8007958 <__ieee754_sqrt+0x198>
 800794e:	1cab      	adds	r3, r5, #2
 8007950:	bf08      	it	eq
 8007952:	3601      	addeq	r6, #1
 8007954:	3502      	adds	r5, #2
 8007956:	e7e2      	b.n	800791e <__ieee754_sqrt+0x15e>
 8007958:	1c6b      	adds	r3, r5, #1
 800795a:	f023 0501 	bic.w	r5, r3, #1
 800795e:	e7de      	b.n	800791e <__ieee754_sqrt+0x15e>
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	08009b88 	.word	0x08009b88
 8007968:	08009b80 	.word	0x08009b80
 800796c:	00000000 	.word	0x00000000

08007970 <__kernel_cos>:
 8007970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	ec57 6b10 	vmov	r6, r7, d0
 8007978:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800797c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007980:	ed8d 1b00 	vstr	d1, [sp]
 8007984:	d206      	bcs.n	8007994 <__kernel_cos+0x24>
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f9 f8f5 	bl	8000b78 <__aeabi_d2iz>
 800798e:	2800      	cmp	r0, #0
 8007990:	f000 8088 	beq.w	8007aa4 <__kernel_cos+0x134>
 8007994:	4632      	mov	r2, r6
 8007996:	463b      	mov	r3, r7
 8007998:	4630      	mov	r0, r6
 800799a:	4639      	mov	r1, r7
 800799c:	f7f8 fe3c 	bl	8000618 <__aeabi_dmul>
 80079a0:	4b51      	ldr	r3, [pc, #324]	@ (8007ae8 <__kernel_cos+0x178>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	4604      	mov	r4, r0
 80079a6:	460d      	mov	r5, r1
 80079a8:	f7f8 fe36 	bl	8000618 <__aeabi_dmul>
 80079ac:	a340      	add	r3, pc, #256	@ (adr r3, 8007ab0 <__kernel_cos+0x140>)
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	4682      	mov	sl, r0
 80079b4:	468b      	mov	fp, r1
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f8 fe2d 	bl	8000618 <__aeabi_dmul>
 80079be:	a33e      	add	r3, pc, #248	@ (adr r3, 8007ab8 <__kernel_cos+0x148>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f7f8 fc72 	bl	80002ac <__adddf3>
 80079c8:	4622      	mov	r2, r4
 80079ca:	462b      	mov	r3, r5
 80079cc:	f7f8 fe24 	bl	8000618 <__aeabi_dmul>
 80079d0:	a33b      	add	r3, pc, #236	@ (adr r3, 8007ac0 <__kernel_cos+0x150>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fc67 	bl	80002a8 <__aeabi_dsub>
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	f7f8 fe1b 	bl	8000618 <__aeabi_dmul>
 80079e2:	a339      	add	r3, pc, #228	@ (adr r3, 8007ac8 <__kernel_cos+0x158>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f7f8 fc60 	bl	80002ac <__adddf3>
 80079ec:	4622      	mov	r2, r4
 80079ee:	462b      	mov	r3, r5
 80079f0:	f7f8 fe12 	bl	8000618 <__aeabi_dmul>
 80079f4:	a336      	add	r3, pc, #216	@ (adr r3, 8007ad0 <__kernel_cos+0x160>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f8 fc55 	bl	80002a8 <__aeabi_dsub>
 80079fe:	4622      	mov	r2, r4
 8007a00:	462b      	mov	r3, r5
 8007a02:	f7f8 fe09 	bl	8000618 <__aeabi_dmul>
 8007a06:	a334      	add	r3, pc, #208	@ (adr r3, 8007ad8 <__kernel_cos+0x168>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f8 fc4e 	bl	80002ac <__adddf3>
 8007a10:	4622      	mov	r2, r4
 8007a12:	462b      	mov	r3, r5
 8007a14:	f7f8 fe00 	bl	8000618 <__aeabi_dmul>
 8007a18:	4622      	mov	r2, r4
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	f7f8 fdfc 	bl	8000618 <__aeabi_dmul>
 8007a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a24:	4604      	mov	r4, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	4630      	mov	r0, r6
 8007a2a:	4639      	mov	r1, r7
 8007a2c:	f7f8 fdf4 	bl	8000618 <__aeabi_dmul>
 8007a30:	460b      	mov	r3, r1
 8007a32:	4602      	mov	r2, r0
 8007a34:	4629      	mov	r1, r5
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7f8 fc36 	bl	80002a8 <__aeabi_dsub>
 8007a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007aec <__kernel_cos+0x17c>)
 8007a3e:	4598      	cmp	r8, r3
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	d810      	bhi.n	8007a68 <__kernel_cos+0xf8>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	f7f8 fc2b 	bl	80002a8 <__aeabi_dsub>
 8007a52:	460b      	mov	r3, r1
 8007a54:	4926      	ldr	r1, [pc, #152]	@ (8007af0 <__kernel_cos+0x180>)
 8007a56:	4602      	mov	r2, r0
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7f8 fc25 	bl	80002a8 <__aeabi_dsub>
 8007a5e:	ec41 0b10 	vmov	d0, r0, r1
 8007a62:	b003      	add	sp, #12
 8007a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a68:	4b22      	ldr	r3, [pc, #136]	@ (8007af4 <__kernel_cos+0x184>)
 8007a6a:	4921      	ldr	r1, [pc, #132]	@ (8007af0 <__kernel_cos+0x180>)
 8007a6c:	4598      	cmp	r8, r3
 8007a6e:	bf8c      	ite	hi
 8007a70:	4d21      	ldrhi	r5, [pc, #132]	@ (8007af8 <__kernel_cos+0x188>)
 8007a72:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007a76:	2400      	movs	r4, #0
 8007a78:	4622      	mov	r2, r4
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f7f8 fc13 	bl	80002a8 <__aeabi_dsub>
 8007a82:	4622      	mov	r2, r4
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	462b      	mov	r3, r5
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	f7f8 fc0b 	bl	80002a8 <__aeabi_dsub>
 8007a92:	4632      	mov	r2, r6
 8007a94:	463b      	mov	r3, r7
 8007a96:	f7f8 fc07 	bl	80002a8 <__aeabi_dsub>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	e7da      	b.n	8007a5a <__kernel_cos+0xea>
 8007aa4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007ae0 <__kernel_cos+0x170>
 8007aa8:	e7db      	b.n	8007a62 <__kernel_cos+0xf2>
 8007aaa:	bf00      	nop
 8007aac:	f3af 8000 	nop.w
 8007ab0:	be8838d4 	.word	0xbe8838d4
 8007ab4:	bda8fae9 	.word	0xbda8fae9
 8007ab8:	bdb4b1c4 	.word	0xbdb4b1c4
 8007abc:	3e21ee9e 	.word	0x3e21ee9e
 8007ac0:	809c52ad 	.word	0x809c52ad
 8007ac4:	3e927e4f 	.word	0x3e927e4f
 8007ac8:	19cb1590 	.word	0x19cb1590
 8007acc:	3efa01a0 	.word	0x3efa01a0
 8007ad0:	16c15177 	.word	0x16c15177
 8007ad4:	3f56c16c 	.word	0x3f56c16c
 8007ad8:	5555554c 	.word	0x5555554c
 8007adc:	3fa55555 	.word	0x3fa55555
 8007ae0:	00000000 	.word	0x00000000
 8007ae4:	3ff00000 	.word	0x3ff00000
 8007ae8:	3fe00000 	.word	0x3fe00000
 8007aec:	3fd33332 	.word	0x3fd33332
 8007af0:	3ff00000 	.word	0x3ff00000
 8007af4:	3fe90000 	.word	0x3fe90000
 8007af8:	3fd20000 	.word	0x3fd20000
 8007afc:	00000000 	.word	0x00000000

08007b00 <__kernel_sin>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	ec55 4b10 	vmov	r4, r5, d0
 8007b08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007b12:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007b16:	4680      	mov	r8, r0
 8007b18:	d205      	bcs.n	8007b26 <__kernel_sin+0x26>
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f9 f82b 	bl	8000b78 <__aeabi_d2iz>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d052      	beq.n	8007bcc <__kernel_sin+0xcc>
 8007b26:	4622      	mov	r2, r4
 8007b28:	462b      	mov	r3, r5
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	f7f8 fd73 	bl	8000618 <__aeabi_dmul>
 8007b32:	4682      	mov	sl, r0
 8007b34:	468b      	mov	fp, r1
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7f8 fd6b 	bl	8000618 <__aeabi_dmul>
 8007b42:	a342      	add	r3, pc, #264	@ (adr r3, 8007c4c <__kernel_sin+0x14c>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	e9cd 0100 	strd	r0, r1, [sp]
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	4659      	mov	r1, fp
 8007b50:	f7f8 fd62 	bl	8000618 <__aeabi_dmul>
 8007b54:	a33f      	add	r3, pc, #252	@ (adr r3, 8007c54 <__kernel_sin+0x154>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 fba5 	bl	80002a8 <__aeabi_dsub>
 8007b5e:	4652      	mov	r2, sl
 8007b60:	465b      	mov	r3, fp
 8007b62:	f7f8 fd59 	bl	8000618 <__aeabi_dmul>
 8007b66:	a33d      	add	r3, pc, #244	@ (adr r3, 8007c5c <__kernel_sin+0x15c>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f7f8 fb9e 	bl	80002ac <__adddf3>
 8007b70:	4652      	mov	r2, sl
 8007b72:	465b      	mov	r3, fp
 8007b74:	f7f8 fd50 	bl	8000618 <__aeabi_dmul>
 8007b78:	a33a      	add	r3, pc, #232	@ (adr r3, 8007c64 <__kernel_sin+0x164>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fb93 	bl	80002a8 <__aeabi_dsub>
 8007b82:	4652      	mov	r2, sl
 8007b84:	465b      	mov	r3, fp
 8007b86:	f7f8 fd47 	bl	8000618 <__aeabi_dmul>
 8007b8a:	a338      	add	r3, pc, #224	@ (adr r3, 8007c6c <__kernel_sin+0x16c>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fb8c 	bl	80002ac <__adddf3>
 8007b94:	4606      	mov	r6, r0
 8007b96:	460f      	mov	r7, r1
 8007b98:	f1b8 0f00 	cmp.w	r8, #0
 8007b9c:	d11b      	bne.n	8007bd6 <__kernel_sin+0xd6>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	f7f8 fd37 	bl	8000618 <__aeabi_dmul>
 8007baa:	a325      	add	r3, pc, #148	@ (adr r3, 8007c40 <__kernel_sin+0x140>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fb7a 	bl	80002a8 <__aeabi_dsub>
 8007bb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bb8:	f7f8 fd2e 	bl	8000618 <__aeabi_dmul>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f7f8 fb72 	bl	80002ac <__adddf3>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	460d      	mov	r5, r1
 8007bcc:	ec45 4b10 	vmov	d0, r4, r5
 8007bd0:	b005      	add	sp, #20
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bda:	4b1b      	ldr	r3, [pc, #108]	@ (8007c48 <__kernel_sin+0x148>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f7f8 fd1b 	bl	8000618 <__aeabi_dmul>
 8007be2:	4632      	mov	r2, r6
 8007be4:	4680      	mov	r8, r0
 8007be6:	4689      	mov	r9, r1
 8007be8:	463b      	mov	r3, r7
 8007bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bee:	f7f8 fd13 	bl	8000618 <__aeabi_dmul>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	f7f8 fb55 	bl	80002a8 <__aeabi_dsub>
 8007bfe:	4652      	mov	r2, sl
 8007c00:	465b      	mov	r3, fp
 8007c02:	f7f8 fd09 	bl	8000618 <__aeabi_dmul>
 8007c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c0a:	f7f8 fb4d 	bl	80002a8 <__aeabi_dsub>
 8007c0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007c40 <__kernel_sin+0x140>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	4606      	mov	r6, r0
 8007c16:	460f      	mov	r7, r1
 8007c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c1c:	f7f8 fcfc 	bl	8000618 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4630      	mov	r0, r6
 8007c26:	4639      	mov	r1, r7
 8007c28:	f7f8 fb40 	bl	80002ac <__adddf3>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fb38 	bl	80002a8 <__aeabi_dsub>
 8007c38:	e7c6      	b.n	8007bc8 <__kernel_sin+0xc8>
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w
 8007c40:	55555549 	.word	0x55555549
 8007c44:	3fc55555 	.word	0x3fc55555
 8007c48:	3fe00000 	.word	0x3fe00000
 8007c4c:	5acfd57c 	.word	0x5acfd57c
 8007c50:	3de5d93a 	.word	0x3de5d93a
 8007c54:	8a2b9ceb 	.word	0x8a2b9ceb
 8007c58:	3e5ae5e6 	.word	0x3e5ae5e6
 8007c5c:	57b1fe7d 	.word	0x57b1fe7d
 8007c60:	3ec71de3 	.word	0x3ec71de3
 8007c64:	19c161d5 	.word	0x19c161d5
 8007c68:	3f2a01a0 	.word	0x3f2a01a0
 8007c6c:	1110f8a6 	.word	0x1110f8a6
 8007c70:	3f811111 	.word	0x3f811111
 8007c74:	00000000 	.word	0x00000000

08007c78 <__ieee754_exp>:
 8007c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	ec55 4b10 	vmov	r4, r5, d0
 8007c80:	49b1      	ldr	r1, [pc, #708]	@ (8007f48 <__ieee754_exp+0x2d0>)
 8007c82:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007c86:	428a      	cmp	r2, r1
 8007c88:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007c8c:	d936      	bls.n	8007cfc <__ieee754_exp+0x84>
 8007c8e:	49af      	ldr	r1, [pc, #700]	@ (8007f4c <__ieee754_exp+0x2d4>)
 8007c90:	428a      	cmp	r2, r1
 8007c92:	d914      	bls.n	8007cbe <__ieee754_exp+0x46>
 8007c94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007c98:	4323      	orrs	r3, r4
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	d007      	beq.n	8007cae <__ieee754_exp+0x36>
 8007c9e:	462b      	mov	r3, r5
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	f7f8 fb02 	bl	80002ac <__adddf3>
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	e002      	b.n	8007cb4 <__ieee754_exp+0x3c>
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	f040 8118 	bne.w	8007ee4 <__ieee754_exp+0x26c>
 8007cb4:	ec45 4b10 	vmov	d0, r4, r5
 8007cb8:	b004      	add	sp, #16
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	a38c      	add	r3, pc, #560	@ (adr r3, 8007ef0 <__ieee754_exp+0x278>)
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	f7f8 ff36 	bl	8000b38 <__aeabi_dcmpgt>
 8007ccc:	4607      	mov	r7, r0
 8007cce:	b128      	cbz	r0, 8007cdc <__ieee754_exp+0x64>
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	b004      	add	sp, #16
 8007cd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	f001 b94a 	b.w	8008f70 <__math_oflow>
 8007cdc:	a386      	add	r3, pc, #536	@ (adr r3, 8007ef8 <__ieee754_exp+0x280>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 ff09 	bl	8000afc <__aeabi_dcmplt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f000 8087 	beq.w	8007dfe <__ieee754_exp+0x186>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	b004      	add	sp, #16
 8007cf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	f001 b932 	b.w	8008f60 <__math_uflow>
 8007cfc:	4b94      	ldr	r3, [pc, #592]	@ (8007f50 <__ieee754_exp+0x2d8>)
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	f240 80a9 	bls.w	8007e56 <__ieee754_exp+0x1de>
 8007d04:	4b93      	ldr	r3, [pc, #588]	@ (8007f54 <__ieee754_exp+0x2dc>)
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d879      	bhi.n	8007dfe <__ieee754_exp+0x186>
 8007d0a:	4b93      	ldr	r3, [pc, #588]	@ (8007f58 <__ieee754_exp+0x2e0>)
 8007d0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	4620      	mov	r0, r4
 8007d16:	4629      	mov	r1, r5
 8007d18:	f7f8 fac6 	bl	80002a8 <__aeabi_dsub>
 8007d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f5c <__ieee754_exp+0x2e4>)
 8007d1e:	00f7      	lsls	r7, r6, #3
 8007d20:	443b      	add	r3, r7
 8007d22:	ed93 7b00 	vldr	d7, [r3]
 8007d26:	ed8d 7b00 	vstr	d7, [sp]
 8007d2a:	f086 0a01 	eor.w	sl, r6, #1
 8007d2e:	4680      	mov	r8, r0
 8007d30:	4689      	mov	r9, r1
 8007d32:	ebaa 0a06 	sub.w	sl, sl, r6
 8007d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	f7f8 fab3 	bl	80002a8 <__aeabi_dsub>
 8007d42:	4604      	mov	r4, r0
 8007d44:	460d      	mov	r5, r1
 8007d46:	4622      	mov	r2, r4
 8007d48:	462b      	mov	r3, r5
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7f8 fc63 	bl	8000618 <__aeabi_dmul>
 8007d52:	a36b      	add	r3, pc, #428	@ (adr r3, 8007f00 <__ieee754_exp+0x288>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	4606      	mov	r6, r0
 8007d5a:	460f      	mov	r7, r1
 8007d5c:	f7f8 fc5c 	bl	8000618 <__aeabi_dmul>
 8007d60:	a369      	add	r3, pc, #420	@ (adr r3, 8007f08 <__ieee754_exp+0x290>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f7f8 fa9f 	bl	80002a8 <__aeabi_dsub>
 8007d6a:	4632      	mov	r2, r6
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	f7f8 fc53 	bl	8000618 <__aeabi_dmul>
 8007d72:	a367      	add	r3, pc, #412	@ (adr r3, 8007f10 <__ieee754_exp+0x298>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f7f8 fa98 	bl	80002ac <__adddf3>
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	463b      	mov	r3, r7
 8007d80:	f7f8 fc4a 	bl	8000618 <__aeabi_dmul>
 8007d84:	a364      	add	r3, pc, #400	@ (adr r3, 8007f18 <__ieee754_exp+0x2a0>)
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	f7f8 fa8d 	bl	80002a8 <__aeabi_dsub>
 8007d8e:	4632      	mov	r2, r6
 8007d90:	463b      	mov	r3, r7
 8007d92:	f7f8 fc41 	bl	8000618 <__aeabi_dmul>
 8007d96:	a362      	add	r3, pc, #392	@ (adr r3, 8007f20 <__ieee754_exp+0x2a8>)
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f7f8 fa86 	bl	80002ac <__adddf3>
 8007da0:	4632      	mov	r2, r6
 8007da2:	463b      	mov	r3, r7
 8007da4:	f7f8 fc38 	bl	8000618 <__aeabi_dmul>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4620      	mov	r0, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7f8 fa7a 	bl	80002a8 <__aeabi_dsub>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4606      	mov	r6, r0
 8007dba:	460f      	mov	r7, r1
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	f7f8 fc2a 	bl	8000618 <__aeabi_dmul>
 8007dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc8:	f1ba 0f00 	cmp.w	sl, #0
 8007dcc:	d15c      	bne.n	8007e88 <__ieee754_exp+0x210>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f7f8 fa66 	bl	80002a8 <__aeabi_dsub>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de4:	f7f8 fd42 	bl	800086c <__aeabi_ddiv>
 8007de8:	4622      	mov	r2, r4
 8007dea:	462b      	mov	r3, r5
 8007dec:	f7f8 fa5c 	bl	80002a8 <__aeabi_dsub>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	2000      	movs	r0, #0
 8007df6:	495a      	ldr	r1, [pc, #360]	@ (8007f60 <__ieee754_exp+0x2e8>)
 8007df8:	f7f8 fa56 	bl	80002a8 <__aeabi_dsub>
 8007dfc:	e754      	b.n	8007ca8 <__ieee754_exp+0x30>
 8007dfe:	4b59      	ldr	r3, [pc, #356]	@ (8007f64 <__ieee754_exp+0x2ec>)
 8007e00:	4620      	mov	r0, r4
 8007e02:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e06:	4629      	mov	r1, r5
 8007e08:	a347      	add	r3, pc, #284	@ (adr r3, 8007f28 <__ieee754_exp+0x2b0>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f7f8 fc03 	bl	8000618 <__aeabi_dmul>
 8007e12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e16:	f7f8 fa49 	bl	80002ac <__adddf3>
 8007e1a:	f7f8 fead 	bl	8000b78 <__aeabi_d2iz>
 8007e1e:	4682      	mov	sl, r0
 8007e20:	f7f8 fb90 	bl	8000544 <__aeabi_i2d>
 8007e24:	a342      	add	r3, pc, #264	@ (adr r3, 8007f30 <__ieee754_exp+0x2b8>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	f7f8 fbf3 	bl	8000618 <__aeabi_dmul>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fa35 	bl	80002a8 <__aeabi_dsub>
 8007e3e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007f38 <__ieee754_exp+0x2c0>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	4630      	mov	r0, r6
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	f7f8 fbe4 	bl	8000618 <__aeabi_dmul>
 8007e50:	e9cd 0100 	strd	r0, r1, [sp]
 8007e54:	e76f      	b.n	8007d36 <__ieee754_exp+0xbe>
 8007e56:	4b44      	ldr	r3, [pc, #272]	@ (8007f68 <__ieee754_exp+0x2f0>)
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d810      	bhi.n	8007e7e <__ieee754_exp+0x206>
 8007e5c:	a338      	add	r3, pc, #224	@ (adr r3, 8007f40 <__ieee754_exp+0x2c8>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	4620      	mov	r0, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fa21 	bl	80002ac <__adddf3>
 8007e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8007f60 <__ieee754_exp+0x2e8>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f7f8 fe63 	bl	8000b38 <__aeabi_dcmpgt>
 8007e72:	b138      	cbz	r0, 8007e84 <__ieee754_exp+0x20c>
 8007e74:	4b3a      	ldr	r3, [pc, #232]	@ (8007f60 <__ieee754_exp+0x2e8>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	4620      	mov	r0, r4
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	e712      	b.n	8007ca4 <__ieee754_exp+0x2c>
 8007e7e:	f04f 0a00 	mov.w	sl, #0
 8007e82:	e760      	b.n	8007d46 <__ieee754_exp+0xce>
 8007e84:	4682      	mov	sl, r0
 8007e86:	e75e      	b.n	8007d46 <__ieee754_exp+0xce>
 8007e88:	4632      	mov	r2, r6
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007e92:	f7f8 fa09 	bl	80002a8 <__aeabi_dsub>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e9e:	f7f8 fce5 	bl	800086c <__aeabi_ddiv>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eaa:	f7f8 f9fd 	bl	80002a8 <__aeabi_dsub>
 8007eae:	4642      	mov	r2, r8
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	f7f8 f9f9 	bl	80002a8 <__aeabi_dsub>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	2000      	movs	r0, #0
 8007ebc:	4928      	ldr	r1, [pc, #160]	@ (8007f60 <__ieee754_exp+0x2e8>)
 8007ebe:	f7f8 f9f3 	bl	80002a8 <__aeabi_dsub>
 8007ec2:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8007ec6:	4592      	cmp	sl, r2
 8007ec8:	db02      	blt.n	8007ed0 <__ieee754_exp+0x258>
 8007eca:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007ece:	e6eb      	b.n	8007ca8 <__ieee754_exp+0x30>
 8007ed0:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8007ed4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8007ede:	f7f8 fb9b 	bl	8000618 <__aeabi_dmul>
 8007ee2:	e6e1      	b.n	8007ca8 <__ieee754_exp+0x30>
 8007ee4:	2400      	movs	r4, #0
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	e6e4      	b.n	8007cb4 <__ieee754_exp+0x3c>
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
 8007ef0:	fefa39ef 	.word	0xfefa39ef
 8007ef4:	40862e42 	.word	0x40862e42
 8007ef8:	d52d3051 	.word	0xd52d3051
 8007efc:	c0874910 	.word	0xc0874910
 8007f00:	72bea4d0 	.word	0x72bea4d0
 8007f04:	3e663769 	.word	0x3e663769
 8007f08:	c5d26bf1 	.word	0xc5d26bf1
 8007f0c:	3ebbbd41 	.word	0x3ebbbd41
 8007f10:	af25de2c 	.word	0xaf25de2c
 8007f14:	3f11566a 	.word	0x3f11566a
 8007f18:	16bebd93 	.word	0x16bebd93
 8007f1c:	3f66c16c 	.word	0x3f66c16c
 8007f20:	5555553e 	.word	0x5555553e
 8007f24:	3fc55555 	.word	0x3fc55555
 8007f28:	652b82fe 	.word	0x652b82fe
 8007f2c:	3ff71547 	.word	0x3ff71547
 8007f30:	fee00000 	.word	0xfee00000
 8007f34:	3fe62e42 	.word	0x3fe62e42
 8007f38:	35793c76 	.word	0x35793c76
 8007f3c:	3dea39ef 	.word	0x3dea39ef
 8007f40:	8800759c 	.word	0x8800759c
 8007f44:	7e37e43c 	.word	0x7e37e43c
 8007f48:	40862e41 	.word	0x40862e41
 8007f4c:	7fefffff 	.word	0x7fefffff
 8007f50:	3fd62e42 	.word	0x3fd62e42
 8007f54:	3ff0a2b1 	.word	0x3ff0a2b1
 8007f58:	08009ba0 	.word	0x08009ba0
 8007f5c:	08009b90 	.word	0x08009b90
 8007f60:	3ff00000 	.word	0x3ff00000
 8007f64:	08009bb0 	.word	0x08009bb0
 8007f68:	3defffff 	.word	0x3defffff
 8007f6c:	00000000 	.word	0x00000000

08007f70 <__ieee754_pow>:
 8007f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	b091      	sub	sp, #68	@ 0x44
 8007f76:	ed8d 1b00 	vstr	d1, [sp]
 8007f7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007f7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007f82:	ea5a 0001 	orrs.w	r0, sl, r1
 8007f86:	ec57 6b10 	vmov	r6, r7, d0
 8007f8a:	d113      	bne.n	8007fb4 <__ieee754_pow+0x44>
 8007f8c:	19b3      	adds	r3, r6, r6
 8007f8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007f92:	4152      	adcs	r2, r2
 8007f94:	4298      	cmp	r0, r3
 8007f96:	4b9a      	ldr	r3, [pc, #616]	@ (8008200 <__ieee754_pow+0x290>)
 8007f98:	4193      	sbcs	r3, r2
 8007f9a:	f080 84ee 	bcs.w	800897a <__ieee754_pow+0xa0a>
 8007f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 f981 	bl	80002ac <__adddf3>
 8007faa:	ec41 0b10 	vmov	d0, r0, r1
 8007fae:	b011      	add	sp, #68	@ 0x44
 8007fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb4:	4a93      	ldr	r2, [pc, #588]	@ (8008204 <__ieee754_pow+0x294>)
 8007fb6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8007fba:	4295      	cmp	r5, r2
 8007fbc:	46b8      	mov	r8, r7
 8007fbe:	4633      	mov	r3, r6
 8007fc0:	d80a      	bhi.n	8007fd8 <__ieee754_pow+0x68>
 8007fc2:	d104      	bne.n	8007fce <__ieee754_pow+0x5e>
 8007fc4:	2e00      	cmp	r6, #0
 8007fc6:	d1ea      	bne.n	8007f9e <__ieee754_pow+0x2e>
 8007fc8:	45aa      	cmp	sl, r5
 8007fca:	d8e8      	bhi.n	8007f9e <__ieee754_pow+0x2e>
 8007fcc:	e001      	b.n	8007fd2 <__ieee754_pow+0x62>
 8007fce:	4592      	cmp	sl, r2
 8007fd0:	d802      	bhi.n	8007fd8 <__ieee754_pow+0x68>
 8007fd2:	4592      	cmp	sl, r2
 8007fd4:	d10f      	bne.n	8007ff6 <__ieee754_pow+0x86>
 8007fd6:	b171      	cbz	r1, 8007ff6 <__ieee754_pow+0x86>
 8007fd8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007fdc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007fe0:	ea58 0803 	orrs.w	r8, r8, r3
 8007fe4:	d1db      	bne.n	8007f9e <__ieee754_pow+0x2e>
 8007fe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007fea:	18db      	adds	r3, r3, r3
 8007fec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007ff0:	4152      	adcs	r2, r2
 8007ff2:	4598      	cmp	r8, r3
 8007ff4:	e7cf      	b.n	8007f96 <__ieee754_pow+0x26>
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	46ab      	mov	fp, r5
 8007ffc:	da43      	bge.n	8008086 <__ieee754_pow+0x116>
 8007ffe:	4a82      	ldr	r2, [pc, #520]	@ (8008208 <__ieee754_pow+0x298>)
 8008000:	4592      	cmp	sl, r2
 8008002:	d856      	bhi.n	80080b2 <__ieee754_pow+0x142>
 8008004:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008008:	4592      	cmp	sl, r2
 800800a:	f240 84c5 	bls.w	8008998 <__ieee754_pow+0xa28>
 800800e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008012:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008016:	2a14      	cmp	r2, #20
 8008018:	dd18      	ble.n	800804c <__ieee754_pow+0xdc>
 800801a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800801e:	fa21 f402 	lsr.w	r4, r1, r2
 8008022:	fa04 f202 	lsl.w	r2, r4, r2
 8008026:	428a      	cmp	r2, r1
 8008028:	f040 84b6 	bne.w	8008998 <__ieee754_pow+0xa28>
 800802c:	f004 0401 	and.w	r4, r4, #1
 8008030:	f1c4 0402 	rsb	r4, r4, #2
 8008034:	2900      	cmp	r1, #0
 8008036:	d159      	bne.n	80080ec <__ieee754_pow+0x17c>
 8008038:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800803c:	d148      	bne.n	80080d0 <__ieee754_pow+0x160>
 800803e:	4632      	mov	r2, r6
 8008040:	463b      	mov	r3, r7
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	f7f8 fae7 	bl	8000618 <__aeabi_dmul>
 800804a:	e7ae      	b.n	8007faa <__ieee754_pow+0x3a>
 800804c:	2900      	cmp	r1, #0
 800804e:	d14c      	bne.n	80080ea <__ieee754_pow+0x17a>
 8008050:	f1c2 0214 	rsb	r2, r2, #20
 8008054:	fa4a f402 	asr.w	r4, sl, r2
 8008058:	fa04 f202 	lsl.w	r2, r4, r2
 800805c:	4552      	cmp	r2, sl
 800805e:	f040 8498 	bne.w	8008992 <__ieee754_pow+0xa22>
 8008062:	f004 0401 	and.w	r4, r4, #1
 8008066:	f1c4 0402 	rsb	r4, r4, #2
 800806a:	4a68      	ldr	r2, [pc, #416]	@ (800820c <__ieee754_pow+0x29c>)
 800806c:	4592      	cmp	sl, r2
 800806e:	d1e3      	bne.n	8008038 <__ieee754_pow+0xc8>
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	f280 8489 	bge.w	800898a <__ieee754_pow+0xa1a>
 8008078:	4964      	ldr	r1, [pc, #400]	@ (800820c <__ieee754_pow+0x29c>)
 800807a:	4632      	mov	r2, r6
 800807c:	463b      	mov	r3, r7
 800807e:	2000      	movs	r0, #0
 8008080:	f7f8 fbf4 	bl	800086c <__aeabi_ddiv>
 8008084:	e791      	b.n	8007faa <__ieee754_pow+0x3a>
 8008086:	2400      	movs	r4, #0
 8008088:	bb81      	cbnz	r1, 80080ec <__ieee754_pow+0x17c>
 800808a:	4a5e      	ldr	r2, [pc, #376]	@ (8008204 <__ieee754_pow+0x294>)
 800808c:	4592      	cmp	sl, r2
 800808e:	d1ec      	bne.n	800806a <__ieee754_pow+0xfa>
 8008090:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8008094:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008098:	431a      	orrs	r2, r3
 800809a:	f000 846e 	beq.w	800897a <__ieee754_pow+0xa0a>
 800809e:	4b5c      	ldr	r3, [pc, #368]	@ (8008210 <__ieee754_pow+0x2a0>)
 80080a0:	429d      	cmp	r5, r3
 80080a2:	d908      	bls.n	80080b6 <__ieee754_pow+0x146>
 80080a4:	f1b9 0f00 	cmp.w	r9, #0
 80080a8:	f280 846b 	bge.w	8008982 <__ieee754_pow+0xa12>
 80080ac:	2000      	movs	r0, #0
 80080ae:	2100      	movs	r1, #0
 80080b0:	e77b      	b.n	8007faa <__ieee754_pow+0x3a>
 80080b2:	2402      	movs	r4, #2
 80080b4:	e7e8      	b.n	8008088 <__ieee754_pow+0x118>
 80080b6:	f1b9 0f00 	cmp.w	r9, #0
 80080ba:	f04f 0000 	mov.w	r0, #0
 80080be:	f04f 0100 	mov.w	r1, #0
 80080c2:	f6bf af72 	bge.w	8007faa <__ieee754_pow+0x3a>
 80080c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80080ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80080ce:	e76c      	b.n	8007faa <__ieee754_pow+0x3a>
 80080d0:	4a50      	ldr	r2, [pc, #320]	@ (8008214 <__ieee754_pow+0x2a4>)
 80080d2:	4591      	cmp	r9, r2
 80080d4:	d10a      	bne.n	80080ec <__ieee754_pow+0x17c>
 80080d6:	f1b8 0f00 	cmp.w	r8, #0
 80080da:	db07      	blt.n	80080ec <__ieee754_pow+0x17c>
 80080dc:	ec47 6b10 	vmov	d0, r6, r7
 80080e0:	b011      	add	sp, #68	@ 0x44
 80080e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e6:	f7ff bb6b 	b.w	80077c0 <__ieee754_sqrt>
 80080ea:	2400      	movs	r4, #0
 80080ec:	ec47 6b10 	vmov	d0, r6, r7
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	f000 fe85 	bl	8008e00 <fabs>
 80080f6:	9b02      	ldr	r3, [sp, #8]
 80080f8:	ec51 0b10 	vmov	r0, r1, d0
 80080fc:	bb43      	cbnz	r3, 8008150 <__ieee754_pow+0x1e0>
 80080fe:	4b43      	ldr	r3, [pc, #268]	@ (800820c <__ieee754_pow+0x29c>)
 8008100:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8008104:	429a      	cmp	r2, r3
 8008106:	d000      	beq.n	800810a <__ieee754_pow+0x19a>
 8008108:	bb15      	cbnz	r5, 8008150 <__ieee754_pow+0x1e0>
 800810a:	f1b9 0f00 	cmp.w	r9, #0
 800810e:	da05      	bge.n	800811c <__ieee754_pow+0x1ac>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	2000      	movs	r0, #0
 8008116:	493d      	ldr	r1, [pc, #244]	@ (800820c <__ieee754_pow+0x29c>)
 8008118:	f7f8 fba8 	bl	800086c <__aeabi_ddiv>
 800811c:	f1b8 0f00 	cmp.w	r8, #0
 8008120:	f6bf af43 	bge.w	8007faa <__ieee754_pow+0x3a>
 8008124:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008128:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800812c:	4325      	orrs	r5, r4
 800812e:	d108      	bne.n	8008142 <__ieee754_pow+0x1d2>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4610      	mov	r0, r2
 8008136:	4619      	mov	r1, r3
 8008138:	f7f8 f8b6 	bl	80002a8 <__aeabi_dsub>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	e79e      	b.n	8008080 <__ieee754_pow+0x110>
 8008142:	2c01      	cmp	r4, #1
 8008144:	f47f af31 	bne.w	8007faa <__ieee754_pow+0x3a>
 8008148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800814c:	4619      	mov	r1, r3
 800814e:	e72c      	b.n	8007faa <__ieee754_pow+0x3a>
 8008150:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8008154:	3b01      	subs	r3, #1
 8008156:	ea53 0204 	orrs.w	r2, r3, r4
 800815a:	d102      	bne.n	8008162 <__ieee754_pow+0x1f2>
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	e7e8      	b.n	8008134 <__ieee754_pow+0x1c4>
 8008162:	3c01      	subs	r4, #1
 8008164:	431c      	orrs	r4, r3
 8008166:	d016      	beq.n	8008196 <__ieee754_pow+0x226>
 8008168:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80081f0 <__ieee754_pow+0x280>
 800816c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008170:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008174:	f240 8110 	bls.w	8008398 <__ieee754_pow+0x428>
 8008178:	4b27      	ldr	r3, [pc, #156]	@ (8008218 <__ieee754_pow+0x2a8>)
 800817a:	459a      	cmp	sl, r3
 800817c:	4b24      	ldr	r3, [pc, #144]	@ (8008210 <__ieee754_pow+0x2a0>)
 800817e:	d916      	bls.n	80081ae <__ieee754_pow+0x23e>
 8008180:	429d      	cmp	r5, r3
 8008182:	d80b      	bhi.n	800819c <__ieee754_pow+0x22c>
 8008184:	f1b9 0f00 	cmp.w	r9, #0
 8008188:	da0b      	bge.n	80081a2 <__ieee754_pow+0x232>
 800818a:	2000      	movs	r0, #0
 800818c:	b011      	add	sp, #68	@ 0x44
 800818e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008192:	f000 beed 	b.w	8008f70 <__math_oflow>
 8008196:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80081f8 <__ieee754_pow+0x288>
 800819a:	e7e7      	b.n	800816c <__ieee754_pow+0x1fc>
 800819c:	f1b9 0f00 	cmp.w	r9, #0
 80081a0:	dcf3      	bgt.n	800818a <__ieee754_pow+0x21a>
 80081a2:	2000      	movs	r0, #0
 80081a4:	b011      	add	sp, #68	@ 0x44
 80081a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	f000 bed9 	b.w	8008f60 <__math_uflow>
 80081ae:	429d      	cmp	r5, r3
 80081b0:	d20c      	bcs.n	80081cc <__ieee754_pow+0x25c>
 80081b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	2300      	movs	r3, #0
 80081ba:	f7f8 fc9f 	bl	8000afc <__aeabi_dcmplt>
 80081be:	3800      	subs	r0, #0
 80081c0:	bf18      	it	ne
 80081c2:	2001      	movne	r0, #1
 80081c4:	f1b9 0f00 	cmp.w	r9, #0
 80081c8:	daec      	bge.n	80081a4 <__ieee754_pow+0x234>
 80081ca:	e7df      	b.n	800818c <__ieee754_pow+0x21c>
 80081cc:	4b0f      	ldr	r3, [pc, #60]	@ (800820c <__ieee754_pow+0x29c>)
 80081ce:	429d      	cmp	r5, r3
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	d922      	bls.n	800821c <__ieee754_pow+0x2ac>
 80081d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081da:	2300      	movs	r3, #0
 80081dc:	f7f8 fc8e 	bl	8000afc <__aeabi_dcmplt>
 80081e0:	3800      	subs	r0, #0
 80081e2:	bf18      	it	ne
 80081e4:	2001      	movne	r0, #1
 80081e6:	f1b9 0f00 	cmp.w	r9, #0
 80081ea:	dccf      	bgt.n	800818c <__ieee754_pow+0x21c>
 80081ec:	e7da      	b.n	80081a4 <__ieee754_pow+0x234>
 80081ee:	bf00      	nop
 80081f0:	00000000 	.word	0x00000000
 80081f4:	3ff00000 	.word	0x3ff00000
 80081f8:	00000000 	.word	0x00000000
 80081fc:	bff00000 	.word	0xbff00000
 8008200:	fff00000 	.word	0xfff00000
 8008204:	7ff00000 	.word	0x7ff00000
 8008208:	433fffff 	.word	0x433fffff
 800820c:	3ff00000 	.word	0x3ff00000
 8008210:	3fefffff 	.word	0x3fefffff
 8008214:	3fe00000 	.word	0x3fe00000
 8008218:	43f00000 	.word	0x43f00000
 800821c:	4b5a      	ldr	r3, [pc, #360]	@ (8008388 <__ieee754_pow+0x418>)
 800821e:	f7f8 f843 	bl	80002a8 <__aeabi_dsub>
 8008222:	a351      	add	r3, pc, #324	@ (adr r3, 8008368 <__ieee754_pow+0x3f8>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
 800822c:	f7f8 f9f4 	bl	8000618 <__aeabi_dmul>
 8008230:	a34f      	add	r3, pc, #316	@ (adr r3, 8008370 <__ieee754_pow+0x400>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	4620      	mov	r0, r4
 800823c:	4629      	mov	r1, r5
 800823e:	f7f8 f9eb 	bl	8000618 <__aeabi_dmul>
 8008242:	4b52      	ldr	r3, [pc, #328]	@ (800838c <__ieee754_pow+0x41c>)
 8008244:	4682      	mov	sl, r0
 8008246:	468b      	mov	fp, r1
 8008248:	2200      	movs	r2, #0
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 f9e3 	bl	8000618 <__aeabi_dmul>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	a148      	add	r1, pc, #288	@ (adr r1, 8008378 <__ieee754_pow+0x408>)
 8008258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825c:	f7f8 f824 	bl	80002a8 <__aeabi_dsub>
 8008260:	4622      	mov	r2, r4
 8008262:	462b      	mov	r3, r5
 8008264:	f7f8 f9d8 	bl	8000618 <__aeabi_dmul>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	2000      	movs	r0, #0
 800826e:	4948      	ldr	r1, [pc, #288]	@ (8008390 <__ieee754_pow+0x420>)
 8008270:	f7f8 f81a 	bl	80002a8 <__aeabi_dsub>
 8008274:	4622      	mov	r2, r4
 8008276:	4680      	mov	r8, r0
 8008278:	4689      	mov	r9, r1
 800827a:	462b      	mov	r3, r5
 800827c:	4620      	mov	r0, r4
 800827e:	4629      	mov	r1, r5
 8008280:	f7f8 f9ca 	bl	8000618 <__aeabi_dmul>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f8 f9c4 	bl	8000618 <__aeabi_dmul>
 8008290:	a33b      	add	r3, pc, #236	@ (adr r3, 8008380 <__ieee754_pow+0x410>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f9bf 	bl	8000618 <__aeabi_dmul>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4650      	mov	r0, sl
 80082a0:	4659      	mov	r1, fp
 80082a2:	f7f8 f801 	bl	80002a8 <__aeabi_dsub>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f7 fffb 	bl	80002ac <__adddf3>
 80082b6:	2400      	movs	r4, #0
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	4620      	mov	r0, r4
 80082be:	460d      	mov	r5, r1
 80082c0:	f7f7 fff2 	bl	80002a8 <__aeabi_dsub>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f7 ffec 	bl	80002a8 <__aeabi_dsub>
 80082d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082d8:	2300      	movs	r3, #0
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80082e0:	4606      	mov	r6, r0
 80082e2:	460f      	mov	r7, r1
 80082e4:	465b      	mov	r3, fp
 80082e6:	4652      	mov	r2, sl
 80082e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ec:	f7f7 ffdc 	bl	80002a8 <__aeabi_dsub>
 80082f0:	4622      	mov	r2, r4
 80082f2:	462b      	mov	r3, r5
 80082f4:	f7f8 f990 	bl	8000618 <__aeabi_dmul>
 80082f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082fc:	4680      	mov	r8, r0
 80082fe:	4689      	mov	r9, r1
 8008300:	4630      	mov	r0, r6
 8008302:	4639      	mov	r1, r7
 8008304:	f7f8 f988 	bl	8000618 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4640      	mov	r0, r8
 800830e:	4649      	mov	r1, r9
 8008310:	f7f7 ffcc 	bl	80002ac <__adddf3>
 8008314:	465b      	mov	r3, fp
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	4652      	mov	r2, sl
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f7f8 f97a 	bl	8000618 <__aeabi_dmul>
 8008324:	460b      	mov	r3, r1
 8008326:	4602      	mov	r2, r0
 8008328:	4680      	mov	r8, r0
 800832a:	4689      	mov	r9, r1
 800832c:	4630      	mov	r0, r6
 800832e:	4639      	mov	r1, r7
 8008330:	f7f7 ffbc 	bl	80002ac <__adddf3>
 8008334:	4b17      	ldr	r3, [pc, #92]	@ (8008394 <__ieee754_pow+0x424>)
 8008336:	4299      	cmp	r1, r3
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	468b      	mov	fp, r1
 800833e:	f340 820b 	ble.w	8008758 <__ieee754_pow+0x7e8>
 8008342:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008346:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800834a:	4303      	orrs	r3, r0
 800834c:	f000 81ea 	beq.w	8008724 <__ieee754_pow+0x7b4>
 8008350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	f7f8 fbd0 	bl	8000afc <__aeabi_dcmplt>
 800835c:	3800      	subs	r0, #0
 800835e:	bf18      	it	ne
 8008360:	2001      	movne	r0, #1
 8008362:	e713      	b.n	800818c <__ieee754_pow+0x21c>
 8008364:	f3af 8000 	nop.w
 8008368:	60000000 	.word	0x60000000
 800836c:	3ff71547 	.word	0x3ff71547
 8008370:	f85ddf44 	.word	0xf85ddf44
 8008374:	3e54ae0b 	.word	0x3e54ae0b
 8008378:	55555555 	.word	0x55555555
 800837c:	3fd55555 	.word	0x3fd55555
 8008380:	652b82fe 	.word	0x652b82fe
 8008384:	3ff71547 	.word	0x3ff71547
 8008388:	3ff00000 	.word	0x3ff00000
 800838c:	3fd00000 	.word	0x3fd00000
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	408fffff 	.word	0x408fffff
 8008398:	4bd5      	ldr	r3, [pc, #852]	@ (80086f0 <__ieee754_pow+0x780>)
 800839a:	ea08 0303 	and.w	r3, r8, r3
 800839e:	2200      	movs	r2, #0
 80083a0:	b92b      	cbnz	r3, 80083ae <__ieee754_pow+0x43e>
 80083a2:	4bd4      	ldr	r3, [pc, #848]	@ (80086f4 <__ieee754_pow+0x784>)
 80083a4:	f7f8 f938 	bl	8000618 <__aeabi_dmul>
 80083a8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80083ac:	468b      	mov	fp, r1
 80083ae:	ea4f 532b 	mov.w	r3, fp, asr #20
 80083b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80083b6:	4413      	add	r3, r2
 80083b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80083ba:	4bcf      	ldr	r3, [pc, #828]	@ (80086f8 <__ieee754_pow+0x788>)
 80083bc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80083c0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80083c4:	459b      	cmp	fp, r3
 80083c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80083ca:	dd08      	ble.n	80083de <__ieee754_pow+0x46e>
 80083cc:	4bcb      	ldr	r3, [pc, #812]	@ (80086fc <__ieee754_pow+0x78c>)
 80083ce:	459b      	cmp	fp, r3
 80083d0:	f340 81a5 	ble.w	800871e <__ieee754_pow+0x7ae>
 80083d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083d6:	3301      	adds	r3, #1
 80083d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80083da:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80083de:	f04f 0a00 	mov.w	sl, #0
 80083e2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80083e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083e8:	4bc5      	ldr	r3, [pc, #788]	@ (8008700 <__ieee754_pow+0x790>)
 80083ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083ee:	ed93 7b00 	vldr	d7, [r3]
 80083f2:	4629      	mov	r1, r5
 80083f4:	ec53 2b17 	vmov	r2, r3, d7
 80083f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80083fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008400:	f7f7 ff52 	bl	80002a8 <__aeabi_dsub>
 8008404:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008408:	4606      	mov	r6, r0
 800840a:	460f      	mov	r7, r1
 800840c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008410:	f7f7 ff4c 	bl	80002ac <__adddf3>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	2000      	movs	r0, #0
 800841a:	49ba      	ldr	r1, [pc, #744]	@ (8008704 <__ieee754_pow+0x794>)
 800841c:	f7f8 fa26 	bl	800086c <__aeabi_ddiv>
 8008420:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f7f8 f8f4 	bl	8000618 <__aeabi_dmul>
 8008430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008434:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008438:	106d      	asrs	r5, r5, #1
 800843a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800843e:	f04f 0b00 	mov.w	fp, #0
 8008442:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008446:	4661      	mov	r1, ip
 8008448:	2200      	movs	r2, #0
 800844a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800844e:	4658      	mov	r0, fp
 8008450:	46e1      	mov	r9, ip
 8008452:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008456:	4614      	mov	r4, r2
 8008458:	461d      	mov	r5, r3
 800845a:	f7f8 f8dd 	bl	8000618 <__aeabi_dmul>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4630      	mov	r0, r6
 8008464:	4639      	mov	r1, r7
 8008466:	f7f7 ff1f 	bl	80002a8 <__aeabi_dsub>
 800846a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800846e:	4606      	mov	r6, r0
 8008470:	460f      	mov	r7, r1
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f7f7 ff17 	bl	80002a8 <__aeabi_dsub>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008482:	f7f7 ff11 	bl	80002a8 <__aeabi_dsub>
 8008486:	465a      	mov	r2, fp
 8008488:	464b      	mov	r3, r9
 800848a:	f7f8 f8c5 	bl	8000618 <__aeabi_dmul>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4630      	mov	r0, r6
 8008494:	4639      	mov	r1, r7
 8008496:	f7f7 ff07 	bl	80002a8 <__aeabi_dsub>
 800849a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800849e:	f7f8 f8bb 	bl	8000618 <__aeabi_dmul>
 80084a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084aa:	4610      	mov	r0, r2
 80084ac:	4619      	mov	r1, r3
 80084ae:	f7f8 f8b3 	bl	8000618 <__aeabi_dmul>
 80084b2:	a37d      	add	r3, pc, #500	@ (adr r3, 80086a8 <__ieee754_pow+0x738>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	f7f8 f8ac 	bl	8000618 <__aeabi_dmul>
 80084c0:	a37b      	add	r3, pc, #492	@ (adr r3, 80086b0 <__ieee754_pow+0x740>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f7 fef1 	bl	80002ac <__adddf3>
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	f7f8 f8a3 	bl	8000618 <__aeabi_dmul>
 80084d2:	a379      	add	r3, pc, #484	@ (adr r3, 80086b8 <__ieee754_pow+0x748>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f7f7 fee8 	bl	80002ac <__adddf3>
 80084dc:	4622      	mov	r2, r4
 80084de:	462b      	mov	r3, r5
 80084e0:	f7f8 f89a 	bl	8000618 <__aeabi_dmul>
 80084e4:	a376      	add	r3, pc, #472	@ (adr r3, 80086c0 <__ieee754_pow+0x750>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f7 fedf 	bl	80002ac <__adddf3>
 80084ee:	4622      	mov	r2, r4
 80084f0:	462b      	mov	r3, r5
 80084f2:	f7f8 f891 	bl	8000618 <__aeabi_dmul>
 80084f6:	a374      	add	r3, pc, #464	@ (adr r3, 80086c8 <__ieee754_pow+0x758>)
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f7f7 fed6 	bl	80002ac <__adddf3>
 8008500:	4622      	mov	r2, r4
 8008502:	462b      	mov	r3, r5
 8008504:	f7f8 f888 	bl	8000618 <__aeabi_dmul>
 8008508:	a371      	add	r3, pc, #452	@ (adr r3, 80086d0 <__ieee754_pow+0x760>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f7 fecd 	bl	80002ac <__adddf3>
 8008512:	4622      	mov	r2, r4
 8008514:	4606      	mov	r6, r0
 8008516:	460f      	mov	r7, r1
 8008518:	462b      	mov	r3, r5
 800851a:	4620      	mov	r0, r4
 800851c:	4629      	mov	r1, r5
 800851e:	f7f8 f87b 	bl	8000618 <__aeabi_dmul>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4630      	mov	r0, r6
 8008528:	4639      	mov	r1, r7
 800852a:	f7f8 f875 	bl	8000618 <__aeabi_dmul>
 800852e:	465a      	mov	r2, fp
 8008530:	4604      	mov	r4, r0
 8008532:	460d      	mov	r5, r1
 8008534:	464b      	mov	r3, r9
 8008536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853a:	f7f7 feb7 	bl	80002ac <__adddf3>
 800853e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008542:	f7f8 f869 	bl	8000618 <__aeabi_dmul>
 8008546:	4622      	mov	r2, r4
 8008548:	462b      	mov	r3, r5
 800854a:	f7f7 feaf 	bl	80002ac <__adddf3>
 800854e:	465a      	mov	r2, fp
 8008550:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008554:	464b      	mov	r3, r9
 8008556:	4658      	mov	r0, fp
 8008558:	4649      	mov	r1, r9
 800855a:	f7f8 f85d 	bl	8000618 <__aeabi_dmul>
 800855e:	4b6a      	ldr	r3, [pc, #424]	@ (8008708 <__ieee754_pow+0x798>)
 8008560:	2200      	movs	r2, #0
 8008562:	4606      	mov	r6, r0
 8008564:	460f      	mov	r7, r1
 8008566:	f7f7 fea1 	bl	80002ac <__adddf3>
 800856a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800856e:	f7f7 fe9d 	bl	80002ac <__adddf3>
 8008572:	46d8      	mov	r8, fp
 8008574:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008578:	460d      	mov	r5, r1
 800857a:	465a      	mov	r2, fp
 800857c:	460b      	mov	r3, r1
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008586:	f7f8 f847 	bl	8000618 <__aeabi_dmul>
 800858a:	465c      	mov	r4, fp
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	4b5d      	ldr	r3, [pc, #372]	@ (8008708 <__ieee754_pow+0x798>)
 8008592:	2200      	movs	r2, #0
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f7 fe86 	bl	80002a8 <__aeabi_dsub>
 800859c:	4632      	mov	r2, r6
 800859e:	463b      	mov	r3, r7
 80085a0:	f7f7 fe82 	bl	80002a8 <__aeabi_dsub>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085ac:	f7f7 fe7c 	bl	80002a8 <__aeabi_dsub>
 80085b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b4:	f7f8 f830 	bl	8000618 <__aeabi_dmul>
 80085b8:	4622      	mov	r2, r4
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	462b      	mov	r3, r5
 80085c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085c4:	f7f8 f828 	bl	8000618 <__aeabi_dmul>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f7 fe6c 	bl	80002ac <__adddf3>
 80085d4:	4606      	mov	r6, r0
 80085d6:	460f      	mov	r7, r1
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f7 fe64 	bl	80002ac <__adddf3>
 80085e4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80085e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80086d8 <__ieee754_pow+0x768>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	4658      	mov	r0, fp
 80085f0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80085f4:	460d      	mov	r5, r1
 80085f6:	f7f8 f80f 	bl	8000618 <__aeabi_dmul>
 80085fa:	465c      	mov	r4, fp
 80085fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f7f7 fe4e 	bl	80002a8 <__aeabi_dsub>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f7 fe48 	bl	80002a8 <__aeabi_dsub>
 8008618:	a331      	add	r3, pc, #196	@ (adr r3, 80086e0 <__ieee754_pow+0x770>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fffb 	bl	8000618 <__aeabi_dmul>
 8008622:	a331      	add	r3, pc, #196	@ (adr r3, 80086e8 <__ieee754_pow+0x778>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	4606      	mov	r6, r0
 800862a:	460f      	mov	r7, r1
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 fff2 	bl	8000618 <__aeabi_dmul>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f7 fe36 	bl	80002ac <__adddf3>
 8008640:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008642:	4b32      	ldr	r3, [pc, #200]	@ (800870c <__ieee754_pow+0x79c>)
 8008644:	4413      	add	r3, r2
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 fe2f 	bl	80002ac <__adddf3>
 800864e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008652:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008654:	f7f7 ff76 	bl	8000544 <__aeabi_i2d>
 8008658:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800865a:	4b2d      	ldr	r3, [pc, #180]	@ (8008710 <__ieee754_pow+0x7a0>)
 800865c:	4413      	add	r3, r2
 800865e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008662:	4606      	mov	r6, r0
 8008664:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008668:	460f      	mov	r7, r1
 800866a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866e:	f7f7 fe1d 	bl	80002ac <__adddf3>
 8008672:	4642      	mov	r2, r8
 8008674:	464b      	mov	r3, r9
 8008676:	f7f7 fe19 	bl	80002ac <__adddf3>
 800867a:	4632      	mov	r2, r6
 800867c:	463b      	mov	r3, r7
 800867e:	f7f7 fe15 	bl	80002ac <__adddf3>
 8008682:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008686:	4632      	mov	r2, r6
 8008688:	463b      	mov	r3, r7
 800868a:	4658      	mov	r0, fp
 800868c:	460d      	mov	r5, r1
 800868e:	f7f7 fe0b 	bl	80002a8 <__aeabi_dsub>
 8008692:	4642      	mov	r2, r8
 8008694:	464b      	mov	r3, r9
 8008696:	f7f7 fe07 	bl	80002a8 <__aeabi_dsub>
 800869a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800869e:	f7f7 fe03 	bl	80002a8 <__aeabi_dsub>
 80086a2:	465c      	mov	r4, fp
 80086a4:	e036      	b.n	8008714 <__ieee754_pow+0x7a4>
 80086a6:	bf00      	nop
 80086a8:	4a454eef 	.word	0x4a454eef
 80086ac:	3fca7e28 	.word	0x3fca7e28
 80086b0:	93c9db65 	.word	0x93c9db65
 80086b4:	3fcd864a 	.word	0x3fcd864a
 80086b8:	a91d4101 	.word	0xa91d4101
 80086bc:	3fd17460 	.word	0x3fd17460
 80086c0:	518f264d 	.word	0x518f264d
 80086c4:	3fd55555 	.word	0x3fd55555
 80086c8:	db6fabff 	.word	0xdb6fabff
 80086cc:	3fdb6db6 	.word	0x3fdb6db6
 80086d0:	33333303 	.word	0x33333303
 80086d4:	3fe33333 	.word	0x3fe33333
 80086d8:	e0000000 	.word	0xe0000000
 80086dc:	3feec709 	.word	0x3feec709
 80086e0:	dc3a03fd 	.word	0xdc3a03fd
 80086e4:	3feec709 	.word	0x3feec709
 80086e8:	145b01f5 	.word	0x145b01f5
 80086ec:	be3e2fe0 	.word	0xbe3e2fe0
 80086f0:	7ff00000 	.word	0x7ff00000
 80086f4:	43400000 	.word	0x43400000
 80086f8:	0003988e 	.word	0x0003988e
 80086fc:	000bb679 	.word	0x000bb679
 8008700:	08009be0 	.word	0x08009be0
 8008704:	3ff00000 	.word	0x3ff00000
 8008708:	40080000 	.word	0x40080000
 800870c:	08009bc0 	.word	0x08009bc0
 8008710:	08009bd0 	.word	0x08009bd0
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800871c:	e5d6      	b.n	80082cc <__ieee754_pow+0x35c>
 800871e:	f04f 0a01 	mov.w	sl, #1
 8008722:	e65e      	b.n	80083e2 <__ieee754_pow+0x472>
 8008724:	a3b5      	add	r3, pc, #724	@ (adr r3, 80089fc <__ieee754_pow+0xa8c>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	4630      	mov	r0, r6
 800872c:	4639      	mov	r1, r7
 800872e:	f7f7 fdbd 	bl	80002ac <__adddf3>
 8008732:	4642      	mov	r2, r8
 8008734:	e9cd 0100 	strd	r0, r1, [sp]
 8008738:	464b      	mov	r3, r9
 800873a:	4620      	mov	r0, r4
 800873c:	4629      	mov	r1, r5
 800873e:	f7f7 fdb3 	bl	80002a8 <__aeabi_dsub>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800874a:	f7f8 f9f5 	bl	8000b38 <__aeabi_dcmpgt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f47f adfe 	bne.w	8008350 <__ieee754_pow+0x3e0>
 8008754:	4ba2      	ldr	r3, [pc, #648]	@ (80089e0 <__ieee754_pow+0xa70>)
 8008756:	e022      	b.n	800879e <__ieee754_pow+0x82e>
 8008758:	4ca2      	ldr	r4, [pc, #648]	@ (80089e4 <__ieee754_pow+0xa74>)
 800875a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800875e:	42a3      	cmp	r3, r4
 8008760:	d919      	bls.n	8008796 <__ieee754_pow+0x826>
 8008762:	4ba1      	ldr	r3, [pc, #644]	@ (80089e8 <__ieee754_pow+0xa78>)
 8008764:	440b      	add	r3, r1
 8008766:	4303      	orrs	r3, r0
 8008768:	d009      	beq.n	800877e <__ieee754_pow+0x80e>
 800876a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	2300      	movs	r3, #0
 8008772:	f7f8 f9c3 	bl	8000afc <__aeabi_dcmplt>
 8008776:	3800      	subs	r0, #0
 8008778:	bf18      	it	ne
 800877a:	2001      	movne	r0, #1
 800877c:	e512      	b.n	80081a4 <__ieee754_pow+0x234>
 800877e:	4642      	mov	r2, r8
 8008780:	464b      	mov	r3, r9
 8008782:	f7f7 fd91 	bl	80002a8 <__aeabi_dsub>
 8008786:	4632      	mov	r2, r6
 8008788:	463b      	mov	r3, r7
 800878a:	f7f8 f9cb 	bl	8000b24 <__aeabi_dcmpge>
 800878e:	2800      	cmp	r0, #0
 8008790:	d1eb      	bne.n	800876a <__ieee754_pow+0x7fa>
 8008792:	4b96      	ldr	r3, [pc, #600]	@ (80089ec <__ieee754_pow+0xa7c>)
 8008794:	e003      	b.n	800879e <__ieee754_pow+0x82e>
 8008796:	4a96      	ldr	r2, [pc, #600]	@ (80089f0 <__ieee754_pow+0xa80>)
 8008798:	4293      	cmp	r3, r2
 800879a:	f240 80e7 	bls.w	800896c <__ieee754_pow+0x9fc>
 800879e:	151b      	asrs	r3, r3, #20
 80087a0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80087a4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80087a8:	fa4a fa03 	asr.w	sl, sl, r3
 80087ac:	44da      	add	sl, fp
 80087ae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80087b2:	4890      	ldr	r0, [pc, #576]	@ (80089f4 <__ieee754_pow+0xa84>)
 80087b4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80087b8:	4108      	asrs	r0, r1
 80087ba:	ea00 030a 	and.w	r3, r0, sl
 80087be:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80087c2:	f1c1 0114 	rsb	r1, r1, #20
 80087c6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80087ca:	fa4a fa01 	asr.w	sl, sl, r1
 80087ce:	f1bb 0f00 	cmp.w	fp, #0
 80087d2:	4640      	mov	r0, r8
 80087d4:	4649      	mov	r1, r9
 80087d6:	f04f 0200 	mov.w	r2, #0
 80087da:	bfb8      	it	lt
 80087dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80087e0:	f7f7 fd62 	bl	80002a8 <__aeabi_dsub>
 80087e4:	4680      	mov	r8, r0
 80087e6:	4689      	mov	r9, r1
 80087e8:	4632      	mov	r2, r6
 80087ea:	463b      	mov	r3, r7
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f7 fd5c 	bl	80002ac <__adddf3>
 80087f4:	2400      	movs	r4, #0
 80087f6:	a36a      	add	r3, pc, #424	@ (adr r3, 80089a0 <__ieee754_pow+0xa30>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	4620      	mov	r0, r4
 80087fe:	460d      	mov	r5, r1
 8008800:	f7f7 ff0a 	bl	8000618 <__aeabi_dmul>
 8008804:	4642      	mov	r2, r8
 8008806:	e9cd 0100 	strd	r0, r1, [sp]
 800880a:	464b      	mov	r3, r9
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fd4a 	bl	80002a8 <__aeabi_dsub>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4630      	mov	r0, r6
 800881a:	4639      	mov	r1, r7
 800881c:	f7f7 fd44 	bl	80002a8 <__aeabi_dsub>
 8008820:	a361      	add	r3, pc, #388	@ (adr r3, 80089a8 <__ieee754_pow+0xa38>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f7f7 fef7 	bl	8000618 <__aeabi_dmul>
 800882a:	a361      	add	r3, pc, #388	@ (adr r3, 80089b0 <__ieee754_pow+0xa40>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	4680      	mov	r8, r0
 8008832:	4689      	mov	r9, r1
 8008834:	4620      	mov	r0, r4
 8008836:	4629      	mov	r1, r5
 8008838:	f7f7 feee 	bl	8000618 <__aeabi_dmul>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f7 fd32 	bl	80002ac <__adddf3>
 8008848:	4604      	mov	r4, r0
 800884a:	460d      	mov	r5, r1
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008854:	f7f7 fd2a 	bl	80002ac <__adddf3>
 8008858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	f7f7 fd22 	bl	80002a8 <__aeabi_dsub>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f7 fd1c 	bl	80002a8 <__aeabi_dsub>
 8008870:	4642      	mov	r2, r8
 8008872:	4606      	mov	r6, r0
 8008874:	460f      	mov	r7, r1
 8008876:	464b      	mov	r3, r9
 8008878:	4640      	mov	r0, r8
 800887a:	4649      	mov	r1, r9
 800887c:	f7f7 fecc 	bl	8000618 <__aeabi_dmul>
 8008880:	a34d      	add	r3, pc, #308	@ (adr r3, 80089b8 <__ieee754_pow+0xa48>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	4604      	mov	r4, r0
 8008888:	460d      	mov	r5, r1
 800888a:	f7f7 fec5 	bl	8000618 <__aeabi_dmul>
 800888e:	a34c      	add	r3, pc, #304	@ (adr r3, 80089c0 <__ieee754_pow+0xa50>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f7f7 fd08 	bl	80002a8 <__aeabi_dsub>
 8008898:	4622      	mov	r2, r4
 800889a:	462b      	mov	r3, r5
 800889c:	f7f7 febc 	bl	8000618 <__aeabi_dmul>
 80088a0:	a349      	add	r3, pc, #292	@ (adr r3, 80089c8 <__ieee754_pow+0xa58>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fd01 	bl	80002ac <__adddf3>
 80088aa:	4622      	mov	r2, r4
 80088ac:	462b      	mov	r3, r5
 80088ae:	f7f7 feb3 	bl	8000618 <__aeabi_dmul>
 80088b2:	a347      	add	r3, pc, #284	@ (adr r3, 80089d0 <__ieee754_pow+0xa60>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f7f7 fcf6 	bl	80002a8 <__aeabi_dsub>
 80088bc:	4622      	mov	r2, r4
 80088be:	462b      	mov	r3, r5
 80088c0:	f7f7 feaa 	bl	8000618 <__aeabi_dmul>
 80088c4:	a344      	add	r3, pc, #272	@ (adr r3, 80089d8 <__ieee754_pow+0xa68>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fcef 	bl	80002ac <__adddf3>
 80088ce:	4622      	mov	r2, r4
 80088d0:	462b      	mov	r3, r5
 80088d2:	f7f7 fea1 	bl	8000618 <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4640      	mov	r0, r8
 80088dc:	4649      	mov	r1, r9
 80088de:	f7f7 fce3 	bl	80002a8 <__aeabi_dsub>
 80088e2:	4604      	mov	r4, r0
 80088e4:	460d      	mov	r5, r1
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f7 fe93 	bl	8000618 <__aeabi_dmul>
 80088f2:	2200      	movs	r2, #0
 80088f4:	e9cd 0100 	strd	r0, r1, [sp]
 80088f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f7 fcd2 	bl	80002a8 <__aeabi_dsub>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800890c:	f7f7 ffae 	bl	800086c <__aeabi_ddiv>
 8008910:	4632      	mov	r2, r6
 8008912:	4604      	mov	r4, r0
 8008914:	460d      	mov	r5, r1
 8008916:	463b      	mov	r3, r7
 8008918:	4640      	mov	r0, r8
 800891a:	4649      	mov	r1, r9
 800891c:	f7f7 fe7c 	bl	8000618 <__aeabi_dmul>
 8008920:	4632      	mov	r2, r6
 8008922:	463b      	mov	r3, r7
 8008924:	f7f7 fcc2 	bl	80002ac <__adddf3>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fcba 	bl	80002a8 <__aeabi_dsub>
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	f7f7 fcb6 	bl	80002a8 <__aeabi_dsub>
 800893c:	460b      	mov	r3, r1
 800893e:	4602      	mov	r2, r0
 8008940:	492d      	ldr	r1, [pc, #180]	@ (80089f8 <__ieee754_pow+0xa88>)
 8008942:	2000      	movs	r0, #0
 8008944:	f7f7 fcb0 	bl	80002a8 <__aeabi_dsub>
 8008948:	ec41 0b10 	vmov	d0, r0, r1
 800894c:	ee10 3a90 	vmov	r3, s1
 8008950:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008958:	da0b      	bge.n	8008972 <__ieee754_pow+0xa02>
 800895a:	4650      	mov	r0, sl
 800895c:	f000 fa58 	bl	8008e10 <scalbn>
 8008960:	ec51 0b10 	vmov	r0, r1, d0
 8008964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008968:	f7ff bb6d 	b.w	8008046 <__ieee754_pow+0xd6>
 800896c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008970:	e73a      	b.n	80087e8 <__ieee754_pow+0x878>
 8008972:	ec51 0b10 	vmov	r0, r1, d0
 8008976:	4619      	mov	r1, r3
 8008978:	e7f4      	b.n	8008964 <__ieee754_pow+0x9f4>
 800897a:	491f      	ldr	r1, [pc, #124]	@ (80089f8 <__ieee754_pow+0xa88>)
 800897c:	2000      	movs	r0, #0
 800897e:	f7ff bb14 	b.w	8007faa <__ieee754_pow+0x3a>
 8008982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008986:	f7ff bb10 	b.w	8007faa <__ieee754_pow+0x3a>
 800898a:	4630      	mov	r0, r6
 800898c:	4639      	mov	r1, r7
 800898e:	f7ff bb0c 	b.w	8007faa <__ieee754_pow+0x3a>
 8008992:	460c      	mov	r4, r1
 8008994:	f7ff bb69 	b.w	800806a <__ieee754_pow+0xfa>
 8008998:	2400      	movs	r4, #0
 800899a:	f7ff bb4b 	b.w	8008034 <__ieee754_pow+0xc4>
 800899e:	bf00      	nop
 80089a0:	00000000 	.word	0x00000000
 80089a4:	3fe62e43 	.word	0x3fe62e43
 80089a8:	fefa39ef 	.word	0xfefa39ef
 80089ac:	3fe62e42 	.word	0x3fe62e42
 80089b0:	0ca86c39 	.word	0x0ca86c39
 80089b4:	be205c61 	.word	0xbe205c61
 80089b8:	72bea4d0 	.word	0x72bea4d0
 80089bc:	3e663769 	.word	0x3e663769
 80089c0:	c5d26bf1 	.word	0xc5d26bf1
 80089c4:	3ebbbd41 	.word	0x3ebbbd41
 80089c8:	af25de2c 	.word	0xaf25de2c
 80089cc:	3f11566a 	.word	0x3f11566a
 80089d0:	16bebd93 	.word	0x16bebd93
 80089d4:	3f66c16c 	.word	0x3f66c16c
 80089d8:	5555553e 	.word	0x5555553e
 80089dc:	3fc55555 	.word	0x3fc55555
 80089e0:	40900000 	.word	0x40900000
 80089e4:	4090cbff 	.word	0x4090cbff
 80089e8:	3f6f3400 	.word	0x3f6f3400
 80089ec:	4090cc00 	.word	0x4090cc00
 80089f0:	3fe00000 	.word	0x3fe00000
 80089f4:	fff00000 	.word	0xfff00000
 80089f8:	3ff00000 	.word	0x3ff00000
 80089fc:	652b82fe 	.word	0x652b82fe
 8008a00:	3c971547 	.word	0x3c971547
 8008a04:	00000000 	.word	0x00000000

08008a08 <__ieee754_rem_pio2>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	ec57 6b10 	vmov	r6, r7, d0
 8008a10:	4bc5      	ldr	r3, [pc, #788]	@ (8008d28 <__ieee754_rem_pio2+0x320>)
 8008a12:	b08d      	sub	sp, #52	@ 0x34
 8008a14:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008a18:	4598      	cmp	r8, r3
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	9704      	str	r7, [sp, #16]
 8008a1e:	d807      	bhi.n	8008a30 <__ieee754_rem_pio2+0x28>
 8008a20:	2200      	movs	r2, #0
 8008a22:	2300      	movs	r3, #0
 8008a24:	ed80 0b00 	vstr	d0, [r0]
 8008a28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008a2c:	2500      	movs	r5, #0
 8008a2e:	e028      	b.n	8008a82 <__ieee754_rem_pio2+0x7a>
 8008a30:	4bbe      	ldr	r3, [pc, #760]	@ (8008d2c <__ieee754_rem_pio2+0x324>)
 8008a32:	4598      	cmp	r8, r3
 8008a34:	d878      	bhi.n	8008b28 <__ieee754_rem_pio2+0x120>
 8008a36:	9b04      	ldr	r3, [sp, #16]
 8008a38:	4dbd      	ldr	r5, [pc, #756]	@ (8008d30 <__ieee754_rem_pio2+0x328>)
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008cf0 <__ieee754_rem_pio2+0x2e8>)
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	4639      	mov	r1, r7
 8008a46:	dd38      	ble.n	8008aba <__ieee754_rem_pio2+0xb2>
 8008a48:	f7f7 fc2e 	bl	80002a8 <__aeabi_dsub>
 8008a4c:	45a8      	cmp	r8, r5
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460f      	mov	r7, r1
 8008a52:	d01a      	beq.n	8008a8a <__ieee754_rem_pio2+0x82>
 8008a54:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fc25 	bl	80002a8 <__aeabi_dsub>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4680      	mov	r8, r0
 8008a64:	4689      	mov	r9, r1
 8008a66:	4630      	mov	r0, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f7 fc1d 	bl	80002a8 <__aeabi_dsub>
 8008a6e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f0>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fc18 	bl	80002a8 <__aeabi_dsub>
 8008a78:	e9c4 8900 	strd	r8, r9, [r4]
 8008a7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a80:	2501      	movs	r5, #1
 8008a82:	4628      	mov	r0, r5
 8008a84:	b00d      	add	sp, #52	@ 0x34
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	a39d      	add	r3, pc, #628	@ (adr r3, 8008d00 <__ieee754_rem_pio2+0x2f8>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fc0a 	bl	80002a8 <__aeabi_dsub>
 8008a94:	a39c      	add	r3, pc, #624	@ (adr r3, 8008d08 <__ieee754_rem_pio2+0x300>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	f7f7 fc03 	bl	80002a8 <__aeabi_dsub>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	4689      	mov	r9, r1
 8008aaa:	4630      	mov	r0, r6
 8008aac:	4639      	mov	r1, r7
 8008aae:	f7f7 fbfb 	bl	80002a8 <__aeabi_dsub>
 8008ab2:	a395      	add	r3, pc, #596	@ (adr r3, 8008d08 <__ieee754_rem_pio2+0x300>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	e7dc      	b.n	8008a74 <__ieee754_rem_pio2+0x6c>
 8008aba:	f7f7 fbf7 	bl	80002ac <__adddf3>
 8008abe:	45a8      	cmp	r8, r5
 8008ac0:	4606      	mov	r6, r0
 8008ac2:	460f      	mov	r7, r1
 8008ac4:	d018      	beq.n	8008af8 <__ieee754_rem_pio2+0xf0>
 8008ac6:	a38c      	add	r3, pc, #560	@ (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f0>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fbee 	bl	80002ac <__adddf3>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fbe4 	bl	80002a8 <__aeabi_dsub>
 8008ae0:	a385      	add	r3, pc, #532	@ (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f0>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fbe1 	bl	80002ac <__adddf3>
 8008aea:	f04f 35ff 	mov.w	r5, #4294967295
 8008aee:	e9c4 8900 	strd	r8, r9, [r4]
 8008af2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008af6:	e7c4      	b.n	8008a82 <__ieee754_rem_pio2+0x7a>
 8008af8:	a381      	add	r3, pc, #516	@ (adr r3, 8008d00 <__ieee754_rem_pio2+0x2f8>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 fbd5 	bl	80002ac <__adddf3>
 8008b02:	a381      	add	r3, pc, #516	@ (adr r3, 8008d08 <__ieee754_rem_pio2+0x300>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	4606      	mov	r6, r0
 8008b0a:	460f      	mov	r7, r1
 8008b0c:	f7f7 fbce 	bl	80002ac <__adddf3>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4680      	mov	r8, r0
 8008b16:	4689      	mov	r9, r1
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 fbc4 	bl	80002a8 <__aeabi_dsub>
 8008b20:	a379      	add	r3, pc, #484	@ (adr r3, 8008d08 <__ieee754_rem_pio2+0x300>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	e7de      	b.n	8008ae6 <__ieee754_rem_pio2+0xde>
 8008b28:	4b82      	ldr	r3, [pc, #520]	@ (8008d34 <__ieee754_rem_pio2+0x32c>)
 8008b2a:	4598      	cmp	r8, r3
 8008b2c:	f200 80d1 	bhi.w	8008cd2 <__ieee754_rem_pio2+0x2ca>
 8008b30:	f000 f966 	bl	8008e00 <fabs>
 8008b34:	ec57 6b10 	vmov	r6, r7, d0
 8008b38:	a375      	add	r3, pc, #468	@ (adr r3, 8008d10 <__ieee754_rem_pio2+0x308>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	4630      	mov	r0, r6
 8008b40:	4639      	mov	r1, r7
 8008b42:	f7f7 fd69 	bl	8000618 <__aeabi_dmul>
 8008b46:	4b7c      	ldr	r3, [pc, #496]	@ (8008d38 <__ieee754_rem_pio2+0x330>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f7f7 fbaf 	bl	80002ac <__adddf3>
 8008b4e:	f7f8 f813 	bl	8000b78 <__aeabi_d2iz>
 8008b52:	4605      	mov	r5, r0
 8008b54:	f7f7 fcf6 	bl	8000544 <__aeabi_i2d>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b60:	a363      	add	r3, pc, #396	@ (adr r3, 8008cf0 <__ieee754_rem_pio2+0x2e8>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fd57 	bl	8000618 <__aeabi_dmul>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4630      	mov	r0, r6
 8008b70:	4639      	mov	r1, r7
 8008b72:	f7f7 fb99 	bl	80002a8 <__aeabi_dsub>
 8008b76:	a360      	add	r3, pc, #384	@ (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f0>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	4682      	mov	sl, r0
 8008b7e:	468b      	mov	fp, r1
 8008b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b84:	f7f7 fd48 	bl	8000618 <__aeabi_dmul>
 8008b88:	2d1f      	cmp	r5, #31
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	460f      	mov	r7, r1
 8008b8e:	dc0c      	bgt.n	8008baa <__ieee754_rem_pio2+0x1a2>
 8008b90:	4b6a      	ldr	r3, [pc, #424]	@ (8008d3c <__ieee754_rem_pio2+0x334>)
 8008b92:	1e6a      	subs	r2, r5, #1
 8008b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	d006      	beq.n	8008baa <__ieee754_rem_pio2+0x1a2>
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	4659      	mov	r1, fp
 8008ba4:	f7f7 fb80 	bl	80002a8 <__aeabi_dsub>
 8008ba8:	e00e      	b.n	8008bc8 <__ieee754_rem_pio2+0x1c0>
 8008baa:	463b      	mov	r3, r7
 8008bac:	4632      	mov	r2, r6
 8008bae:	4650      	mov	r0, sl
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	f7f7 fb79 	bl	80002a8 <__aeabi_dsub>
 8008bb6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008bc0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008bc4:	2b10      	cmp	r3, #16
 8008bc6:	dc02      	bgt.n	8008bce <__ieee754_rem_pio2+0x1c6>
 8008bc8:	e9c4 0100 	strd	r0, r1, [r4]
 8008bcc:	e039      	b.n	8008c42 <__ieee754_rem_pio2+0x23a>
 8008bce:	a34c      	add	r3, pc, #304	@ (adr r3, 8008d00 <__ieee754_rem_pio2+0x2f8>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd8:	f7f7 fd1e 	bl	8000618 <__aeabi_dmul>
 8008bdc:	4606      	mov	r6, r0
 8008bde:	460f      	mov	r7, r1
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4650      	mov	r0, sl
 8008be6:	4659      	mov	r1, fp
 8008be8:	f7f7 fb5e 	bl	80002a8 <__aeabi_dsub>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	4689      	mov	r9, r1
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	f7f7 fb56 	bl	80002a8 <__aeabi_dsub>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	463b      	mov	r3, r7
 8008c00:	f7f7 fb52 	bl	80002a8 <__aeabi_dsub>
 8008c04:	a340      	add	r3, pc, #256	@ (adr r3, 8008d08 <__ieee754_rem_pio2+0x300>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c12:	f7f7 fd01 	bl	8000618 <__aeabi_dmul>
 8008c16:	4632      	mov	r2, r6
 8008c18:	463b      	mov	r3, r7
 8008c1a:	f7f7 fb45 	bl	80002a8 <__aeabi_dsub>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	4640      	mov	r0, r8
 8008c28:	4649      	mov	r1, r9
 8008c2a:	f7f7 fb3d 	bl	80002a8 <__aeabi_dsub>
 8008c2e:	9a05      	ldr	r2, [sp, #20]
 8008c30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b31      	cmp	r3, #49	@ 0x31
 8008c38:	dc20      	bgt.n	8008c7c <__ieee754_rem_pio2+0x274>
 8008c3a:	e9c4 0100 	strd	r0, r1, [r4]
 8008c3e:	46c2      	mov	sl, r8
 8008c40:	46cb      	mov	fp, r9
 8008c42:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c46:	4650      	mov	r0, sl
 8008c48:	4642      	mov	r2, r8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	f7f7 fb2b 	bl	80002a8 <__aeabi_dsub>
 8008c52:	463b      	mov	r3, r7
 8008c54:	4632      	mov	r2, r6
 8008c56:	f7f7 fb27 	bl	80002a8 <__aeabi_dsub>
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c62:	f6bf af0e 	bge.w	8008a82 <__ieee754_rem_pio2+0x7a>
 8008c66:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c70:	f8c4 8000 	str.w	r8, [r4]
 8008c74:	60a0      	str	r0, [r4, #8]
 8008c76:	60e3      	str	r3, [r4, #12]
 8008c78:	426d      	negs	r5, r5
 8008c7a:	e702      	b.n	8008a82 <__ieee754_rem_pio2+0x7a>
 8008c7c:	a326      	add	r3, pc, #152	@ (adr r3, 8008d18 <__ieee754_rem_pio2+0x310>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c86:	f7f7 fcc7 	bl	8000618 <__aeabi_dmul>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460f      	mov	r7, r1
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4640      	mov	r0, r8
 8008c94:	4649      	mov	r1, r9
 8008c96:	f7f7 fb07 	bl	80002a8 <__aeabi_dsub>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	468b      	mov	fp, r1
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	f7f7 faff 	bl	80002a8 <__aeabi_dsub>
 8008caa:	4632      	mov	r2, r6
 8008cac:	463b      	mov	r3, r7
 8008cae:	f7f7 fafb 	bl	80002a8 <__aeabi_dsub>
 8008cb2:	a31b      	add	r3, pc, #108	@ (adr r3, 8008d20 <__ieee754_rem_pio2+0x318>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	4606      	mov	r6, r0
 8008cba:	460f      	mov	r7, r1
 8008cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc0:	f7f7 fcaa 	bl	8000618 <__aeabi_dmul>
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	f7f7 faee 	bl	80002a8 <__aeabi_dsub>
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	e764      	b.n	8008b9c <__ieee754_rem_pio2+0x194>
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d40 <__ieee754_rem_pio2+0x338>)
 8008cd4:	4598      	cmp	r8, r3
 8008cd6:	d935      	bls.n	8008d44 <__ieee754_rem_pio2+0x33c>
 8008cd8:	4632      	mov	r2, r6
 8008cda:	463b      	mov	r3, r7
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 fae2 	bl	80002a8 <__aeabi_dsub>
 8008ce4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ce8:	e9c4 0100 	strd	r0, r1, [r4]
 8008cec:	e69e      	b.n	8008a2c <__ieee754_rem_pio2+0x24>
 8008cee:	bf00      	nop
 8008cf0:	54400000 	.word	0x54400000
 8008cf4:	3ff921fb 	.word	0x3ff921fb
 8008cf8:	1a626331 	.word	0x1a626331
 8008cfc:	3dd0b461 	.word	0x3dd0b461
 8008d00:	1a600000 	.word	0x1a600000
 8008d04:	3dd0b461 	.word	0x3dd0b461
 8008d08:	2e037073 	.word	0x2e037073
 8008d0c:	3ba3198a 	.word	0x3ba3198a
 8008d10:	6dc9c883 	.word	0x6dc9c883
 8008d14:	3fe45f30 	.word	0x3fe45f30
 8008d18:	2e000000 	.word	0x2e000000
 8008d1c:	3ba3198a 	.word	0x3ba3198a
 8008d20:	252049c1 	.word	0x252049c1
 8008d24:	397b839a 	.word	0x397b839a
 8008d28:	3fe921fb 	.word	0x3fe921fb
 8008d2c:	4002d97b 	.word	0x4002d97b
 8008d30:	3ff921fb 	.word	0x3ff921fb
 8008d34:	413921fb 	.word	0x413921fb
 8008d38:	3fe00000 	.word	0x3fe00000
 8008d3c:	08009bf0 	.word	0x08009bf0
 8008d40:	7fefffff 	.word	0x7fefffff
 8008d44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008d48:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008d4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008d50:	4630      	mov	r0, r6
 8008d52:	460f      	mov	r7, r1
 8008d54:	f7f7 ff10 	bl	8000b78 <__aeabi_d2iz>
 8008d58:	f7f7 fbf4 	bl	8000544 <__aeabi_i2d>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d68:	f7f7 fa9e 	bl	80002a8 <__aeabi_dsub>
 8008d6c:	4b22      	ldr	r3, [pc, #136]	@ (8008df8 <__ieee754_rem_pio2+0x3f0>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f7f7 fc52 	bl	8000618 <__aeabi_dmul>
 8008d74:	460f      	mov	r7, r1
 8008d76:	4606      	mov	r6, r0
 8008d78:	f7f7 fefe 	bl	8000b78 <__aeabi_d2iz>
 8008d7c:	f7f7 fbe2 	bl	8000544 <__aeabi_i2d>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d8c:	f7f7 fa8c 	bl	80002a8 <__aeabi_dsub>
 8008d90:	4b19      	ldr	r3, [pc, #100]	@ (8008df8 <__ieee754_rem_pio2+0x3f0>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	f7f7 fc40 	bl	8000618 <__aeabi_dmul>
 8008d98:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008d9c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008da0:	f04f 0803 	mov.w	r8, #3
 8008da4:	2600      	movs	r6, #0
 8008da6:	2700      	movs	r7, #0
 8008da8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008dac:	4632      	mov	r2, r6
 8008dae:	463b      	mov	r3, r7
 8008db0:	46c2      	mov	sl, r8
 8008db2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008db6:	f7f7 fe97 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d1f4      	bne.n	8008da8 <__ieee754_rem_pio2+0x3a0>
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <__ieee754_rem_pio2+0x3f4>)
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	4653      	mov	r3, sl
 8008dca:	4621      	mov	r1, r4
 8008dcc:	a806      	add	r0, sp, #24
 8008dce:	f000 f8d7 	bl	8008f80 <__kernel_rem_pio2>
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	f6bf ae53 	bge.w	8008a82 <__ieee754_rem_pio2+0x7a>
 8008ddc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008de0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008de4:	e9c4 2300 	strd	r2, r3, [r4]
 8008de8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008df0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008df4:	e740      	b.n	8008c78 <__ieee754_rem_pio2+0x270>
 8008df6:	bf00      	nop
 8008df8:	41700000 	.word	0x41700000
 8008dfc:	08009c70 	.word	0x08009c70

08008e00 <fabs>:
 8008e00:	ec51 0b10 	vmov	r0, r1, d0
 8008e04:	4602      	mov	r2, r0
 8008e06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e0a:	ec43 2b10 	vmov	d0, r2, r3
 8008e0e:	4770      	bx	lr

08008e10 <scalbn>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	ec55 4b10 	vmov	r4, r5, d0
 8008e16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	b991      	cbnz	r1, 8008e46 <scalbn+0x36>
 8008e20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008e24:	4323      	orrs	r3, r4
 8008e26:	d03b      	beq.n	8008ea0 <scalbn+0x90>
 8008e28:	4b33      	ldr	r3, [pc, #204]	@ (8008ef8 <scalbn+0xe8>)
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f7f7 fbf2 	bl	8000618 <__aeabi_dmul>
 8008e34:	4b31      	ldr	r3, [pc, #196]	@ (8008efc <scalbn+0xec>)
 8008e36:	429e      	cmp	r6, r3
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	da0f      	bge.n	8008e5e <scalbn+0x4e>
 8008e3e:	a326      	add	r3, pc, #152	@ (adr r3, 8008ed8 <scalbn+0xc8>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	e01e      	b.n	8008e84 <scalbn+0x74>
 8008e46:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008e4a:	4291      	cmp	r1, r2
 8008e4c:	d10b      	bne.n	8008e66 <scalbn+0x56>
 8008e4e:	4622      	mov	r2, r4
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 fa2a 	bl	80002ac <__adddf3>
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	e020      	b.n	8008ea0 <scalbn+0x90>
 8008e5e:	460b      	mov	r3, r1
 8008e60:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008e64:	3936      	subs	r1, #54	@ 0x36
 8008e66:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008e6a:	4296      	cmp	r6, r2
 8008e6c:	dd0d      	ble.n	8008e8a <scalbn+0x7a>
 8008e6e:	2d00      	cmp	r5, #0
 8008e70:	a11b      	add	r1, pc, #108	@ (adr r1, 8008ee0 <scalbn+0xd0>)
 8008e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e76:	da02      	bge.n	8008e7e <scalbn+0x6e>
 8008e78:	a11b      	add	r1, pc, #108	@ (adr r1, 8008ee8 <scalbn+0xd8>)
 8008e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e7e:	a318      	add	r3, pc, #96	@ (adr r3, 8008ee0 <scalbn+0xd0>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f7f7 fbc8 	bl	8000618 <__aeabi_dmul>
 8008e88:	e7e6      	b.n	8008e58 <scalbn+0x48>
 8008e8a:	1872      	adds	r2, r6, r1
 8008e8c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008e90:	428a      	cmp	r2, r1
 8008e92:	dcec      	bgt.n	8008e6e <scalbn+0x5e>
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	dd06      	ble.n	8008ea6 <scalbn+0x96>
 8008e98:	f36f 531e 	bfc	r3, #20, #11
 8008e9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ea0:	ec45 4b10 	vmov	d0, r4, r5
 8008ea4:	bd70      	pop	{r4, r5, r6, pc}
 8008ea6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008eaa:	da08      	bge.n	8008ebe <scalbn+0xae>
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ed8 <scalbn+0xc8>)
 8008eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb4:	dac3      	bge.n	8008e3e <scalbn+0x2e>
 8008eb6:	a10e      	add	r1, pc, #56	@ (adr r1, 8008ef0 <scalbn+0xe0>)
 8008eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ebc:	e7bf      	b.n	8008e3e <scalbn+0x2e>
 8008ebe:	3236      	adds	r2, #54	@ 0x36
 8008ec0:	f36f 531e 	bfc	r3, #20, #11
 8008ec4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ec8:	4620      	mov	r0, r4
 8008eca:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <scalbn+0xf0>)
 8008ecc:	4629      	mov	r1, r5
 8008ece:	2200      	movs	r2, #0
 8008ed0:	e7d8      	b.n	8008e84 <scalbn+0x74>
 8008ed2:	bf00      	nop
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	c2f8f359 	.word	0xc2f8f359
 8008edc:	01a56e1f 	.word	0x01a56e1f
 8008ee0:	8800759c 	.word	0x8800759c
 8008ee4:	7e37e43c 	.word	0x7e37e43c
 8008ee8:	8800759c 	.word	0x8800759c
 8008eec:	fe37e43c 	.word	0xfe37e43c
 8008ef0:	c2f8f359 	.word	0xc2f8f359
 8008ef4:	81a56e1f 	.word	0x81a56e1f
 8008ef8:	43500000 	.word	0x43500000
 8008efc:	ffff3cb0 	.word	0xffff3cb0
 8008f00:	3c900000 	.word	0x3c900000

08008f04 <with_errno>:
 8008f04:	b510      	push	{r4, lr}
 8008f06:	ed2d 8b02 	vpush	{d8}
 8008f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8008f0e:	eef0 8a60 	vmov.f32	s17, s1
 8008f12:	4604      	mov	r4, r0
 8008f14:	f7fc fa96 	bl	8005444 <__errno>
 8008f18:	eeb0 0a48 	vmov.f32	s0, s16
 8008f1c:	eef0 0a68 	vmov.f32	s1, s17
 8008f20:	ecbd 8b02 	vpop	{d8}
 8008f24:	6004      	str	r4, [r0, #0]
 8008f26:	bd10      	pop	{r4, pc}

08008f28 <xflow>:
 8008f28:	4603      	mov	r3, r0
 8008f2a:	b507      	push	{r0, r1, r2, lr}
 8008f2c:	ec51 0b10 	vmov	r0, r1, d0
 8008f30:	b183      	cbz	r3, 8008f54 <xflow+0x2c>
 8008f32:	4602      	mov	r2, r0
 8008f34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f38:	e9cd 2300 	strd	r2, r3, [sp]
 8008f3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f40:	f7f7 fb6a 	bl	8000618 <__aeabi_dmul>
 8008f44:	ec41 0b10 	vmov	d0, r0, r1
 8008f48:	2022      	movs	r0, #34	@ 0x22
 8008f4a:	b003      	add	sp, #12
 8008f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f50:	f7ff bfd8 	b.w	8008f04 <with_errno>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	e7ee      	b.n	8008f38 <xflow+0x10>
 8008f5a:	0000      	movs	r0, r0
 8008f5c:	0000      	movs	r0, r0
	...

08008f60 <__math_uflow>:
 8008f60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f68 <__math_uflow+0x8>
 8008f64:	f7ff bfe0 	b.w	8008f28 <xflow>
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	10000000 	.word	0x10000000

08008f70 <__math_oflow>:
 8008f70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f78 <__math_oflow+0x8>
 8008f74:	f7ff bfd8 	b.w	8008f28 <xflow>
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	70000000 	.word	0x70000000

08008f80 <__kernel_rem_pio2>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	ed2d 8b02 	vpush	{d8}
 8008f88:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008f8c:	f112 0f14 	cmn.w	r2, #20
 8008f90:	9306      	str	r3, [sp, #24]
 8008f92:	9104      	str	r1, [sp, #16]
 8008f94:	4bc2      	ldr	r3, [pc, #776]	@ (80092a0 <__kernel_rem_pio2+0x320>)
 8008f96:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008f98:	9008      	str	r0, [sp, #32]
 8008f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	9b06      	ldr	r3, [sp, #24]
 8008fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fa6:	bfa8      	it	ge
 8008fa8:	1ed4      	subge	r4, r2, #3
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	bfb2      	itee	lt
 8008fae:	2400      	movlt	r4, #0
 8008fb0:	2318      	movge	r3, #24
 8008fb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8008fb6:	f06f 0317 	mvn.w	r3, #23
 8008fba:	fb04 3303 	mla	r3, r4, r3, r3
 8008fbe:	eb03 0b02 	add.w	fp, r3, r2
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	9a05      	ldr	r2, [sp, #20]
 8008fc6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009290 <__kernel_rem_pio2+0x310>
 8008fca:	eb03 0802 	add.w	r8, r3, r2
 8008fce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008fd0:	1aa7      	subs	r7, r4, r2
 8008fd2:	ae20      	add	r6, sp, #128	@ 0x80
 8008fd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008fd8:	2500      	movs	r5, #0
 8008fda:	4545      	cmp	r5, r8
 8008fdc:	dd12      	ble.n	8009004 <__kernel_rem_pio2+0x84>
 8008fde:	9b06      	ldr	r3, [sp, #24]
 8008fe0:	aa20      	add	r2, sp, #128	@ 0x80
 8008fe2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008fe6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008fea:	2700      	movs	r7, #0
 8008fec:	9b00      	ldr	r3, [sp, #0]
 8008fee:	429f      	cmp	r7, r3
 8008ff0:	dc2e      	bgt.n	8009050 <__kernel_rem_pio2+0xd0>
 8008ff2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009290 <__kernel_rem_pio2+0x310>
 8008ff6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ffa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ffe:	46a8      	mov	r8, r5
 8009000:	2600      	movs	r6, #0
 8009002:	e01b      	b.n	800903c <__kernel_rem_pio2+0xbc>
 8009004:	42ef      	cmn	r7, r5
 8009006:	d407      	bmi.n	8009018 <__kernel_rem_pio2+0x98>
 8009008:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800900c:	f7f7 fa9a 	bl	8000544 <__aeabi_i2d>
 8009010:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009014:	3501      	adds	r5, #1
 8009016:	e7e0      	b.n	8008fda <__kernel_rem_pio2+0x5a>
 8009018:	ec51 0b18 	vmov	r0, r1, d8
 800901c:	e7f8      	b.n	8009010 <__kernel_rem_pio2+0x90>
 800901e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8009022:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009026:	f7f7 faf7 	bl	8000618 <__aeabi_dmul>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009032:	f7f7 f93b 	bl	80002ac <__adddf3>
 8009036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800903a:	3601      	adds	r6, #1
 800903c:	9b05      	ldr	r3, [sp, #20]
 800903e:	429e      	cmp	r6, r3
 8009040:	dded      	ble.n	800901e <__kernel_rem_pio2+0x9e>
 8009042:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009046:	3701      	adds	r7, #1
 8009048:	ecaa 7b02 	vstmia	sl!, {d7}
 800904c:	3508      	adds	r5, #8
 800904e:	e7cd      	b.n	8008fec <__kernel_rem_pio2+0x6c>
 8009050:	9b00      	ldr	r3, [sp, #0]
 8009052:	f8dd 8000 	ldr.w	r8, [sp]
 8009056:	aa0c      	add	r2, sp, #48	@ 0x30
 8009058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800905c:	930a      	str	r3, [sp, #40]	@ 0x28
 800905e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009060:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009064:	9309      	str	r3, [sp, #36]	@ 0x24
 8009066:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800906a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800906c:	ab98      	add	r3, sp, #608	@ 0x260
 800906e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009072:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009076:	ed8d 7b02 	vstr	d7, [sp, #8]
 800907a:	ac0c      	add	r4, sp, #48	@ 0x30
 800907c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800907e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009082:	46a1      	mov	r9, r4
 8009084:	46c2      	mov	sl, r8
 8009086:	f1ba 0f00 	cmp.w	sl, #0
 800908a:	dc77      	bgt.n	800917c <__kernel_rem_pio2+0x1fc>
 800908c:	4658      	mov	r0, fp
 800908e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009092:	f7ff febd 	bl	8008e10 <scalbn>
 8009096:	ec57 6b10 	vmov	r6, r7, d0
 800909a:	2200      	movs	r2, #0
 800909c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80090a0:	4630      	mov	r0, r6
 80090a2:	4639      	mov	r1, r7
 80090a4:	f7f7 fab8 	bl	8000618 <__aeabi_dmul>
 80090a8:	ec41 0b10 	vmov	d0, r0, r1
 80090ac:	f000 fab8 	bl	8009620 <floor>
 80090b0:	4b7c      	ldr	r3, [pc, #496]	@ (80092a4 <__kernel_rem_pio2+0x324>)
 80090b2:	ec51 0b10 	vmov	r0, r1, d0
 80090b6:	2200      	movs	r2, #0
 80090b8:	f7f7 faae 	bl	8000618 <__aeabi_dmul>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 f8f0 	bl	80002a8 <__aeabi_dsub>
 80090c8:	460f      	mov	r7, r1
 80090ca:	4606      	mov	r6, r0
 80090cc:	f7f7 fd54 	bl	8000b78 <__aeabi_d2iz>
 80090d0:	9002      	str	r0, [sp, #8]
 80090d2:	f7f7 fa37 	bl	8000544 <__aeabi_i2d>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4630      	mov	r0, r6
 80090dc:	4639      	mov	r1, r7
 80090de:	f7f7 f8e3 	bl	80002a8 <__aeabi_dsub>
 80090e2:	f1bb 0f00 	cmp.w	fp, #0
 80090e6:	4606      	mov	r6, r0
 80090e8:	460f      	mov	r7, r1
 80090ea:	dd6c      	ble.n	80091c6 <__kernel_rem_pio2+0x246>
 80090ec:	f108 31ff 	add.w	r1, r8, #4294967295
 80090f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80090f2:	9d02      	ldr	r5, [sp, #8]
 80090f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090f8:	f1cb 0018 	rsb	r0, fp, #24
 80090fc:	fa43 f200 	asr.w	r2, r3, r0
 8009100:	4415      	add	r5, r2
 8009102:	4082      	lsls	r2, r0
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	aa0c      	add	r2, sp, #48	@ 0x30
 8009108:	9502      	str	r5, [sp, #8]
 800910a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800910e:	f1cb 0217 	rsb	r2, fp, #23
 8009112:	fa43 f902 	asr.w	r9, r3, r2
 8009116:	f1b9 0f00 	cmp.w	r9, #0
 800911a:	dd64      	ble.n	80091e6 <__kernel_rem_pio2+0x266>
 800911c:	9b02      	ldr	r3, [sp, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	3301      	adds	r3, #1
 8009122:	9302      	str	r3, [sp, #8]
 8009124:	4615      	mov	r5, r2
 8009126:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800912a:	4590      	cmp	r8, r2
 800912c:	f300 80a1 	bgt.w	8009272 <__kernel_rem_pio2+0x2f2>
 8009130:	f1bb 0f00 	cmp.w	fp, #0
 8009134:	dd07      	ble.n	8009146 <__kernel_rem_pio2+0x1c6>
 8009136:	f1bb 0f01 	cmp.w	fp, #1
 800913a:	f000 80c1 	beq.w	80092c0 <__kernel_rem_pio2+0x340>
 800913e:	f1bb 0f02 	cmp.w	fp, #2
 8009142:	f000 80c8 	beq.w	80092d6 <__kernel_rem_pio2+0x356>
 8009146:	f1b9 0f02 	cmp.w	r9, #2
 800914a:	d14c      	bne.n	80091e6 <__kernel_rem_pio2+0x266>
 800914c:	4632      	mov	r2, r6
 800914e:	463b      	mov	r3, r7
 8009150:	4955      	ldr	r1, [pc, #340]	@ (80092a8 <__kernel_rem_pio2+0x328>)
 8009152:	2000      	movs	r0, #0
 8009154:	f7f7 f8a8 	bl	80002a8 <__aeabi_dsub>
 8009158:	4606      	mov	r6, r0
 800915a:	460f      	mov	r7, r1
 800915c:	2d00      	cmp	r5, #0
 800915e:	d042      	beq.n	80091e6 <__kernel_rem_pio2+0x266>
 8009160:	4658      	mov	r0, fp
 8009162:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009298 <__kernel_rem_pio2+0x318>
 8009166:	f7ff fe53 	bl	8008e10 <scalbn>
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	ec53 2b10 	vmov	r2, r3, d0
 8009172:	f7f7 f899 	bl	80002a8 <__aeabi_dsub>
 8009176:	4606      	mov	r6, r0
 8009178:	460f      	mov	r7, r1
 800917a:	e034      	b.n	80091e6 <__kernel_rem_pio2+0x266>
 800917c:	4b4b      	ldr	r3, [pc, #300]	@ (80092ac <__kernel_rem_pio2+0x32c>)
 800917e:	2200      	movs	r2, #0
 8009180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009184:	f7f7 fa48 	bl	8000618 <__aeabi_dmul>
 8009188:	f7f7 fcf6 	bl	8000b78 <__aeabi_d2iz>
 800918c:	f7f7 f9da 	bl	8000544 <__aeabi_i2d>
 8009190:	4b47      	ldr	r3, [pc, #284]	@ (80092b0 <__kernel_rem_pio2+0x330>)
 8009192:	2200      	movs	r2, #0
 8009194:	4606      	mov	r6, r0
 8009196:	460f      	mov	r7, r1
 8009198:	f7f7 fa3e 	bl	8000618 <__aeabi_dmul>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a4:	f7f7 f880 	bl	80002a8 <__aeabi_dsub>
 80091a8:	f7f7 fce6 	bl	8000b78 <__aeabi_d2iz>
 80091ac:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80091b0:	f849 0b04 	str.w	r0, [r9], #4
 80091b4:	4639      	mov	r1, r7
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7f7 f878 	bl	80002ac <__adddf3>
 80091bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091c4:	e75f      	b.n	8009086 <__kernel_rem_pio2+0x106>
 80091c6:	d107      	bne.n	80091d8 <__kernel_rem_pio2+0x258>
 80091c8:	f108 33ff 	add.w	r3, r8, #4294967295
 80091cc:	aa0c      	add	r2, sp, #48	@ 0x30
 80091ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80091d6:	e79e      	b.n	8009116 <__kernel_rem_pio2+0x196>
 80091d8:	4b36      	ldr	r3, [pc, #216]	@ (80092b4 <__kernel_rem_pio2+0x334>)
 80091da:	2200      	movs	r2, #0
 80091dc:	f7f7 fca2 	bl	8000b24 <__aeabi_dcmpge>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d143      	bne.n	800926c <__kernel_rem_pio2+0x2ec>
 80091e4:	4681      	mov	r9, r0
 80091e6:	2200      	movs	r2, #0
 80091e8:	2300      	movs	r3, #0
 80091ea:	4630      	mov	r0, r6
 80091ec:	4639      	mov	r1, r7
 80091ee:	f7f7 fc7b 	bl	8000ae8 <__aeabi_dcmpeq>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f000 80c1 	beq.w	800937a <__kernel_rem_pio2+0x3fa>
 80091f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80091fc:	2200      	movs	r2, #0
 80091fe:	9900      	ldr	r1, [sp, #0]
 8009200:	428b      	cmp	r3, r1
 8009202:	da70      	bge.n	80092e6 <__kernel_rem_pio2+0x366>
 8009204:	2a00      	cmp	r2, #0
 8009206:	f000 808b 	beq.w	8009320 <__kernel_rem_pio2+0x3a0>
 800920a:	f108 38ff 	add.w	r8, r8, #4294967295
 800920e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009210:	f1ab 0b18 	sub.w	fp, fp, #24
 8009214:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0f6      	beq.n	800920a <__kernel_rem_pio2+0x28a>
 800921c:	4658      	mov	r0, fp
 800921e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009298 <__kernel_rem_pio2+0x318>
 8009222:	f7ff fdf5 	bl	8008e10 <scalbn>
 8009226:	f108 0301 	add.w	r3, r8, #1
 800922a:	00da      	lsls	r2, r3, #3
 800922c:	9205      	str	r2, [sp, #20]
 800922e:	ec55 4b10 	vmov	r4, r5, d0
 8009232:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009234:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80092ac <__kernel_rem_pio2+0x32c>
 8009238:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800923c:	4646      	mov	r6, r8
 800923e:	f04f 0a00 	mov.w	sl, #0
 8009242:	2e00      	cmp	r6, #0
 8009244:	f280 80d1 	bge.w	80093ea <__kernel_rem_pio2+0x46a>
 8009248:	4644      	mov	r4, r8
 800924a:	2c00      	cmp	r4, #0
 800924c:	f2c0 80ff 	blt.w	800944e <__kernel_rem_pio2+0x4ce>
 8009250:	4b19      	ldr	r3, [pc, #100]	@ (80092b8 <__kernel_rem_pio2+0x338>)
 8009252:	461f      	mov	r7, r3
 8009254:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009256:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800925a:	9306      	str	r3, [sp, #24]
 800925c:	f04f 0a00 	mov.w	sl, #0
 8009260:	f04f 0b00 	mov.w	fp, #0
 8009264:	2600      	movs	r6, #0
 8009266:	eba8 0504 	sub.w	r5, r8, r4
 800926a:	e0e4      	b.n	8009436 <__kernel_rem_pio2+0x4b6>
 800926c:	f04f 0902 	mov.w	r9, #2
 8009270:	e754      	b.n	800911c <__kernel_rem_pio2+0x19c>
 8009272:	f854 3b04 	ldr.w	r3, [r4], #4
 8009276:	bb0d      	cbnz	r5, 80092bc <__kernel_rem_pio2+0x33c>
 8009278:	b123      	cbz	r3, 8009284 <__kernel_rem_pio2+0x304>
 800927a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800927e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009282:	2301      	movs	r3, #1
 8009284:	3201      	adds	r2, #1
 8009286:	461d      	mov	r5, r3
 8009288:	e74f      	b.n	800912a <__kernel_rem_pio2+0x1aa>
 800928a:	bf00      	nop
 800928c:	f3af 8000 	nop.w
	...
 800929c:	3ff00000 	.word	0x3ff00000
 80092a0:	08009db8 	.word	0x08009db8
 80092a4:	40200000 	.word	0x40200000
 80092a8:	3ff00000 	.word	0x3ff00000
 80092ac:	3e700000 	.word	0x3e700000
 80092b0:	41700000 	.word	0x41700000
 80092b4:	3fe00000 	.word	0x3fe00000
 80092b8:	08009d78 	.word	0x08009d78
 80092bc:	1acb      	subs	r3, r1, r3
 80092be:	e7de      	b.n	800927e <__kernel_rem_pio2+0x2fe>
 80092c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80092c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80092c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80092ce:	a90c      	add	r1, sp, #48	@ 0x30
 80092d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80092d4:	e737      	b.n	8009146 <__kernel_rem_pio2+0x1c6>
 80092d6:	f108 32ff 	add.w	r2, r8, #4294967295
 80092da:	ab0c      	add	r3, sp, #48	@ 0x30
 80092dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80092e4:	e7f3      	b.n	80092ce <__kernel_rem_pio2+0x34e>
 80092e6:	a90c      	add	r1, sp, #48	@ 0x30
 80092e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	430a      	orrs	r2, r1
 80092f0:	e785      	b.n	80091fe <__kernel_rem_pio2+0x27e>
 80092f2:	3401      	adds	r4, #1
 80092f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	d0fa      	beq.n	80092f2 <__kernel_rem_pio2+0x372>
 80092fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009302:	eb0d 0503 	add.w	r5, sp, r3
 8009306:	9b06      	ldr	r3, [sp, #24]
 8009308:	aa20      	add	r2, sp, #128	@ 0x80
 800930a:	4443      	add	r3, r8
 800930c:	f108 0701 	add.w	r7, r8, #1
 8009310:	3d98      	subs	r5, #152	@ 0x98
 8009312:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009316:	4444      	add	r4, r8
 8009318:	42bc      	cmp	r4, r7
 800931a:	da04      	bge.n	8009326 <__kernel_rem_pio2+0x3a6>
 800931c:	46a0      	mov	r8, r4
 800931e:	e6a2      	b.n	8009066 <__kernel_rem_pio2+0xe6>
 8009320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009322:	2401      	movs	r4, #1
 8009324:	e7e6      	b.n	80092f4 <__kernel_rem_pio2+0x374>
 8009326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009328:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800932c:	f7f7 f90a 	bl	8000544 <__aeabi_i2d>
 8009330:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80095f0 <__kernel_rem_pio2+0x670>
 8009334:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009338:	ed8d 7b02 	vstr	d7, [sp, #8]
 800933c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009340:	46b2      	mov	sl, r6
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	9b05      	ldr	r3, [sp, #20]
 8009348:	4598      	cmp	r8, r3
 800934a:	dd05      	ble.n	8009358 <__kernel_rem_pio2+0x3d8>
 800934c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009350:	3701      	adds	r7, #1
 8009352:	eca5 7b02 	vstmia	r5!, {d7}
 8009356:	e7df      	b.n	8009318 <__kernel_rem_pio2+0x398>
 8009358:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800935c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009360:	f7f7 f95a 	bl	8000618 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936c:	f7f6 ff9e 	bl	80002ac <__adddf3>
 8009370:	f108 0801 	add.w	r8, r8, #1
 8009374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009378:	e7e5      	b.n	8009346 <__kernel_rem_pio2+0x3c6>
 800937a:	f1cb 0000 	rsb	r0, fp, #0
 800937e:	ec47 6b10 	vmov	d0, r6, r7
 8009382:	f7ff fd45 	bl	8008e10 <scalbn>
 8009386:	ec55 4b10 	vmov	r4, r5, d0
 800938a:	4b9b      	ldr	r3, [pc, #620]	@ (80095f8 <__kernel_rem_pio2+0x678>)
 800938c:	2200      	movs	r2, #0
 800938e:	4620      	mov	r0, r4
 8009390:	4629      	mov	r1, r5
 8009392:	f7f7 fbc7 	bl	8000b24 <__aeabi_dcmpge>
 8009396:	b300      	cbz	r0, 80093da <__kernel_rem_pio2+0x45a>
 8009398:	4b98      	ldr	r3, [pc, #608]	@ (80095fc <__kernel_rem_pio2+0x67c>)
 800939a:	2200      	movs	r2, #0
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 f93a 	bl	8000618 <__aeabi_dmul>
 80093a4:	f7f7 fbe8 	bl	8000b78 <__aeabi_d2iz>
 80093a8:	4606      	mov	r6, r0
 80093aa:	f7f7 f8cb 	bl	8000544 <__aeabi_i2d>
 80093ae:	4b92      	ldr	r3, [pc, #584]	@ (80095f8 <__kernel_rem_pio2+0x678>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	f7f7 f931 	bl	8000618 <__aeabi_dmul>
 80093b6:	460b      	mov	r3, r1
 80093b8:	4602      	mov	r2, r0
 80093ba:	4629      	mov	r1, r5
 80093bc:	4620      	mov	r0, r4
 80093be:	f7f6 ff73 	bl	80002a8 <__aeabi_dsub>
 80093c2:	f7f7 fbd9 	bl	8000b78 <__aeabi_d2iz>
 80093c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80093c8:	f10b 0b18 	add.w	fp, fp, #24
 80093cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80093d0:	f108 0801 	add.w	r8, r8, #1
 80093d4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80093d8:	e720      	b.n	800921c <__kernel_rem_pio2+0x29c>
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	f7f7 fbcb 	bl	8000b78 <__aeabi_d2iz>
 80093e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80093e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80093e8:	e718      	b.n	800921c <__kernel_rem_pio2+0x29c>
 80093ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80093ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80093f0:	f7f7 f8a8 	bl	8000544 <__aeabi_i2d>
 80093f4:	4622      	mov	r2, r4
 80093f6:	462b      	mov	r3, r5
 80093f8:	f7f7 f90e 	bl	8000618 <__aeabi_dmul>
 80093fc:	4652      	mov	r2, sl
 80093fe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009402:	465b      	mov	r3, fp
 8009404:	4620      	mov	r0, r4
 8009406:	4629      	mov	r1, r5
 8009408:	f7f7 f906 	bl	8000618 <__aeabi_dmul>
 800940c:	3e01      	subs	r6, #1
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	e716      	b.n	8009242 <__kernel_rem_pio2+0x2c2>
 8009414:	9906      	ldr	r1, [sp, #24]
 8009416:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800941a:	9106      	str	r1, [sp, #24]
 800941c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009420:	f7f7 f8fa 	bl	8000618 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4650      	mov	r0, sl
 800942a:	4659      	mov	r1, fp
 800942c:	f7f6 ff3e 	bl	80002ac <__adddf3>
 8009430:	3601      	adds	r6, #1
 8009432:	4682      	mov	sl, r0
 8009434:	468b      	mov	fp, r1
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	429e      	cmp	r6, r3
 800943a:	dc01      	bgt.n	8009440 <__kernel_rem_pio2+0x4c0>
 800943c:	42ae      	cmp	r6, r5
 800943e:	dde9      	ble.n	8009414 <__kernel_rem_pio2+0x494>
 8009440:	ab48      	add	r3, sp, #288	@ 0x120
 8009442:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009446:	e9c5 ab00 	strd	sl, fp, [r5]
 800944a:	3c01      	subs	r4, #1
 800944c:	e6fd      	b.n	800924a <__kernel_rem_pio2+0x2ca>
 800944e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009450:	2b02      	cmp	r3, #2
 8009452:	dc0b      	bgt.n	800946c <__kernel_rem_pio2+0x4ec>
 8009454:	2b00      	cmp	r3, #0
 8009456:	dc35      	bgt.n	80094c4 <__kernel_rem_pio2+0x544>
 8009458:	d059      	beq.n	800950e <__kernel_rem_pio2+0x58e>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	f003 0007 	and.w	r0, r3, #7
 8009460:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009464:	ecbd 8b02 	vpop	{d8}
 8009468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800946e:	2b03      	cmp	r3, #3
 8009470:	d1f3      	bne.n	800945a <__kernel_rem_pio2+0x4da>
 8009472:	9b05      	ldr	r3, [sp, #20]
 8009474:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009478:	eb0d 0403 	add.w	r4, sp, r3
 800947c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009480:	4625      	mov	r5, r4
 8009482:	46c2      	mov	sl, r8
 8009484:	f1ba 0f00 	cmp.w	sl, #0
 8009488:	dc69      	bgt.n	800955e <__kernel_rem_pio2+0x5de>
 800948a:	4645      	mov	r5, r8
 800948c:	2d01      	cmp	r5, #1
 800948e:	f300 8087 	bgt.w	80095a0 <__kernel_rem_pio2+0x620>
 8009492:	9c05      	ldr	r4, [sp, #20]
 8009494:	ab48      	add	r3, sp, #288	@ 0x120
 8009496:	441c      	add	r4, r3
 8009498:	2000      	movs	r0, #0
 800949a:	2100      	movs	r1, #0
 800949c:	f1b8 0f01 	cmp.w	r8, #1
 80094a0:	f300 809c 	bgt.w	80095dc <__kernel_rem_pio2+0x65c>
 80094a4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80094a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80094ac:	f1b9 0f00 	cmp.w	r9, #0
 80094b0:	f040 80a6 	bne.w	8009600 <__kernel_rem_pio2+0x680>
 80094b4:	9b04      	ldr	r3, [sp, #16]
 80094b6:	e9c3 5600 	strd	r5, r6, [r3]
 80094ba:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80094be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80094c2:	e7ca      	b.n	800945a <__kernel_rem_pio2+0x4da>
 80094c4:	9d05      	ldr	r5, [sp, #20]
 80094c6:	ab48      	add	r3, sp, #288	@ 0x120
 80094c8:	441d      	add	r5, r3
 80094ca:	4644      	mov	r4, r8
 80094cc:	2000      	movs	r0, #0
 80094ce:	2100      	movs	r1, #0
 80094d0:	2c00      	cmp	r4, #0
 80094d2:	da35      	bge.n	8009540 <__kernel_rem_pio2+0x5c0>
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	d038      	beq.n	800954c <__kernel_rem_pio2+0x5cc>
 80094da:	4602      	mov	r2, r0
 80094dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094e0:	9c04      	ldr	r4, [sp, #16]
 80094e2:	e9c4 2300 	strd	r2, r3, [r4]
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80094ee:	f7f6 fedb 	bl	80002a8 <__aeabi_dsub>
 80094f2:	ad4a      	add	r5, sp, #296	@ 0x128
 80094f4:	2401      	movs	r4, #1
 80094f6:	45a0      	cmp	r8, r4
 80094f8:	da2b      	bge.n	8009552 <__kernel_rem_pio2+0x5d2>
 80094fa:	f1b9 0f00 	cmp.w	r9, #0
 80094fe:	d002      	beq.n	8009506 <__kernel_rem_pio2+0x586>
 8009500:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009504:	4619      	mov	r1, r3
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800950c:	e7a5      	b.n	800945a <__kernel_rem_pio2+0x4da>
 800950e:	9c05      	ldr	r4, [sp, #20]
 8009510:	ab48      	add	r3, sp, #288	@ 0x120
 8009512:	441c      	add	r4, r3
 8009514:	2000      	movs	r0, #0
 8009516:	2100      	movs	r1, #0
 8009518:	f1b8 0f00 	cmp.w	r8, #0
 800951c:	da09      	bge.n	8009532 <__kernel_rem_pio2+0x5b2>
 800951e:	f1b9 0f00 	cmp.w	r9, #0
 8009522:	d002      	beq.n	800952a <__kernel_rem_pio2+0x5aa>
 8009524:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009528:	4619      	mov	r1, r3
 800952a:	9b04      	ldr	r3, [sp, #16]
 800952c:	e9c3 0100 	strd	r0, r1, [r3]
 8009530:	e793      	b.n	800945a <__kernel_rem_pio2+0x4da>
 8009532:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009536:	f7f6 feb9 	bl	80002ac <__adddf3>
 800953a:	f108 38ff 	add.w	r8, r8, #4294967295
 800953e:	e7eb      	b.n	8009518 <__kernel_rem_pio2+0x598>
 8009540:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009544:	f7f6 feb2 	bl	80002ac <__adddf3>
 8009548:	3c01      	subs	r4, #1
 800954a:	e7c1      	b.n	80094d0 <__kernel_rem_pio2+0x550>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	e7c6      	b.n	80094e0 <__kernel_rem_pio2+0x560>
 8009552:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009556:	f7f6 fea9 	bl	80002ac <__adddf3>
 800955a:	3401      	adds	r4, #1
 800955c:	e7cb      	b.n	80094f6 <__kernel_rem_pio2+0x576>
 800955e:	ed35 7b02 	vldmdb	r5!, {d7}
 8009562:	ed8d 7b00 	vstr	d7, [sp]
 8009566:	ed95 7b02 	vldr	d7, [r5, #8]
 800956a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800956e:	ec53 2b17 	vmov	r2, r3, d7
 8009572:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009576:	f7f6 fe99 	bl	80002ac <__adddf3>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009586:	f7f6 fe8f 	bl	80002a8 <__aeabi_dsub>
 800958a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800958e:	f7f6 fe8d 	bl	80002ac <__adddf3>
 8009592:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009596:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800959a:	e9c5 6700 	strd	r6, r7, [r5]
 800959e:	e771      	b.n	8009484 <__kernel_rem_pio2+0x504>
 80095a0:	ed34 7b02 	vldmdb	r4!, {d7}
 80095a4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80095a8:	ec51 0b17 	vmov	r0, r1, d7
 80095ac:	4652      	mov	r2, sl
 80095ae:	465b      	mov	r3, fp
 80095b0:	ed8d 7b00 	vstr	d7, [sp]
 80095b4:	f7f6 fe7a 	bl	80002ac <__adddf3>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095c4:	f7f6 fe70 	bl	80002a8 <__aeabi_dsub>
 80095c8:	4652      	mov	r2, sl
 80095ca:	465b      	mov	r3, fp
 80095cc:	f7f6 fe6e 	bl	80002ac <__adddf3>
 80095d0:	3d01      	subs	r5, #1
 80095d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80095d6:	e9c4 6700 	strd	r6, r7, [r4]
 80095da:	e757      	b.n	800948c <__kernel_rem_pio2+0x50c>
 80095dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80095e0:	f7f6 fe64 	bl	80002ac <__adddf3>
 80095e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80095e8:	e758      	b.n	800949c <__kernel_rem_pio2+0x51c>
 80095ea:	bf00      	nop
 80095ec:	f3af 8000 	nop.w
	...
 80095f8:	41700000 	.word	0x41700000
 80095fc:	3e700000 	.word	0x3e700000
 8009600:	9b04      	ldr	r3, [sp, #16]
 8009602:	9a04      	ldr	r2, [sp, #16]
 8009604:	601d      	str	r5, [r3, #0]
 8009606:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800960a:	605c      	str	r4, [r3, #4]
 800960c:	609f      	str	r7, [r3, #8]
 800960e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8009612:	60d3      	str	r3, [r2, #12]
 8009614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009618:	6110      	str	r0, [r2, #16]
 800961a:	6153      	str	r3, [r2, #20]
 800961c:	e71d      	b.n	800945a <__kernel_rem_pio2+0x4da>
 800961e:	bf00      	nop

08009620 <floor>:
 8009620:	ec51 0b10 	vmov	r0, r1, d0
 8009624:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009630:	2e13      	cmp	r6, #19
 8009632:	460c      	mov	r4, r1
 8009634:	4605      	mov	r5, r0
 8009636:	4680      	mov	r8, r0
 8009638:	dc34      	bgt.n	80096a4 <floor+0x84>
 800963a:	2e00      	cmp	r6, #0
 800963c:	da17      	bge.n	800966e <floor+0x4e>
 800963e:	a332      	add	r3, pc, #200	@ (adr r3, 8009708 <floor+0xe8>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f6 fe32 	bl	80002ac <__adddf3>
 8009648:	2200      	movs	r2, #0
 800964a:	2300      	movs	r3, #0
 800964c:	f7f7 fa74 	bl	8000b38 <__aeabi_dcmpgt>
 8009650:	b150      	cbz	r0, 8009668 <floor+0x48>
 8009652:	2c00      	cmp	r4, #0
 8009654:	da55      	bge.n	8009702 <floor+0xe2>
 8009656:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800965a:	432c      	orrs	r4, r5
 800965c:	2500      	movs	r5, #0
 800965e:	42ac      	cmp	r4, r5
 8009660:	4c2b      	ldr	r4, [pc, #172]	@ (8009710 <floor+0xf0>)
 8009662:	bf08      	it	eq
 8009664:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009668:	4621      	mov	r1, r4
 800966a:	4628      	mov	r0, r5
 800966c:	e023      	b.n	80096b6 <floor+0x96>
 800966e:	4f29      	ldr	r7, [pc, #164]	@ (8009714 <floor+0xf4>)
 8009670:	4137      	asrs	r7, r6
 8009672:	ea01 0307 	and.w	r3, r1, r7
 8009676:	4303      	orrs	r3, r0
 8009678:	d01d      	beq.n	80096b6 <floor+0x96>
 800967a:	a323      	add	r3, pc, #140	@ (adr r3, 8009708 <floor+0xe8>)
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	f7f6 fe14 	bl	80002ac <__adddf3>
 8009684:	2200      	movs	r2, #0
 8009686:	2300      	movs	r3, #0
 8009688:	f7f7 fa56 	bl	8000b38 <__aeabi_dcmpgt>
 800968c:	2800      	cmp	r0, #0
 800968e:	d0eb      	beq.n	8009668 <floor+0x48>
 8009690:	2c00      	cmp	r4, #0
 8009692:	bfbe      	ittt	lt
 8009694:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009698:	4133      	asrlt	r3, r6
 800969a:	18e4      	addlt	r4, r4, r3
 800969c:	ea24 0407 	bic.w	r4, r4, r7
 80096a0:	2500      	movs	r5, #0
 80096a2:	e7e1      	b.n	8009668 <floor+0x48>
 80096a4:	2e33      	cmp	r6, #51	@ 0x33
 80096a6:	dd0a      	ble.n	80096be <floor+0x9e>
 80096a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80096ac:	d103      	bne.n	80096b6 <floor+0x96>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	f7f6 fdfb 	bl	80002ac <__adddf3>
 80096b6:	ec41 0b10 	vmov	d0, r0, r1
 80096ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80096c2:	f04f 37ff 	mov.w	r7, #4294967295
 80096c6:	40df      	lsrs	r7, r3
 80096c8:	4207      	tst	r7, r0
 80096ca:	d0f4      	beq.n	80096b6 <floor+0x96>
 80096cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8009708 <floor+0xe8>)
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	f7f6 fdeb 	bl	80002ac <__adddf3>
 80096d6:	2200      	movs	r2, #0
 80096d8:	2300      	movs	r3, #0
 80096da:	f7f7 fa2d 	bl	8000b38 <__aeabi_dcmpgt>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d0c2      	beq.n	8009668 <floor+0x48>
 80096e2:	2c00      	cmp	r4, #0
 80096e4:	da0a      	bge.n	80096fc <floor+0xdc>
 80096e6:	2e14      	cmp	r6, #20
 80096e8:	d101      	bne.n	80096ee <floor+0xce>
 80096ea:	3401      	adds	r4, #1
 80096ec:	e006      	b.n	80096fc <floor+0xdc>
 80096ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80096f2:	2301      	movs	r3, #1
 80096f4:	40b3      	lsls	r3, r6
 80096f6:	441d      	add	r5, r3
 80096f8:	4545      	cmp	r5, r8
 80096fa:	d3f6      	bcc.n	80096ea <floor+0xca>
 80096fc:	ea25 0507 	bic.w	r5, r5, r7
 8009700:	e7b2      	b.n	8009668 <floor+0x48>
 8009702:	2500      	movs	r5, #0
 8009704:	462c      	mov	r4, r5
 8009706:	e7af      	b.n	8009668 <floor+0x48>
 8009708:	8800759c 	.word	0x8800759c
 800970c:	7e37e43c 	.word	0x7e37e43c
 8009710:	bff00000 	.word	0xbff00000
 8009714:	000fffff 	.word	0x000fffff

08009718 <_init>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr

08009724 <_fini>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr
