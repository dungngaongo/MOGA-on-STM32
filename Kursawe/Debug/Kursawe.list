
Kursawe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009598  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08009748  08009748  0000a748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d78  08009d78  0000b1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d80  08009d80  0000b1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d84  08009d84  0000ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08009d88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1fc  2**0
                  CONTENTS
 10 .bss          000001c8  200001fc  200001fc  0000b1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003c4  200003c4  0000b1fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097e9  00000000  00000000  0000b22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba8  00000000  00000000  00014a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  000165c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066d  00000000  00000000  00016e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240cb  00000000  00000000  000174ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa91  00000000  00000000  0003b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5052  00000000  00000000  00046009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b05b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003884  00000000  00000000  0011b0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0011e924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009730 	.word	0x08009730

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	08009730 	.word	0x08009730

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <trng_rand>:
float crossover_prob = 0.6;
float mutation_prob = 0.05;
int rate_local_search = 30;
float step_size = 0.02;

uint32_t trng_rand() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
    uint32_t value;
    HAL_RNG_GenerateRandomNumber(&hrng, &value);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <trng_rand+0x1c>)
 8000fa0:	f003 f802 	bl	8003fa8 <HAL_RNG_GenerateRandomNumber>
    return value;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000218 	.word	0x20000218

08000fb4 <rand01>:

float rand01() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    return (float)trng_rand() / (float)0xFFFFFFFF;
 8000fb8:	f7ff ffec 	bl	8000f94 <trng_rand>
 8000fbc:	ee07 0a90 	vmov	s15, r0
 8000fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000fd8 <rand01+0x24>
 8000fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fcc:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	4f800000 	.word	0x4f800000

08000fdc <rand_range>:

float rand_range(float min, float max) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	ed2d 8b02 	vpush	{d8}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	edc7 0a00 	vstr	s1, [r7]
    return min + (max - min) * rand01();
 8000fee:	ed97 7a00 	vldr	s14, [r7]
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000ffa:	f7ff ffdb 	bl	8000fb4 <rand01>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001006:	edd7 7a01 	vldr	s15, [r7, #4]
 800100a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	ecbd 8b02 	vpop	{d8}
 800101a:	bd80      	pop	{r7, pc}

0800101c <random_population>:

void random_population(Population *pop) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < POP_SIZE; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e02a      	b.n	8001080 <random_population+0x64>
        for (int j = 0; j < NV; j++) {
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	e021      	b.n	8001074 <random_population+0x58>
            pop->solutions[i].x[j] = rand_range(lb[j], ub[j]);
 8001030:	4a1a      	ldr	r2, [pc, #104]	@ (800109c <random_population+0x80>)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <random_population+0x84>)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	eef0 0a47 	vmov.f32	s1, s14
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	f7ff ffc4 	bl	8000fdc <rand_range>
 8001054:	eef0 7a40 	vmov.f32	s15, s0
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < NV; j++) {
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3301      	adds	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b02      	cmp	r3, #2
 8001078:	ddda      	ble.n	8001030 <random_population+0x14>
    for (int i = 0; i < POP_SIZE; i++) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b63      	cmp	r3, #99	@ 0x63
 8001084:	ddd1      	ble.n	800102a <random_population+0xe>
        }
    }
    pop->size = POP_SIZE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800108c:	461a      	mov	r2, r3
 800108e:	2364      	movs	r3, #100	@ 0x64
 8001090:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	00000000 	.word	0x00000000

080010a8 <evaluate>:

void evaluate(Solution *sol) {
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    float sum1 = 0.0;
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < NV - 1; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	e06b      	b.n	8001194 <evaluate+0xec>
        float term = sqrt(pow(sol->x[i], 2) + pow(sol->x[i+1], 2));
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa4e 	bl	8000568 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	ed9f 1b67 	vldr	d1, [pc, #412]	@ 8001270 <evaluate+0x1c8>
 80010d4:	ec43 2b10 	vmov	d0, r2, r3
 80010d8:	f006 fa82 	bl	80075e0 <pow>
 80010dc:	ec55 4b10 	vmov	r4, r5, d0
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	3301      	adds	r3, #1
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa3b 	bl	8000568 <__aeabi_f2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 8001270 <evaluate+0x1c8>
 80010fa:	ec43 2b10 	vmov	d0, r2, r3
 80010fe:	f006 fa6f 	bl	80075e0 <pow>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff f8cf 	bl	80002ac <__adddf3>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	ec43 2b17 	vmov	d7, r2, r3
 8001116:	eeb0 0a47 	vmov.f32	s0, s14
 800111a:	eef0 0a67 	vmov.f32	s1, s15
 800111e:	f006 facf 	bl	80076c0 <sqrt>
 8001122:	ec53 2b10 	vmov	r2, r3, d0
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd4d 	bl	8000bc8 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
        sum1 += -10.0 * exp(-0.2 * term);
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fa18 	bl	8000568 <__aeabi_f2d>
 8001138:	a355      	add	r3, pc, #340	@ (adr r3, 8001290 <evaluate+0x1e8>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff fa6b 	bl	8000618 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	ec43 2b17 	vmov	d7, r2, r3
 800114a:	eeb0 0a47 	vmov.f32	s0, s14
 800114e:	eef0 0a67 	vmov.f32	s1, s15
 8001152:	f006 f9fd 	bl	8007550 <exp>
 8001156:	ec51 0b10 	vmov	r0, r1, d0
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b4a      	ldr	r3, [pc, #296]	@ (8001288 <evaluate+0x1e0>)
 8001160:	f7ff fa5a 	bl	8000618 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4614      	mov	r4, r2
 800116a:	461d      	mov	r5, r3
 800116c:	69f8      	ldr	r0, [r7, #28]
 800116e:	f7ff f9fb 	bl	8000568 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff f897 	bl	80002ac <__adddf3>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fd1f 	bl	8000bc8 <__aeabi_d2f>
 800118a:	4603      	mov	r3, r0
 800118c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < NV - 1; i++) {
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	3301      	adds	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b01      	cmp	r3, #1
 8001198:	dd90      	ble.n	80010bc <evaluate+0x14>
    }
    sol->fitness[0] = sum1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	60da      	str	r2, [r3, #12]

    float sum = 0.0;
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    for (int j = 0; j < NV; j++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	e054      	b.n	8001256 <evaluate+0x1ae>
        sum += pow(fabs(sol->x[j]), 0.8) + 5 * sin(pow(sol->x[j], 3));
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eef0 7ae7 	vabs.f32	s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9d2 	bl	8000568 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001278 <evaluate+0x1d0>
 80011cc:	ec43 2b10 	vmov	d0, r2, r3
 80011d0:	f006 fa06 	bl	80075e0 <pow>
 80011d4:	ec55 4b10 	vmov	r4, r5, d0
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9c0 	bl	8000568 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8001280 <evaluate+0x1d8>
 80011f0:	ec43 2b10 	vmov	d0, r2, r3
 80011f4:	f006 f9f4 	bl	80075e0 <pow>
 80011f8:	eeb0 7a40 	vmov.f32	s14, s0
 80011fc:	eef0 7a60 	vmov.f32	s15, s1
 8001200:	eeb0 0a47 	vmov.f32	s0, s14
 8001204:	eef0 0a67 	vmov.f32	s1, s15
 8001208:	f006 fa86 	bl	8007718 <sin>
 800120c:	ec51 0b10 	vmov	r0, r1, d0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <evaluate+0x1e4>)
 8001216:	f7ff f9ff 	bl	8000618 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4620      	mov	r0, r4
 8001220:	4629      	mov	r1, r5
 8001222:	f7ff f843 	bl	80002ac <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4614      	mov	r4, r2
 800122c:	461d      	mov	r5, r3
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff f99a 	bl	8000568 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4620      	mov	r0, r4
 800123a:	4629      	mov	r1, r5
 800123c:	f7ff f836 	bl	80002ac <__adddf3>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcbe 	bl	8000bc8 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	617b      	str	r3, [r7, #20]
    for (int j = 0; j < NV; j++) {
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	3301      	adds	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b02      	cmp	r3, #2
 800125a:	dda7      	ble.n	80011ac <evaluate+0x104>
    }
    sol->fitness[1] = sum;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	611a      	str	r2, [r3, #16]
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bdb0      	pop	{r4, r5, r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	9999999a 	.word	0x9999999a
 800127c:	3fe99999 	.word	0x3fe99999
 8001280:	00000000 	.word	0x00000000
 8001284:	40080000 	.word	0x40080000
 8001288:	c0240000 	.word	0xc0240000
 800128c:	40140000 	.word	0x40140000
 8001290:	9999999a 	.word	0x9999999a
 8001294:	bfc99999 	.word	0xbfc99999

08001298 <crossover>:

void crossover(Population *pop, Population *offspring) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a8:	461a      	mov	r2, r3
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size / 2; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e0dd      	b.n	8001472 <crossover+0x1da>
        if (rand01() < crossover_prob) {
 80012b6:	f7ff fe7d 	bl	8000fb4 <rand01>
 80012ba:	eeb0 7a40 	vmov.f32	s14, s0
 80012be:	4b76      	ldr	r3, [pc, #472]	@ (8001498 <crossover+0x200>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	f140 80ce 	bpl.w	800146c <crossover+0x1d4>
            int r1 = trng_rand() % pop->size;
 80012d0:	f7ff fe60 	bl	8000f94 <trng_rand>
 80012d4:	4603      	mov	r3, r0
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012dc:	f8d2 2770 	ldr.w	r2, [r2, #1904]	@ 0x770
 80012e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012e4:	fb01 f202 	mul.w	r2, r1, r2
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
            int r2 = trng_rand() % pop->size;
 80012ec:	f7ff fe52 	bl	8000f94 <trng_rand>
 80012f0:	4603      	mov	r3, r0
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012f8:	f8d2 2770 	ldr.w	r2, [r2, #1904]	@ 0x770
 80012fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001300:	fb01 f202 	mul.w	r2, r1, r2
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
            while (r1 == r2) {
 8001308:	e00d      	b.n	8001326 <crossover+0x8e>
                r2 = trng_rand() % pop->size;
 800130a:	f7ff fe43 	bl	8000f94 <trng_rand>
 800130e:	4603      	mov	r3, r0
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001316:	f8d2 2770 	ldr.w	r2, [r2, #1904]	@ 0x770
 800131a:	fbb3 f1f2 	udiv	r1, r3, r2
 800131e:	fb01 f202 	mul.w	r2, r1, r2
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
            while (r1 == r2) {
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	429a      	cmp	r2, r3
 800132c:	d0ed      	beq.n	800130a <crossover+0x72>
            }

            int cutting_point = trng_rand() % (NV - 1) + 1;
 800132e:	f7ff fe31 	bl	8000f94 <trng_rand>
 8001332:	4603      	mov	r3, r0
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]

            for (int j = 0; j < NV; j++) {
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e069      	b.n	8001416 <crossover+0x17e>
                if (j < cutting_point) {
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	da31      	bge.n	80013ae <crossover+0x116>
                    offspring->solutions[offspring->size].x[j] = pop->solutions[r1].x[j];
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001350:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	460b      	mov	r3, r1
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	6979      	ldr	r1, [r7, #20]
 8001360:	440b      	add	r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4403      	add	r3, r0
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4403      	add	r3, r0
 8001378:	6019      	str	r1, [r3, #0]
                    offspring->solutions[offspring->size + 1].x[j] = pop->solutions[r2].x[j];
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001380:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	69b9      	ldr	r1, [r7, #24]
 800138a:	460b      	mov	r3, r1
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	6979      	ldr	r1, [r7, #20]
 8001392:	440b      	add	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4403      	add	r3, r0
 8001398:	6819      	ldr	r1, [r3, #0]
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4403      	add	r3, r0
 80013aa:	6019      	str	r1, [r3, #0]
 80013ac:	e030      	b.n	8001410 <crossover+0x178>
                } else {
                    offspring->solutions[offspring->size].x[j] = pop->solutions[r2].x[j];
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b4:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	460b      	mov	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	6979      	ldr	r1, [r7, #20]
 80013c4:	440b      	add	r3, r1
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4403      	add	r3, r0
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4403      	add	r3, r0
 80013dc:	6019      	str	r1, [r3, #0]
                    offspring->solutions[offspring->size + 1].x[j] = pop->solutions[r1].x[j];
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e4:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	460b      	mov	r3, r1
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	6979      	ldr	r1, [r7, #20]
 80013f6:	440b      	add	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4403      	add	r3, r0
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4403      	add	r3, r0
 800140e:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < NV; j++) {
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b02      	cmp	r3, #2
 800141a:	dd92      	ble.n	8001342 <crossover+0xaa>
                }
            }

            evaluate(&offspring->solutions[offspring->size]);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001422:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe38 	bl	80010a8 <evaluate>
            evaluate(&offspring->solutions[offspring->size + 1]);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe29 	bl	80010a8 <evaluate>

            offspring->size += 2;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800145c:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001460:	3302      	adds	r3, #2
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001468:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size / 2; i++) {
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	3301      	adds	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001478:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 800147c:	0fda      	lsrs	r2, r3, #31
 800147e:	4413      	add	r3, r2
 8001480:	105b      	asrs	r3, r3, #1
 8001482:	461a      	mov	r2, r3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4293      	cmp	r3, r2
 8001488:	f6ff af15 	blt.w	80012b6 <crossover+0x1e>
        }
    }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000018 	.word	0x20000018

0800149c <mutation>:

void mutation(Population *pop, Population *offspring) {
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ac:	461a      	mov	r2, r3
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e06e      	b.n	8001598 <mutation+0xfc>
        if (rand01() < mutation_prob) {
 80014ba:	f7ff fd7b 	bl	8000fb4 <rand01>
 80014be:	eeb0 7a40 	vmov.f32	s14, s0
 80014c2:	4b3c      	ldr	r3, [pc, #240]	@ (80015b4 <mutation+0x118>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d55f      	bpl.n	8001592 <mutation+0xf6>
            offspring->solutions[offspring->size] = pop->solutions[i];
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d8:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	18c8      	adds	r0, r1, r3
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	4604      	mov	r4, r0
 80014f8:	461d      	mov	r5, r3
 80014fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fe:	682b      	ldr	r3, [r5, #0]
 8001500:	6023      	str	r3, [r4, #0]
            int mutation_point = trng_rand() % NV;
 8001502:	f7ff fd47 	bl	8000f94 <trng_rand>
 8001506:	4601      	mov	r1, r0
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <mutation+0x11c>)
 800150a:	fba3 2301 	umull	r2, r3, r3, r1
 800150e:	085a      	lsrs	r2, r3, #1
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	1aca      	subs	r2, r1, r3
 8001518:	60ba      	str	r2, [r7, #8]
            offspring->solutions[offspring->size].x[mutation_point] =
                rand_range(lb[mutation_point], ub[mutation_point]);
 800151a:	4a28      	ldr	r2, [pc, #160]	@ (80015bc <mutation+0x120>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	4a26      	ldr	r2, [pc, #152]	@ (80015c0 <mutation+0x124>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	ed93 7a00 	vldr	s14, [r3]
            offspring->solutions[offspring->size].x[mutation_point] =
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001538:	f8d3 4770 	ldr.w	r4, [r3, #1904]	@ 0x770
                rand_range(lb[mutation_point], ub[mutation_point]);
 800153c:	eef0 0a47 	vmov.f32	s1, s14
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	f7ff fd4a 	bl	8000fdc <rand_range>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
            offspring->solutions[offspring->size].x[mutation_point] =
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	4623      	mov	r3, r4
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4423      	add	r3, r4
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	440b      	add	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	edc3 7a00 	vstr	s15, [r3]
            evaluate(&offspring->solutions[offspring->size]);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001566:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fd96 	bl	80010a8 <evaluate>
            offspring->size++;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001582:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001586:	3301      	adds	r3, #1
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800158e:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < pop->size; i++) {
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800159e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	db88      	blt.n	80014ba <mutation+0x1e>
        }
    }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bdb0      	pop	{r4, r5, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000001c 	.word	0x2000001c
 80015b8:	aaaaaaab 	.word	0xaaaaaaab
 80015bc:	20000000 	.word	0x20000000
 80015c0:	2000000c 	.word	0x2000000c

080015c4 <local_search>:

void local_search(Population *pop, Population *offspring) {
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
    offspring->size = rate_local_search;
 80015ce:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <local_search+0x190>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015d8:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
    for (int i = 0; i < rate_local_search; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e0ac      	b.n	800173c <local_search+0x178>
        int r1 = trng_rand() % pop->size;
 80015e2:	f7ff fcd7 	bl	8000f94 <trng_rand>
 80015e6:	4603      	mov	r3, r0
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ee:	f8d2 2770 	ldr.w	r2, [r2, #1904]	@ 0x770
 80015f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80015f6:	fb01 f202 	mul.w	r2, r1, r2
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        offspring->solutions[i] = pop->solutions[r1];
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	18c8      	adds	r0, r1, r3
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	4604      	mov	r4, r0
 800161c:	461d      	mov	r5, r3
 800161e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	6023      	str	r3, [r4, #0]
        int r2 = trng_rand() % NV;
 8001626:	f7ff fcb5 	bl	8000f94 <trng_rand>
 800162a:	4601      	mov	r1, r0
 800162c:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <local_search+0x194>)
 800162e:	fba3 2301 	umull	r2, r3, r3, r1
 8001632:	085a      	lsrs	r2, r3, #1
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	1aca      	subs	r2, r1, r3
 800163c:	60fa      	str	r2, [r7, #12]
        offspring->solutions[i].x[r2] += rand_range(-step_size, step_size);
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <local_search+0x198>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eef1 7a67 	vneg.f32	s15, s15
 8001648:	4b44      	ldr	r3, [pc, #272]	@ (800175c <local_search+0x198>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	eef0 0a47 	vmov.f32	s1, s14
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f7ff fcc1 	bl	8000fdc <rand_range>
 800165a:	eeb0 7a40 	vmov.f32	s14, s0
 800165e:	6839      	ldr	r1, [r7, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	edc3 7a00 	vstr	s15, [r3]

        if (offspring->solutions[i].x[r2] < lb[r2])
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001760 <local_search+0x19c>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	d50e      	bpl.n	80016d8 <local_search+0x114>
            offspring->solutions[i].x[r2] = lb[r2];
 80016ba:	4a29      	ldr	r2, [pc, #164]	@ (8001760 <local_search+0x19c>)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	6019      	str	r1, [r3, #0]
        if (offspring->solutions[i].x[r2] > ub[r2])
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001764 <local_search+0x1a0>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dd0e      	ble.n	8001722 <local_search+0x15e>
            offspring->solutions[i].x[r2] = ub[r2];
 8001704:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <local_search+0x1a0>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4403      	add	r3, r0
 8001720:	6019      	str	r1, [r3, #0]

        evaluate(&offspring->solutions[i]);
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fcb9 	bl	80010a8 <evaluate>
    for (int i = 0; i < rate_local_search; i++) {
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <local_search+0x190>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	429a      	cmp	r2, r3
 8001744:	f6ff af4d 	blt.w	80015e2 <local_search+0x1e>
    }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bdb0      	pop	{r4, r5, r7, pc}
 8001752:	bf00      	nop
 8001754:	20000020 	.word	0x20000020
 8001758:	aaaaaaab 	.word	0xaaaaaaab
 800175c:	20000024 	.word	0x20000024
 8001760:	20000000 	.word	0x20000000
 8001764:	2000000c 	.word	0x2000000c

08001768 <dominates>:

bool dominates(Solution *sol1, Solution *sol2) {
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    bool better = false;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	e030      	b.n	80017de <dominates+0x76>
        if (sol1->fitness[i] > sol2->fitness[i]) {
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3302      	adds	r3, #2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3304      	adds	r3, #4
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3302      	adds	r3, #2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3304      	adds	r3, #4
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	dd01      	ble.n	80017aa <dominates+0x42>
            return false;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e01d      	b.n	80017e6 <dominates+0x7e>
        }
        if (sol1->fitness[i] < sol2->fitness[i]) {
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	3302      	adds	r3, #2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3302      	adds	r3, #2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3304      	adds	r3, #4
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	d501      	bpl.n	80017d8 <dominates+0x70>
            better = true;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3301      	adds	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	ddcb      	ble.n	800177c <dominates+0x14>
        }
    }
    return better;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <find_pareto_front>:

void find_pareto_front(Solution *solutions, int size, int *front_indices, int *front_size) {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b088      	sub	sp, #32
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	603b      	str	r3, [r7, #0]
    *front_size = 0;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e03c      	b.n	8001886 <find_pareto_front+0x94>
        bool is_dominated = false;
 800180c:	2300      	movs	r3, #0
 800180e:	76fb      	strb	r3, [r7, #27]
        for (int j = 0; j < size; j++) {
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e020      	b.n	8001858 <find_pareto_front+0x66>
            if (i == j) continue;
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	429a      	cmp	r2, r3
 800181c:	d018      	beq.n	8001850 <find_pareto_front+0x5e>
            if (dominates(&solutions[j], &solutions[i])) {
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1898      	adds	r0, r3, r2
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff ff92 	bl	8001768 <dominates>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <find_pareto_front+0x60>
                is_dominated = true;
 800184a:	2301      	movs	r3, #1
 800184c:	76fb      	strb	r3, [r7, #27]
                break;
 800184e:	e007      	b.n	8001860 <find_pareto_front+0x6e>
            if (i == j) continue;
 8001850:	bf00      	nop
        for (int j = 0; j < size; j++) {
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbda      	blt.n	8001816 <find_pareto_front+0x24>
            }
        }
        if (!is_dominated) {
 8001860:	7efb      	ldrb	r3, [r7, #27]
 8001862:	f083 0301 	eor.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <find_pareto_front+0x8e>
            front_indices[(*front_size)++] = i;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	1c59      	adds	r1, r3, #1
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	6011      	str	r1, [r2, #0]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3301      	adds	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbbe      	blt.n	800180c <find_pareto_front+0x1a>
        }
    }
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <crowding_distance>:

void crowding_distance(Solution *front, int front_size, float *distances) {
 8001898:	b480      	push	{r7}
 800189a:	f2ad 4dec 	subw	sp, sp, #1260	@ 0x4ec
 800189e:	af00      	add	r7, sp, #0
 80018a0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018a4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80018a8:	6018      	str	r0, [r3, #0]
 80018aa:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018ae:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80018b2:	6019      	str	r1, [r3, #0]
 80018b4:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018b8:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80018bc:	601a      	str	r2, [r3, #0]
    if (front_size == 0) return;
 80018be:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018c2:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 81c4 	beq.w	8001c56 <crowding_distance+0x3be>

    for (int i = 0; i < front_size; i++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80018d4:	e010      	b.n	80018f8 <crowding_distance+0x60>
        distances[i] = 0.0;
 80018d6:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 80018e0:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < front_size; i++) {
 80018ee:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80018f2:	3301      	adds	r3, #1
 80018f4:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80018f8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018fc:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001900:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	dbe5      	blt.n	80018d6 <crowding_distance+0x3e>
    }

    for (int obj = 0; obj < 2; obj++) {
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8001910:	e19b      	b.n	8001c4a <crowding_distance+0x3b2>
        int indices[POP_SIZE * 3];
        for (int i = 0; i < front_size; i++) indices[i] = i;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8001918:	e00e      	b.n	8001938 <crowding_distance+0xa0>
 800191a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800191e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001922:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 8001926:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	@ 0x4dc
 800192a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800192e:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8001932:	3301      	adds	r3, #1
 8001934:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8001938:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800193c:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001940:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe7      	blt.n	800191a <crowding_distance+0x82>

        for (int i = 0; i < front_size - 1; i++) {
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8001950:	e079      	b.n	8001a46 <crowding_distance+0x1ae>
            for (int j = i + 1; j < front_size; j++) {
 8001952:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 8001956:	3301      	adds	r3, #1
 8001958:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800195c:	e065      	b.n	8001a2a <crowding_distance+0x192>
                if (front[indices[i]].fitness[obj] > front[indices[j]].fitness[obj]) {
 800195e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001962:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001966:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 800196a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196e:	461a      	mov	r2, r3
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	461a      	mov	r2, r3
 800197a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800197e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	441a      	add	r2, r3
 8001986:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800198a:	3302      	adds	r3, #2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800199a:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800199e:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019b6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	441a      	add	r2, r3
 80019be:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80019c2:	3302      	adds	r3, #2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	dd23      	ble.n	8001a20 <crowding_distance+0x188>
                    int temp = indices[i];
 80019d8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019dc:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80019e0:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
                    indices[i] = indices[j];
 80019ec:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019f0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80019f4:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 80019f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80019fc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a00:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a04:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    indices[j] = temp;
 8001a0c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a10:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a14:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 8001a18:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = i + 1; j < front_size; j++) {
 8001a20:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8001a24:	3301      	adds	r3, #1
 8001a26:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8001a2a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a2e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001a32:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	db90      	blt.n	800195e <crowding_distance+0xc6>
        for (int i = 0; i < front_size - 1; i++) {
 8001a3c:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 8001a40:	3301      	adds	r3, #1
 8001a42:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8001a46:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a4a:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 8001a56:	429a      	cmp	r2, r3
 8001a58:	f6ff af7b 	blt.w	8001952 <crowding_distance+0xba>
                }
            }
        }

        distances[indices[0]] = DBL_MAX;
 8001a5c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a60:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001a6c:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001a78:	601a      	str	r2, [r3, #0]
        distances[indices[front_size - 1]] = DBL_MAX;
 8001a7a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a7e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001a8a:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001a98:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001aa4:	601a      	str	r2, [r3, #0]

        float fmin = front[indices[0]].fitness[obj];
 8001aa6:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001aaa:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001ac0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	441a      	add	r2, r3
 8001ac8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001acc:	3302      	adds	r3, #2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f207 42cc 	addw	r2, r7, #1228	@ 0x4cc
 8001ada:	6013      	str	r3, [r2, #0]
        float fmax = front[indices[front_size - 1]].fitness[obj];
 8001adc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001ae0:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001aec:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001b04:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001b10:	3302      	adds	r3, #2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f507 6299 	add.w	r2, r7, #1224	@ 0x4c8
 8001b1e:	6013      	str	r3, [r2, #0]
        float range = fmax - fmin;
 8001b20:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	f207 43cc 	addw	r3, r7, #1228	@ 0x4cc
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8001b38:	edc3 7a00 	vstr	s15, [r3]

        if (range > 0) {
 8001b3c:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	dd78      	ble.n	8001c40 <crowding_distance+0x3a8>
            for (int i = 1; i < front_size - 1; i++) {
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8001b54:	e06a      	b.n	8001c2c <crowding_distance+0x394>
                distances[indices[i]] +=
 8001b56:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001b5a:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001b5e:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8001b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001b6c:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	ed93 7a00 	vldr	s14, [r3]
                    (front[indices[i + 1]].fitness[obj] - front[indices[i - 1]].fitness[obj]) / range;
 8001b78:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001b82:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	461a      	mov	r2, r3
 8001b96:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001b9a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	441a      	add	r2, r3
 8001ba2:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	edd3 6a00 	vldr	s13, [r3]
 8001bb2:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001bbc:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001bd4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	441a      	add	r2, r3
 8001bdc:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001be0:	3302      	adds	r3, #2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3304      	adds	r3, #4
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001bf0:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8001bf4:	edd3 6a00 	vldr	s13, [r3]
 8001bf8:	eec6 7a26 	vdiv.f32	s15, s12, s13
                distances[indices[i]] +=
 8001bfc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001c00:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001c04:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001c12:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 1; i < front_size - 1; i++) {
 8001c22:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001c26:	3301      	adds	r3, #1
 8001c28:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8001c2c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001c30:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	db8a      	blt.n	8001b56 <crowding_distance+0x2be>
    for (int obj = 0; obj < 2; obj++) {
 8001c40:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001c44:	3301      	adds	r3, #1
 8001c46:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8001c4a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	f77f ae5f 	ble.w	8001912 <crowding_distance+0x7a>
 8001c54:	e000      	b.n	8001c58 <crowding_distance+0x3c0>
    if (front_size == 0) return;
 8001c56:	bf00      	nop
            }
        }
    }
}
 8001c58:	f207 47ec 	addw	r7, r7, #1260	@ 0x4ec
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <select_by_crowding>:

void select_by_crowding(Solution *solutions, int size, int num_to_select, Solution *selected) {
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	f507 649a 	add.w	r4, r7, #1232	@ 0x4d0
 8001c70:	f2a4 44c4 	subw	r4, r4, #1220	@ 0x4c4
 8001c74:	6020      	str	r0, [r4, #0]
 8001c76:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 8001c7a:	f5a0 6099 	sub.w	r0, r0, #1224	@ 0x4c8
 8001c7e:	6001      	str	r1, [r0, #0]
 8001c80:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8001c84:	f2a1 41cc 	subw	r1, r1, #1228	@ 0x4cc
 8001c88:	600a      	str	r2, [r1, #0]
 8001c8a:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8001c8e:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001c92:	6013      	str	r3, [r2, #0]
    float distances[POP_SIZE * 3];
    crowding_distance(solutions, size, distances);
 8001c94:	f107 0214 	add.w	r2, r7, #20
 8001c98:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001c9c:	f5a3 6199 	sub.w	r1, r3, #1224	@ 0x4c8
 8001ca0:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001ca4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001ca8:	6809      	ldr	r1, [r1, #0]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f7ff fdf4 	bl	8001898 <crowding_distance>

    for (int i = 0; i < num_to_select; i++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001cb6:	e060      	b.n	8001d7a <select_by_crowding+0x116>
        int best = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001cc4:	e021      	b.n	8001d0a <select_by_crowding+0xa6>
            if (distances[j] > distances[best]) {
 8001cc6:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001cca:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001cce:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	ed93 7a00 	vldr	s14, [r3]
 8001cda:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001cde:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001ce2:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	dd03      	ble.n	8001d00 <select_by_crowding+0x9c>
                best = j;
 8001cf8:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001cfc:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001d00:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001d04:	3301      	adds	r3, #1
 8001d06:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001d0a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d0e:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8001d12:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbd4      	blt.n	8001cc6 <select_by_crowding+0x62>
            }
        }
        selected[i] = solutions[best];
 8001d1c:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d2e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1899      	adds	r1, r3, r2
 8001d36:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d48:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	461c      	mov	r4, r3
 8001d52:	460d      	mov	r5, r1
 8001d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d58:	682b      	ldr	r3, [r5, #0]
 8001d5a:	6023      	str	r3, [r4, #0]
        distances[best] = -1.0;
 8001d5c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d60:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001d64:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <select_by_crowding+0x134>)
 8001d6e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < num_to_select; i++) {
 8001d70:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001d74:	3301      	adds	r3, #1
 8001d76:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001d7a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001d7e:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8001d82:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	db95      	blt.n	8001cb8 <select_by_crowding+0x54>
    }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	f507 679a 	add.w	r7, r7, #1232	@ 0x4d0
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdb0      	pop	{r4, r5, r7, pc}
 8001d98:	bf800000 	.word	0xbf800000

08001d9c <selection>:

void selection(Population *pop, Population *selected) {
 8001d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da0:	b0ab      	sub	sp, #172	@ 0xac
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6578      	str	r0, [r7, #84]	@ 0x54
 8001da6:	6539      	str	r1, [r7, #80]	@ 0x50
 8001da8:	466b      	mov	r3, sp
 8001daa:	607b      	str	r3, [r7, #4]
    int remaining_indices[pop->size];
 8001dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db2:	f8d3 1770 	ldr.w	r1, [r3, #1904]	@ 0x770
 8001db6:	1e4b      	subs	r3, r1, #1
 8001db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	016b      	lsls	r3, r5, #5
 8001dce:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001dd2:	0162      	lsls	r2, r4, #5
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	4690      	mov	r8, r2
 8001dda:	4699      	mov	r9, r3
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001de8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001dec:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001df0:	460b      	mov	r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3307      	adds	r3, #7
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	ebad 0d03 	sub.w	sp, sp, r3
 8001dfe:	466b      	mov	r3, sp
 8001e00:	3303      	adds	r3, #3
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int remaining_size = pop->size;
 8001e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (int i = 0; i < pop->size; i++) remaining_indices[i] = i;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e1c:	e00b      	b.n	8001e36 <selection+0x9a>
 8001e1e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e20:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001e24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001e2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e30:	3301      	adds	r3, #1
 8001e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3c:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8001e40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e44:	4293      	cmp	r3, r2
 8001e46:	dbea      	blt.n	8001e1e <selection+0x82>

    selected->size = 0;
 8001e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770

    while (selected->size < POP_SIZE) {
 8001e56:	e1df      	b.n	8002218 <selection+0x47c>
 8001e58:	466b      	mov	r3, sp
 8001e5a:	4698      	mov	r8, r3
        int front_indices[remaining_size];
 8001e5c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e60:	1e4b      	subs	r3, r1, #1
 8001e62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e64:	460a      	mov	r2, r1
 8001e66:	2300      	movs	r3, #0
 8001e68:	643a      	str	r2, [r7, #64]	@ 0x40
 8001e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001e78:	4628      	mov	r0, r5
 8001e7a:	0143      	lsls	r3, r0, #5
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e82:	4620      	mov	r0, r4
 8001e84:	0142      	lsls	r2, r0, #5
 8001e86:	460a      	mov	r2, r1
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	0143      	lsls	r3, r0, #5
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	0142      	lsls	r2, r0, #5
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3307      	adds	r3, #7
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	ebad 0d03 	sub.w	sp, sp, r3
 8001eb6:	466b      	mov	r3, sp
 8001eb8:	3303      	adds	r3, #3
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	677b      	str	r3, [r7, #116]	@ 0x74
        int front_size;
        find_pareto_front(pop->solutions, remaining_size, front_indices, &front_size);
 8001ec0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001ec2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ec6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ec8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001ecc:	f7ff fc91 	bl	80017f2 <find_pareto_front>

        if (selected->size + front_size > POP_SIZE) {
 8001ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed6:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 8001eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001edc:	4413      	add	r3, r2
 8001ede:	2b64      	cmp	r3, #100	@ 0x64
 8001ee0:	f340 811e 	ble.w	8002120 <selection+0x384>
 8001ee4:	466b      	mov	r3, sp
 8001ee6:	461e      	mov	r6, r3
            int needed = POP_SIZE - selected->size;
 8001ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eee:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8001ef2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001ef6:	673b      	str	r3, [r7, #112]	@ 0x70
            Solution temp_front[front_size];
 8001ef8:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8001efa:	1e63      	subs	r3, r4, #1
 8001efc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001efe:	4622      	mov	r2, r4
 8001f00:	2300      	movs	r3, #0
 8001f02:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f18:	0090      	lsls	r0, r2, #2
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f20:	eb12 0a01 	adds.w	sl, r2, r1
 8001f24:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f26:	eb43 0b01 	adc.w	fp, r3, r1
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001f36:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001f3a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001f3e:	4622      	mov	r2, r4
 8001f40:	2300      	movs	r3, #0
 8001f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f46:	e9d7 9a0c 	ldrd	r9, sl, [r7, #48]	@ 0x30
 8001f4a:	464a      	mov	r2, r9
 8001f4c:	4653      	mov	r3, sl
 8001f4e:	f04f 0000 	mov.w	r0, #0
 8001f52:	f04f 0100 	mov.w	r1, #0
 8001f56:	0099      	lsls	r1, r3, #2
 8001f58:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f5c:	0090      	lsls	r0, r2, #2
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4649      	mov	r1, r9
 8001f64:	1851      	adds	r1, r2, r1
 8001f66:	61b9      	str	r1, [r7, #24]
 8001f68:	4651      	mov	r1, sl
 8001f6a:	eb43 0101 	adc.w	r1, r3, r1
 8001f6e:	61f9      	str	r1, [r7, #28]
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9d7 9a06 	ldrd	r9, sl, [r7, #24]
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	014b      	lsls	r3, r1, #5
 8001f80:	4649      	mov	r1, r9
 8001f82:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001f86:	4649      	mov	r1, r9
 8001f88:	014a      	lsls	r2, r1, #5
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	3307      	adds	r3, #7
 8001f96:	08db      	lsrs	r3, r3, #3
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f9e:	466b      	mov	r3, sp
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
            for (int i = 0; i < front_size; i++) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fae:	e01d      	b.n	8001fec <selection+0x250>
                temp_front[i] = pop->solutions[front_indices[i]];
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001fb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001fbc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4419      	add	r1, r3
 8001fca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fcc:	4603      	mov	r3, r0
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4403      	add	r3, r0
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	461d      	mov	r5, r3
 8001fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fde:	682b      	ldr	r3, [r5, #0]
 8001fe0:	6023      	str	r3, [r4, #0]
            for (int i = 0; i < front_size; i++) {
 8001fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbdc      	blt.n	8001fb0 <selection+0x214>
            }

            Solution selected_from_front[needed];
 8001ff6:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8001ff8:	1e63      	subs	r3, r4, #1
 8001ffa:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	2300      	movs	r3, #0
 8002000:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002004:	e9d7 9a0a 	ldrd	r9, sl, [r7, #40]	@ 0x28
 8002008:	464a      	mov	r2, r9
 800200a:	4653      	mov	r3, sl
 800200c:	f04f 0000 	mov.w	r0, #0
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	0099      	lsls	r1, r3, #2
 8002016:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800201a:	0090      	lsls	r0, r2, #2
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4649      	mov	r1, r9
 8002022:	1851      	adds	r1, r2, r1
 8002024:	6139      	str	r1, [r7, #16]
 8002026:	4651      	mov	r1, sl
 8002028:	eb43 0101 	adc.w	r1, r3, r1
 800202c:	6179      	str	r1, [r7, #20]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 9a04 	ldrd	r9, sl, [r7, #16]
 800203a:	4651      	mov	r1, sl
 800203c:	014b      	lsls	r3, r1, #5
 800203e:	4649      	mov	r1, r9
 8002040:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002044:	4649      	mov	r1, r9
 8002046:	014a      	lsls	r2, r1, #5
 8002048:	4622      	mov	r2, r4
 800204a:	2300      	movs	r3, #0
 800204c:	623a      	str	r2, [r7, #32]
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002050:	e9d7 9a08 	ldrd	r9, sl, [r7, #32]
 8002054:	464a      	mov	r2, r9
 8002056:	4653      	mov	r3, sl
 8002058:	f04f 0000 	mov.w	r0, #0
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	0099      	lsls	r1, r3, #2
 8002062:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002066:	0090      	lsls	r0, r2, #2
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4649      	mov	r1, r9
 800206e:	1851      	adds	r1, r2, r1
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	4651      	mov	r1, sl
 8002074:	eb43 0101 	adc.w	r1, r3, r1
 8002078:	60f9      	str	r1, [r7, #12]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9d7 9a02 	ldrd	r9, sl, [r7, #8]
 8002086:	4651      	mov	r1, sl
 8002088:	014b      	lsls	r3, r1, #5
 800208a:	4649      	mov	r1, r9
 800208c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002090:	4649      	mov	r1, r9
 8002092:	014a      	lsls	r2, r1, #5
 8002094:	4622      	mov	r2, r4
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	3307      	adds	r3, #7
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	ebad 0d03 	sub.w	sp, sp, r3
 80020a8:	466b      	mov	r3, sp
 80020aa:	3303      	adds	r3, #3
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	663b      	str	r3, [r7, #96]	@ 0x60
            select_by_crowding(temp_front, front_size, needed, selected_from_front);
 80020b2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80020b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80020b8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80020ba:	f7ff fdd3 	bl	8001c64 <select_by_crowding>

            for (int i = 0; i < needed; i++) {
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020c4:	e023      	b.n	800210e <selection+0x372>
                selected->solutions[selected->size++] = selected_from_front[i];
 80020c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020cc:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80020d0:	1c53      	adds	r3, r2, #1
 80020d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80020d4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80020d8:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 80020dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	18c8      	adds	r0, r1, r3
 80020e8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80020ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	4604      	mov	r4, r0
 80020fa:	461d      	mov	r5, r3
 80020fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	6023      	str	r3, [r4, #0]
            for (int i = 0; i < needed; i++) {
 8002104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002108:	3301      	adds	r3, #1
 800210a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800210e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002114:	429a      	cmp	r2, r3
 8002116:	dbd6      	blt.n	80020c6 <selection+0x32a>
            }
            break;
 8002118:	bf00      	nop
 800211a:	46b5      	mov	sp, r6
 800211c:	46c5      	mov	sp, r8
 800211e:	e083      	b.n	8002228 <selection+0x48c>
        } else {
            for (int i = 0; i < front_size; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002126:	e026      	b.n	8002176 <selection+0x3da>
                selected->solutions[selected->size++] = pop->solutions[front_indices[i]];
 8002128:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800212a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800212e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002138:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800213c:	1c51      	adds	r1, r2, #1
 800213e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002144:	f8c3 1770 	str.w	r1, [r3, #1904]	@ 0x770
 8002148:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4419      	add	r1, r3
 8002154:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002156:	4603      	mov	r3, r0
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4403      	add	r3, r0
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	460d      	mov	r5, r1
 8002162:	461c      	mov	r4, r3
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	602b      	str	r3, [r5, #0]
            for (int i = 0; i < front_size; i++) {
 800216c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002170:	3301      	adds	r3, #1
 8002172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002176:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002178:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800217c:	4293      	cmp	r3, r2
 800217e:	dbd3      	blt.n	8002128 <selection+0x38c>
            }

            int new_remaining_size = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            for (int i = 0; i < remaining_size; i++) {
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800218c:	e039      	b.n	8002202 <selection+0x466>
                bool in_front = false;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                for (int j = 0; j < front_size; j++) {
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800219a:	e014      	b.n	80021c6 <selection+0x42a>
                    if (remaining_indices[i] == front_indices[j]) {
 800219c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800219e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	4299      	cmp	r1, r3
 80021b2:	d103      	bne.n	80021bc <selection+0x420>
                        in_front = true;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                        break;
 80021ba:	e009      	b.n	80021d0 <selection+0x434>
                for (int j = 0; j < front_size; j++) {
 80021bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021c0:	3301      	adds	r3, #1
 80021c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80021c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021cc:	4293      	cmp	r3, r2
 80021ce:	dbe5      	blt.n	800219c <selection+0x400>
                    }
                }
                if (!in_front) {
 80021d0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80021d4:	f083 0301 	eor.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <selection+0x45c>
                    remaining_indices[new_remaining_size++] = remaining_indices[i];
 80021de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80021e2:	1c4b      	adds	r3, r1, #1
 80021e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80021ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            for (int i = 0; i < remaining_size; i++) {
 80021f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021fc:	3301      	adds	r3, #1
 80021fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002202:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800220a:	429a      	cmp	r2, r3
 800220c:	dbbf      	blt.n	800218e <selection+0x3f2>
                }
            }
            remaining_size = new_remaining_size;
 800220e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002216:	46c5      	mov	sp, r8
    while (selected->size < POP_SIZE) {
 8002218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800221a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800221e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8002222:	2b63      	cmp	r3, #99	@ 0x63
 8002224:	f77f ae18 	ble.w	8001e58 <selection+0xbc>
 8002228:	f8d7 d004 	ldr.w	sp, [r7, #4]
        }
    }
}
 800222c:	bf00      	nop
 800222e:	37ac      	adds	r7, #172	@ 0xac
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800223c:	f5ad 4d26 	sub.w	sp, sp, #42496	@ 0xa600
 8002240:	b0a4      	sub	sp, #144	@ 0x90
 8002242:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002244:	f000 fe80 	bl	8002f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002248:	f000 fbb4 	bl	80029b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224c:	f000 fc60 	bl	8002b10 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002250:	f000 fc34 	bl	8002abc <MX_USART1_UART_Init>
  MX_RNG_Init();
 8002254:	f000 fc1e 	bl	8002a94 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  Population pop, offspring_cross, offspring_mut, offspring_ls, combined, selected;

  // Initialize population
  random_population(&pop);
 8002258:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 800225c:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002260:	3b0c      	subs	r3, #12
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe feda 	bl	800101c <random_population>
  for (int i = 0; i < pop.size; i++) {
 8002268:	2300      	movs	r3, #0
 800226a:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800226e:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e01c      	b.n	80022b0 <main+0x78>
	  evaluate(&pop.solutions[i]);
 8002276:	f507 420e 	add.w	r2, r7, #36352	@ 0x8e00
 800227a:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 800227e:	3a0c      	subs	r2, #12
 8002280:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002284:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	460b      	mov	r3, r1
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff07 	bl	80010a8 <evaluate>
  for (int i = 0; i < pop.size; i++) {
 800229a:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800229e:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80022aa:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80022b4:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80022b8:	f2a3 73ac 	subw	r3, r3, #1964	@ 0x7ac
 80022bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c0:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80022c4:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80022c8:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	dbd1      	blt.n	8002276 <main+0x3e>
  }

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80022d2:	4bb2      	ldr	r3, [pc, #712]	@ (800259c <main+0x364>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4ab1      	ldr	r2, [pc, #708]	@ (800259c <main+0x364>)
 80022d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022dc:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80022de:	4bb0      	ldr	r3, [pc, #704]	@ (80025a0 <main+0x368>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80022e4:	4bae      	ldr	r3, [pc, #696]	@ (80025a0 <main+0x368>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4aad      	ldr	r2, [pc, #692]	@ (80025a0 <main+0x368>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6013      	str	r3, [r2, #0]

  uint32_t start_cycles = DWT->CYCCNT;
 80022f0:	4bab      	ldr	r3, [pc, #684]	@ (80025a0 <main+0x368>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80022f8:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80022fc:	6013      	str	r3, [r2, #0]

  // Main optimization loop
  for (int iter = 0; iter < MAX_ITER; iter++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002304:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e1d1      	b.n	80026b0 <main+0x478>
	  // Generate offspring
	  crossover(&pop, &offspring_cross);
 800230c:	f507 42ee 	add.w	r2, r7, #30464	@ 0x7700
 8002310:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8002314:	3a20      	subs	r2, #32
 8002316:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 800231a:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800231e:	3b0c      	subs	r3, #12
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe ffb8 	bl	8001298 <crossover>
	  mutation(&pop, &offspring_mut);
 8002328:	f507 42bf 	add.w	r2, r7, #24448	@ 0x5f80
 800232c:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8002330:	3a14      	subs	r2, #20
 8002332:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 8002336:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800233a:	3b0c      	subs	r3, #12
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f8ac 	bl	800149c <mutation>
	  local_search(&pop, &offspring_ls);
 8002344:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002348:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800234c:	3a08      	subs	r2, #8
 800234e:	f507 430e 	add.w	r3, r7, #36352	@ 0x8e00
 8002352:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002356:	3b0c      	subs	r3, #12
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f932 	bl	80015c4 <local_search>

	  // Combine populations
	  combined.size = 0;
 8002360:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002364:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002368:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 800236c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002370:	461a      	mov	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770
	  for (int i = 0; i < pop.size; i++) {
 8002378:	2300      	movs	r3, #0
 800237a:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800237e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e040      	b.n	8002408 <main+0x1d0>
		  combined.solutions[combined.size++] = pop.solutions[i];
 8002386:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 800238a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800238e:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 8002392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002396:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800239a:	1c53      	adds	r3, r2, #1
 800239c:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 80023a0:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80023a4:	f2a1 517c 	subw	r1, r1, #1404	@ 0x57c
 80023a8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80023ac:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 80023b0:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 80023b4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80023b8:	f2a3 517c 	subw	r1, r3, #1404	@ 0x57c
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	18c8      	adds	r0, r1, r3
 80023c6:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80023ca:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80023ce:	f2a3 71ac 	subw	r1, r3, #1964	@ 0x7ac
 80023d2:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80023d6:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	4604      	mov	r4, r0
 80023e8:	461d      	mov	r5, r3
 80023ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < pop.size; i++) {
 80023f2:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80023f6:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002402:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800240c:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002410:	f2a3 73ac 	subw	r3, r3, #1964	@ 0x7ac
 8002414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002418:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 800241c:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002420:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	dbad      	blt.n	8002386 <main+0x14e>
	  }
	  for (int i = 0; i < offspring_cross.size; i++) {
 800242a:	2300      	movs	r3, #0
 800242c:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002430:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e040      	b.n	80024ba <main+0x282>
		  combined.solutions[combined.size++] = offspring_cross.solutions[i];
 8002438:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 800243c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002440:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 8002444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002448:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 800244c:	1c53      	adds	r3, r2, #1
 800244e:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 8002452:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8002456:	f2a1 517c 	subw	r1, r1, #1404	@ 0x57c
 800245a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800245e:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 8002462:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002466:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800246a:	f2a3 517c 	subw	r1, r3, #1404	@ 0x57c
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	18c8      	adds	r0, r1, r3
 8002478:	f507 4306 	add.w	r3, r7, #34304	@ 0x8600
 800247c:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002480:	f5a3 6172 	sub.w	r1, r3, #3872	@ 0xf20
 8002484:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002488:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	4604      	mov	r4, r0
 800249a:	461d      	mov	r5, r3
 800249c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < offspring_cross.size; i++) {
 80024a4:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80024a8:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80024b4:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	f507 4306 	add.w	r3, r7, #34304	@ 0x8600
 80024be:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80024c2:	f5a3 6372 	sub.w	r3, r3, #3872	@ 0xf20
 80024c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ca:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 80024ce:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80024d2:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	dbad      	blt.n	8002438 <main+0x200>
	  }
	  for (int i = 0; i < offspring_mut.size; i++) {
 80024dc:	2300      	movs	r3, #0
 80024de:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80024e2:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e040      	b.n	800256c <main+0x334>
		  combined.solutions[combined.size++] = offspring_mut.solutions[i];
 80024ea:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 80024ee:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80024f2:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 80024f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fa:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80024fe:	1c53      	adds	r3, r2, #1
 8002500:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 8002504:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8002508:	f2a1 517c 	subw	r1, r1, #1404	@ 0x57c
 800250c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8002510:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 8002514:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 8002518:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800251c:	f2a3 517c 	subw	r1, r3, #1404	@ 0x57c
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	18c8      	adds	r0, r1, r3
 800252a:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 800252e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002532:	f2a3 6194 	subw	r1, r3, #1684	@ 0x694
 8002536:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800253a:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	4604      	mov	r4, r0
 800254c:	461d      	mov	r5, r3
 800254e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002552:	682b      	ldr	r3, [r5, #0]
 8002554:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < offspring_mut.size; i++) {
 8002556:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800255a:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002566:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8002570:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002574:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 8002578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800257c:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8002580:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002584:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	dbad      	blt.n	80024ea <main+0x2b2>
	  }
	  for (int i = 0; i < offspring_ls.size; i++) {
 800258e:	2300      	movs	r3, #0
 8002590:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002594:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e044      	b.n	8002626 <main+0x3ee>
 800259c:	e000edf0 	.word	0xe000edf0
 80025a0:	e0001000 	.word	0xe0001000
		  combined.solutions[combined.size++] = offspring_ls.solutions[i];
 80025a4:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 80025a8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80025ac:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 80025b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b4:	f8d3 2770 	ldr.w	r2, [r3, #1904]	@ 0x770
 80025b8:	1c53      	adds	r3, r2, #1
 80025ba:	f507 5159 	add.w	r1, r7, #13888	@ 0x3640
 80025be:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80025c2:	f2a1 517c 	subw	r1, r1, #1404	@ 0x57c
 80025c6:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80025ca:	f8c1 3770 	str.w	r3, [r1, #1904]	@ 0x770
 80025ce:	f507 5359 	add.w	r3, r7, #13888	@ 0x3640
 80025d2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80025d6:	f2a3 517c 	subw	r1, r3, #1404	@ 0x57c
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	18c8      	adds	r0, r1, r3
 80025e4:	f507 43ac 	add.w	r3, r7, #22016	@ 0x5600
 80025e8:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80025ec:	f6a3 6108 	subw	r1, r3, #3592	@ 0xe08
 80025f0:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80025f4:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	4604      	mov	r4, r0
 8002606:	461d      	mov	r5, r3
 8002608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < offspring_ls.size; i++) {
 8002610:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002614:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002620:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	f507 43ac 	add.w	r3, r7, #22016	@ 0x5600
 800262a:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800262e:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 8002632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002636:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 800263a:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800263e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbad      	blt.n	80025a4 <main+0x36c>
	  }

	  selection(&combined, &selected);
 8002648:	f507 52d3 	add.w	r2, r7, #6752	@ 0x1a60
 800264c:	f102 0218 	add.w	r2, r2, #24
 8002650:	3af0      	subs	r2, #240	@ 0xf0
 8002652:	f507 5345 	add.w	r3, r7, #12608	@ 0x3140
 8002656:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800265a:	3b7c      	subs	r3, #124	@ 0x7c
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fb9c 	bl	8001d9c <selection>
	  pop = selected;
 8002664:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 8002668:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800266c:	f2a3 72ac 	subw	r2, r3, #1964	@ 0x7ac
 8002670:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 8002674:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002678:	f5a3 634f 	sub.w	r3, r3, #3312	@ 0xcf0
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f241 7374 	movw	r3, #6004	@ 0x1774
 8002684:	461a      	mov	r2, r3
 8002686:	f002 ff14 	bl	80054b2 <memcpy>

	  printf("Iteration %d\n", iter);
 800268a:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800268e:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	48bf      	ldr	r0, [pc, #764]	@ (8002994 <main+0x75c>)
 8002696:	f002 fe01 	bl	800529c <iprintf>
  for (int iter = 0; iter < MAX_ITER; iter++) {
 800269a:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800269e:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80026aa:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026b4:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80026bc:	f77f ae26 	ble.w	800230c <main+0xd4>
  }

  uint32_t end_cycles = DWT->CYCCNT;
 80026c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002998 <main+0x760>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80026c8:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 80026cc:	6013      	str	r3, [r2, #0]
  uint32_t elapsed_cycles = end_cycles - start_cycles;
 80026ce:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026d2:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026dc:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80026e8:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 80026ec:	6013      	str	r3, [r2, #0]
  float time_sec = (float)elapsed_cycles / 180000000.0f;
 80026ee:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80026f2:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002700:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 800299c <main+0x764>
 8002704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002708:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800270c:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8002710:	edc3 7a00 	vstr	s15, [r3]
  float elapsed_ms = time_sec * 1000.0f;
 8002714:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002718:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80029a0 <main+0x768>
 8002724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002728:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800272c:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 8002730:	edc3 7a00 	vstr	s15, [r3]
  float energy_joules = VOLTAGE * CURRENT * time_sec;
 8002734:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002738:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 80029a4 <main+0x76c>
 8002744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002748:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800274c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002750:	edc3 7a00 	vstr	s15, [r3]

  // Extract Pareto front from final population
  int front_indices[POP_SIZE];
  int front_size;
  find_pareto_front(pop.solutions, pop.size, front_indices, &front_size);
 8002754:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 8002758:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800275c:	f2a3 73ac 	subw	r3, r3, #1964	@ 0x7ac
 8002760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002764:	f8d3 1770 	ldr.w	r1, [r3, #1904]	@ 0x770
 8002768:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 800276c:	f103 0318 	add.w	r3, r3, #24
 8002770:	3b84      	subs	r3, #132	@ 0x84
 8002772:	f507 52c3 	add.w	r2, r7, #6240	@ 0x1860
 8002776:	f102 0218 	add.w	r2, r2, #24
 800277a:	3a80      	subs	r2, #128	@ 0x80
 800277c:	f507 400e 	add.w	r0, r7, #36352	@ 0x8e00
 8002780:	f100 00d8 	add.w	r0, r0, #216	@ 0xd8
 8002784:	380c      	subs	r0, #12
 8002786:	f7ff f834 	bl	80017f2 <find_pareto_front>

  Population pareto_front = {0};
 800278a:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 800278e:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 8002792:	4618      	mov	r0, r3
 8002794:	f241 7374 	movw	r3, #6004	@ 0x1774
 8002798:	461a      	mov	r2, r3
 800279a:	2100      	movs	r1, #0
 800279c:	f002 fe09 	bl	80053b2 <memset>
  for (int i = 0; i < front_size; i++) {
 80027a0:	2300      	movs	r3, #0
 80027a2:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80027a6:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	e036      	b.n	800281c <main+0x5e4>
	  pareto_front.solutions[i] = pop.solutions[front_indices[i]];
 80027ae:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 80027b2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80027b6:	f5a3 6368 	sub.w	r3, r3, #3712	@ 0xe80
 80027ba:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80027be:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027c8:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 80027cc:	f5a3 60bf 	sub.w	r0, r3, #1528	@ 0x5f8
 80027d0:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80027d4:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	460b      	mov	r3, r1
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4418      	add	r0, r3
 80027e4:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80027e8:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80027ec:	f2a3 71ac 	subw	r1, r3, #1964	@ 0x7ac
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	4604      	mov	r4, r0
 80027fc:	461d      	mov	r5, r3
 80027fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002802:	682b      	ldr	r3, [r5, #0]
 8002804:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < front_size; i++) {
 8002806:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800280a:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002816:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 8002820:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002824:	f6a3 6384 	subw	r3, r3, #3716	@ 0xe84
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800282e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	dbba      	blt.n	80027ae <main+0x576>
  }
  pareto_front.size = front_size;
 8002838:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 800283c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002840:	f6a3 6384 	subw	r3, r3, #3716	@ 0xe84
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f507 62cf 	add.w	r2, r7, #1656	@ 0x678
 800284a:	f5a2 62bf 	sub.w	r2, r2, #1528	@ 0x5f8
 800284e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002852:	f8c2 3770 	str.w	r3, [r2, #1904]	@ 0x770

  char msg[128];
  for (int i = 0; i < pareto_front.size; i++) {
 8002856:	2300      	movs	r3, #0
 8002858:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 800285c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e04e      	b.n	8002902 <main+0x6ca>
	  snprintf(msg, sizeof(msg), "f1: %.4f, f2: %.4f\r\n",
			  pareto_front.solutions[i].fitness[0], pareto_front.solutions[i].fitness[1]);
 8002864:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002868:	f5a3 61bf 	sub.w	r1, r3, #1528	@ 0x5f8
 800286c:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002870:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	330c      	adds	r3, #12
 8002882:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "f1: %.4f, f2: %.4f\r\n",
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe6f 	bl	8000568 <__aeabi_f2d>
 800288a:	4604      	mov	r4, r0
 800288c:	460d      	mov	r5, r1
			  pareto_front.solutions[i].fitness[0], pareto_front.solutions[i].fitness[1]);
 800288e:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002892:	f5a3 61bf 	sub.w	r1, r3, #1528	@ 0x5f8
 8002896:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 800289a:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3310      	adds	r3, #16
 80028ac:	681b      	ldr	r3, [r3, #0]
	  snprintf(msg, sizeof(msg), "f1: %.4f, f2: %.4f\r\n",
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fe5a 	bl	8000568 <__aeabi_f2d>
 80028b4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80028b8:	3b78      	subs	r3, #120	@ 0x78
 80028ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028be:	e9cd 4500 	strd	r4, r5, [sp]
 80028c2:	4a39      	ldr	r2, [pc, #228]	@ (80029a8 <main+0x770>)
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fcfa 	bl	80052c0 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80028cc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80028d0:	3b78      	subs	r3, #120	@ 0x78
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fcdc 	bl	8000290 <strlen>
 80028d8:	4603      	mov	r3, r0
 80028da:	b29a      	uxth	r2, r3
 80028dc:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80028e0:	3978      	subs	r1, #120	@ 0x78
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	4831      	ldr	r0, [pc, #196]	@ (80029ac <main+0x774>)
 80028e8:	f001 fc04 	bl	80040f4 <HAL_UART_Transmit>
  for (int i = 0; i < pareto_front.size; i++) {
 80028ec:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 80028f0:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 80028fc:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8002906:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 800290a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	@ 0x770
 8002912:	f507 4226 	add.w	r2, r7, #42496	@ 0xa600
 8002916:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	dba1      	blt.n	8002864 <main+0x62c>
  }

  snprintf(msg, sizeof(msg), "Done! Time: %.2fms (%.2fs), Energy: %.4fJ\r\n", elapsed_ms, time_sec, energy_joules);
 8002920:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002924:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	f7fd fe1d 	bl	8000568 <__aeabi_f2d>
 800292e:	4604      	mov	r4, r0
 8002930:	460d      	mov	r5, r1
 8002932:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002936:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	f7fd fe14 	bl	8000568 <__aeabi_f2d>
 8002940:	4680      	mov	r8, r0
 8002942:	4689      	mov	r9, r1
 8002944:	f507 4326 	add.w	r3, r7, #42496	@ 0xa600
 8002948:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f7fd fe0b 	bl	8000568 <__aeabi_f2d>
 8002952:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002956:	3b78      	subs	r3, #120	@ 0x78
 8002958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800295c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002960:	e9cd 4500 	strd	r4, r5, [sp]
 8002964:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <main+0x778>)
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	4618      	mov	r0, r3
 800296a:	f002 fca9 	bl	80052c0 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800296e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002972:	3b78      	subs	r3, #120	@ 0x78
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fc8b 	bl	8000290 <strlen>
 800297a:	4603      	mov	r3, r0
 800297c:	b29a      	uxth	r2, r3
 800297e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8002982:	3978      	subs	r1, #120	@ 0x78
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	4808      	ldr	r0, [pc, #32]	@ (80029ac <main+0x774>)
 800298a:	f001 fbb3 	bl	80040f4 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800298e:	bf00      	nop
 8002990:	e7fd      	b.n	800298e <main+0x756>
 8002992:	bf00      	nop
 8002994:	08009748 	.word	0x08009748
 8002998:	e0001000 	.word	0xe0001000
 800299c:	4d2ba950 	.word	0x4d2ba950
 80029a0:	447a0000 	.word	0x447a0000
 80029a4:	3d872b02 	.word	0x3d872b02
 80029a8:	08009758 	.word	0x08009758
 80029ac:	20000228 	.word	0x20000228
 80029b0:	08009770 	.word	0x08009770

080029b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b094      	sub	sp, #80	@ 0x50
 80029b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ba:	f107 0320 	add.w	r3, r7, #32
 80029be:	2230      	movs	r2, #48	@ 0x30
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fcf5 	bl	80053b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <SystemClock_Config+0xd8>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a8c <SystemClock_Config+0xd8>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e8:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <SystemClock_Config+0xd8>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	4b25      	ldr	r3, [pc, #148]	@ (8002a90 <SystemClock_Config+0xdc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <SystemClock_Config+0xdc>)
 80029fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <SystemClock_Config+0xdc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a24:	2304      	movs	r3, #4
 8002a26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002a28:	23b4      	movs	r3, #180	@ 0xb4
 8002a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002a30:	2308      	movs	r3, #8
 8002a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a34:	f107 0320 	add.w	r3, r7, #32
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fdf3 	bl	8003624 <HAL_RCC_OscConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a44:	f000 f8b6 	bl	8002bb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a48:	f000 fd9c 	bl	8003584 <HAL_PWREx_EnableOverDrive>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002a52:	f000 f8af 	bl	8002bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a56:	230f      	movs	r3, #15
 8002a58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002a68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	2105      	movs	r1, #5
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f84d 	bl	8003b14 <HAL_RCC_ClockConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002a80:	f000 f898 	bl	8002bb4 <Error_Handler>
  }
}
 8002a84:	bf00      	nop
 8002a86:	3750      	adds	r7, #80	@ 0x50
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000

08002a94 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MX_RNG_Init+0x20>)
 8002a9a:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <MX_RNG_Init+0x24>)
 8002a9c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <MX_RNG_Init+0x20>)
 8002aa0:	f001 fa58 	bl	8003f54 <HAL_RNG_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002aaa:	f000 f883 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000218 	.word	0x20000218
 8002ab8:	50060800 	.word	0x50060800

08002abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <MX_USART1_UART_Init+0x50>)
 8002ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <MX_USART1_UART_Init+0x4c>)
 8002af4:	f001 faae 	bl	8004054 <HAL_UART_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002afe:	f000 f859 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000228 	.word	0x20000228
 8002b0c:	40011000 	.word	0x40011000

08002b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b36:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a11      	ldr	r2, [pc, #68]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <MX_GPIO_Init+0x9c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b80:	480b      	ldr	r0, [pc, #44]	@ (8002bb0 <MX_GPIO_Init+0xa0>)
 8002b82:	f000 fce5 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4804      	ldr	r0, [pc, #16]	@ (8002bb0 <MX_GPIO_Init+0xa0>)
 8002ba0:	f000 fb2a 	bl	80031f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ba4:	bf00      	nop
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40021800 	.word	0x40021800

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <Error_Handler+0x8>

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	4a0f      	ldr	r2, [pc, #60]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_RNG_MspInit+0x3c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_RNG_MspInit+0x40>)
 8002c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2a:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <HAL_RNG_MspInit+0x40>)
 8002c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c30:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_RNG_MspInit+0x40>)
 8002c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	50060800 	.word	0x50060800
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <HAL_UART_MspInit+0x84>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d12c      	bne.n	8002cd0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <HAL_UART_MspInit+0x88>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	4a17      	ldr	r2, [pc, #92]	@ (8002cdc <HAL_UART_MspInit+0x88>)
 8002c80:	f043 0310 	orr.w	r3, r3, #16
 8002c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c86:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_UART_MspInit+0x88>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_UART_MspInit+0x88>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <HAL_UART_MspInit+0x88>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <HAL_UART_MspInit+0x88>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4805      	ldr	r0, [pc, #20]	@ (8002ce0 <HAL_UART_MspInit+0x8c>)
 8002ccc:	f000 fa94 	bl	80031f8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3728      	adds	r7, #40	@ 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40011000 	.word	0x40011000
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020000 	.word	0x40020000

08002ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <NMI_Handler+0x4>

08002cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <HardFault_Handler+0x4>

08002cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <MemManage_Handler+0x4>

08002cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <BusFault_Handler+0x4>

08002d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <UsageFault_Handler+0x4>

08002d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d3a:	f000 f957 	bl	8002fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  return 1;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_kill>:

int _kill(int pid, int sig)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d5c:	f002 fb7c 	bl	8005458 <__errno>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2216      	movs	r2, #22
 8002d64:	601a      	str	r2, [r3, #0]
  return -1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_exit>:

void _exit (int status)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ffe7 	bl	8002d52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <_exit+0x12>

08002d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e00a      	b.n	8002db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d9a:	f3af 8000 	nop.w
 8002d9e:	4601      	mov	r1, r0
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60ba      	str	r2, [r7, #8]
 8002da6:	b2ca      	uxtb	r2, r1
 8002da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3301      	adds	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	dbf0      	blt.n	8002d9a <_read+0x12>
  }

  return len;
 8002db8:	687b      	ldr	r3, [r7, #4]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e009      	b.n	8002de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	60ba      	str	r2, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbf1      	blt.n	8002dd4 <_write+0x12>
  }
  return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_close>:

int _close(int file)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e22:	605a      	str	r2, [r3, #4]
  return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_isatty>:

int _isatty(int file)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e6c:	4a14      	ldr	r2, [pc, #80]	@ (8002ec0 <_sbrk+0x5c>)
 8002e6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <_sbrk+0x60>)
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e78:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <_sbrk+0x64>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e80:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <_sbrk+0x64>)
 8002e82:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <_sbrk+0x68>)
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e86:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d207      	bcs.n	8002ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e94:	f002 fae0 	bl	8005458 <__errno>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	e009      	b.n	8002eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4a05      	ldr	r2, [pc, #20]	@ (8002ec8 <_sbrk+0x64>)
 8002eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20030000 	.word	0x20030000
 8002ec4:	00000400 	.word	0x00000400
 8002ec8:	20000270 	.word	0x20000270
 8002ecc:	200003c8 	.word	0x200003c8

08002ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <SystemInit+0x20>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <SystemInit+0x20>)
 8002edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ef4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef8:	f7ff ffea 	bl	8002ed0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002efc:	480c      	ldr	r0, [pc, #48]	@ (8002f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002efe:	490d      	ldr	r1, [pc, #52]	@ (8002f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f00:	4a0d      	ldr	r2, [pc, #52]	@ (8002f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f04:	e002      	b.n	8002f0c <LoopCopyDataInit>

08002f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0a:	3304      	adds	r3, #4

08002f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f10:	d3f9      	bcc.n	8002f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f12:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f14:	4c0a      	ldr	r4, [pc, #40]	@ (8002f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f18:	e001      	b.n	8002f1e <LoopFillZerobss>

08002f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f1c:	3204      	adds	r2, #4

08002f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f20:	d3fb      	bcc.n	8002f1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f22:	f002 fa9f 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f26:	f7ff f987 	bl	8002238 <main>
  bx  lr    
 8002f2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f34:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002f38:	08009d88 	.word	0x08009d88
  ldr r2, =_sbss
 8002f3c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002f40:	200003c4 	.word	0x200003c4

08002f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f44:	e7fe      	b.n	8002f44 <ADC_IRQHandler>
	...

08002f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <HAL_Init+0x40>)
 8002f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <HAL_Init+0x40>)
 8002f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a07      	ldr	r2, [pc, #28]	@ (8002f88 <HAL_Init+0x40>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 f90d 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f76:	200f      	movs	r0, #15
 8002f78:	f000 f808 	bl	8002f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7c:	f7ff fe20 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00

08002f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_InitTick+0x54>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_InitTick+0x58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f917 	bl	80031de <HAL_SYSTICK_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00e      	b.n	8002fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d80a      	bhi.n	8002fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	f000 f8ed 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fcc:	4a06      	ldr	r2, [pc, #24]	@ (8002fe8 <HAL_InitTick+0x5c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000028 	.word	0x20000028
 8002fe4:	20000030 	.word	0x20000030
 8002fe8:	2000002c 	.word	0x2000002c

08002fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_IncTick+0x20>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_IncTick+0x24>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <HAL_IncTick+0x24>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000030 	.word	0x20000030
 8003010:	20000274 	.word	0x20000274

08003014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return uwTick;
 8003018:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <HAL_GetTick+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000274 	.word	0x20000274

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	@ (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	@ (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	@ 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	@ (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff47 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff5c 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffb0 	bl	800314c <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e177      	b.n	8003504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 8166 	bne.w	80034fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d005      	beq.n	800324a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003246:	2b02      	cmp	r3, #2
 8003248:	d130      	bne.n	80032ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0201 	and.w	r2, r3, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d017      	beq.n	80032e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80c0 	beq.w	80034fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b66      	ldr	r3, [pc, #408]	@ (800351c <HAL_GPIO_Init+0x324>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	4a65      	ldr	r2, [pc, #404]	@ (800351c <HAL_GPIO_Init+0x324>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800338c:	6453      	str	r3, [r2, #68]	@ 0x44
 800338e:	4b63      	ldr	r3, [pc, #396]	@ (800351c <HAL_GPIO_Init+0x324>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <HAL_GPIO_Init+0x328>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a58      	ldr	r2, [pc, #352]	@ (8003524 <HAL_GPIO_Init+0x32c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d037      	beq.n	8003436 <HAL_GPIO_Init+0x23e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a57      	ldr	r2, [pc, #348]	@ (8003528 <HAL_GPIO_Init+0x330>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d031      	beq.n	8003432 <HAL_GPIO_Init+0x23a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a56      	ldr	r2, [pc, #344]	@ (800352c <HAL_GPIO_Init+0x334>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02b      	beq.n	800342e <HAL_GPIO_Init+0x236>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a55      	ldr	r2, [pc, #340]	@ (8003530 <HAL_GPIO_Init+0x338>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d025      	beq.n	800342a <HAL_GPIO_Init+0x232>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a54      	ldr	r2, [pc, #336]	@ (8003534 <HAL_GPIO_Init+0x33c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <HAL_GPIO_Init+0x22e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a53      	ldr	r2, [pc, #332]	@ (8003538 <HAL_GPIO_Init+0x340>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x22a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_GPIO_Init+0x344>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x226>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a51      	ldr	r2, [pc, #324]	@ (8003540 <HAL_GPIO_Init+0x348>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x222>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a50      	ldr	r2, [pc, #320]	@ (8003544 <HAL_GPIO_Init+0x34c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x21e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4f      	ldr	r2, [pc, #316]	@ (8003548 <HAL_GPIO_Init+0x350>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x21a>
 800340e:	2309      	movs	r3, #9
 8003410:	e012      	b.n	8003438 <HAL_GPIO_Init+0x240>
 8003412:	230a      	movs	r3, #10
 8003414:	e010      	b.n	8003438 <HAL_GPIO_Init+0x240>
 8003416:	2308      	movs	r3, #8
 8003418:	e00e      	b.n	8003438 <HAL_GPIO_Init+0x240>
 800341a:	2307      	movs	r3, #7
 800341c:	e00c      	b.n	8003438 <HAL_GPIO_Init+0x240>
 800341e:	2306      	movs	r3, #6
 8003420:	e00a      	b.n	8003438 <HAL_GPIO_Init+0x240>
 8003422:	2305      	movs	r3, #5
 8003424:	e008      	b.n	8003438 <HAL_GPIO_Init+0x240>
 8003426:	2304      	movs	r3, #4
 8003428:	e006      	b.n	8003438 <HAL_GPIO_Init+0x240>
 800342a:	2303      	movs	r3, #3
 800342c:	e004      	b.n	8003438 <HAL_GPIO_Init+0x240>
 800342e:	2302      	movs	r3, #2
 8003430:	e002      	b.n	8003438 <HAL_GPIO_Init+0x240>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_GPIO_Init+0x240>
 8003436:	2300      	movs	r3, #0
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	f002 0203 	and.w	r2, r2, #3
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	4093      	lsls	r3, r2
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003448:	4935      	ldr	r1, [pc, #212]	@ (8003520 <HAL_GPIO_Init+0x328>)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003456:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <HAL_GPIO_Init+0x354>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347a:	4a34      	ldr	r2, [pc, #208]	@ (800354c <HAL_GPIO_Init+0x354>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003480:	4b32      	ldr	r3, [pc, #200]	@ (800354c <HAL_GPIO_Init+0x354>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a4:	4a29      	ldr	r2, [pc, #164]	@ (800354c <HAL_GPIO_Init+0x354>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034aa:	4b28      	ldr	r3, [pc, #160]	@ (800354c <HAL_GPIO_Init+0x354>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ce:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <HAL_GPIO_Init+0x354>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d4:	4b1d      	ldr	r3, [pc, #116]	@ (800354c <HAL_GPIO_Init+0x354>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f8:	4a14      	ldr	r2, [pc, #80]	@ (800354c <HAL_GPIO_Init+0x354>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3301      	adds	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	f67f ae84 	bls.w	8003214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800
 8003540:	40021c00 	.word	0x40021c00
 8003544:	40022000 	.word	0x40022000
 8003548:	40022400 	.word	0x40022400
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <HAL_PWREx_EnableOverDrive+0x90>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a1f      	ldr	r2, [pc, #124]	@ (8003614 <HAL_PWREx_EnableOverDrive+0x90>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
 800359e:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_PWREx_EnableOverDrive+0x90>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <HAL_PWREx_EnableOverDrive+0x94>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b0:	f7ff fd30 	bl	8003014 <HAL_GetTick>
 80035b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035b6:	e009      	b.n	80035cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035b8:	f7ff fd2c 	bl	8003014 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035c6:	d901      	bls.n	80035cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e01f      	b.n	800360c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035cc:	4b13      	ldr	r3, [pc, #76]	@ (800361c <HAL_PWREx_EnableOverDrive+0x98>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d1ee      	bne.n	80035b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035da:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e0:	f7ff fd18 	bl	8003014 <HAL_GetTick>
 80035e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035e6:	e009      	b.n	80035fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035e8:	f7ff fd14 	bl	8003014 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035f6:	d901      	bls.n	80035fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e007      	b.n	800360c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035fc:	4b07      	ldr	r3, [pc, #28]	@ (800361c <HAL_PWREx_EnableOverDrive+0x98>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003608:	d1ee      	bne.n	80035e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	420e0040 	.word	0x420e0040
 800361c:	40007000 	.word	0x40007000
 8003620:	420e0044 	.word	0x420e0044

08003624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e267      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d075      	beq.n	800372e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003642:	4b88      	ldr	r3, [pc, #544]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d00c      	beq.n	8003668 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364e:	4b85      	ldr	r3, [pc, #532]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003656:	2b08      	cmp	r3, #8
 8003658:	d112      	bne.n	8003680 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b82      	ldr	r3, [pc, #520]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003666:	d10b      	bne.n	8003680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	4b7e      	ldr	r3, [pc, #504]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d05b      	beq.n	800372c <HAL_RCC_OscConfig+0x108>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d157      	bne.n	800372c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e242      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x74>
 800368a:	4b76      	ldr	r3, [pc, #472]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a75      	ldr	r2, [pc, #468]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xb0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x98>
 80036a2:	4b70      	ldr	r3, [pc, #448]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xb0>
 80036bc:	4b69      	ldr	r3, [pc, #420]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a68      	ldr	r2, [pc, #416]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b66      	ldr	r3, [pc, #408]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a65      	ldr	r2, [pc, #404]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7ff fc9a 	bl	8003014 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7ff fc96 	bl	8003014 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	@ 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e207      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xc0>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7ff fc86 	bl	8003014 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7ff fc82 	bl	8003014 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	@ 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1f3      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b51      	ldr	r3, [pc, #324]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0xe8>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800373a:	4b4a      	ldr	r3, [pc, #296]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b44      	ldr	r3, [pc, #272]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b41      	ldr	r3, [pc, #260]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x152>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1c7      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3b      	ldr	r3, [pc, #236]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4937      	ldr	r1, [pc, #220]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <HAL_RCC_OscConfig+0x244>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7ff fc3b 	bl	8003014 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a2:	f7ff fc37 	bl	8003014 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1a8      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b28      	ldr	r3, [pc, #160]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4925      	ldr	r1, [pc, #148]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <HAL_RCC_OscConfig+0x244>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7ff fc1a 	bl	8003014 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7ff fc16 	bl	8003014 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e187      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d036      	beq.n	800387c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b15      	ldr	r3, [pc, #84]	@ (800386c <HAL_RCC_OscConfig+0x248>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7ff fbfa 	bl	8003014 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003824:	f7ff fbf6 	bl	8003014 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e167      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCC_OscConfig+0x240>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x200>
 8003842:	e01b      	b.n	800387c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003844:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCC_OscConfig+0x248>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7ff fbe3 	bl	8003014 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	e00e      	b.n	8003870 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003852:	f7ff fbdf 	bl	8003014 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d907      	bls.n	8003870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e150      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	42470000 	.word	0x42470000
 800386c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	4b88      	ldr	r3, [pc, #544]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ea      	bne.n	8003852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8097 	beq.w	80039b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b81      	ldr	r3, [pc, #516]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ba:	4b77      	ldr	r3, [pc, #476]	@ (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d118      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c6:	4b74      	ldr	r3, [pc, #464]	@ (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	@ (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d2:	f7ff fb9f 	bl	8003014 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7ff fb9b 	bl	8003014 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e10c      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d106      	bne.n	800390e <HAL_RCC_OscConfig+0x2ea>
 8003900:	4b64      	ldr	r3, [pc, #400]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	4a63      	ldr	r2, [pc, #396]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6713      	str	r3, [r2, #112]	@ 0x70
 800390c:	e01c      	b.n	8003948 <HAL_RCC_OscConfig+0x324>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b05      	cmp	r3, #5
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x30c>
 8003916:	4b5f      	ldr	r3, [pc, #380]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	4a5e      	ldr	r2, [pc, #376]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	@ 0x70
 8003922:	4b5c      	ldr	r3, [pc, #368]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003926:	4a5b      	ldr	r2, [pc, #364]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	@ 0x70
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0x324>
 8003930:	4b58      	ldr	r3, [pc, #352]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003934:	4a57      	ldr	r2, [pc, #348]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	@ 0x70
 800393c:	4b55      	ldr	r3, [pc, #340]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	4a54      	ldr	r2, [pc, #336]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003942:	f023 0304 	bic.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7ff fb60 	bl	8003014 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7ff fb5c 	bl	8003014 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0cb      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	4b49      	ldr	r3, [pc, #292]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0ee      	beq.n	8003958 <HAL_RCC_OscConfig+0x334>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397c:	f7ff fb4a 	bl	8003014 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7ff fb46 	bl	8003014 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0b5      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ee      	bne.n	8003984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	4a38      	ldr	r2, [pc, #224]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a1 	beq.w	8003b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c2:	4b34      	ldr	r3, [pc, #208]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d05c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d141      	bne.n	8003a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b31      	ldr	r3, [pc, #196]	@ (8003a9c <HAL_RCC_OscConfig+0x478>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7ff fb1a 	bl	8003014 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7ff fb16 	bl	8003014 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e087      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	491b      	ldr	r1, [pc, #108]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a9c <HAL_RCC_OscConfig+0x478>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7ff faef 	bl	8003014 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7ff faeb 	bl	8003014 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e05c      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4c:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x416>
 8003a58:	e054      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <HAL_RCC_OscConfig+0x478>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7ff fad8 	bl	8003014 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7ff fad4 	bl	8003014 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e045      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x444>
 8003a86:	e03d      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e038      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <HAL_RCC_OscConfig+0x4ec>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d028      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d121      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d11a      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0cc      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b68      	ldr	r3, [pc, #416]	@ (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d90c      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b65      	ldr	r3, [pc, #404]	@ (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b63      	ldr	r3, [pc, #396]	@ (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0b8      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b68:	4b59      	ldr	r3, [pc, #356]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a58      	ldr	r2, [pc, #352]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b80:	4b53      	ldr	r3, [pc, #332]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a52      	ldr	r2, [pc, #328]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8c:	4b50      	ldr	r3, [pc, #320]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	494d      	ldr	r1, [pc, #308]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d044      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b47      	ldr	r3, [pc, #284]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d119      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e07f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e067      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b37      	ldr	r3, [pc, #220]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4934      	ldr	r1, [pc, #208]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7ff fa06 	bl	8003014 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7ff fa02 	bl	8003014 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e04f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b25      	ldr	r3, [pc, #148]	@ (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d20c      	bcs.n	8003c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b22      	ldr	r3, [pc, #136]	@ (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e032      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c68:	4b19      	ldr	r3, [pc, #100]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4916      	ldr	r1, [pc, #88]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c86:	4b12      	ldr	r3, [pc, #72]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	490e      	ldr	r1, [pc, #56]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c9a:	f000 f821 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	490a      	ldr	r1, [pc, #40]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	5ccb      	ldrb	r3, [r1, r3]
 8003cae:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb2:	4a09      	ldr	r2, [pc, #36]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cb6:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff f966 	bl	8002f8c <HAL_InitTick>

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	0800979c 	.word	0x0800979c
 8003cd8:	20000028 	.word	0x20000028
 8003cdc:	2000002c 	.word	0x2000002c

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce4:	b094      	sub	sp, #80	@ 0x50
 8003ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf8:	4b79      	ldr	r3, [pc, #484]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d00d      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x40>
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	f200 80e1 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x34>
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d12:	e0db      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b73      	ldr	r3, [pc, #460]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d18:	e0db      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1a:	4b73      	ldr	r3, [pc, #460]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d1e:	e0d8      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d20:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d063      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d52:	4622      	mov	r2, r4
 8003d54:	462b      	mov	r3, r5
 8003d56:	f04f 0000 	mov.w	r0, #0
 8003d5a:	f04f 0100 	mov.w	r1, #0
 8003d5e:	0159      	lsls	r1, r3, #5
 8003d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d64:	0150      	lsls	r0, r2, #5
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	1a51      	subs	r1, r2, r1
 8003d6e:	6139      	str	r1, [r7, #16]
 8003d70:	4629      	mov	r1, r5
 8003d72:	eb63 0301 	sbc.w	r3, r3, r1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d84:	4659      	mov	r1, fp
 8003d86:	018b      	lsls	r3, r1, #6
 8003d88:	4651      	mov	r1, sl
 8003d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d8e:	4651      	mov	r1, sl
 8003d90:	018a      	lsls	r2, r1, #6
 8003d92:	4651      	mov	r1, sl
 8003d94:	ebb2 0801 	subs.w	r8, r2, r1
 8003d98:	4659      	mov	r1, fp
 8003d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003db2:	4690      	mov	r8, r2
 8003db4:	4699      	mov	r9, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	eb18 0303 	adds.w	r3, r8, r3
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	eb49 0303 	adc.w	r3, r9, r3
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	024b      	lsls	r3, r1, #9
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ddc:	4621      	mov	r1, r4
 8003dde:	024a      	lsls	r2, r1, #9
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de6:	2200      	movs	r2, #0
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003df0:	f7fc ff3a 	bl	8000c68 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dfc:	e058      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	2200      	movs	r2, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	4611      	mov	r1, r2
 8003e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e0e:	623b      	str	r3, [r7, #32]
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e18:	4642      	mov	r2, r8
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	f04f 0000 	mov.w	r0, #0
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	0159      	lsls	r1, r3, #5
 8003e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e2a:	0150      	lsls	r0, r2, #5
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4641      	mov	r1, r8
 8003e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e36:	4649      	mov	r1, r9
 8003e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e50:	ebb2 040a 	subs.w	r4, r2, sl
 8003e54:	eb63 050b 	sbc.w	r5, r3, fp
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	00eb      	lsls	r3, r5, #3
 8003e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e66:	00e2      	lsls	r2, r4, #3
 8003e68:	4614      	mov	r4, r2
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	18e3      	adds	r3, r4, r3
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	464b      	mov	r3, r9
 8003e74:	eb45 0303 	adc.w	r3, r5, r3
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e86:	4629      	mov	r1, r5
 8003e88:	028b      	lsls	r3, r1, #10
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e90:	4621      	mov	r1, r4
 8003e92:	028a      	lsls	r2, r1, #10
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	61fa      	str	r2, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	f7fc fee0 	bl	8000c68 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3750      	adds	r7, #80	@ 0x50
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000028 	.word	0x20000028

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	@ (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	080097ac 	.word	0x080097ac

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	080097ac 	.word	0x080097ac

08003f54 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e01c      	b.n	8003fa0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	795b      	ldrb	r3, [r3, #5]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe fe4a 	bl	8002c10 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0204 	orr.w	r2, r2, #4
 8003f90:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	791b      	ldrb	r3, [r3, #4]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e044      	b.n	800404c <HAL_RNG_GenerateRandomNumber+0xa4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	795b      	ldrb	r3, [r3, #5]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d133      	bne.n	800403a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7ff f81c 	bl	8003014 <HAL_GetTick>
 8003fdc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003fde:	e018      	b.n	8004012 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003fe0:	f7ff f818 	bl	8003014 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d911      	bls.n	8004012 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d00a      	beq.n	8004012 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e01c      	b.n	800404c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d1df      	bne.n	8003fe0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	715a      	strb	r2, [r3, #5]
 8004038:	e004      	b.n	8004044 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	711a      	strb	r2, [r3, #4]

  return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e042      	b.n	80040ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe fdea 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	@ 0x24
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f973 	bl	8004384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	@ 0x28
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b20      	cmp	r3, #32
 8004112:	d175      	bne.n	8004200 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Transmit+0x2c>
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e06e      	b.n	8004202 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2221      	movs	r2, #33	@ 0x21
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004132:	f7fe ff6f 	bl	8003014 <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414c:	d108      	bne.n	8004160 <HAL_UART_Transmit+0x6c>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e003      	b.n	8004168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004168:	e02e      	b.n	80041c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	@ 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f848 	bl	800420a <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e03a      	b.n	8004202 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3302      	adds	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e007      	b.n	80041ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1cb      	bne.n	800416a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2140      	movs	r1, #64	@ 0x40
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f814 	bl	800420a <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e006      	b.n	8004202 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421a:	e03b      	b.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d037      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004224:	f7fe fef6 	bl	8003014 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <UART_WaitOnFlagUntilTimeout+0x30>
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e03a      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d023      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b80      	cmp	r3, #128	@ 0x80
 8004250:	d020      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b40      	cmp	r3, #64	@ 0x40
 8004256:	d01d      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b08      	cmp	r3, #8
 8004264:	d116      	bne.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f81d 	bl	80042bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2208      	movs	r2, #8
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e00f      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d0b4      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b095      	sub	sp, #84	@ 0x54
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80042e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3314      	adds	r3, #20
 80042fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	61fb      	str	r3, [r7, #28]
   return(result);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d119      	bne.n	8004368 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	60bb      	str	r3, [r7, #8]
   return(result);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f023 0310 	bic.w	r3, r3, #16
 800434a:	647b      	str	r3, [r7, #68]	@ 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004354:	61ba      	str	r2, [r7, #24]
 8004356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	613b      	str	r3, [r7, #16]
   return(result);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004376:	bf00      	nop
 8004378:	3754      	adds	r7, #84	@ 0x54
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004388:	b0c0      	sub	sp, #256	@ 0x100
 800438a:	af00      	add	r7, sp, #0
 800438c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	ea40 0301 	orr.w	r3, r0, r1
 80043ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043dc:	f021 010c 	bic.w	r1, r1, #12
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043ea:	430b      	orrs	r3, r1
 80043ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fe:	6999      	ldr	r1, [r3, #24]
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	ea40 0301 	orr.w	r3, r0, r1
 800440a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b8f      	ldr	r3, [pc, #572]	@ (8004650 <UART_SetConfig+0x2cc>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d005      	beq.n	8004424 <UART_SetConfig+0xa0>
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b8d      	ldr	r3, [pc, #564]	@ (8004654 <UART_SetConfig+0x2d0>)
 8004420:	429a      	cmp	r2, r3
 8004422:	d104      	bne.n	800442e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7ff fd82 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8004428:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800442c:	e003      	b.n	8004436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800442e:	f7ff fd69 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8004432:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004440:	f040 810c 	bne.w	800465c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004448:	2200      	movs	r2, #0
 800444a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800444e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004456:	4622      	mov	r2, r4
 8004458:	462b      	mov	r3, r5
 800445a:	1891      	adds	r1, r2, r2
 800445c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800445e:	415b      	adcs	r3, r3
 8004460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004466:	4621      	mov	r1, r4
 8004468:	eb12 0801 	adds.w	r8, r2, r1
 800446c:	4629      	mov	r1, r5
 800446e:	eb43 0901 	adc.w	r9, r3, r1
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800447e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004486:	4690      	mov	r8, r2
 8004488:	4699      	mov	r9, r3
 800448a:	4623      	mov	r3, r4
 800448c:	eb18 0303 	adds.w	r3, r8, r3
 8004490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004494:	462b      	mov	r3, r5
 8004496:	eb49 0303 	adc.w	r3, r9, r3
 800449a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044b2:	460b      	mov	r3, r1
 80044b4:	18db      	adds	r3, r3, r3
 80044b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044b8:	4613      	mov	r3, r2
 80044ba:	eb42 0303 	adc.w	r3, r2, r3
 80044be:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044c8:	f7fc fbce 	bl	8000c68 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4b61      	ldr	r3, [pc, #388]	@ (8004658 <UART_SetConfig+0x2d4>)
 80044d2:	fba3 2302 	umull	r2, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	011c      	lsls	r4, r3, #4
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	1891      	adds	r1, r2, r2
 80044f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044f4:	415b      	adcs	r3, r3
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044fc:	4641      	mov	r1, r8
 80044fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004502:	4649      	mov	r1, r9
 8004504:	eb43 0b01 	adc.w	fp, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800451c:	4692      	mov	sl, r2
 800451e:	469b      	mov	fp, r3
 8004520:	4643      	mov	r3, r8
 8004522:	eb1a 0303 	adds.w	r3, sl, r3
 8004526:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800452a:	464b      	mov	r3, r9
 800452c:	eb4b 0303 	adc.w	r3, fp, r3
 8004530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004540:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004548:	460b      	mov	r3, r1
 800454a:	18db      	adds	r3, r3, r3
 800454c:	643b      	str	r3, [r7, #64]	@ 0x40
 800454e:	4613      	mov	r3, r2
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
 8004556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800455a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800455e:	f7fc fb83 	bl	8000c68 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4611      	mov	r1, r2
 8004568:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <UART_SetConfig+0x2d4>)
 800456a:	fba3 2301 	umull	r2, r3, r3, r1
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2264      	movs	r2, #100	@ 0x64
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	1acb      	subs	r3, r1, r3
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800457e:	4b36      	ldr	r3, [pc, #216]	@ (8004658 <UART_SetConfig+0x2d4>)
 8004580:	fba3 2302 	umull	r2, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800458c:	441c      	add	r4, r3
 800458e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004598:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800459c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045a8:	415b      	adcs	r3, r3
 80045aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045b0:	4641      	mov	r1, r8
 80045b2:	1851      	adds	r1, r2, r1
 80045b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80045b6:	4649      	mov	r1, r9
 80045b8:	414b      	adcs	r3, r1
 80045ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045c8:	4659      	mov	r1, fp
 80045ca:	00cb      	lsls	r3, r1, #3
 80045cc:	4651      	mov	r1, sl
 80045ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d2:	4651      	mov	r1, sl
 80045d4:	00ca      	lsls	r2, r1, #3
 80045d6:	4610      	mov	r0, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	4642      	mov	r2, r8
 80045de:	189b      	adds	r3, r3, r2
 80045e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045e4:	464b      	mov	r3, r9
 80045e6:	460a      	mov	r2, r1
 80045e8:	eb42 0303 	adc.w	r3, r2, r3
 80045ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004604:	460b      	mov	r3, r1
 8004606:	18db      	adds	r3, r3, r3
 8004608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800460a:	4613      	mov	r3, r2
 800460c:	eb42 0303 	adc.w	r3, r2, r3
 8004610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800461a:	f7fc fb25 	bl	8000c68 <__aeabi_uldivmod>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4b0d      	ldr	r3, [pc, #52]	@ (8004658 <UART_SetConfig+0x2d4>)
 8004624:	fba3 1302 	umull	r1, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	2164      	movs	r1, #100	@ 0x64
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	3332      	adds	r3, #50	@ 0x32
 8004636:	4a08      	ldr	r2, [pc, #32]	@ (8004658 <UART_SetConfig+0x2d4>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f003 0207 	and.w	r2, r3, #7
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4422      	add	r2, r4
 800464a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800464c:	e106      	b.n	800485c <UART_SetConfig+0x4d8>
 800464e:	bf00      	nop
 8004650:	40011000 	.word	0x40011000
 8004654:	40011400 	.word	0x40011400
 8004658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800465c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004666:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800466a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	1891      	adds	r1, r2, r2
 8004674:	6239      	str	r1, [r7, #32]
 8004676:	415b      	adcs	r3, r3
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
 800467a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467e:	4641      	mov	r1, r8
 8004680:	1854      	adds	r4, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb43 0501 	adc.w	r5, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	00eb      	lsls	r3, r5, #3
 8004692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004696:	00e2      	lsls	r2, r4, #3
 8004698:	4614      	mov	r4, r2
 800469a:	461d      	mov	r5, r3
 800469c:	4643      	mov	r3, r8
 800469e:	18e3      	adds	r3, r4, r3
 80046a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046a4:	464b      	mov	r3, r9
 80046a6:	eb45 0303 	adc.w	r3, r5, r3
 80046aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046ca:	4629      	mov	r1, r5
 80046cc:	008b      	lsls	r3, r1, #2
 80046ce:	4621      	mov	r1, r4
 80046d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d4:	4621      	mov	r1, r4
 80046d6:	008a      	lsls	r2, r1, #2
 80046d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046dc:	f7fc fac4 	bl	8000c68 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b60      	ldr	r3, [pc, #384]	@ (8004868 <UART_SetConfig+0x4e4>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	011c      	lsls	r4, r3, #4
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	61b9      	str	r1, [r7, #24]
 8004708:	415b      	adcs	r3, r3
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004710:	4641      	mov	r1, r8
 8004712:	1851      	adds	r1, r2, r1
 8004714:	6139      	str	r1, [r7, #16]
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004728:	4659      	mov	r1, fp
 800472a:	00cb      	lsls	r3, r1, #3
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004732:	4651      	mov	r1, sl
 8004734:	00ca      	lsls	r2, r1, #3
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	4603      	mov	r3, r0
 800473c:	4642      	mov	r2, r8
 800473e:	189b      	adds	r3, r3, r2
 8004740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004744:	464b      	mov	r3, r9
 8004746:	460a      	mov	r2, r1
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800475a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004768:	4649      	mov	r1, r9
 800476a:	008b      	lsls	r3, r1, #2
 800476c:	4641      	mov	r1, r8
 800476e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004772:	4641      	mov	r1, r8
 8004774:	008a      	lsls	r2, r1, #2
 8004776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800477a:	f7fc fa75 	bl	8000c68 <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4611      	mov	r1, r2
 8004784:	4b38      	ldr	r3, [pc, #224]	@ (8004868 <UART_SetConfig+0x4e4>)
 8004786:	fba3 2301 	umull	r2, r3, r3, r1
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2264      	movs	r2, #100	@ 0x64
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	1acb      	subs	r3, r1, r3
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	3332      	adds	r3, #50	@ 0x32
 8004798:	4a33      	ldr	r2, [pc, #204]	@ (8004868 <UART_SetConfig+0x4e4>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047a4:	441c      	add	r4, r3
 80047a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047aa:	2200      	movs	r2, #0
 80047ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80047b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	415b      	adcs	r3, r3
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047f6:	464b      	mov	r3, r9
 80047f8:	460a      	mov	r2, r1
 80047fa:	eb42 0303 	adc.w	r3, r2, r3
 80047fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	663b      	str	r3, [r7, #96]	@ 0x60
 800480a:	667a      	str	r2, [r7, #100]	@ 0x64
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004818:	4649      	mov	r1, r9
 800481a:	008b      	lsls	r3, r1, #2
 800481c:	4641      	mov	r1, r8
 800481e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004822:	4641      	mov	r1, r8
 8004824:	008a      	lsls	r2, r1, #2
 8004826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800482a:	f7fc fa1d 	bl	8000c68 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <UART_SetConfig+0x4e4>)
 8004834:	fba3 1302 	umull	r1, r3, r3, r2
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	2164      	movs	r1, #100	@ 0x64
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	3332      	adds	r3, #50	@ 0x32
 8004846:	4a08      	ldr	r2, [pc, #32]	@ (8004868 <UART_SetConfig+0x4e4>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 020f 	and.w	r2, r3, #15
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4422      	add	r2, r4
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004862:	46bd      	mov	sp, r7
 8004864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004868:	51eb851f 	.word	0x51eb851f

0800486c <__cvt>:
 800486c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	ec57 6b10 	vmov	r6, r7, d0
 8004874:	2f00      	cmp	r7, #0
 8004876:	460c      	mov	r4, r1
 8004878:	4619      	mov	r1, r3
 800487a:	463b      	mov	r3, r7
 800487c:	bfbb      	ittet	lt
 800487e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004882:	461f      	movlt	r7, r3
 8004884:	2300      	movge	r3, #0
 8004886:	232d      	movlt	r3, #45	@ 0x2d
 8004888:	700b      	strb	r3, [r1, #0]
 800488a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800488c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004890:	4691      	mov	r9, r2
 8004892:	f023 0820 	bic.w	r8, r3, #32
 8004896:	bfbc      	itt	lt
 8004898:	4632      	movlt	r2, r6
 800489a:	4616      	movlt	r6, r2
 800489c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048a0:	d005      	beq.n	80048ae <__cvt+0x42>
 80048a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048a6:	d100      	bne.n	80048aa <__cvt+0x3e>
 80048a8:	3401      	adds	r4, #1
 80048aa:	2102      	movs	r1, #2
 80048ac:	e000      	b.n	80048b0 <__cvt+0x44>
 80048ae:	2103      	movs	r1, #3
 80048b0:	ab03      	add	r3, sp, #12
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	ab02      	add	r3, sp, #8
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	ec47 6b10 	vmov	d0, r6, r7
 80048bc:	4653      	mov	r3, sl
 80048be:	4622      	mov	r2, r4
 80048c0:	f000 fe8e 	bl	80055e0 <_dtoa_r>
 80048c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048c8:	4605      	mov	r5, r0
 80048ca:	d119      	bne.n	8004900 <__cvt+0x94>
 80048cc:	f019 0f01 	tst.w	r9, #1
 80048d0:	d00e      	beq.n	80048f0 <__cvt+0x84>
 80048d2:	eb00 0904 	add.w	r9, r0, r4
 80048d6:	2200      	movs	r2, #0
 80048d8:	2300      	movs	r3, #0
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fc f903 	bl	8000ae8 <__aeabi_dcmpeq>
 80048e2:	b108      	cbz	r0, 80048e8 <__cvt+0x7c>
 80048e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80048e8:	2230      	movs	r2, #48	@ 0x30
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	454b      	cmp	r3, r9
 80048ee:	d31e      	bcc.n	800492e <__cvt+0xc2>
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048f4:	1b5b      	subs	r3, r3, r5
 80048f6:	4628      	mov	r0, r5
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	b004      	add	sp, #16
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004904:	eb00 0904 	add.w	r9, r0, r4
 8004908:	d1e5      	bne.n	80048d6 <__cvt+0x6a>
 800490a:	7803      	ldrb	r3, [r0, #0]
 800490c:	2b30      	cmp	r3, #48	@ 0x30
 800490e:	d10a      	bne.n	8004926 <__cvt+0xba>
 8004910:	2200      	movs	r2, #0
 8004912:	2300      	movs	r3, #0
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	f7fc f8e6 	bl	8000ae8 <__aeabi_dcmpeq>
 800491c:	b918      	cbnz	r0, 8004926 <__cvt+0xba>
 800491e:	f1c4 0401 	rsb	r4, r4, #1
 8004922:	f8ca 4000 	str.w	r4, [sl]
 8004926:	f8da 3000 	ldr.w	r3, [sl]
 800492a:	4499      	add	r9, r3
 800492c:	e7d3      	b.n	80048d6 <__cvt+0x6a>
 800492e:	1c59      	adds	r1, r3, #1
 8004930:	9103      	str	r1, [sp, #12]
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e7d9      	b.n	80048ea <__cvt+0x7e>

08004936 <__exponent>:
 8004936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004938:	2900      	cmp	r1, #0
 800493a:	bfba      	itte	lt
 800493c:	4249      	neglt	r1, r1
 800493e:	232d      	movlt	r3, #45	@ 0x2d
 8004940:	232b      	movge	r3, #43	@ 0x2b
 8004942:	2909      	cmp	r1, #9
 8004944:	7002      	strb	r2, [r0, #0]
 8004946:	7043      	strb	r3, [r0, #1]
 8004948:	dd29      	ble.n	800499e <__exponent+0x68>
 800494a:	f10d 0307 	add.w	r3, sp, #7
 800494e:	461d      	mov	r5, r3
 8004950:	270a      	movs	r7, #10
 8004952:	461a      	mov	r2, r3
 8004954:	fbb1 f6f7 	udiv	r6, r1, r7
 8004958:	fb07 1416 	mls	r4, r7, r6, r1
 800495c:	3430      	adds	r4, #48	@ 0x30
 800495e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004962:	460c      	mov	r4, r1
 8004964:	2c63      	cmp	r4, #99	@ 0x63
 8004966:	f103 33ff 	add.w	r3, r3, #4294967295
 800496a:	4631      	mov	r1, r6
 800496c:	dcf1      	bgt.n	8004952 <__exponent+0x1c>
 800496e:	3130      	adds	r1, #48	@ 0x30
 8004970:	1e94      	subs	r4, r2, #2
 8004972:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004976:	1c41      	adds	r1, r0, #1
 8004978:	4623      	mov	r3, r4
 800497a:	42ab      	cmp	r3, r5
 800497c:	d30a      	bcc.n	8004994 <__exponent+0x5e>
 800497e:	f10d 0309 	add.w	r3, sp, #9
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	42ac      	cmp	r4, r5
 8004986:	bf88      	it	hi
 8004988:	2300      	movhi	r3, #0
 800498a:	3302      	adds	r3, #2
 800498c:	4403      	add	r3, r0
 800498e:	1a18      	subs	r0, r3, r0
 8004990:	b003      	add	sp, #12
 8004992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004994:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004998:	f801 6f01 	strb.w	r6, [r1, #1]!
 800499c:	e7ed      	b.n	800497a <__exponent+0x44>
 800499e:	2330      	movs	r3, #48	@ 0x30
 80049a0:	3130      	adds	r1, #48	@ 0x30
 80049a2:	7083      	strb	r3, [r0, #2]
 80049a4:	70c1      	strb	r1, [r0, #3]
 80049a6:	1d03      	adds	r3, r0, #4
 80049a8:	e7f1      	b.n	800498e <__exponent+0x58>
	...

080049ac <_printf_float>:
 80049ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b0:	b08d      	sub	sp, #52	@ 0x34
 80049b2:	460c      	mov	r4, r1
 80049b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80049b8:	4616      	mov	r6, r2
 80049ba:	461f      	mov	r7, r3
 80049bc:	4605      	mov	r5, r0
 80049be:	f000 fd01 	bl	80053c4 <_localeconv_r>
 80049c2:	6803      	ldr	r3, [r0, #0]
 80049c4:	9304      	str	r3, [sp, #16]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fb fc62 	bl	8000290 <strlen>
 80049cc:	2300      	movs	r3, #0
 80049ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80049d0:	f8d8 3000 	ldr.w	r3, [r8]
 80049d4:	9005      	str	r0, [sp, #20]
 80049d6:	3307      	adds	r3, #7
 80049d8:	f023 0307 	bic.w	r3, r3, #7
 80049dc:	f103 0208 	add.w	r2, r3, #8
 80049e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049e4:	f8d4 b000 	ldr.w	fp, [r4]
 80049e8:	f8c8 2000 	str.w	r2, [r8]
 80049ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049f4:	9307      	str	r3, [sp, #28]
 80049f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80049fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a02:	4b9c      	ldr	r3, [pc, #624]	@ (8004c74 <_printf_float+0x2c8>)
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	f7fc f8a0 	bl	8000b4c <__aeabi_dcmpun>
 8004a0c:	bb70      	cbnz	r0, 8004a6c <_printf_float+0xc0>
 8004a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a12:	4b98      	ldr	r3, [pc, #608]	@ (8004c74 <_printf_float+0x2c8>)
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295
 8004a18:	f7fc f87a 	bl	8000b10 <__aeabi_dcmple>
 8004a1c:	bb30      	cbnz	r0, 8004a6c <_printf_float+0xc0>
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2300      	movs	r3, #0
 8004a22:	4640      	mov	r0, r8
 8004a24:	4649      	mov	r1, r9
 8004a26:	f7fc f869 	bl	8000afc <__aeabi_dcmplt>
 8004a2a:	b110      	cbz	r0, 8004a32 <_printf_float+0x86>
 8004a2c:	232d      	movs	r3, #45	@ 0x2d
 8004a2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a32:	4a91      	ldr	r2, [pc, #580]	@ (8004c78 <_printf_float+0x2cc>)
 8004a34:	4b91      	ldr	r3, [pc, #580]	@ (8004c7c <_printf_float+0x2d0>)
 8004a36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a3a:	bf8c      	ite	hi
 8004a3c:	4690      	movhi	r8, r2
 8004a3e:	4698      	movls	r8, r3
 8004a40:	2303      	movs	r3, #3
 8004a42:	6123      	str	r3, [r4, #16]
 8004a44:	f02b 0304 	bic.w	r3, fp, #4
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	f04f 0900 	mov.w	r9, #0
 8004a4e:	9700      	str	r7, [sp, #0]
 8004a50:	4633      	mov	r3, r6
 8004a52:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004a54:	4621      	mov	r1, r4
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 f9d2 	bl	8004e00 <_printf_common>
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	f040 808d 	bne.w	8004b7c <_printf_float+0x1d0>
 8004a62:	f04f 30ff 	mov.w	r0, #4294967295
 8004a66:	b00d      	add	sp, #52	@ 0x34
 8004a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	464b      	mov	r3, r9
 8004a70:	4640      	mov	r0, r8
 8004a72:	4649      	mov	r1, r9
 8004a74:	f7fc f86a 	bl	8000b4c <__aeabi_dcmpun>
 8004a78:	b140      	cbz	r0, 8004a8c <_printf_float+0xe0>
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bfbc      	itt	lt
 8004a80:	232d      	movlt	r3, #45	@ 0x2d
 8004a82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a86:	4a7e      	ldr	r2, [pc, #504]	@ (8004c80 <_printf_float+0x2d4>)
 8004a88:	4b7e      	ldr	r3, [pc, #504]	@ (8004c84 <_printf_float+0x2d8>)
 8004a8a:	e7d4      	b.n	8004a36 <_printf_float+0x8a>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004a92:	9206      	str	r2, [sp, #24]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	d13b      	bne.n	8004b10 <_printf_float+0x164>
 8004a98:	2306      	movs	r3, #6
 8004a9a:	6063      	str	r3, [r4, #4]
 8004a9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	9303      	str	r3, [sp, #12]
 8004aa6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004aa8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004aac:	ab09      	add	r3, sp, #36	@ 0x24
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	6861      	ldr	r1, [r4, #4]
 8004ab2:	ec49 8b10 	vmov	d0, r8, r9
 8004ab6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004aba:	4628      	mov	r0, r5
 8004abc:	f7ff fed6 	bl	800486c <__cvt>
 8004ac0:	9b06      	ldr	r3, [sp, #24]
 8004ac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ac4:	2b47      	cmp	r3, #71	@ 0x47
 8004ac6:	4680      	mov	r8, r0
 8004ac8:	d129      	bne.n	8004b1e <_printf_float+0x172>
 8004aca:	1cc8      	adds	r0, r1, #3
 8004acc:	db02      	blt.n	8004ad4 <_printf_float+0x128>
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	dd41      	ble.n	8004b58 <_printf_float+0x1ac>
 8004ad4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ad8:	fa5f fa8a 	uxtb.w	sl, sl
 8004adc:	3901      	subs	r1, #1
 8004ade:	4652      	mov	r2, sl
 8004ae0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ae4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ae6:	f7ff ff26 	bl	8004936 <__exponent>
 8004aea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004aec:	1813      	adds	r3, r2, r0
 8004aee:	2a01      	cmp	r2, #1
 8004af0:	4681      	mov	r9, r0
 8004af2:	6123      	str	r3, [r4, #16]
 8004af4:	dc02      	bgt.n	8004afc <_printf_float+0x150>
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	07d2      	lsls	r2, r2, #31
 8004afa:	d501      	bpl.n	8004b00 <_printf_float+0x154>
 8004afc:	3301      	adds	r3, #1
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0a2      	beq.n	8004a4e <_printf_float+0xa2>
 8004b08:	232d      	movs	r3, #45	@ 0x2d
 8004b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b0e:	e79e      	b.n	8004a4e <_printf_float+0xa2>
 8004b10:	9a06      	ldr	r2, [sp, #24]
 8004b12:	2a47      	cmp	r2, #71	@ 0x47
 8004b14:	d1c2      	bne.n	8004a9c <_printf_float+0xf0>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1c0      	bne.n	8004a9c <_printf_float+0xf0>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e7bd      	b.n	8004a9a <_printf_float+0xee>
 8004b1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b22:	d9db      	bls.n	8004adc <_printf_float+0x130>
 8004b24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b28:	d118      	bne.n	8004b5c <_printf_float+0x1b0>
 8004b2a:	2900      	cmp	r1, #0
 8004b2c:	6863      	ldr	r3, [r4, #4]
 8004b2e:	dd0b      	ble.n	8004b48 <_printf_float+0x19c>
 8004b30:	6121      	str	r1, [r4, #16]
 8004b32:	b913      	cbnz	r3, 8004b3a <_printf_float+0x18e>
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	07d0      	lsls	r0, r2, #31
 8004b38:	d502      	bpl.n	8004b40 <_printf_float+0x194>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	440b      	add	r3, r1
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b42:	f04f 0900 	mov.w	r9, #0
 8004b46:	e7db      	b.n	8004b00 <_printf_float+0x154>
 8004b48:	b913      	cbnz	r3, 8004b50 <_printf_float+0x1a4>
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	07d2      	lsls	r2, r2, #31
 8004b4e:	d501      	bpl.n	8004b54 <_printf_float+0x1a8>
 8004b50:	3302      	adds	r3, #2
 8004b52:	e7f4      	b.n	8004b3e <_printf_float+0x192>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e7f2      	b.n	8004b3e <_printf_float+0x192>
 8004b58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	db05      	blt.n	8004b6e <_printf_float+0x1c2>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	6121      	str	r1, [r4, #16]
 8004b66:	07d8      	lsls	r0, r3, #31
 8004b68:	d5ea      	bpl.n	8004b40 <_printf_float+0x194>
 8004b6a:	1c4b      	adds	r3, r1, #1
 8004b6c:	e7e7      	b.n	8004b3e <_printf_float+0x192>
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	bfd4      	ite	le
 8004b72:	f1c1 0202 	rsble	r2, r1, #2
 8004b76:	2201      	movgt	r2, #1
 8004b78:	4413      	add	r3, r2
 8004b7a:	e7e0      	b.n	8004b3e <_printf_float+0x192>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	055a      	lsls	r2, r3, #21
 8004b80:	d407      	bmi.n	8004b92 <_printf_float+0x1e6>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	4642      	mov	r2, r8
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d12b      	bne.n	8004be8 <_printf_float+0x23c>
 8004b90:	e767      	b.n	8004a62 <_printf_float+0xb6>
 8004b92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b96:	f240 80dd 	bls.w	8004d54 <_printf_float+0x3a8>
 8004b9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f7fb ffa1 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d033      	beq.n	8004c12 <_printf_float+0x266>
 8004baa:	4a37      	ldr	r2, [pc, #220]	@ (8004c88 <_printf_float+0x2dc>)
 8004bac:	2301      	movs	r3, #1
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	f43f af54 	beq.w	8004a62 <_printf_float+0xb6>
 8004bba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004bbe:	4543      	cmp	r3, r8
 8004bc0:	db02      	blt.n	8004bc8 <_printf_float+0x21c>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07d8      	lsls	r0, r3, #31
 8004bc6:	d50f      	bpl.n	8004be8 <_printf_float+0x23c>
 8004bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f af45 	beq.w	8004a62 <_printf_float+0xb6>
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004be0:	f104 0a1a 	add.w	sl, r4, #26
 8004be4:	45c8      	cmp	r8, r9
 8004be6:	dc09      	bgt.n	8004bfc <_printf_float+0x250>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	079b      	lsls	r3, r3, #30
 8004bec:	f100 8103 	bmi.w	8004df6 <_printf_float+0x44a>
 8004bf0:	68e0      	ldr	r0, [r4, #12]
 8004bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bf4:	4298      	cmp	r0, r3
 8004bf6:	bfb8      	it	lt
 8004bf8:	4618      	movlt	r0, r3
 8004bfa:	e734      	b.n	8004a66 <_printf_float+0xba>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	4652      	mov	r2, sl
 8004c00:	4631      	mov	r1, r6
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b8      	blx	r7
 8004c06:	3001      	adds	r0, #1
 8004c08:	f43f af2b 	beq.w	8004a62 <_printf_float+0xb6>
 8004c0c:	f109 0901 	add.w	r9, r9, #1
 8004c10:	e7e8      	b.n	8004be4 <_printf_float+0x238>
 8004c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dc39      	bgt.n	8004c8c <_printf_float+0x2e0>
 8004c18:	4a1b      	ldr	r2, [pc, #108]	@ (8004c88 <_printf_float+0x2dc>)
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f af1d 	beq.w	8004a62 <_printf_float+0xb6>
 8004c28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004c2c:	ea59 0303 	orrs.w	r3, r9, r3
 8004c30:	d102      	bne.n	8004c38 <_printf_float+0x28c>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	07d9      	lsls	r1, r3, #31
 8004c36:	d5d7      	bpl.n	8004be8 <_printf_float+0x23c>
 8004c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	f43f af0d 	beq.w	8004a62 <_printf_float+0xb6>
 8004c48:	f04f 0a00 	mov.w	sl, #0
 8004c4c:	f104 0b1a 	add.w	fp, r4, #26
 8004c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c52:	425b      	negs	r3, r3
 8004c54:	4553      	cmp	r3, sl
 8004c56:	dc01      	bgt.n	8004c5c <_printf_float+0x2b0>
 8004c58:	464b      	mov	r3, r9
 8004c5a:	e793      	b.n	8004b84 <_printf_float+0x1d8>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	465a      	mov	r2, fp
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b8      	blx	r7
 8004c66:	3001      	adds	r0, #1
 8004c68:	f43f aefb 	beq.w	8004a62 <_printf_float+0xb6>
 8004c6c:	f10a 0a01 	add.w	sl, sl, #1
 8004c70:	e7ee      	b.n	8004c50 <_printf_float+0x2a4>
 8004c72:	bf00      	nop
 8004c74:	7fefffff 	.word	0x7fefffff
 8004c78:	080097b8 	.word	0x080097b8
 8004c7c:	080097b4 	.word	0x080097b4
 8004c80:	080097c0 	.word	0x080097c0
 8004c84:	080097bc 	.word	0x080097bc
 8004c88:	080097c4 	.word	0x080097c4
 8004c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c92:	4553      	cmp	r3, sl
 8004c94:	bfa8      	it	ge
 8004c96:	4653      	movge	r3, sl
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	dc36      	bgt.n	8004d0c <_printf_float+0x360>
 8004c9e:	f04f 0b00 	mov.w	fp, #0
 8004ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca6:	f104 021a 	add.w	r2, r4, #26
 8004caa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cac:	9306      	str	r3, [sp, #24]
 8004cae:	eba3 0309 	sub.w	r3, r3, r9
 8004cb2:	455b      	cmp	r3, fp
 8004cb4:	dc31      	bgt.n	8004d1a <_printf_float+0x36e>
 8004cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb8:	459a      	cmp	sl, r3
 8004cba:	dc3a      	bgt.n	8004d32 <_printf_float+0x386>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	07da      	lsls	r2, r3, #31
 8004cc0:	d437      	bmi.n	8004d32 <_printf_float+0x386>
 8004cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc4:	ebaa 0903 	sub.w	r9, sl, r3
 8004cc8:	9b06      	ldr	r3, [sp, #24]
 8004cca:	ebaa 0303 	sub.w	r3, sl, r3
 8004cce:	4599      	cmp	r9, r3
 8004cd0:	bfa8      	it	ge
 8004cd2:	4699      	movge	r9, r3
 8004cd4:	f1b9 0f00 	cmp.w	r9, #0
 8004cd8:	dc33      	bgt.n	8004d42 <_printf_float+0x396>
 8004cda:	f04f 0800 	mov.w	r8, #0
 8004cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce2:	f104 0b1a 	add.w	fp, r4, #26
 8004ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8004cec:	eba3 0309 	sub.w	r3, r3, r9
 8004cf0:	4543      	cmp	r3, r8
 8004cf2:	f77f af79 	ble.w	8004be8 <_printf_float+0x23c>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	465a      	mov	r2, fp
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	f43f aeae 	beq.w	8004a62 <_printf_float+0xb6>
 8004d06:	f108 0801 	add.w	r8, r8, #1
 8004d0a:	e7ec      	b.n	8004ce6 <_printf_float+0x33a>
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	d1c2      	bne.n	8004c9e <_printf_float+0x2f2>
 8004d18:	e6a3      	b.n	8004a62 <_printf_float+0xb6>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	9206      	str	r2, [sp, #24]
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f ae9c 	beq.w	8004a62 <_printf_float+0xb6>
 8004d2a:	9a06      	ldr	r2, [sp, #24]
 8004d2c:	f10b 0b01 	add.w	fp, fp, #1
 8004d30:	e7bb      	b.n	8004caa <_printf_float+0x2fe>
 8004d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d1c0      	bne.n	8004cc2 <_printf_float+0x316>
 8004d40:	e68f      	b.n	8004a62 <_printf_float+0xb6>
 8004d42:	9a06      	ldr	r2, [sp, #24]
 8004d44:	464b      	mov	r3, r9
 8004d46:	4442      	add	r2, r8
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d1c3      	bne.n	8004cda <_printf_float+0x32e>
 8004d52:	e686      	b.n	8004a62 <_printf_float+0xb6>
 8004d54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d58:	f1ba 0f01 	cmp.w	sl, #1
 8004d5c:	dc01      	bgt.n	8004d62 <_printf_float+0x3b6>
 8004d5e:	07db      	lsls	r3, r3, #31
 8004d60:	d536      	bpl.n	8004dd0 <_printf_float+0x424>
 8004d62:	2301      	movs	r3, #1
 8004d64:	4642      	mov	r2, r8
 8004d66:	4631      	mov	r1, r6
 8004d68:	4628      	mov	r0, r5
 8004d6a:	47b8      	blx	r7
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	f43f ae78 	beq.w	8004a62 <_printf_float+0xb6>
 8004d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d76:	4631      	mov	r1, r6
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b8      	blx	r7
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f43f ae70 	beq.w	8004a62 <_printf_float+0xb6>
 8004d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d86:	2200      	movs	r2, #0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d8e:	f7fb feab 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d92:	b9c0      	cbnz	r0, 8004dc6 <_printf_float+0x41a>
 8004d94:	4653      	mov	r3, sl
 8004d96:	f108 0201 	add.w	r2, r8, #1
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	d10c      	bne.n	8004dbe <_printf_float+0x412>
 8004da4:	e65d      	b.n	8004a62 <_printf_float+0xb6>
 8004da6:	2301      	movs	r3, #1
 8004da8:	465a      	mov	r2, fp
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f ae56 	beq.w	8004a62 <_printf_float+0xb6>
 8004db6:	f108 0801 	add.w	r8, r8, #1
 8004dba:	45d0      	cmp	r8, sl
 8004dbc:	dbf3      	blt.n	8004da6 <_printf_float+0x3fa>
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004dc4:	e6df      	b.n	8004b86 <_printf_float+0x1da>
 8004dc6:	f04f 0800 	mov.w	r8, #0
 8004dca:	f104 0b1a 	add.w	fp, r4, #26
 8004dce:	e7f4      	b.n	8004dba <_printf_float+0x40e>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	e7e1      	b.n	8004d9a <_printf_float+0x3ee>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	464a      	mov	r2, r9
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f ae3e 	beq.w	8004a62 <_printf_float+0xb6>
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	68e3      	ldr	r3, [r4, #12]
 8004dec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004dee:	1a5b      	subs	r3, r3, r1
 8004df0:	4543      	cmp	r3, r8
 8004df2:	dcf0      	bgt.n	8004dd6 <_printf_float+0x42a>
 8004df4:	e6fc      	b.n	8004bf0 <_printf_float+0x244>
 8004df6:	f04f 0800 	mov.w	r8, #0
 8004dfa:	f104 0919 	add.w	r9, r4, #25
 8004dfe:	e7f4      	b.n	8004dea <_printf_float+0x43e>

08004e00 <_printf_common>:
 8004e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	4616      	mov	r6, r2
 8004e06:	4698      	mov	r8, r3
 8004e08:	688a      	ldr	r2, [r1, #8]
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bfb8      	it	lt
 8004e14:	4613      	movlt	r3, r2
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	b10a      	cbz	r2, 8004e26 <_printf_common+0x26>
 8004e22:	3301      	adds	r3, #1
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	0699      	lsls	r1, r3, #26
 8004e2a:	bf42      	ittt	mi
 8004e2c:	6833      	ldrmi	r3, [r6, #0]
 8004e2e:	3302      	addmi	r3, #2
 8004e30:	6033      	strmi	r3, [r6, #0]
 8004e32:	6825      	ldr	r5, [r4, #0]
 8004e34:	f015 0506 	ands.w	r5, r5, #6
 8004e38:	d106      	bne.n	8004e48 <_printf_common+0x48>
 8004e3a:	f104 0a19 	add.w	sl, r4, #25
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	6832      	ldr	r2, [r6, #0]
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	dc26      	bgt.n	8004e96 <_printf_common+0x96>
 8004e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	3b00      	subs	r3, #0
 8004e50:	bf18      	it	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	0692      	lsls	r2, r2, #26
 8004e56:	d42b      	bmi.n	8004eb0 <_printf_common+0xb0>
 8004e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	4638      	mov	r0, r7
 8004e60:	47c8      	blx	r9
 8004e62:	3001      	adds	r0, #1
 8004e64:	d01e      	beq.n	8004ea4 <_printf_common+0xa4>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	6922      	ldr	r2, [r4, #16]
 8004e6a:	f003 0306 	and.w	r3, r3, #6
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	bf02      	ittt	eq
 8004e72:	68e5      	ldreq	r5, [r4, #12]
 8004e74:	6833      	ldreq	r3, [r6, #0]
 8004e76:	1aed      	subeq	r5, r5, r3
 8004e78:	68a3      	ldr	r3, [r4, #8]
 8004e7a:	bf0c      	ite	eq
 8004e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e80:	2500      	movne	r5, #0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bfc4      	itt	gt
 8004e86:	1a9b      	subgt	r3, r3, r2
 8004e88:	18ed      	addgt	r5, r5, r3
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	341a      	adds	r4, #26
 8004e8e:	42b5      	cmp	r5, r6
 8004e90:	d11a      	bne.n	8004ec8 <_printf_common+0xc8>
 8004e92:	2000      	movs	r0, #0
 8004e94:	e008      	b.n	8004ea8 <_printf_common+0xa8>
 8004e96:	2301      	movs	r3, #1
 8004e98:	4652      	mov	r2, sl
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	47c8      	blx	r9
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d103      	bne.n	8004eac <_printf_common+0xac>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eac:	3501      	adds	r5, #1
 8004eae:	e7c6      	b.n	8004e3e <_printf_common+0x3e>
 8004eb0:	18e1      	adds	r1, r4, r3
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	2030      	movs	r0, #48	@ 0x30
 8004eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004eba:	4422      	add	r2, r4
 8004ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	e7c7      	b.n	8004e58 <_printf_common+0x58>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4622      	mov	r2, r4
 8004ecc:	4641      	mov	r1, r8
 8004ece:	4638      	mov	r0, r7
 8004ed0:	47c8      	blx	r9
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0e6      	beq.n	8004ea4 <_printf_common+0xa4>
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7d9      	b.n	8004e8e <_printf_common+0x8e>
	...

08004edc <_printf_i>:
 8004edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	7e0f      	ldrb	r7, [r1, #24]
 8004ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ee4:	2f78      	cmp	r7, #120	@ 0x78
 8004ee6:	4691      	mov	r9, r2
 8004ee8:	4680      	mov	r8, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	469a      	mov	sl, r3
 8004eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ef2:	d807      	bhi.n	8004f04 <_printf_i+0x28>
 8004ef4:	2f62      	cmp	r7, #98	@ 0x62
 8004ef6:	d80a      	bhi.n	8004f0e <_printf_i+0x32>
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	f000 80d1 	beq.w	80050a0 <_printf_i+0x1c4>
 8004efe:	2f58      	cmp	r7, #88	@ 0x58
 8004f00:	f000 80b8 	beq.w	8005074 <_printf_i+0x198>
 8004f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f0c:	e03a      	b.n	8004f84 <_printf_i+0xa8>
 8004f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f12:	2b15      	cmp	r3, #21
 8004f14:	d8f6      	bhi.n	8004f04 <_printf_i+0x28>
 8004f16:	a101      	add	r1, pc, #4	@ (adr r1, 8004f1c <_printf_i+0x40>)
 8004f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	08004f05 	.word	0x08004f05
 8004f28:	08004f05 	.word	0x08004f05
 8004f2c:	08004f05 	.word	0x08004f05
 8004f30:	08004f05 	.word	0x08004f05
 8004f34:	08004f89 	.word	0x08004f89
 8004f38:	08004f05 	.word	0x08004f05
 8004f3c:	08004f05 	.word	0x08004f05
 8004f40:	08004f05 	.word	0x08004f05
 8004f44:	08004f05 	.word	0x08004f05
 8004f48:	08005087 	.word	0x08005087
 8004f4c:	08004fb3 	.word	0x08004fb3
 8004f50:	08005041 	.word	0x08005041
 8004f54:	08004f05 	.word	0x08004f05
 8004f58:	08004f05 	.word	0x08004f05
 8004f5c:	080050a9 	.word	0x080050a9
 8004f60:	08004f05 	.word	0x08004f05
 8004f64:	08004fb3 	.word	0x08004fb3
 8004f68:	08004f05 	.word	0x08004f05
 8004f6c:	08004f05 	.word	0x08004f05
 8004f70:	08005049 	.word	0x08005049
 8004f74:	6833      	ldr	r3, [r6, #0]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6032      	str	r2, [r6, #0]
 8004f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f84:	2301      	movs	r3, #1
 8004f86:	e09c      	b.n	80050c2 <_printf_i+0x1e6>
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	1d19      	adds	r1, r3, #4
 8004f8e:	6031      	str	r1, [r6, #0]
 8004f90:	0606      	lsls	r6, r0, #24
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0xbc>
 8004f94:	681d      	ldr	r5, [r3, #0]
 8004f96:	e003      	b.n	8004fa0 <_printf_i+0xc4>
 8004f98:	0645      	lsls	r5, r0, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0xb8>
 8004f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	da03      	bge.n	8004fac <_printf_i+0xd0>
 8004fa4:	232d      	movs	r3, #45	@ 0x2d
 8004fa6:	426d      	negs	r5, r5
 8004fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fac:	4858      	ldr	r0, [pc, #352]	@ (8005110 <_printf_i+0x234>)
 8004fae:	230a      	movs	r3, #10
 8004fb0:	e011      	b.n	8004fd6 <_printf_i+0xfa>
 8004fb2:	6821      	ldr	r1, [r4, #0]
 8004fb4:	6833      	ldr	r3, [r6, #0]
 8004fb6:	0608      	lsls	r0, r1, #24
 8004fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fbc:	d402      	bmi.n	8004fc4 <_printf_i+0xe8>
 8004fbe:	0649      	lsls	r1, r1, #25
 8004fc0:	bf48      	it	mi
 8004fc2:	b2ad      	uxthmi	r5, r5
 8004fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fc6:	4852      	ldr	r0, [pc, #328]	@ (8005110 <_printf_i+0x234>)
 8004fc8:	6033      	str	r3, [r6, #0]
 8004fca:	bf14      	ite	ne
 8004fcc:	230a      	movne	r3, #10
 8004fce:	2308      	moveq	r3, #8
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fd6:	6866      	ldr	r6, [r4, #4]
 8004fd8:	60a6      	str	r6, [r4, #8]
 8004fda:	2e00      	cmp	r6, #0
 8004fdc:	db05      	blt.n	8004fea <_printf_i+0x10e>
 8004fde:	6821      	ldr	r1, [r4, #0]
 8004fe0:	432e      	orrs	r6, r5
 8004fe2:	f021 0104 	bic.w	r1, r1, #4
 8004fe6:	6021      	str	r1, [r4, #0]
 8004fe8:	d04b      	beq.n	8005082 <_printf_i+0x1a6>
 8004fea:	4616      	mov	r6, r2
 8004fec:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ff0:	fb03 5711 	mls	r7, r3, r1, r5
 8004ff4:	5dc7      	ldrb	r7, [r0, r7]
 8004ff6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ffa:	462f      	mov	r7, r5
 8004ffc:	42bb      	cmp	r3, r7
 8004ffe:	460d      	mov	r5, r1
 8005000:	d9f4      	bls.n	8004fec <_printf_i+0x110>
 8005002:	2b08      	cmp	r3, #8
 8005004:	d10b      	bne.n	800501e <_printf_i+0x142>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	07df      	lsls	r7, r3, #31
 800500a:	d508      	bpl.n	800501e <_printf_i+0x142>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	6861      	ldr	r1, [r4, #4]
 8005010:	4299      	cmp	r1, r3
 8005012:	bfde      	ittt	le
 8005014:	2330      	movle	r3, #48	@ 0x30
 8005016:	f806 3c01 	strble.w	r3, [r6, #-1]
 800501a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800501e:	1b92      	subs	r2, r2, r6
 8005020:	6122      	str	r2, [r4, #16]
 8005022:	f8cd a000 	str.w	sl, [sp]
 8005026:	464b      	mov	r3, r9
 8005028:	aa03      	add	r2, sp, #12
 800502a:	4621      	mov	r1, r4
 800502c:	4640      	mov	r0, r8
 800502e:	f7ff fee7 	bl	8004e00 <_printf_common>
 8005032:	3001      	adds	r0, #1
 8005034:	d14a      	bne.n	80050cc <_printf_i+0x1f0>
 8005036:	f04f 30ff 	mov.w	r0, #4294967295
 800503a:	b004      	add	sp, #16
 800503c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	f043 0320 	orr.w	r3, r3, #32
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	4832      	ldr	r0, [pc, #200]	@ (8005114 <_printf_i+0x238>)
 800504a:	2778      	movs	r7, #120	@ 0x78
 800504c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	6831      	ldr	r1, [r6, #0]
 8005054:	061f      	lsls	r7, r3, #24
 8005056:	f851 5b04 	ldr.w	r5, [r1], #4
 800505a:	d402      	bmi.n	8005062 <_printf_i+0x186>
 800505c:	065f      	lsls	r7, r3, #25
 800505e:	bf48      	it	mi
 8005060:	b2ad      	uxthmi	r5, r5
 8005062:	6031      	str	r1, [r6, #0]
 8005064:	07d9      	lsls	r1, r3, #31
 8005066:	bf44      	itt	mi
 8005068:	f043 0320 	orrmi.w	r3, r3, #32
 800506c:	6023      	strmi	r3, [r4, #0]
 800506e:	b11d      	cbz	r5, 8005078 <_printf_i+0x19c>
 8005070:	2310      	movs	r3, #16
 8005072:	e7ad      	b.n	8004fd0 <_printf_i+0xf4>
 8005074:	4826      	ldr	r0, [pc, #152]	@ (8005110 <_printf_i+0x234>)
 8005076:	e7e9      	b.n	800504c <_printf_i+0x170>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	f023 0320 	bic.w	r3, r3, #32
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	e7f6      	b.n	8005070 <_printf_i+0x194>
 8005082:	4616      	mov	r6, r2
 8005084:	e7bd      	b.n	8005002 <_printf_i+0x126>
 8005086:	6833      	ldr	r3, [r6, #0]
 8005088:	6825      	ldr	r5, [r4, #0]
 800508a:	6961      	ldr	r1, [r4, #20]
 800508c:	1d18      	adds	r0, r3, #4
 800508e:	6030      	str	r0, [r6, #0]
 8005090:	062e      	lsls	r6, r5, #24
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	d501      	bpl.n	800509a <_printf_i+0x1be>
 8005096:	6019      	str	r1, [r3, #0]
 8005098:	e002      	b.n	80050a0 <_printf_i+0x1c4>
 800509a:	0668      	lsls	r0, r5, #25
 800509c:	d5fb      	bpl.n	8005096 <_printf_i+0x1ba>
 800509e:	8019      	strh	r1, [r3, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	4616      	mov	r6, r2
 80050a6:	e7bc      	b.n	8005022 <_printf_i+0x146>
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	6032      	str	r2, [r6, #0]
 80050ae:	681e      	ldr	r6, [r3, #0]
 80050b0:	6862      	ldr	r2, [r4, #4]
 80050b2:	2100      	movs	r1, #0
 80050b4:	4630      	mov	r0, r6
 80050b6:	f7fb f89b 	bl	80001f0 <memchr>
 80050ba:	b108      	cbz	r0, 80050c0 <_printf_i+0x1e4>
 80050bc:	1b80      	subs	r0, r0, r6
 80050be:	6060      	str	r0, [r4, #4]
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	2300      	movs	r3, #0
 80050c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ca:	e7aa      	b.n	8005022 <_printf_i+0x146>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	4632      	mov	r2, r6
 80050d0:	4649      	mov	r1, r9
 80050d2:	4640      	mov	r0, r8
 80050d4:	47d0      	blx	sl
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0ad      	beq.n	8005036 <_printf_i+0x15a>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	079b      	lsls	r3, r3, #30
 80050de:	d413      	bmi.n	8005108 <_printf_i+0x22c>
 80050e0:	68e0      	ldr	r0, [r4, #12]
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	4298      	cmp	r0, r3
 80050e6:	bfb8      	it	lt
 80050e8:	4618      	movlt	r0, r3
 80050ea:	e7a6      	b.n	800503a <_printf_i+0x15e>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4632      	mov	r2, r6
 80050f0:	4649      	mov	r1, r9
 80050f2:	4640      	mov	r0, r8
 80050f4:	47d0      	blx	sl
 80050f6:	3001      	adds	r0, #1
 80050f8:	d09d      	beq.n	8005036 <_printf_i+0x15a>
 80050fa:	3501      	adds	r5, #1
 80050fc:	68e3      	ldr	r3, [r4, #12]
 80050fe:	9903      	ldr	r1, [sp, #12]
 8005100:	1a5b      	subs	r3, r3, r1
 8005102:	42ab      	cmp	r3, r5
 8005104:	dcf2      	bgt.n	80050ec <_printf_i+0x210>
 8005106:	e7eb      	b.n	80050e0 <_printf_i+0x204>
 8005108:	2500      	movs	r5, #0
 800510a:	f104 0619 	add.w	r6, r4, #25
 800510e:	e7f5      	b.n	80050fc <_printf_i+0x220>
 8005110:	080097c6 	.word	0x080097c6
 8005114:	080097d7 	.word	0x080097d7

08005118 <std>:
 8005118:	2300      	movs	r3, #0
 800511a:	b510      	push	{r4, lr}
 800511c:	4604      	mov	r4, r0
 800511e:	e9c0 3300 	strd	r3, r3, [r0]
 8005122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005126:	6083      	str	r3, [r0, #8]
 8005128:	8181      	strh	r1, [r0, #12]
 800512a:	6643      	str	r3, [r0, #100]	@ 0x64
 800512c:	81c2      	strh	r2, [r0, #14]
 800512e:	6183      	str	r3, [r0, #24]
 8005130:	4619      	mov	r1, r3
 8005132:	2208      	movs	r2, #8
 8005134:	305c      	adds	r0, #92	@ 0x5c
 8005136:	f000 f93c 	bl	80053b2 <memset>
 800513a:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <std+0x58>)
 800513c:	6263      	str	r3, [r4, #36]	@ 0x24
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <std+0x5c>)
 8005140:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <std+0x60>)
 8005144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <std+0x64>)
 8005148:	6323      	str	r3, [r4, #48]	@ 0x30
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <std+0x68>)
 800514c:	6224      	str	r4, [r4, #32]
 800514e:	429c      	cmp	r4, r3
 8005150:	d006      	beq.n	8005160 <std+0x48>
 8005152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005156:	4294      	cmp	r4, r2
 8005158:	d002      	beq.n	8005160 <std+0x48>
 800515a:	33d0      	adds	r3, #208	@ 0xd0
 800515c:	429c      	cmp	r4, r3
 800515e:	d105      	bne.n	800516c <std+0x54>
 8005160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f000 b9a0 	b.w	80054ac <__retarget_lock_init_recursive>
 800516c:	bd10      	pop	{r4, pc}
 800516e:	bf00      	nop
 8005170:	0800532d 	.word	0x0800532d
 8005174:	0800534f 	.word	0x0800534f
 8005178:	08005387 	.word	0x08005387
 800517c:	080053ab 	.word	0x080053ab
 8005180:	20000278 	.word	0x20000278

08005184 <stdio_exit_handler>:
 8005184:	4a02      	ldr	r2, [pc, #8]	@ (8005190 <stdio_exit_handler+0xc>)
 8005186:	4903      	ldr	r1, [pc, #12]	@ (8005194 <stdio_exit_handler+0x10>)
 8005188:	4803      	ldr	r0, [pc, #12]	@ (8005198 <stdio_exit_handler+0x14>)
 800518a:	f000 b869 	b.w	8005260 <_fwalk_sglue>
 800518e:	bf00      	nop
 8005190:	20000034 	.word	0x20000034
 8005194:	080070b1 	.word	0x080070b1
 8005198:	20000044 	.word	0x20000044

0800519c <cleanup_stdio>:
 800519c:	6841      	ldr	r1, [r0, #4]
 800519e:	4b0c      	ldr	r3, [pc, #48]	@ (80051d0 <cleanup_stdio+0x34>)
 80051a0:	4299      	cmp	r1, r3
 80051a2:	b510      	push	{r4, lr}
 80051a4:	4604      	mov	r4, r0
 80051a6:	d001      	beq.n	80051ac <cleanup_stdio+0x10>
 80051a8:	f001 ff82 	bl	80070b0 <_fflush_r>
 80051ac:	68a1      	ldr	r1, [r4, #8]
 80051ae:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <cleanup_stdio+0x38>)
 80051b0:	4299      	cmp	r1, r3
 80051b2:	d002      	beq.n	80051ba <cleanup_stdio+0x1e>
 80051b4:	4620      	mov	r0, r4
 80051b6:	f001 ff7b 	bl	80070b0 <_fflush_r>
 80051ba:	68e1      	ldr	r1, [r4, #12]
 80051bc:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <cleanup_stdio+0x3c>)
 80051be:	4299      	cmp	r1, r3
 80051c0:	d004      	beq.n	80051cc <cleanup_stdio+0x30>
 80051c2:	4620      	mov	r0, r4
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	f001 bf72 	b.w	80070b0 <_fflush_r>
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	20000278 	.word	0x20000278
 80051d4:	200002e0 	.word	0x200002e0
 80051d8:	20000348 	.word	0x20000348

080051dc <global_stdio_init.part.0>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <global_stdio_init.part.0+0x30>)
 80051e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005210 <global_stdio_init.part.0+0x34>)
 80051e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <global_stdio_init.part.0+0x38>)
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	4620      	mov	r0, r4
 80051e8:	2200      	movs	r2, #0
 80051ea:	2104      	movs	r1, #4
 80051ec:	f7ff ff94 	bl	8005118 <std>
 80051f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051f4:	2201      	movs	r2, #1
 80051f6:	2109      	movs	r1, #9
 80051f8:	f7ff ff8e 	bl	8005118 <std>
 80051fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005200:	2202      	movs	r2, #2
 8005202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005206:	2112      	movs	r1, #18
 8005208:	f7ff bf86 	b.w	8005118 <std>
 800520c:	200003b0 	.word	0x200003b0
 8005210:	20000278 	.word	0x20000278
 8005214:	08005185 	.word	0x08005185

08005218 <__sfp_lock_acquire>:
 8005218:	4801      	ldr	r0, [pc, #4]	@ (8005220 <__sfp_lock_acquire+0x8>)
 800521a:	f000 b948 	b.w	80054ae <__retarget_lock_acquire_recursive>
 800521e:	bf00      	nop
 8005220:	200003b9 	.word	0x200003b9

08005224 <__sfp_lock_release>:
 8005224:	4801      	ldr	r0, [pc, #4]	@ (800522c <__sfp_lock_release+0x8>)
 8005226:	f000 b943 	b.w	80054b0 <__retarget_lock_release_recursive>
 800522a:	bf00      	nop
 800522c:	200003b9 	.word	0x200003b9

08005230 <__sinit>:
 8005230:	b510      	push	{r4, lr}
 8005232:	4604      	mov	r4, r0
 8005234:	f7ff fff0 	bl	8005218 <__sfp_lock_acquire>
 8005238:	6a23      	ldr	r3, [r4, #32]
 800523a:	b11b      	cbz	r3, 8005244 <__sinit+0x14>
 800523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005240:	f7ff bff0 	b.w	8005224 <__sfp_lock_release>
 8005244:	4b04      	ldr	r3, [pc, #16]	@ (8005258 <__sinit+0x28>)
 8005246:	6223      	str	r3, [r4, #32]
 8005248:	4b04      	ldr	r3, [pc, #16]	@ (800525c <__sinit+0x2c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f5      	bne.n	800523c <__sinit+0xc>
 8005250:	f7ff ffc4 	bl	80051dc <global_stdio_init.part.0>
 8005254:	e7f2      	b.n	800523c <__sinit+0xc>
 8005256:	bf00      	nop
 8005258:	0800519d 	.word	0x0800519d
 800525c:	200003b0 	.word	0x200003b0

08005260 <_fwalk_sglue>:
 8005260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005264:	4607      	mov	r7, r0
 8005266:	4688      	mov	r8, r1
 8005268:	4614      	mov	r4, r2
 800526a:	2600      	movs	r6, #0
 800526c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005270:	f1b9 0901 	subs.w	r9, r9, #1
 8005274:	d505      	bpl.n	8005282 <_fwalk_sglue+0x22>
 8005276:	6824      	ldr	r4, [r4, #0]
 8005278:	2c00      	cmp	r4, #0
 800527a:	d1f7      	bne.n	800526c <_fwalk_sglue+0xc>
 800527c:	4630      	mov	r0, r6
 800527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d907      	bls.n	8005298 <_fwalk_sglue+0x38>
 8005288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800528c:	3301      	adds	r3, #1
 800528e:	d003      	beq.n	8005298 <_fwalk_sglue+0x38>
 8005290:	4629      	mov	r1, r5
 8005292:	4638      	mov	r0, r7
 8005294:	47c0      	blx	r8
 8005296:	4306      	orrs	r6, r0
 8005298:	3568      	adds	r5, #104	@ 0x68
 800529a:	e7e9      	b.n	8005270 <_fwalk_sglue+0x10>

0800529c <iprintf>:
 800529c:	b40f      	push	{r0, r1, r2, r3}
 800529e:	b507      	push	{r0, r1, r2, lr}
 80052a0:	4906      	ldr	r1, [pc, #24]	@ (80052bc <iprintf+0x20>)
 80052a2:	ab04      	add	r3, sp, #16
 80052a4:	6808      	ldr	r0, [r1, #0]
 80052a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052aa:	6881      	ldr	r1, [r0, #8]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	f001 fd63 	bl	8006d78 <_vfiprintf_r>
 80052b2:	b003      	add	sp, #12
 80052b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052b8:	b004      	add	sp, #16
 80052ba:	4770      	bx	lr
 80052bc:	20000040 	.word	0x20000040

080052c0 <sniprintf>:
 80052c0:	b40c      	push	{r2, r3}
 80052c2:	b530      	push	{r4, r5, lr}
 80052c4:	4b18      	ldr	r3, [pc, #96]	@ (8005328 <sniprintf+0x68>)
 80052c6:	1e0c      	subs	r4, r1, #0
 80052c8:	681d      	ldr	r5, [r3, #0]
 80052ca:	b09d      	sub	sp, #116	@ 0x74
 80052cc:	da08      	bge.n	80052e0 <sniprintf+0x20>
 80052ce:	238b      	movs	r3, #139	@ 0x8b
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295
 80052d6:	b01d      	add	sp, #116	@ 0x74
 80052d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052dc:	b002      	add	sp, #8
 80052de:	4770      	bx	lr
 80052e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80052e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80052ee:	bf14      	ite	ne
 80052f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052f4:	4623      	moveq	r3, r4
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	9307      	str	r3, [sp, #28]
 80052fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052fe:	9002      	str	r0, [sp, #8]
 8005300:	9006      	str	r0, [sp, #24]
 8005302:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005306:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005308:	ab21      	add	r3, sp, #132	@ 0x84
 800530a:	a902      	add	r1, sp, #8
 800530c:	4628      	mov	r0, r5
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	f001 fc0c 	bl	8006b2c <_svfiprintf_r>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	bfbc      	itt	lt
 8005318:	238b      	movlt	r3, #139	@ 0x8b
 800531a:	602b      	strlt	r3, [r5, #0]
 800531c:	2c00      	cmp	r4, #0
 800531e:	d0da      	beq.n	80052d6 <sniprintf+0x16>
 8005320:	9b02      	ldr	r3, [sp, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	e7d6      	b.n	80052d6 <sniprintf+0x16>
 8005328:	20000040 	.word	0x20000040

0800532c <__sread>:
 800532c:	b510      	push	{r4, lr}
 800532e:	460c      	mov	r4, r1
 8005330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005334:	f000 f86c 	bl	8005410 <_read_r>
 8005338:	2800      	cmp	r0, #0
 800533a:	bfab      	itete	ge
 800533c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800533e:	89a3      	ldrhlt	r3, [r4, #12]
 8005340:	181b      	addge	r3, r3, r0
 8005342:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005346:	bfac      	ite	ge
 8005348:	6563      	strge	r3, [r4, #84]	@ 0x54
 800534a:	81a3      	strhlt	r3, [r4, #12]
 800534c:	bd10      	pop	{r4, pc}

0800534e <__swrite>:
 800534e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005352:	461f      	mov	r7, r3
 8005354:	898b      	ldrh	r3, [r1, #12]
 8005356:	05db      	lsls	r3, r3, #23
 8005358:	4605      	mov	r5, r0
 800535a:	460c      	mov	r4, r1
 800535c:	4616      	mov	r6, r2
 800535e:	d505      	bpl.n	800536c <__swrite+0x1e>
 8005360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005364:	2302      	movs	r3, #2
 8005366:	2200      	movs	r2, #0
 8005368:	f000 f840 	bl	80053ec <_lseek_r>
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005372:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005376:	81a3      	strh	r3, [r4, #12]
 8005378:	4632      	mov	r2, r6
 800537a:	463b      	mov	r3, r7
 800537c:	4628      	mov	r0, r5
 800537e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005382:	f000 b857 	b.w	8005434 <_write_r>

08005386 <__sseek>:
 8005386:	b510      	push	{r4, lr}
 8005388:	460c      	mov	r4, r1
 800538a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538e:	f000 f82d 	bl	80053ec <_lseek_r>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	bf15      	itete	ne
 8005398:	6560      	strne	r0, [r4, #84]	@ 0x54
 800539a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800539e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053a2:	81a3      	strheq	r3, [r4, #12]
 80053a4:	bf18      	it	ne
 80053a6:	81a3      	strhne	r3, [r4, #12]
 80053a8:	bd10      	pop	{r4, pc}

080053aa <__sclose>:
 80053aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ae:	f000 b80d 	b.w	80053cc <_close_r>

080053b2 <memset>:
 80053b2:	4402      	add	r2, r0
 80053b4:	4603      	mov	r3, r0
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d100      	bne.n	80053bc <memset+0xa>
 80053ba:	4770      	bx	lr
 80053bc:	f803 1b01 	strb.w	r1, [r3], #1
 80053c0:	e7f9      	b.n	80053b6 <memset+0x4>
	...

080053c4 <_localeconv_r>:
 80053c4:	4800      	ldr	r0, [pc, #0]	@ (80053c8 <_localeconv_r+0x4>)
 80053c6:	4770      	bx	lr
 80053c8:	20000180 	.word	0x20000180

080053cc <_close_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d06      	ldr	r5, [pc, #24]	@ (80053e8 <_close_r+0x1c>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fd fd0f 	bl	8002dfa <_close>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_close_r+0x1a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_close_r+0x1a>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	200003b4 	.word	0x200003b4

080053ec <_lseek_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	@ (800540c <_lseek_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fd fd24 	bl	8002e48 <_lseek>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_lseek_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_lseek_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	200003b4 	.word	0x200003b4

08005410 <_read_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d07      	ldr	r5, [pc, #28]	@ (8005430 <_read_r+0x20>)
 8005414:	4604      	mov	r4, r0
 8005416:	4608      	mov	r0, r1
 8005418:	4611      	mov	r1, r2
 800541a:	2200      	movs	r2, #0
 800541c:	602a      	str	r2, [r5, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f7fd fcb2 	bl	8002d88 <_read>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_read_r+0x1e>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_read_r+0x1e>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	200003b4 	.word	0x200003b4

08005434 <_write_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	@ (8005454 <_write_r+0x20>)
 8005438:	4604      	mov	r4, r0
 800543a:	4608      	mov	r0, r1
 800543c:	4611      	mov	r1, r2
 800543e:	2200      	movs	r2, #0
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f7fd fcbd 	bl	8002dc2 <_write>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_write_r+0x1e>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_write_r+0x1e>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200003b4 	.word	0x200003b4

08005458 <__errno>:
 8005458:	4b01      	ldr	r3, [pc, #4]	@ (8005460 <__errno+0x8>)
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000040 	.word	0x20000040

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	@ (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	@ (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	@ (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	@ (80054a8 <__libc_init_array+0x44>)
 8005478:	f004 f95a 	bl	8009730 <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08009d80 	.word	0x08009d80
 80054a0:	08009d80 	.word	0x08009d80
 80054a4:	08009d80 	.word	0x08009d80
 80054a8:	08009d84 	.word	0x08009d84

080054ac <__retarget_lock_init_recursive>:
 80054ac:	4770      	bx	lr

080054ae <__retarget_lock_acquire_recursive>:
 80054ae:	4770      	bx	lr

080054b0 <__retarget_lock_release_recursive>:
 80054b0:	4770      	bx	lr

080054b2 <memcpy>:
 80054b2:	440a      	add	r2, r1
 80054b4:	4291      	cmp	r1, r2
 80054b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ba:	d100      	bne.n	80054be <memcpy+0xc>
 80054bc:	4770      	bx	lr
 80054be:	b510      	push	{r4, lr}
 80054c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c8:	4291      	cmp	r1, r2
 80054ca:	d1f9      	bne.n	80054c0 <memcpy+0xe>
 80054cc:	bd10      	pop	{r4, pc}

080054ce <quorem>:
 80054ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d2:	6903      	ldr	r3, [r0, #16]
 80054d4:	690c      	ldr	r4, [r1, #16]
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	4607      	mov	r7, r0
 80054da:	db7e      	blt.n	80055da <quorem+0x10c>
 80054dc:	3c01      	subs	r4, #1
 80054de:	f101 0814 	add.w	r8, r1, #20
 80054e2:	00a3      	lsls	r3, r4, #2
 80054e4:	f100 0514 	add.w	r5, r0, #20
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054f8:	3301      	adds	r3, #1
 80054fa:	429a      	cmp	r2, r3
 80054fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005500:	fbb2 f6f3 	udiv	r6, r2, r3
 8005504:	d32e      	bcc.n	8005564 <quorem+0x96>
 8005506:	f04f 0a00 	mov.w	sl, #0
 800550a:	46c4      	mov	ip, r8
 800550c:	46ae      	mov	lr, r5
 800550e:	46d3      	mov	fp, sl
 8005510:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005514:	b298      	uxth	r0, r3
 8005516:	fb06 a000 	mla	r0, r6, r0, sl
 800551a:	0c02      	lsrs	r2, r0, #16
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	fb06 2303 	mla	r3, r6, r3, r2
 8005522:	f8de 2000 	ldr.w	r2, [lr]
 8005526:	b280      	uxth	r0, r0
 8005528:	b292      	uxth	r2, r2
 800552a:	1a12      	subs	r2, r2, r0
 800552c:	445a      	add	r2, fp
 800552e:	f8de 0000 	ldr.w	r0, [lr]
 8005532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005536:	b29b      	uxth	r3, r3
 8005538:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800553c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005540:	b292      	uxth	r2, r2
 8005542:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005546:	45e1      	cmp	r9, ip
 8005548:	f84e 2b04 	str.w	r2, [lr], #4
 800554c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005550:	d2de      	bcs.n	8005510 <quorem+0x42>
 8005552:	9b00      	ldr	r3, [sp, #0]
 8005554:	58eb      	ldr	r3, [r5, r3]
 8005556:	b92b      	cbnz	r3, 8005564 <quorem+0x96>
 8005558:	9b01      	ldr	r3, [sp, #4]
 800555a:	3b04      	subs	r3, #4
 800555c:	429d      	cmp	r5, r3
 800555e:	461a      	mov	r2, r3
 8005560:	d32f      	bcc.n	80055c2 <quorem+0xf4>
 8005562:	613c      	str	r4, [r7, #16]
 8005564:	4638      	mov	r0, r7
 8005566:	f001 f97d 	bl	8006864 <__mcmp>
 800556a:	2800      	cmp	r0, #0
 800556c:	db25      	blt.n	80055ba <quorem+0xec>
 800556e:	4629      	mov	r1, r5
 8005570:	2000      	movs	r0, #0
 8005572:	f858 2b04 	ldr.w	r2, [r8], #4
 8005576:	f8d1 c000 	ldr.w	ip, [r1]
 800557a:	fa1f fe82 	uxth.w	lr, r2
 800557e:	fa1f f38c 	uxth.w	r3, ip
 8005582:	eba3 030e 	sub.w	r3, r3, lr
 8005586:	4403      	add	r3, r0
 8005588:	0c12      	lsrs	r2, r2, #16
 800558a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800558e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005592:	b29b      	uxth	r3, r3
 8005594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005598:	45c1      	cmp	r9, r8
 800559a:	f841 3b04 	str.w	r3, [r1], #4
 800559e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055a2:	d2e6      	bcs.n	8005572 <quorem+0xa4>
 80055a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ac:	b922      	cbnz	r2, 80055b8 <quorem+0xea>
 80055ae:	3b04      	subs	r3, #4
 80055b0:	429d      	cmp	r5, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	d30b      	bcc.n	80055ce <quorem+0x100>
 80055b6:	613c      	str	r4, [r7, #16]
 80055b8:	3601      	adds	r6, #1
 80055ba:	4630      	mov	r0, r6
 80055bc:	b003      	add	sp, #12
 80055be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	d1cb      	bne.n	8005562 <quorem+0x94>
 80055ca:	3c01      	subs	r4, #1
 80055cc:	e7c6      	b.n	800555c <quorem+0x8e>
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	3b04      	subs	r3, #4
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	d1ef      	bne.n	80055b6 <quorem+0xe8>
 80055d6:	3c01      	subs	r4, #1
 80055d8:	e7ea      	b.n	80055b0 <quorem+0xe2>
 80055da:	2000      	movs	r0, #0
 80055dc:	e7ee      	b.n	80055bc <quorem+0xee>
	...

080055e0 <_dtoa_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	69c7      	ldr	r7, [r0, #28]
 80055e6:	b097      	sub	sp, #92	@ 0x5c
 80055e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80055ec:	ec55 4b10 	vmov	r4, r5, d0
 80055f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80055f2:	9107      	str	r1, [sp, #28]
 80055f4:	4681      	mov	r9, r0
 80055f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80055f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80055fa:	b97f      	cbnz	r7, 800561c <_dtoa_r+0x3c>
 80055fc:	2010      	movs	r0, #16
 80055fe:	f000 fe09 	bl	8006214 <malloc>
 8005602:	4602      	mov	r2, r0
 8005604:	f8c9 001c 	str.w	r0, [r9, #28]
 8005608:	b920      	cbnz	r0, 8005614 <_dtoa_r+0x34>
 800560a:	4ba9      	ldr	r3, [pc, #676]	@ (80058b0 <_dtoa_r+0x2d0>)
 800560c:	21ef      	movs	r1, #239	@ 0xef
 800560e:	48a9      	ldr	r0, [pc, #676]	@ (80058b4 <_dtoa_r+0x2d4>)
 8005610:	f001 fe34 	bl	800727c <__assert_func>
 8005614:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005618:	6007      	str	r7, [r0, #0]
 800561a:	60c7      	str	r7, [r0, #12]
 800561c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005620:	6819      	ldr	r1, [r3, #0]
 8005622:	b159      	cbz	r1, 800563c <_dtoa_r+0x5c>
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	604a      	str	r2, [r1, #4]
 8005628:	2301      	movs	r3, #1
 800562a:	4093      	lsls	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
 800562e:	4648      	mov	r0, r9
 8005630:	f000 fee6 	bl	8006400 <_Bfree>
 8005634:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	1e2b      	subs	r3, r5, #0
 800563e:	bfb9      	ittee	lt
 8005640:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005644:	9305      	strlt	r3, [sp, #20]
 8005646:	2300      	movge	r3, #0
 8005648:	6033      	strge	r3, [r6, #0]
 800564a:	9f05      	ldr	r7, [sp, #20]
 800564c:	4b9a      	ldr	r3, [pc, #616]	@ (80058b8 <_dtoa_r+0x2d8>)
 800564e:	bfbc      	itt	lt
 8005650:	2201      	movlt	r2, #1
 8005652:	6032      	strlt	r2, [r6, #0]
 8005654:	43bb      	bics	r3, r7
 8005656:	d112      	bne.n	800567e <_dtoa_r+0x9e>
 8005658:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800565a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005664:	4323      	orrs	r3, r4
 8005666:	f000 855a 	beq.w	800611e <_dtoa_r+0xb3e>
 800566a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800566c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80058cc <_dtoa_r+0x2ec>
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 855c 	beq.w	800612e <_dtoa_r+0xb4e>
 8005676:	f10a 0303 	add.w	r3, sl, #3
 800567a:	f000 bd56 	b.w	800612a <_dtoa_r+0xb4a>
 800567e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005682:	2200      	movs	r2, #0
 8005684:	ec51 0b17 	vmov	r0, r1, d7
 8005688:	2300      	movs	r3, #0
 800568a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800568e:	f7fb fa2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005692:	4680      	mov	r8, r0
 8005694:	b158      	cbz	r0, 80056ae <_dtoa_r+0xce>
 8005696:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005698:	2301      	movs	r3, #1
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800569e:	b113      	cbz	r3, 80056a6 <_dtoa_r+0xc6>
 80056a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80056a2:	4b86      	ldr	r3, [pc, #536]	@ (80058bc <_dtoa_r+0x2dc>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80058d0 <_dtoa_r+0x2f0>
 80056aa:	f000 bd40 	b.w	800612e <_dtoa_r+0xb4e>
 80056ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80056b2:	aa14      	add	r2, sp, #80	@ 0x50
 80056b4:	a915      	add	r1, sp, #84	@ 0x54
 80056b6:	4648      	mov	r0, r9
 80056b8:	f001 f984 	bl	80069c4 <__d2b>
 80056bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80056c0:	9002      	str	r0, [sp, #8]
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	d078      	beq.n	80057b8 <_dtoa_r+0x1d8>
 80056c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80056cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80056d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80056dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80056e0:	4619      	mov	r1, r3
 80056e2:	2200      	movs	r2, #0
 80056e4:	4b76      	ldr	r3, [pc, #472]	@ (80058c0 <_dtoa_r+0x2e0>)
 80056e6:	f7fa fddf 	bl	80002a8 <__aeabi_dsub>
 80056ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8005898 <_dtoa_r+0x2b8>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f7fa ff92 	bl	8000618 <__aeabi_dmul>
 80056f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80058a0 <_dtoa_r+0x2c0>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f7fa fdd7 	bl	80002ac <__adddf3>
 80056fe:	4604      	mov	r4, r0
 8005700:	4630      	mov	r0, r6
 8005702:	460d      	mov	r5, r1
 8005704:	f7fa ff1e 	bl	8000544 <__aeabi_i2d>
 8005708:	a367      	add	r3, pc, #412	@ (adr r3, 80058a8 <_dtoa_r+0x2c8>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa ff83 	bl	8000618 <__aeabi_dmul>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4620      	mov	r0, r4
 8005718:	4629      	mov	r1, r5
 800571a:	f7fa fdc7 	bl	80002ac <__adddf3>
 800571e:	4604      	mov	r4, r0
 8005720:	460d      	mov	r5, r1
 8005722:	f7fb fa29 	bl	8000b78 <__aeabi_d2iz>
 8005726:	2200      	movs	r2, #0
 8005728:	4607      	mov	r7, r0
 800572a:	2300      	movs	r3, #0
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fb f9e4 	bl	8000afc <__aeabi_dcmplt>
 8005734:	b140      	cbz	r0, 8005748 <_dtoa_r+0x168>
 8005736:	4638      	mov	r0, r7
 8005738:	f7fa ff04 	bl	8000544 <__aeabi_i2d>
 800573c:	4622      	mov	r2, r4
 800573e:	462b      	mov	r3, r5
 8005740:	f7fb f9d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005744:	b900      	cbnz	r0, 8005748 <_dtoa_r+0x168>
 8005746:	3f01      	subs	r7, #1
 8005748:	2f16      	cmp	r7, #22
 800574a:	d852      	bhi.n	80057f2 <_dtoa_r+0x212>
 800574c:	4b5d      	ldr	r3, [pc, #372]	@ (80058c4 <_dtoa_r+0x2e4>)
 800574e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800575a:	f7fb f9cf 	bl	8000afc <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	d049      	beq.n	80057f6 <_dtoa_r+0x216>
 8005762:	3f01      	subs	r7, #1
 8005764:	2300      	movs	r3, #0
 8005766:	9310      	str	r3, [sp, #64]	@ 0x40
 8005768:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800576a:	1b9b      	subs	r3, r3, r6
 800576c:	1e5a      	subs	r2, r3, #1
 800576e:	bf45      	ittet	mi
 8005770:	f1c3 0301 	rsbmi	r3, r3, #1
 8005774:	9300      	strmi	r3, [sp, #0]
 8005776:	2300      	movpl	r3, #0
 8005778:	2300      	movmi	r3, #0
 800577a:	9206      	str	r2, [sp, #24]
 800577c:	bf54      	ite	pl
 800577e:	9300      	strpl	r3, [sp, #0]
 8005780:	9306      	strmi	r3, [sp, #24]
 8005782:	2f00      	cmp	r7, #0
 8005784:	db39      	blt.n	80057fa <_dtoa_r+0x21a>
 8005786:	9b06      	ldr	r3, [sp, #24]
 8005788:	970d      	str	r7, [sp, #52]	@ 0x34
 800578a:	443b      	add	r3, r7
 800578c:	9306      	str	r3, [sp, #24]
 800578e:	2300      	movs	r3, #0
 8005790:	9308      	str	r3, [sp, #32]
 8005792:	9b07      	ldr	r3, [sp, #28]
 8005794:	2b09      	cmp	r3, #9
 8005796:	d863      	bhi.n	8005860 <_dtoa_r+0x280>
 8005798:	2b05      	cmp	r3, #5
 800579a:	bfc4      	itt	gt
 800579c:	3b04      	subgt	r3, #4
 800579e:	9307      	strgt	r3, [sp, #28]
 80057a0:	9b07      	ldr	r3, [sp, #28]
 80057a2:	f1a3 0302 	sub.w	r3, r3, #2
 80057a6:	bfcc      	ite	gt
 80057a8:	2400      	movgt	r4, #0
 80057aa:	2401      	movle	r4, #1
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d863      	bhi.n	8005878 <_dtoa_r+0x298>
 80057b0:	e8df f003 	tbb	[pc, r3]
 80057b4:	2b375452 	.word	0x2b375452
 80057b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057bc:	441e      	add	r6, r3
 80057be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	bfc1      	itttt	gt
 80057c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057ca:	409f      	lslgt	r7, r3
 80057cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057d4:	bfd6      	itet	le
 80057d6:	f1c3 0320 	rsble	r3, r3, #32
 80057da:	ea47 0003 	orrgt.w	r0, r7, r3
 80057de:	fa04 f003 	lslle.w	r0, r4, r3
 80057e2:	f7fa fe9f 	bl	8000524 <__aeabi_ui2d>
 80057e6:	2201      	movs	r2, #1
 80057e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80057ec:	3e01      	subs	r6, #1
 80057ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80057f0:	e776      	b.n	80056e0 <_dtoa_r+0x100>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e7b7      	b.n	8005766 <_dtoa_r+0x186>
 80057f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80057f8:	e7b6      	b.n	8005768 <_dtoa_r+0x188>
 80057fa:	9b00      	ldr	r3, [sp, #0]
 80057fc:	1bdb      	subs	r3, r3, r7
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	427b      	negs	r3, r7
 8005802:	9308      	str	r3, [sp, #32]
 8005804:	2300      	movs	r3, #0
 8005806:	930d      	str	r3, [sp, #52]	@ 0x34
 8005808:	e7c3      	b.n	8005792 <_dtoa_r+0x1b2>
 800580a:	2301      	movs	r3, #1
 800580c:	9309      	str	r3, [sp, #36]	@ 0x24
 800580e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005810:	eb07 0b03 	add.w	fp, r7, r3
 8005814:	f10b 0301 	add.w	r3, fp, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	bfb8      	it	lt
 800581e:	2301      	movlt	r3, #1
 8005820:	e006      	b.n	8005830 <_dtoa_r+0x250>
 8005822:	2301      	movs	r3, #1
 8005824:	9309      	str	r3, [sp, #36]	@ 0x24
 8005826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005828:	2b00      	cmp	r3, #0
 800582a:	dd28      	ble.n	800587e <_dtoa_r+0x29e>
 800582c:	469b      	mov	fp, r3
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005834:	2100      	movs	r1, #0
 8005836:	2204      	movs	r2, #4
 8005838:	f102 0514 	add.w	r5, r2, #20
 800583c:	429d      	cmp	r5, r3
 800583e:	d926      	bls.n	800588e <_dtoa_r+0x2ae>
 8005840:	6041      	str	r1, [r0, #4]
 8005842:	4648      	mov	r0, r9
 8005844:	f000 fd9c 	bl	8006380 <_Balloc>
 8005848:	4682      	mov	sl, r0
 800584a:	2800      	cmp	r0, #0
 800584c:	d142      	bne.n	80058d4 <_dtoa_r+0x2f4>
 800584e:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <_dtoa_r+0x2e8>)
 8005850:	4602      	mov	r2, r0
 8005852:	f240 11af 	movw	r1, #431	@ 0x1af
 8005856:	e6da      	b.n	800560e <_dtoa_r+0x2e>
 8005858:	2300      	movs	r3, #0
 800585a:	e7e3      	b.n	8005824 <_dtoa_r+0x244>
 800585c:	2300      	movs	r3, #0
 800585e:	e7d5      	b.n	800580c <_dtoa_r+0x22c>
 8005860:	2401      	movs	r4, #1
 8005862:	2300      	movs	r3, #0
 8005864:	9307      	str	r3, [sp, #28]
 8005866:	9409      	str	r4, [sp, #36]	@ 0x24
 8005868:	f04f 3bff 	mov.w	fp, #4294967295
 800586c:	2200      	movs	r2, #0
 800586e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005872:	2312      	movs	r3, #18
 8005874:	920c      	str	r2, [sp, #48]	@ 0x30
 8005876:	e7db      	b.n	8005830 <_dtoa_r+0x250>
 8005878:	2301      	movs	r3, #1
 800587a:	9309      	str	r3, [sp, #36]	@ 0x24
 800587c:	e7f4      	b.n	8005868 <_dtoa_r+0x288>
 800587e:	f04f 0b01 	mov.w	fp, #1
 8005882:	f8cd b00c 	str.w	fp, [sp, #12]
 8005886:	465b      	mov	r3, fp
 8005888:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800588c:	e7d0      	b.n	8005830 <_dtoa_r+0x250>
 800588e:	3101      	adds	r1, #1
 8005890:	0052      	lsls	r2, r2, #1
 8005892:	e7d1      	b.n	8005838 <_dtoa_r+0x258>
 8005894:	f3af 8000 	nop.w
 8005898:	636f4361 	.word	0x636f4361
 800589c:	3fd287a7 	.word	0x3fd287a7
 80058a0:	8b60c8b3 	.word	0x8b60c8b3
 80058a4:	3fc68a28 	.word	0x3fc68a28
 80058a8:	509f79fb 	.word	0x509f79fb
 80058ac:	3fd34413 	.word	0x3fd34413
 80058b0:	080097f5 	.word	0x080097f5
 80058b4:	0800980c 	.word	0x0800980c
 80058b8:	7ff00000 	.word	0x7ff00000
 80058bc:	080097c5 	.word	0x080097c5
 80058c0:	3ff80000 	.word	0x3ff80000
 80058c4:	08009960 	.word	0x08009960
 80058c8:	08009864 	.word	0x08009864
 80058cc:	080097f1 	.word	0x080097f1
 80058d0:	080097c4 	.word	0x080097c4
 80058d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058d8:	6018      	str	r0, [r3, #0]
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	2b0e      	cmp	r3, #14
 80058de:	f200 80a1 	bhi.w	8005a24 <_dtoa_r+0x444>
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	f000 809e 	beq.w	8005a24 <_dtoa_r+0x444>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	dd33      	ble.n	8005954 <_dtoa_r+0x374>
 80058ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005b60 <_dtoa_r+0x580>)
 80058ee:	f007 020f 	and.w	r2, r7, #15
 80058f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058f6:	ed93 7b00 	vldr	d7, [r3]
 80058fa:	05f8      	lsls	r0, r7, #23
 80058fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005900:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005904:	d516      	bpl.n	8005934 <_dtoa_r+0x354>
 8005906:	4b97      	ldr	r3, [pc, #604]	@ (8005b64 <_dtoa_r+0x584>)
 8005908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800590c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005910:	f7fa ffac 	bl	800086c <__aeabi_ddiv>
 8005914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005918:	f004 040f 	and.w	r4, r4, #15
 800591c:	2603      	movs	r6, #3
 800591e:	4d91      	ldr	r5, [pc, #580]	@ (8005b64 <_dtoa_r+0x584>)
 8005920:	b954      	cbnz	r4, 8005938 <_dtoa_r+0x358>
 8005922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800592a:	f7fa ff9f 	bl	800086c <__aeabi_ddiv>
 800592e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005932:	e028      	b.n	8005986 <_dtoa_r+0x3a6>
 8005934:	2602      	movs	r6, #2
 8005936:	e7f2      	b.n	800591e <_dtoa_r+0x33e>
 8005938:	07e1      	lsls	r1, r4, #31
 800593a:	d508      	bpl.n	800594e <_dtoa_r+0x36e>
 800593c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005944:	f7fa fe68 	bl	8000618 <__aeabi_dmul>
 8005948:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800594c:	3601      	adds	r6, #1
 800594e:	1064      	asrs	r4, r4, #1
 8005950:	3508      	adds	r5, #8
 8005952:	e7e5      	b.n	8005920 <_dtoa_r+0x340>
 8005954:	f000 80af 	beq.w	8005ab6 <_dtoa_r+0x4d6>
 8005958:	427c      	negs	r4, r7
 800595a:	4b81      	ldr	r3, [pc, #516]	@ (8005b60 <_dtoa_r+0x580>)
 800595c:	4d81      	ldr	r5, [pc, #516]	@ (8005b64 <_dtoa_r+0x584>)
 800595e:	f004 020f 	and.w	r2, r4, #15
 8005962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800596e:	f7fa fe53 	bl	8000618 <__aeabi_dmul>
 8005972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005976:	1124      	asrs	r4, r4, #4
 8005978:	2300      	movs	r3, #0
 800597a:	2602      	movs	r6, #2
 800597c:	2c00      	cmp	r4, #0
 800597e:	f040 808f 	bne.w	8005aa0 <_dtoa_r+0x4c0>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1d3      	bne.n	800592e <_dtoa_r+0x34e>
 8005986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005988:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8094 	beq.w	8005aba <_dtoa_r+0x4da>
 8005992:	4b75      	ldr	r3, [pc, #468]	@ (8005b68 <_dtoa_r+0x588>)
 8005994:	2200      	movs	r2, #0
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fb f8af 	bl	8000afc <__aeabi_dcmplt>
 800599e:	2800      	cmp	r0, #0
 80059a0:	f000 808b 	beq.w	8005aba <_dtoa_r+0x4da>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8087 	beq.w	8005aba <_dtoa_r+0x4da>
 80059ac:	f1bb 0f00 	cmp.w	fp, #0
 80059b0:	dd34      	ble.n	8005a1c <_dtoa_r+0x43c>
 80059b2:	4620      	mov	r0, r4
 80059b4:	4b6d      	ldr	r3, [pc, #436]	@ (8005b6c <_dtoa_r+0x58c>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7fa fe2d 	bl	8000618 <__aeabi_dmul>
 80059be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80059c6:	3601      	adds	r6, #1
 80059c8:	465c      	mov	r4, fp
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7fa fdba 	bl	8000544 <__aeabi_i2d>
 80059d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d4:	f7fa fe20 	bl	8000618 <__aeabi_dmul>
 80059d8:	4b65      	ldr	r3, [pc, #404]	@ (8005b70 <_dtoa_r+0x590>)
 80059da:	2200      	movs	r2, #0
 80059dc:	f7fa fc66 	bl	80002ac <__adddf3>
 80059e0:	4605      	mov	r5, r0
 80059e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80059e6:	2c00      	cmp	r4, #0
 80059e8:	d16a      	bne.n	8005ac0 <_dtoa_r+0x4e0>
 80059ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ee:	4b61      	ldr	r3, [pc, #388]	@ (8005b74 <_dtoa_r+0x594>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	f7fa fc59 	bl	80002a8 <__aeabi_dsub>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059fe:	462a      	mov	r2, r5
 8005a00:	4633      	mov	r3, r6
 8005a02:	f7fb f899 	bl	8000b38 <__aeabi_dcmpgt>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f040 8298 	bne.w	8005f3c <_dtoa_r+0x95c>
 8005a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a10:	462a      	mov	r2, r5
 8005a12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a16:	f7fb f871 	bl	8000afc <__aeabi_dcmplt>
 8005a1a:	bb38      	cbnz	r0, 8005a6c <_dtoa_r+0x48c>
 8005a1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005a20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f2c0 8157 	blt.w	8005cda <_dtoa_r+0x6fa>
 8005a2c:	2f0e      	cmp	r7, #14
 8005a2e:	f300 8154 	bgt.w	8005cda <_dtoa_r+0x6fa>
 8005a32:	4b4b      	ldr	r3, [pc, #300]	@ (8005b60 <_dtoa_r+0x580>)
 8005a34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a38:	ed93 7b00 	vldr	d7, [r3]
 8005a3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	ed8d 7b00 	vstr	d7, [sp]
 8005a44:	f280 80e5 	bge.w	8005c12 <_dtoa_r+0x632>
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f300 80e1 	bgt.w	8005c12 <_dtoa_r+0x632>
 8005a50:	d10c      	bne.n	8005a6c <_dtoa_r+0x48c>
 8005a52:	4b48      	ldr	r3, [pc, #288]	@ (8005b74 <_dtoa_r+0x594>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	ec51 0b17 	vmov	r0, r1, d7
 8005a5a:	f7fa fddd 	bl	8000618 <__aeabi_dmul>
 8005a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a62:	f7fb f85f 	bl	8000b24 <__aeabi_dcmpge>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f000 8266 	beq.w	8005f38 <_dtoa_r+0x958>
 8005a6c:	2400      	movs	r4, #0
 8005a6e:	4625      	mov	r5, r4
 8005a70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a72:	4656      	mov	r6, sl
 8005a74:	ea6f 0803 	mvn.w	r8, r3
 8005a78:	2700      	movs	r7, #0
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4648      	mov	r0, r9
 8005a7e:	f000 fcbf 	bl	8006400 <_Bfree>
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	f000 80bd 	beq.w	8005c02 <_dtoa_r+0x622>
 8005a88:	b12f      	cbz	r7, 8005a96 <_dtoa_r+0x4b6>
 8005a8a:	42af      	cmp	r7, r5
 8005a8c:	d003      	beq.n	8005a96 <_dtoa_r+0x4b6>
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4648      	mov	r0, r9
 8005a92:	f000 fcb5 	bl	8006400 <_Bfree>
 8005a96:	4629      	mov	r1, r5
 8005a98:	4648      	mov	r0, r9
 8005a9a:	f000 fcb1 	bl	8006400 <_Bfree>
 8005a9e:	e0b0      	b.n	8005c02 <_dtoa_r+0x622>
 8005aa0:	07e2      	lsls	r2, r4, #31
 8005aa2:	d505      	bpl.n	8005ab0 <_dtoa_r+0x4d0>
 8005aa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005aa8:	f7fa fdb6 	bl	8000618 <__aeabi_dmul>
 8005aac:	3601      	adds	r6, #1
 8005aae:	2301      	movs	r3, #1
 8005ab0:	1064      	asrs	r4, r4, #1
 8005ab2:	3508      	adds	r5, #8
 8005ab4:	e762      	b.n	800597c <_dtoa_r+0x39c>
 8005ab6:	2602      	movs	r6, #2
 8005ab8:	e765      	b.n	8005986 <_dtoa_r+0x3a6>
 8005aba:	9c03      	ldr	r4, [sp, #12]
 8005abc:	46b8      	mov	r8, r7
 8005abe:	e784      	b.n	80059ca <_dtoa_r+0x3ea>
 8005ac0:	4b27      	ldr	r3, [pc, #156]	@ (8005b60 <_dtoa_r+0x580>)
 8005ac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ac8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005acc:	4454      	add	r4, sl
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	d054      	beq.n	8005b7c <_dtoa_r+0x59c>
 8005ad2:	4929      	ldr	r1, [pc, #164]	@ (8005b78 <_dtoa_r+0x598>)
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7fa fec9 	bl	800086c <__aeabi_ddiv>
 8005ada:	4633      	mov	r3, r6
 8005adc:	462a      	mov	r2, r5
 8005ade:	f7fa fbe3 	bl	80002a8 <__aeabi_dsub>
 8005ae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005ae6:	4656      	mov	r6, sl
 8005ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aec:	f7fb f844 	bl	8000b78 <__aeabi_d2iz>
 8005af0:	4605      	mov	r5, r0
 8005af2:	f7fa fd27 	bl	8000544 <__aeabi_i2d>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005afe:	f7fa fbd3 	bl	80002a8 <__aeabi_dsub>
 8005b02:	3530      	adds	r5, #48	@ 0x30
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b0c:	f806 5b01 	strb.w	r5, [r6], #1
 8005b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b14:	f7fa fff2 	bl	8000afc <__aeabi_dcmplt>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d172      	bne.n	8005c02 <_dtoa_r+0x622>
 8005b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b20:	4911      	ldr	r1, [pc, #68]	@ (8005b68 <_dtoa_r+0x588>)
 8005b22:	2000      	movs	r0, #0
 8005b24:	f7fa fbc0 	bl	80002a8 <__aeabi_dsub>
 8005b28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b2c:	f7fa ffe6 	bl	8000afc <__aeabi_dcmplt>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f040 80b4 	bne.w	8005c9e <_dtoa_r+0x6be>
 8005b36:	42a6      	cmp	r6, r4
 8005b38:	f43f af70 	beq.w	8005a1c <_dtoa_r+0x43c>
 8005b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005b40:	4b0a      	ldr	r3, [pc, #40]	@ (8005b6c <_dtoa_r+0x58c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	f7fa fd68 	bl	8000618 <__aeabi_dmul>
 8005b48:	4b08      	ldr	r3, [pc, #32]	@ (8005b6c <_dtoa_r+0x58c>)
 8005b4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b4e:	2200      	movs	r2, #0
 8005b50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b54:	f7fa fd60 	bl	8000618 <__aeabi_dmul>
 8005b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b5c:	e7c4      	b.n	8005ae8 <_dtoa_r+0x508>
 8005b5e:	bf00      	nop
 8005b60:	08009960 	.word	0x08009960
 8005b64:	08009938 	.word	0x08009938
 8005b68:	3ff00000 	.word	0x3ff00000
 8005b6c:	40240000 	.word	0x40240000
 8005b70:	401c0000 	.word	0x401c0000
 8005b74:	40140000 	.word	0x40140000
 8005b78:	3fe00000 	.word	0x3fe00000
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f7fa fd4a 	bl	8000618 <__aeabi_dmul>
 8005b84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b8a:	4656      	mov	r6, sl
 8005b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b90:	f7fa fff2 	bl	8000b78 <__aeabi_d2iz>
 8005b94:	4605      	mov	r5, r0
 8005b96:	f7fa fcd5 	bl	8000544 <__aeabi_i2d>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba2:	f7fa fb81 	bl	80002a8 <__aeabi_dsub>
 8005ba6:	3530      	adds	r5, #48	@ 0x30
 8005ba8:	f806 5b01 	strb.w	r5, [r6], #1
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	d124      	bne.n	8005c06 <_dtoa_r+0x626>
 8005bbc:	4baf      	ldr	r3, [pc, #700]	@ (8005e7c <_dtoa_r+0x89c>)
 8005bbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005bc2:	f7fa fb73 	bl	80002ac <__adddf3>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bce:	f7fa ffb3 	bl	8000b38 <__aeabi_dcmpgt>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d163      	bne.n	8005c9e <_dtoa_r+0x6be>
 8005bd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bda:	49a8      	ldr	r1, [pc, #672]	@ (8005e7c <_dtoa_r+0x89c>)
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f7fa fb63 	bl	80002a8 <__aeabi_dsub>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bea:	f7fa ff87 	bl	8000afc <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f43f af14 	beq.w	8005a1c <_dtoa_r+0x43c>
 8005bf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005bf6:	1e73      	subs	r3, r6, #1
 8005bf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005bfe:	2b30      	cmp	r3, #48	@ 0x30
 8005c00:	d0f8      	beq.n	8005bf4 <_dtoa_r+0x614>
 8005c02:	4647      	mov	r7, r8
 8005c04:	e03b      	b.n	8005c7e <_dtoa_r+0x69e>
 8005c06:	4b9e      	ldr	r3, [pc, #632]	@ (8005e80 <_dtoa_r+0x8a0>)
 8005c08:	f7fa fd06 	bl	8000618 <__aeabi_dmul>
 8005c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c10:	e7bc      	b.n	8005b8c <_dtoa_r+0x5ac>
 8005c12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005c16:	4656      	mov	r6, sl
 8005c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7fa fe24 	bl	800086c <__aeabi_ddiv>
 8005c24:	f7fa ffa8 	bl	8000b78 <__aeabi_d2iz>
 8005c28:	4680      	mov	r8, r0
 8005c2a:	f7fa fc8b 	bl	8000544 <__aeabi_i2d>
 8005c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c32:	f7fa fcf1 	bl	8000618 <__aeabi_dmul>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c42:	f7fa fb31 	bl	80002a8 <__aeabi_dsub>
 8005c46:	f806 4b01 	strb.w	r4, [r6], #1
 8005c4a:	9d03      	ldr	r5, [sp, #12]
 8005c4c:	eba6 040a 	sub.w	r4, r6, sl
 8005c50:	42a5      	cmp	r5, r4
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	d133      	bne.n	8005cc0 <_dtoa_r+0x6e0>
 8005c58:	f7fa fb28 	bl	80002ac <__adddf3>
 8005c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
 8005c64:	f7fa ff68 	bl	8000b38 <__aeabi_dcmpgt>
 8005c68:	b9c0      	cbnz	r0, 8005c9c <_dtoa_r+0x6bc>
 8005c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa ff39 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c76:	b110      	cbz	r0, 8005c7e <_dtoa_r+0x69e>
 8005c78:	f018 0f01 	tst.w	r8, #1
 8005c7c:	d10e      	bne.n	8005c9c <_dtoa_r+0x6bc>
 8005c7e:	9902      	ldr	r1, [sp, #8]
 8005c80:	4648      	mov	r0, r9
 8005c82:	f000 fbbd 	bl	8006400 <_Bfree>
 8005c86:	2300      	movs	r3, #0
 8005c88:	7033      	strb	r3, [r6, #0]
 8005c8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c8c:	3701      	adds	r7, #1
 8005c8e:	601f      	str	r7, [r3, #0]
 8005c90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 824b 	beq.w	800612e <_dtoa_r+0xb4e>
 8005c98:	601e      	str	r6, [r3, #0]
 8005c9a:	e248      	b.n	800612e <_dtoa_r+0xb4e>
 8005c9c:	46b8      	mov	r8, r7
 8005c9e:	4633      	mov	r3, r6
 8005ca0:	461e      	mov	r6, r3
 8005ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ca6:	2a39      	cmp	r2, #57	@ 0x39
 8005ca8:	d106      	bne.n	8005cb8 <_dtoa_r+0x6d8>
 8005caa:	459a      	cmp	sl, r3
 8005cac:	d1f8      	bne.n	8005ca0 <_dtoa_r+0x6c0>
 8005cae:	2230      	movs	r2, #48	@ 0x30
 8005cb0:	f108 0801 	add.w	r8, r8, #1
 8005cb4:	f88a 2000 	strb.w	r2, [sl]
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	3201      	adds	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e7a0      	b.n	8005c02 <_dtoa_r+0x622>
 8005cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005e80 <_dtoa_r+0x8a0>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f7fa fca8 	bl	8000618 <__aeabi_dmul>
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2300      	movs	r3, #0
 8005ccc:	4604      	mov	r4, r0
 8005cce:	460d      	mov	r5, r1
 8005cd0:	f7fa ff0a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d09f      	beq.n	8005c18 <_dtoa_r+0x638>
 8005cd8:	e7d1      	b.n	8005c7e <_dtoa_r+0x69e>
 8005cda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cdc:	2a00      	cmp	r2, #0
 8005cde:	f000 80ea 	beq.w	8005eb6 <_dtoa_r+0x8d6>
 8005ce2:	9a07      	ldr	r2, [sp, #28]
 8005ce4:	2a01      	cmp	r2, #1
 8005ce6:	f300 80cd 	bgt.w	8005e84 <_dtoa_r+0x8a4>
 8005cea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	f000 80c1 	beq.w	8005e74 <_dtoa_r+0x894>
 8005cf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005cf6:	9c08      	ldr	r4, [sp, #32]
 8005cf8:	9e00      	ldr	r6, [sp, #0]
 8005cfa:	9a00      	ldr	r2, [sp, #0]
 8005cfc:	441a      	add	r2, r3
 8005cfe:	9200      	str	r2, [sp, #0]
 8005d00:	9a06      	ldr	r2, [sp, #24]
 8005d02:	2101      	movs	r1, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	4648      	mov	r0, r9
 8005d08:	9206      	str	r2, [sp, #24]
 8005d0a:	f000 fc2d 	bl	8006568 <__i2b>
 8005d0e:	4605      	mov	r5, r0
 8005d10:	b166      	cbz	r6, 8005d2c <_dtoa_r+0x74c>
 8005d12:	9b06      	ldr	r3, [sp, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	dd09      	ble.n	8005d2c <_dtoa_r+0x74c>
 8005d18:	42b3      	cmp	r3, r6
 8005d1a:	9a00      	ldr	r2, [sp, #0]
 8005d1c:	bfa8      	it	ge
 8005d1e:	4633      	movge	r3, r6
 8005d20:	1ad2      	subs	r2, r2, r3
 8005d22:	9200      	str	r2, [sp, #0]
 8005d24:	9a06      	ldr	r2, [sp, #24]
 8005d26:	1af6      	subs	r6, r6, r3
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	9306      	str	r3, [sp, #24]
 8005d2c:	9b08      	ldr	r3, [sp, #32]
 8005d2e:	b30b      	cbz	r3, 8005d74 <_dtoa_r+0x794>
 8005d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 80c6 	beq.w	8005ec4 <_dtoa_r+0x8e4>
 8005d38:	2c00      	cmp	r4, #0
 8005d3a:	f000 80c0 	beq.w	8005ebe <_dtoa_r+0x8de>
 8005d3e:	4629      	mov	r1, r5
 8005d40:	4622      	mov	r2, r4
 8005d42:	4648      	mov	r0, r9
 8005d44:	f000 fcc8 	bl	80066d8 <__pow5mult>
 8005d48:	9a02      	ldr	r2, [sp, #8]
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	4648      	mov	r0, r9
 8005d50:	f000 fc20 	bl	8006594 <__multiply>
 8005d54:	9902      	ldr	r1, [sp, #8]
 8005d56:	4680      	mov	r8, r0
 8005d58:	4648      	mov	r0, r9
 8005d5a:	f000 fb51 	bl	8006400 <_Bfree>
 8005d5e:	9b08      	ldr	r3, [sp, #32]
 8005d60:	1b1b      	subs	r3, r3, r4
 8005d62:	9308      	str	r3, [sp, #32]
 8005d64:	f000 80b1 	beq.w	8005eca <_dtoa_r+0x8ea>
 8005d68:	9a08      	ldr	r2, [sp, #32]
 8005d6a:	4641      	mov	r1, r8
 8005d6c:	4648      	mov	r0, r9
 8005d6e:	f000 fcb3 	bl	80066d8 <__pow5mult>
 8005d72:	9002      	str	r0, [sp, #8]
 8005d74:	2101      	movs	r1, #1
 8005d76:	4648      	mov	r0, r9
 8005d78:	f000 fbf6 	bl	8006568 <__i2b>
 8005d7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d7e:	4604      	mov	r4, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 81d8 	beq.w	8006136 <_dtoa_r+0xb56>
 8005d86:	461a      	mov	r2, r3
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4648      	mov	r0, r9
 8005d8c:	f000 fca4 	bl	80066d8 <__pow5mult>
 8005d90:	9b07      	ldr	r3, [sp, #28]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	4604      	mov	r4, r0
 8005d96:	f300 809f 	bgt.w	8005ed8 <_dtoa_r+0x8f8>
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 8097 	bne.w	8005ed0 <_dtoa_r+0x8f0>
 8005da2:	9b05      	ldr	r3, [sp, #20]
 8005da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f040 8093 	bne.w	8005ed4 <_dtoa_r+0x8f4>
 8005dae:	9b05      	ldr	r3, [sp, #20]
 8005db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005db4:	0d1b      	lsrs	r3, r3, #20
 8005db6:	051b      	lsls	r3, r3, #20
 8005db8:	b133      	cbz	r3, 8005dc8 <_dtoa_r+0x7e8>
 8005dba:	9b00      	ldr	r3, [sp, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	9b06      	ldr	r3, [sp, #24]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	9306      	str	r3, [sp, #24]
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	9308      	str	r3, [sp, #32]
 8005dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 81b8 	beq.w	8006142 <_dtoa_r+0xb62>
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005dd8:	6918      	ldr	r0, [r3, #16]
 8005dda:	f000 fb79 	bl	80064d0 <__hi0bits>
 8005dde:	f1c0 0020 	rsb	r0, r0, #32
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	4418      	add	r0, r3
 8005de6:	f010 001f 	ands.w	r0, r0, #31
 8005dea:	f000 8082 	beq.w	8005ef2 <_dtoa_r+0x912>
 8005dee:	f1c0 0320 	rsb	r3, r0, #32
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	dd73      	ble.n	8005ede <_dtoa_r+0x8fe>
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	f1c0 001c 	rsb	r0, r0, #28
 8005dfc:	4403      	add	r3, r0
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	9b06      	ldr	r3, [sp, #24]
 8005e02:	4403      	add	r3, r0
 8005e04:	4406      	add	r6, r0
 8005e06:	9306      	str	r3, [sp, #24]
 8005e08:	9b00      	ldr	r3, [sp, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dd05      	ble.n	8005e1a <_dtoa_r+0x83a>
 8005e0e:	9902      	ldr	r1, [sp, #8]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4648      	mov	r0, r9
 8005e14:	f000 fcba 	bl	800678c <__lshift>
 8005e18:	9002      	str	r0, [sp, #8]
 8005e1a:	9b06      	ldr	r3, [sp, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dd05      	ble.n	8005e2c <_dtoa_r+0x84c>
 8005e20:	4621      	mov	r1, r4
 8005e22:	461a      	mov	r2, r3
 8005e24:	4648      	mov	r0, r9
 8005e26:	f000 fcb1 	bl	800678c <__lshift>
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d061      	beq.n	8005ef6 <_dtoa_r+0x916>
 8005e32:	9802      	ldr	r0, [sp, #8]
 8005e34:	4621      	mov	r1, r4
 8005e36:	f000 fd15 	bl	8006864 <__mcmp>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	da5b      	bge.n	8005ef6 <_dtoa_r+0x916>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9902      	ldr	r1, [sp, #8]
 8005e42:	220a      	movs	r2, #10
 8005e44:	4648      	mov	r0, r9
 8005e46:	f000 fafd 	bl	8006444 <__multadd>
 8005e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4c:	9002      	str	r0, [sp, #8]
 8005e4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8177 	beq.w	8006146 <_dtoa_r+0xb66>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	220a      	movs	r2, #10
 8005e5e:	4648      	mov	r0, r9
 8005e60:	f000 faf0 	bl	8006444 <__multadd>
 8005e64:	f1bb 0f00 	cmp.w	fp, #0
 8005e68:	4605      	mov	r5, r0
 8005e6a:	dc6f      	bgt.n	8005f4c <_dtoa_r+0x96c>
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	dc49      	bgt.n	8005f06 <_dtoa_r+0x926>
 8005e72:	e06b      	b.n	8005f4c <_dtoa_r+0x96c>
 8005e74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e7a:	e73c      	b.n	8005cf6 <_dtoa_r+0x716>
 8005e7c:	3fe00000 	.word	0x3fe00000
 8005e80:	40240000 	.word	0x40240000
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	1e5c      	subs	r4, r3, #1
 8005e88:	9b08      	ldr	r3, [sp, #32]
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	db09      	blt.n	8005ea2 <_dtoa_r+0x8c2>
 8005e8e:	1b1c      	subs	r4, r3, r4
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f6bf af30 	bge.w	8005cf8 <_dtoa_r+0x718>
 8005e98:	9b00      	ldr	r3, [sp, #0]
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	1a9e      	subs	r6, r3, r2
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e72b      	b.n	8005cfa <_dtoa_r+0x71a>
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005ea6:	9408      	str	r4, [sp, #32]
 8005ea8:	1ae3      	subs	r3, r4, r3
 8005eaa:	441a      	add	r2, r3
 8005eac:	9e00      	ldr	r6, [sp, #0]
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005eb2:	2400      	movs	r4, #0
 8005eb4:	e721      	b.n	8005cfa <_dtoa_r+0x71a>
 8005eb6:	9c08      	ldr	r4, [sp, #32]
 8005eb8:	9e00      	ldr	r6, [sp, #0]
 8005eba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005ebc:	e728      	b.n	8005d10 <_dtoa_r+0x730>
 8005ebe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005ec2:	e751      	b.n	8005d68 <_dtoa_r+0x788>
 8005ec4:	9a08      	ldr	r2, [sp, #32]
 8005ec6:	9902      	ldr	r1, [sp, #8]
 8005ec8:	e750      	b.n	8005d6c <_dtoa_r+0x78c>
 8005eca:	f8cd 8008 	str.w	r8, [sp, #8]
 8005ece:	e751      	b.n	8005d74 <_dtoa_r+0x794>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e779      	b.n	8005dc8 <_dtoa_r+0x7e8>
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	e777      	b.n	8005dc8 <_dtoa_r+0x7e8>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9308      	str	r3, [sp, #32]
 8005edc:	e779      	b.n	8005dd2 <_dtoa_r+0x7f2>
 8005ede:	d093      	beq.n	8005e08 <_dtoa_r+0x828>
 8005ee0:	9a00      	ldr	r2, [sp, #0]
 8005ee2:	331c      	adds	r3, #28
 8005ee4:	441a      	add	r2, r3
 8005ee6:	9200      	str	r2, [sp, #0]
 8005ee8:	9a06      	ldr	r2, [sp, #24]
 8005eea:	441a      	add	r2, r3
 8005eec:	441e      	add	r6, r3
 8005eee:	9206      	str	r2, [sp, #24]
 8005ef0:	e78a      	b.n	8005e08 <_dtoa_r+0x828>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	e7f4      	b.n	8005ee0 <_dtoa_r+0x900>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	46b8      	mov	r8, r7
 8005efc:	dc20      	bgt.n	8005f40 <_dtoa_r+0x960>
 8005efe:	469b      	mov	fp, r3
 8005f00:	9b07      	ldr	r3, [sp, #28]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	dd1e      	ble.n	8005f44 <_dtoa_r+0x964>
 8005f06:	f1bb 0f00 	cmp.w	fp, #0
 8005f0a:	f47f adb1 	bne.w	8005a70 <_dtoa_r+0x490>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	465b      	mov	r3, fp
 8005f12:	2205      	movs	r2, #5
 8005f14:	4648      	mov	r0, r9
 8005f16:	f000 fa95 	bl	8006444 <__multadd>
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	9802      	ldr	r0, [sp, #8]
 8005f20:	f000 fca0 	bl	8006864 <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f77f ada3 	ble.w	8005a70 <_dtoa_r+0x490>
 8005f2a:	4656      	mov	r6, sl
 8005f2c:	2331      	movs	r3, #49	@ 0x31
 8005f2e:	f806 3b01 	strb.w	r3, [r6], #1
 8005f32:	f108 0801 	add.w	r8, r8, #1
 8005f36:	e59f      	b.n	8005a78 <_dtoa_r+0x498>
 8005f38:	9c03      	ldr	r4, [sp, #12]
 8005f3a:	46b8      	mov	r8, r7
 8005f3c:	4625      	mov	r5, r4
 8005f3e:	e7f4      	b.n	8005f2a <_dtoa_r+0x94a>
 8005f40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8101 	beq.w	800614e <_dtoa_r+0xb6e>
 8005f4c:	2e00      	cmp	r6, #0
 8005f4e:	dd05      	ble.n	8005f5c <_dtoa_r+0x97c>
 8005f50:	4629      	mov	r1, r5
 8005f52:	4632      	mov	r2, r6
 8005f54:	4648      	mov	r0, r9
 8005f56:	f000 fc19 	bl	800678c <__lshift>
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	9b08      	ldr	r3, [sp, #32]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d05c      	beq.n	800601c <_dtoa_r+0xa3c>
 8005f62:	6869      	ldr	r1, [r5, #4]
 8005f64:	4648      	mov	r0, r9
 8005f66:	f000 fa0b 	bl	8006380 <_Balloc>
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	b928      	cbnz	r0, 8005f7a <_dtoa_r+0x99a>
 8005f6e:	4b82      	ldr	r3, [pc, #520]	@ (8006178 <_dtoa_r+0xb98>)
 8005f70:	4602      	mov	r2, r0
 8005f72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f76:	f7ff bb4a 	b.w	800560e <_dtoa_r+0x2e>
 8005f7a:	692a      	ldr	r2, [r5, #16]
 8005f7c:	3202      	adds	r2, #2
 8005f7e:	0092      	lsls	r2, r2, #2
 8005f80:	f105 010c 	add.w	r1, r5, #12
 8005f84:	300c      	adds	r0, #12
 8005f86:	f7ff fa94 	bl	80054b2 <memcpy>
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f000 fbfc 	bl	800678c <__lshift>
 8005f94:	f10a 0301 	add.w	r3, sl, #1
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	eb0a 030b 	add.w	r3, sl, fp
 8005f9e:	9308      	str	r3, [sp, #32]
 8005fa0:	9b04      	ldr	r3, [sp, #16]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	462f      	mov	r7, r5
 8005fa8:	9306      	str	r3, [sp, #24]
 8005faa:	4605      	mov	r5, r0
 8005fac:	9b00      	ldr	r3, [sp, #0]
 8005fae:	9802      	ldr	r0, [sp, #8]
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fb6:	f7ff fa8a 	bl	80054ce <quorem>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	3330      	adds	r3, #48	@ 0x30
 8005fbe:	9003      	str	r0, [sp, #12]
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	9802      	ldr	r0, [sp, #8]
 8005fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc6:	f000 fc4d 	bl	8006864 <__mcmp>
 8005fca:	462a      	mov	r2, r5
 8005fcc:	9004      	str	r0, [sp, #16]
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4648      	mov	r0, r9
 8005fd2:	f000 fc63 	bl	800689c <__mdiff>
 8005fd6:	68c2      	ldr	r2, [r0, #12]
 8005fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fda:	4606      	mov	r6, r0
 8005fdc:	bb02      	cbnz	r2, 8006020 <_dtoa_r+0xa40>
 8005fde:	4601      	mov	r1, r0
 8005fe0:	9802      	ldr	r0, [sp, #8]
 8005fe2:	f000 fc3f 	bl	8006864 <__mcmp>
 8005fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4631      	mov	r1, r6
 8005fec:	4648      	mov	r0, r9
 8005fee:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff2:	f000 fa05 	bl	8006400 <_Bfree>
 8005ff6:	9b07      	ldr	r3, [sp, #28]
 8005ff8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ffa:	9e00      	ldr	r6, [sp, #0]
 8005ffc:	ea42 0103 	orr.w	r1, r2, r3
 8006000:	9b06      	ldr	r3, [sp, #24]
 8006002:	4319      	orrs	r1, r3
 8006004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006006:	d10d      	bne.n	8006024 <_dtoa_r+0xa44>
 8006008:	2b39      	cmp	r3, #57	@ 0x39
 800600a:	d027      	beq.n	800605c <_dtoa_r+0xa7c>
 800600c:	9a04      	ldr	r2, [sp, #16]
 800600e:	2a00      	cmp	r2, #0
 8006010:	dd01      	ble.n	8006016 <_dtoa_r+0xa36>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	3331      	adds	r3, #49	@ 0x31
 8006016:	f88b 3000 	strb.w	r3, [fp]
 800601a:	e52e      	b.n	8005a7a <_dtoa_r+0x49a>
 800601c:	4628      	mov	r0, r5
 800601e:	e7b9      	b.n	8005f94 <_dtoa_r+0x9b4>
 8006020:	2201      	movs	r2, #1
 8006022:	e7e2      	b.n	8005fea <_dtoa_r+0xa0a>
 8006024:	9904      	ldr	r1, [sp, #16]
 8006026:	2900      	cmp	r1, #0
 8006028:	db04      	blt.n	8006034 <_dtoa_r+0xa54>
 800602a:	9807      	ldr	r0, [sp, #28]
 800602c:	4301      	orrs	r1, r0
 800602e:	9806      	ldr	r0, [sp, #24]
 8006030:	4301      	orrs	r1, r0
 8006032:	d120      	bne.n	8006076 <_dtoa_r+0xa96>
 8006034:	2a00      	cmp	r2, #0
 8006036:	ddee      	ble.n	8006016 <_dtoa_r+0xa36>
 8006038:	9902      	ldr	r1, [sp, #8]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2201      	movs	r2, #1
 800603e:	4648      	mov	r0, r9
 8006040:	f000 fba4 	bl	800678c <__lshift>
 8006044:	4621      	mov	r1, r4
 8006046:	9002      	str	r0, [sp, #8]
 8006048:	f000 fc0c 	bl	8006864 <__mcmp>
 800604c:	2800      	cmp	r0, #0
 800604e:	9b00      	ldr	r3, [sp, #0]
 8006050:	dc02      	bgt.n	8006058 <_dtoa_r+0xa78>
 8006052:	d1e0      	bne.n	8006016 <_dtoa_r+0xa36>
 8006054:	07da      	lsls	r2, r3, #31
 8006056:	d5de      	bpl.n	8006016 <_dtoa_r+0xa36>
 8006058:	2b39      	cmp	r3, #57	@ 0x39
 800605a:	d1da      	bne.n	8006012 <_dtoa_r+0xa32>
 800605c:	2339      	movs	r3, #57	@ 0x39
 800605e:	f88b 3000 	strb.w	r3, [fp]
 8006062:	4633      	mov	r3, r6
 8006064:	461e      	mov	r6, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800606c:	2a39      	cmp	r2, #57	@ 0x39
 800606e:	d04e      	beq.n	800610e <_dtoa_r+0xb2e>
 8006070:	3201      	adds	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	e501      	b.n	8005a7a <_dtoa_r+0x49a>
 8006076:	2a00      	cmp	r2, #0
 8006078:	dd03      	ble.n	8006082 <_dtoa_r+0xaa2>
 800607a:	2b39      	cmp	r3, #57	@ 0x39
 800607c:	d0ee      	beq.n	800605c <_dtoa_r+0xa7c>
 800607e:	3301      	adds	r3, #1
 8006080:	e7c9      	b.n	8006016 <_dtoa_r+0xa36>
 8006082:	9a00      	ldr	r2, [sp, #0]
 8006084:	9908      	ldr	r1, [sp, #32]
 8006086:	f802 3c01 	strb.w	r3, [r2, #-1]
 800608a:	428a      	cmp	r2, r1
 800608c:	d028      	beq.n	80060e0 <_dtoa_r+0xb00>
 800608e:	9902      	ldr	r1, [sp, #8]
 8006090:	2300      	movs	r3, #0
 8006092:	220a      	movs	r2, #10
 8006094:	4648      	mov	r0, r9
 8006096:	f000 f9d5 	bl	8006444 <__multadd>
 800609a:	42af      	cmp	r7, r5
 800609c:	9002      	str	r0, [sp, #8]
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	f04f 020a 	mov.w	r2, #10
 80060a6:	4639      	mov	r1, r7
 80060a8:	4648      	mov	r0, r9
 80060aa:	d107      	bne.n	80060bc <_dtoa_r+0xadc>
 80060ac:	f000 f9ca 	bl	8006444 <__multadd>
 80060b0:	4607      	mov	r7, r0
 80060b2:	4605      	mov	r5, r0
 80060b4:	9b00      	ldr	r3, [sp, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	e777      	b.n	8005fac <_dtoa_r+0x9cc>
 80060bc:	f000 f9c2 	bl	8006444 <__multadd>
 80060c0:	4629      	mov	r1, r5
 80060c2:	4607      	mov	r7, r0
 80060c4:	2300      	movs	r3, #0
 80060c6:	220a      	movs	r2, #10
 80060c8:	4648      	mov	r0, r9
 80060ca:	f000 f9bb 	bl	8006444 <__multadd>
 80060ce:	4605      	mov	r5, r0
 80060d0:	e7f0      	b.n	80060b4 <_dtoa_r+0xad4>
 80060d2:	f1bb 0f00 	cmp.w	fp, #0
 80060d6:	bfcc      	ite	gt
 80060d8:	465e      	movgt	r6, fp
 80060da:	2601      	movle	r6, #1
 80060dc:	4456      	add	r6, sl
 80060de:	2700      	movs	r7, #0
 80060e0:	9902      	ldr	r1, [sp, #8]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4648      	mov	r0, r9
 80060e8:	f000 fb50 	bl	800678c <__lshift>
 80060ec:	4621      	mov	r1, r4
 80060ee:	9002      	str	r0, [sp, #8]
 80060f0:	f000 fbb8 	bl	8006864 <__mcmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	dcb4      	bgt.n	8006062 <_dtoa_r+0xa82>
 80060f8:	d102      	bne.n	8006100 <_dtoa_r+0xb20>
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	07db      	lsls	r3, r3, #31
 80060fe:	d4b0      	bmi.n	8006062 <_dtoa_r+0xa82>
 8006100:	4633      	mov	r3, r6
 8006102:	461e      	mov	r6, r3
 8006104:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006108:	2a30      	cmp	r2, #48	@ 0x30
 800610a:	d0fa      	beq.n	8006102 <_dtoa_r+0xb22>
 800610c:	e4b5      	b.n	8005a7a <_dtoa_r+0x49a>
 800610e:	459a      	cmp	sl, r3
 8006110:	d1a8      	bne.n	8006064 <_dtoa_r+0xa84>
 8006112:	2331      	movs	r3, #49	@ 0x31
 8006114:	f108 0801 	add.w	r8, r8, #1
 8006118:	f88a 3000 	strb.w	r3, [sl]
 800611c:	e4ad      	b.n	8005a7a <_dtoa_r+0x49a>
 800611e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006120:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800617c <_dtoa_r+0xb9c>
 8006124:	b11b      	cbz	r3, 800612e <_dtoa_r+0xb4e>
 8006126:	f10a 0308 	add.w	r3, sl, #8
 800612a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4650      	mov	r0, sl
 8006130:	b017      	add	sp, #92	@ 0x5c
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	9b07      	ldr	r3, [sp, #28]
 8006138:	2b01      	cmp	r3, #1
 800613a:	f77f ae2e 	ble.w	8005d9a <_dtoa_r+0x7ba>
 800613e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006140:	9308      	str	r3, [sp, #32]
 8006142:	2001      	movs	r0, #1
 8006144:	e64d      	b.n	8005de2 <_dtoa_r+0x802>
 8006146:	f1bb 0f00 	cmp.w	fp, #0
 800614a:	f77f aed9 	ble.w	8005f00 <_dtoa_r+0x920>
 800614e:	4656      	mov	r6, sl
 8006150:	9802      	ldr	r0, [sp, #8]
 8006152:	4621      	mov	r1, r4
 8006154:	f7ff f9bb 	bl	80054ce <quorem>
 8006158:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800615c:	f806 3b01 	strb.w	r3, [r6], #1
 8006160:	eba6 020a 	sub.w	r2, r6, sl
 8006164:	4593      	cmp	fp, r2
 8006166:	ddb4      	ble.n	80060d2 <_dtoa_r+0xaf2>
 8006168:	9902      	ldr	r1, [sp, #8]
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	4648      	mov	r0, r9
 8006170:	f000 f968 	bl	8006444 <__multadd>
 8006174:	9002      	str	r0, [sp, #8]
 8006176:	e7eb      	b.n	8006150 <_dtoa_r+0xb70>
 8006178:	08009864 	.word	0x08009864
 800617c:	080097e8 	.word	0x080097e8

08006180 <_free_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	2900      	cmp	r1, #0
 8006186:	d041      	beq.n	800620c <_free_r+0x8c>
 8006188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618c:	1f0c      	subs	r4, r1, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfb8      	it	lt
 8006192:	18e4      	addlt	r4, r4, r3
 8006194:	f000 f8e8 	bl	8006368 <__malloc_lock>
 8006198:	4a1d      	ldr	r2, [pc, #116]	@ (8006210 <_free_r+0x90>)
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	b933      	cbnz	r3, 80061ac <_free_r+0x2c>
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	6014      	str	r4, [r2, #0]
 80061a2:	4628      	mov	r0, r5
 80061a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a8:	f000 b8e4 	b.w	8006374 <__malloc_unlock>
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	d908      	bls.n	80061c2 <_free_r+0x42>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	1821      	adds	r1, r4, r0
 80061b4:	428b      	cmp	r3, r1
 80061b6:	bf01      	itttt	eq
 80061b8:	6819      	ldreq	r1, [r3, #0]
 80061ba:	685b      	ldreq	r3, [r3, #4]
 80061bc:	1809      	addeq	r1, r1, r0
 80061be:	6021      	streq	r1, [r4, #0]
 80061c0:	e7ed      	b.n	800619e <_free_r+0x1e>
 80061c2:	461a      	mov	r2, r3
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	b10b      	cbz	r3, 80061cc <_free_r+0x4c>
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d9fa      	bls.n	80061c2 <_free_r+0x42>
 80061cc:	6811      	ldr	r1, [r2, #0]
 80061ce:	1850      	adds	r0, r2, r1
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d10b      	bne.n	80061ec <_free_r+0x6c>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	4401      	add	r1, r0
 80061d8:	1850      	adds	r0, r2, r1
 80061da:	4283      	cmp	r3, r0
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	d1e0      	bne.n	80061a2 <_free_r+0x22>
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	6053      	str	r3, [r2, #4]
 80061e6:	4408      	add	r0, r1
 80061e8:	6010      	str	r0, [r2, #0]
 80061ea:	e7da      	b.n	80061a2 <_free_r+0x22>
 80061ec:	d902      	bls.n	80061f4 <_free_r+0x74>
 80061ee:	230c      	movs	r3, #12
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	e7d6      	b.n	80061a2 <_free_r+0x22>
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	1821      	adds	r1, r4, r0
 80061f8:	428b      	cmp	r3, r1
 80061fa:	bf04      	itt	eq
 80061fc:	6819      	ldreq	r1, [r3, #0]
 80061fe:	685b      	ldreq	r3, [r3, #4]
 8006200:	6063      	str	r3, [r4, #4]
 8006202:	bf04      	itt	eq
 8006204:	1809      	addeq	r1, r1, r0
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	6054      	str	r4, [r2, #4]
 800620a:	e7ca      	b.n	80061a2 <_free_r+0x22>
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	bf00      	nop
 8006210:	200003c0 	.word	0x200003c0

08006214 <malloc>:
 8006214:	4b02      	ldr	r3, [pc, #8]	@ (8006220 <malloc+0xc>)
 8006216:	4601      	mov	r1, r0
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	f000 b825 	b.w	8006268 <_malloc_r>
 800621e:	bf00      	nop
 8006220:	20000040 	.word	0x20000040

08006224 <sbrk_aligned>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4e0f      	ldr	r6, [pc, #60]	@ (8006264 <sbrk_aligned+0x40>)
 8006228:	460c      	mov	r4, r1
 800622a:	6831      	ldr	r1, [r6, #0]
 800622c:	4605      	mov	r5, r0
 800622e:	b911      	cbnz	r1, 8006236 <sbrk_aligned+0x12>
 8006230:	f001 f814 	bl	800725c <_sbrk_r>
 8006234:	6030      	str	r0, [r6, #0]
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f001 f80f 	bl	800725c <_sbrk_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d103      	bne.n	800624a <sbrk_aligned+0x26>
 8006242:	f04f 34ff 	mov.w	r4, #4294967295
 8006246:	4620      	mov	r0, r4
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	1cc4      	adds	r4, r0, #3
 800624c:	f024 0403 	bic.w	r4, r4, #3
 8006250:	42a0      	cmp	r0, r4
 8006252:	d0f8      	beq.n	8006246 <sbrk_aligned+0x22>
 8006254:	1a21      	subs	r1, r4, r0
 8006256:	4628      	mov	r0, r5
 8006258:	f001 f800 	bl	800725c <_sbrk_r>
 800625c:	3001      	adds	r0, #1
 800625e:	d1f2      	bne.n	8006246 <sbrk_aligned+0x22>
 8006260:	e7ef      	b.n	8006242 <sbrk_aligned+0x1e>
 8006262:	bf00      	nop
 8006264:	200003bc 	.word	0x200003bc

08006268 <_malloc_r>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	1ccd      	adds	r5, r1, #3
 800626e:	f025 0503 	bic.w	r5, r5, #3
 8006272:	3508      	adds	r5, #8
 8006274:	2d0c      	cmp	r5, #12
 8006276:	bf38      	it	cc
 8006278:	250c      	movcc	r5, #12
 800627a:	2d00      	cmp	r5, #0
 800627c:	4606      	mov	r6, r0
 800627e:	db01      	blt.n	8006284 <_malloc_r+0x1c>
 8006280:	42a9      	cmp	r1, r5
 8006282:	d904      	bls.n	800628e <_malloc_r+0x26>
 8006284:	230c      	movs	r3, #12
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	2000      	movs	r0, #0
 800628a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006364 <_malloc_r+0xfc>
 8006292:	f000 f869 	bl	8006368 <__malloc_lock>
 8006296:	f8d8 3000 	ldr.w	r3, [r8]
 800629a:	461c      	mov	r4, r3
 800629c:	bb44      	cbnz	r4, 80062f0 <_malloc_r+0x88>
 800629e:	4629      	mov	r1, r5
 80062a0:	4630      	mov	r0, r6
 80062a2:	f7ff ffbf 	bl	8006224 <sbrk_aligned>
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	4604      	mov	r4, r0
 80062aa:	d158      	bne.n	800635e <_malloc_r+0xf6>
 80062ac:	f8d8 4000 	ldr.w	r4, [r8]
 80062b0:	4627      	mov	r7, r4
 80062b2:	2f00      	cmp	r7, #0
 80062b4:	d143      	bne.n	800633e <_malloc_r+0xd6>
 80062b6:	2c00      	cmp	r4, #0
 80062b8:	d04b      	beq.n	8006352 <_malloc_r+0xea>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	4639      	mov	r1, r7
 80062be:	4630      	mov	r0, r6
 80062c0:	eb04 0903 	add.w	r9, r4, r3
 80062c4:	f000 ffca 	bl	800725c <_sbrk_r>
 80062c8:	4581      	cmp	r9, r0
 80062ca:	d142      	bne.n	8006352 <_malloc_r+0xea>
 80062cc:	6821      	ldr	r1, [r4, #0]
 80062ce:	1a6d      	subs	r5, r5, r1
 80062d0:	4629      	mov	r1, r5
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7ff ffa6 	bl	8006224 <sbrk_aligned>
 80062d8:	3001      	adds	r0, #1
 80062da:	d03a      	beq.n	8006352 <_malloc_r+0xea>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	442b      	add	r3, r5
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	f8d8 3000 	ldr.w	r3, [r8]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	bb62      	cbnz	r2, 8006344 <_malloc_r+0xdc>
 80062ea:	f8c8 7000 	str.w	r7, [r8]
 80062ee:	e00f      	b.n	8006310 <_malloc_r+0xa8>
 80062f0:	6822      	ldr	r2, [r4, #0]
 80062f2:	1b52      	subs	r2, r2, r5
 80062f4:	d420      	bmi.n	8006338 <_malloc_r+0xd0>
 80062f6:	2a0b      	cmp	r2, #11
 80062f8:	d917      	bls.n	800632a <_malloc_r+0xc2>
 80062fa:	1961      	adds	r1, r4, r5
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	6025      	str	r5, [r4, #0]
 8006300:	bf18      	it	ne
 8006302:	6059      	strne	r1, [r3, #4]
 8006304:	6863      	ldr	r3, [r4, #4]
 8006306:	bf08      	it	eq
 8006308:	f8c8 1000 	streq.w	r1, [r8]
 800630c:	5162      	str	r2, [r4, r5]
 800630e:	604b      	str	r3, [r1, #4]
 8006310:	4630      	mov	r0, r6
 8006312:	f000 f82f 	bl	8006374 <__malloc_unlock>
 8006316:	f104 000b 	add.w	r0, r4, #11
 800631a:	1d23      	adds	r3, r4, #4
 800631c:	f020 0007 	bic.w	r0, r0, #7
 8006320:	1ac2      	subs	r2, r0, r3
 8006322:	bf1c      	itt	ne
 8006324:	1a1b      	subne	r3, r3, r0
 8006326:	50a3      	strne	r3, [r4, r2]
 8006328:	e7af      	b.n	800628a <_malloc_r+0x22>
 800632a:	6862      	ldr	r2, [r4, #4]
 800632c:	42a3      	cmp	r3, r4
 800632e:	bf0c      	ite	eq
 8006330:	f8c8 2000 	streq.w	r2, [r8]
 8006334:	605a      	strne	r2, [r3, #4]
 8006336:	e7eb      	b.n	8006310 <_malloc_r+0xa8>
 8006338:	4623      	mov	r3, r4
 800633a:	6864      	ldr	r4, [r4, #4]
 800633c:	e7ae      	b.n	800629c <_malloc_r+0x34>
 800633e:	463c      	mov	r4, r7
 8006340:	687f      	ldr	r7, [r7, #4]
 8006342:	e7b6      	b.n	80062b2 <_malloc_r+0x4a>
 8006344:	461a      	mov	r2, r3
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	42a3      	cmp	r3, r4
 800634a:	d1fb      	bne.n	8006344 <_malloc_r+0xdc>
 800634c:	2300      	movs	r3, #0
 800634e:	6053      	str	r3, [r2, #4]
 8006350:	e7de      	b.n	8006310 <_malloc_r+0xa8>
 8006352:	230c      	movs	r3, #12
 8006354:	6033      	str	r3, [r6, #0]
 8006356:	4630      	mov	r0, r6
 8006358:	f000 f80c 	bl	8006374 <__malloc_unlock>
 800635c:	e794      	b.n	8006288 <_malloc_r+0x20>
 800635e:	6005      	str	r5, [r0, #0]
 8006360:	e7d6      	b.n	8006310 <_malloc_r+0xa8>
 8006362:	bf00      	nop
 8006364:	200003c0 	.word	0x200003c0

08006368 <__malloc_lock>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__malloc_lock+0x8>)
 800636a:	f7ff b8a0 	b.w	80054ae <__retarget_lock_acquire_recursive>
 800636e:	bf00      	nop
 8006370:	200003b8 	.word	0x200003b8

08006374 <__malloc_unlock>:
 8006374:	4801      	ldr	r0, [pc, #4]	@ (800637c <__malloc_unlock+0x8>)
 8006376:	f7ff b89b 	b.w	80054b0 <__retarget_lock_release_recursive>
 800637a:	bf00      	nop
 800637c:	200003b8 	.word	0x200003b8

08006380 <_Balloc>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	69c6      	ldr	r6, [r0, #28]
 8006384:	4604      	mov	r4, r0
 8006386:	460d      	mov	r5, r1
 8006388:	b976      	cbnz	r6, 80063a8 <_Balloc+0x28>
 800638a:	2010      	movs	r0, #16
 800638c:	f7ff ff42 	bl	8006214 <malloc>
 8006390:	4602      	mov	r2, r0
 8006392:	61e0      	str	r0, [r4, #28]
 8006394:	b920      	cbnz	r0, 80063a0 <_Balloc+0x20>
 8006396:	4b18      	ldr	r3, [pc, #96]	@ (80063f8 <_Balloc+0x78>)
 8006398:	4818      	ldr	r0, [pc, #96]	@ (80063fc <_Balloc+0x7c>)
 800639a:	216b      	movs	r1, #107	@ 0x6b
 800639c:	f000 ff6e 	bl	800727c <__assert_func>
 80063a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a4:	6006      	str	r6, [r0, #0]
 80063a6:	60c6      	str	r6, [r0, #12]
 80063a8:	69e6      	ldr	r6, [r4, #28]
 80063aa:	68f3      	ldr	r3, [r6, #12]
 80063ac:	b183      	cbz	r3, 80063d0 <_Balloc+0x50>
 80063ae:	69e3      	ldr	r3, [r4, #28]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063b6:	b9b8      	cbnz	r0, 80063e8 <_Balloc+0x68>
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f605 	lsl.w	r6, r1, r5
 80063be:	1d72      	adds	r2, r6, #5
 80063c0:	0092      	lsls	r2, r2, #2
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 ff78 	bl	80072b8 <_calloc_r>
 80063c8:	b160      	cbz	r0, 80063e4 <_Balloc+0x64>
 80063ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ce:	e00e      	b.n	80063ee <_Balloc+0x6e>
 80063d0:	2221      	movs	r2, #33	@ 0x21
 80063d2:	2104      	movs	r1, #4
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 ff6f 	bl	80072b8 <_calloc_r>
 80063da:	69e3      	ldr	r3, [r4, #28]
 80063dc:	60f0      	str	r0, [r6, #12]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e4      	bne.n	80063ae <_Balloc+0x2e>
 80063e4:	2000      	movs	r0, #0
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	6802      	ldr	r2, [r0, #0]
 80063ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ee:	2300      	movs	r3, #0
 80063f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063f4:	e7f7      	b.n	80063e6 <_Balloc+0x66>
 80063f6:	bf00      	nop
 80063f8:	080097f5 	.word	0x080097f5
 80063fc:	08009875 	.word	0x08009875

08006400 <_Bfree>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	69c6      	ldr	r6, [r0, #28]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b976      	cbnz	r6, 8006428 <_Bfree+0x28>
 800640a:	2010      	movs	r0, #16
 800640c:	f7ff ff02 	bl	8006214 <malloc>
 8006410:	4602      	mov	r2, r0
 8006412:	61e8      	str	r0, [r5, #28]
 8006414:	b920      	cbnz	r0, 8006420 <_Bfree+0x20>
 8006416:	4b09      	ldr	r3, [pc, #36]	@ (800643c <_Bfree+0x3c>)
 8006418:	4809      	ldr	r0, [pc, #36]	@ (8006440 <_Bfree+0x40>)
 800641a:	218f      	movs	r1, #143	@ 0x8f
 800641c:	f000 ff2e 	bl	800727c <__assert_func>
 8006420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006424:	6006      	str	r6, [r0, #0]
 8006426:	60c6      	str	r6, [r0, #12]
 8006428:	b13c      	cbz	r4, 800643a <_Bfree+0x3a>
 800642a:	69eb      	ldr	r3, [r5, #28]
 800642c:	6862      	ldr	r2, [r4, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006434:	6021      	str	r1, [r4, #0]
 8006436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	080097f5 	.word	0x080097f5
 8006440:	08009875 	.word	0x08009875

08006444 <__multadd>:
 8006444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006448:	690d      	ldr	r5, [r1, #16]
 800644a:	4607      	mov	r7, r0
 800644c:	460c      	mov	r4, r1
 800644e:	461e      	mov	r6, r3
 8006450:	f101 0c14 	add.w	ip, r1, #20
 8006454:	2000      	movs	r0, #0
 8006456:	f8dc 3000 	ldr.w	r3, [ip]
 800645a:	b299      	uxth	r1, r3
 800645c:	fb02 6101 	mla	r1, r2, r1, r6
 8006460:	0c1e      	lsrs	r6, r3, #16
 8006462:	0c0b      	lsrs	r3, r1, #16
 8006464:	fb02 3306 	mla	r3, r2, r6, r3
 8006468:	b289      	uxth	r1, r1
 800646a:	3001      	adds	r0, #1
 800646c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006470:	4285      	cmp	r5, r0
 8006472:	f84c 1b04 	str.w	r1, [ip], #4
 8006476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800647a:	dcec      	bgt.n	8006456 <__multadd+0x12>
 800647c:	b30e      	cbz	r6, 80064c2 <__multadd+0x7e>
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	42ab      	cmp	r3, r5
 8006482:	dc19      	bgt.n	80064b8 <__multadd+0x74>
 8006484:	6861      	ldr	r1, [r4, #4]
 8006486:	4638      	mov	r0, r7
 8006488:	3101      	adds	r1, #1
 800648a:	f7ff ff79 	bl	8006380 <_Balloc>
 800648e:	4680      	mov	r8, r0
 8006490:	b928      	cbnz	r0, 800649e <__multadd+0x5a>
 8006492:	4602      	mov	r2, r0
 8006494:	4b0c      	ldr	r3, [pc, #48]	@ (80064c8 <__multadd+0x84>)
 8006496:	480d      	ldr	r0, [pc, #52]	@ (80064cc <__multadd+0x88>)
 8006498:	21ba      	movs	r1, #186	@ 0xba
 800649a:	f000 feef 	bl	800727c <__assert_func>
 800649e:	6922      	ldr	r2, [r4, #16]
 80064a0:	3202      	adds	r2, #2
 80064a2:	f104 010c 	add.w	r1, r4, #12
 80064a6:	0092      	lsls	r2, r2, #2
 80064a8:	300c      	adds	r0, #12
 80064aa:	f7ff f802 	bl	80054b2 <memcpy>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff ffa5 	bl	8006400 <_Bfree>
 80064b6:	4644      	mov	r4, r8
 80064b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064bc:	3501      	adds	r5, #1
 80064be:	615e      	str	r6, [r3, #20]
 80064c0:	6125      	str	r5, [r4, #16]
 80064c2:	4620      	mov	r0, r4
 80064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c8:	08009864 	.word	0x08009864
 80064cc:	08009875 	.word	0x08009875

080064d0 <__hi0bits>:
 80064d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064d4:	4603      	mov	r3, r0
 80064d6:	bf36      	itet	cc
 80064d8:	0403      	lslcc	r3, r0, #16
 80064da:	2000      	movcs	r0, #0
 80064dc:	2010      	movcc	r0, #16
 80064de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064e2:	bf3c      	itt	cc
 80064e4:	021b      	lslcc	r3, r3, #8
 80064e6:	3008      	addcc	r0, #8
 80064e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ec:	bf3c      	itt	cc
 80064ee:	011b      	lslcc	r3, r3, #4
 80064f0:	3004      	addcc	r0, #4
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f6:	bf3c      	itt	cc
 80064f8:	009b      	lslcc	r3, r3, #2
 80064fa:	3002      	addcc	r0, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	db05      	blt.n	800650c <__hi0bits+0x3c>
 8006500:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006504:	f100 0001 	add.w	r0, r0, #1
 8006508:	bf08      	it	eq
 800650a:	2020      	moveq	r0, #32
 800650c:	4770      	bx	lr

0800650e <__lo0bits>:
 800650e:	6803      	ldr	r3, [r0, #0]
 8006510:	4602      	mov	r2, r0
 8006512:	f013 0007 	ands.w	r0, r3, #7
 8006516:	d00b      	beq.n	8006530 <__lo0bits+0x22>
 8006518:	07d9      	lsls	r1, r3, #31
 800651a:	d421      	bmi.n	8006560 <__lo0bits+0x52>
 800651c:	0798      	lsls	r0, r3, #30
 800651e:	bf49      	itett	mi
 8006520:	085b      	lsrmi	r3, r3, #1
 8006522:	089b      	lsrpl	r3, r3, #2
 8006524:	2001      	movmi	r0, #1
 8006526:	6013      	strmi	r3, [r2, #0]
 8006528:	bf5c      	itt	pl
 800652a:	6013      	strpl	r3, [r2, #0]
 800652c:	2002      	movpl	r0, #2
 800652e:	4770      	bx	lr
 8006530:	b299      	uxth	r1, r3
 8006532:	b909      	cbnz	r1, 8006538 <__lo0bits+0x2a>
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	2010      	movs	r0, #16
 8006538:	b2d9      	uxtb	r1, r3
 800653a:	b909      	cbnz	r1, 8006540 <__lo0bits+0x32>
 800653c:	3008      	adds	r0, #8
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	0719      	lsls	r1, r3, #28
 8006542:	bf04      	itt	eq
 8006544:	091b      	lsreq	r3, r3, #4
 8006546:	3004      	addeq	r0, #4
 8006548:	0799      	lsls	r1, r3, #30
 800654a:	bf04      	itt	eq
 800654c:	089b      	lsreq	r3, r3, #2
 800654e:	3002      	addeq	r0, #2
 8006550:	07d9      	lsls	r1, r3, #31
 8006552:	d403      	bmi.n	800655c <__lo0bits+0x4e>
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	f100 0001 	add.w	r0, r0, #1
 800655a:	d003      	beq.n	8006564 <__lo0bits+0x56>
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	4770      	bx	lr
 8006560:	2000      	movs	r0, #0
 8006562:	4770      	bx	lr
 8006564:	2020      	movs	r0, #32
 8006566:	4770      	bx	lr

08006568 <__i2b>:
 8006568:	b510      	push	{r4, lr}
 800656a:	460c      	mov	r4, r1
 800656c:	2101      	movs	r1, #1
 800656e:	f7ff ff07 	bl	8006380 <_Balloc>
 8006572:	4602      	mov	r2, r0
 8006574:	b928      	cbnz	r0, 8006582 <__i2b+0x1a>
 8006576:	4b05      	ldr	r3, [pc, #20]	@ (800658c <__i2b+0x24>)
 8006578:	4805      	ldr	r0, [pc, #20]	@ (8006590 <__i2b+0x28>)
 800657a:	f240 1145 	movw	r1, #325	@ 0x145
 800657e:	f000 fe7d 	bl	800727c <__assert_func>
 8006582:	2301      	movs	r3, #1
 8006584:	6144      	str	r4, [r0, #20]
 8006586:	6103      	str	r3, [r0, #16]
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	08009864 	.word	0x08009864
 8006590:	08009875 	.word	0x08009875

08006594 <__multiply>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	4617      	mov	r7, r2
 800659a:	690a      	ldr	r2, [r1, #16]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	bfa8      	it	ge
 80065a2:	463b      	movge	r3, r7
 80065a4:	4689      	mov	r9, r1
 80065a6:	bfa4      	itt	ge
 80065a8:	460f      	movge	r7, r1
 80065aa:	4699      	movge	r9, r3
 80065ac:	693d      	ldr	r5, [r7, #16]
 80065ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	eb05 060a 	add.w	r6, r5, sl
 80065ba:	42b3      	cmp	r3, r6
 80065bc:	b085      	sub	sp, #20
 80065be:	bfb8      	it	lt
 80065c0:	3101      	addlt	r1, #1
 80065c2:	f7ff fedd 	bl	8006380 <_Balloc>
 80065c6:	b930      	cbnz	r0, 80065d6 <__multiply+0x42>
 80065c8:	4602      	mov	r2, r0
 80065ca:	4b41      	ldr	r3, [pc, #260]	@ (80066d0 <__multiply+0x13c>)
 80065cc:	4841      	ldr	r0, [pc, #260]	@ (80066d4 <__multiply+0x140>)
 80065ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065d2:	f000 fe53 	bl	800727c <__assert_func>
 80065d6:	f100 0414 	add.w	r4, r0, #20
 80065da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80065de:	4623      	mov	r3, r4
 80065e0:	2200      	movs	r2, #0
 80065e2:	4573      	cmp	r3, lr
 80065e4:	d320      	bcc.n	8006628 <__multiply+0x94>
 80065e6:	f107 0814 	add.w	r8, r7, #20
 80065ea:	f109 0114 	add.w	r1, r9, #20
 80065ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80065f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	1beb      	subs	r3, r5, r7
 80065fa:	3b15      	subs	r3, #21
 80065fc:	f023 0303 	bic.w	r3, r3, #3
 8006600:	3304      	adds	r3, #4
 8006602:	3715      	adds	r7, #21
 8006604:	42bd      	cmp	r5, r7
 8006606:	bf38      	it	cc
 8006608:	2304      	movcc	r3, #4
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	9103      	str	r1, [sp, #12]
 8006610:	428b      	cmp	r3, r1
 8006612:	d80c      	bhi.n	800662e <__multiply+0x9a>
 8006614:	2e00      	cmp	r6, #0
 8006616:	dd03      	ble.n	8006620 <__multiply+0x8c>
 8006618:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800661c:	2b00      	cmp	r3, #0
 800661e:	d055      	beq.n	80066cc <__multiply+0x138>
 8006620:	6106      	str	r6, [r0, #16]
 8006622:	b005      	add	sp, #20
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	f843 2b04 	str.w	r2, [r3], #4
 800662c:	e7d9      	b.n	80065e2 <__multiply+0x4e>
 800662e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006632:	f1ba 0f00 	cmp.w	sl, #0
 8006636:	d01f      	beq.n	8006678 <__multiply+0xe4>
 8006638:	46c4      	mov	ip, r8
 800663a:	46a1      	mov	r9, r4
 800663c:	2700      	movs	r7, #0
 800663e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006642:	f8d9 3000 	ldr.w	r3, [r9]
 8006646:	fa1f fb82 	uxth.w	fp, r2
 800664a:	b29b      	uxth	r3, r3
 800664c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006650:	443b      	add	r3, r7
 8006652:	f8d9 7000 	ldr.w	r7, [r9]
 8006656:	0c12      	lsrs	r2, r2, #16
 8006658:	0c3f      	lsrs	r7, r7, #16
 800665a:	fb0a 7202 	mla	r2, sl, r2, r7
 800665e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006668:	4565      	cmp	r5, ip
 800666a:	f849 3b04 	str.w	r3, [r9], #4
 800666e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006672:	d8e4      	bhi.n	800663e <__multiply+0xaa>
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	50e7      	str	r7, [r4, r3]
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800667e:	3104      	adds	r1, #4
 8006680:	f1b9 0f00 	cmp.w	r9, #0
 8006684:	d020      	beq.n	80066c8 <__multiply+0x134>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	4647      	mov	r7, r8
 800668a:	46a4      	mov	ip, r4
 800668c:	f04f 0a00 	mov.w	sl, #0
 8006690:	f8b7 b000 	ldrh.w	fp, [r7]
 8006694:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006698:	fb09 220b 	mla	r2, r9, fp, r2
 800669c:	4452      	add	r2, sl
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a4:	f84c 3b04 	str.w	r3, [ip], #4
 80066a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80066ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80066b4:	fb09 330a 	mla	r3, r9, sl, r3
 80066b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80066bc:	42bd      	cmp	r5, r7
 80066be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066c2:	d8e5      	bhi.n	8006690 <__multiply+0xfc>
 80066c4:	9a01      	ldr	r2, [sp, #4]
 80066c6:	50a3      	str	r3, [r4, r2]
 80066c8:	3404      	adds	r4, #4
 80066ca:	e79f      	b.n	800660c <__multiply+0x78>
 80066cc:	3e01      	subs	r6, #1
 80066ce:	e7a1      	b.n	8006614 <__multiply+0x80>
 80066d0:	08009864 	.word	0x08009864
 80066d4:	08009875 	.word	0x08009875

080066d8 <__pow5mult>:
 80066d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066dc:	4615      	mov	r5, r2
 80066de:	f012 0203 	ands.w	r2, r2, #3
 80066e2:	4607      	mov	r7, r0
 80066e4:	460e      	mov	r6, r1
 80066e6:	d007      	beq.n	80066f8 <__pow5mult+0x20>
 80066e8:	4c25      	ldr	r4, [pc, #148]	@ (8006780 <__pow5mult+0xa8>)
 80066ea:	3a01      	subs	r2, #1
 80066ec:	2300      	movs	r3, #0
 80066ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066f2:	f7ff fea7 	bl	8006444 <__multadd>
 80066f6:	4606      	mov	r6, r0
 80066f8:	10ad      	asrs	r5, r5, #2
 80066fa:	d03d      	beq.n	8006778 <__pow5mult+0xa0>
 80066fc:	69fc      	ldr	r4, [r7, #28]
 80066fe:	b97c      	cbnz	r4, 8006720 <__pow5mult+0x48>
 8006700:	2010      	movs	r0, #16
 8006702:	f7ff fd87 	bl	8006214 <malloc>
 8006706:	4602      	mov	r2, r0
 8006708:	61f8      	str	r0, [r7, #28]
 800670a:	b928      	cbnz	r0, 8006718 <__pow5mult+0x40>
 800670c:	4b1d      	ldr	r3, [pc, #116]	@ (8006784 <__pow5mult+0xac>)
 800670e:	481e      	ldr	r0, [pc, #120]	@ (8006788 <__pow5mult+0xb0>)
 8006710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006714:	f000 fdb2 	bl	800727c <__assert_func>
 8006718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800671c:	6004      	str	r4, [r0, #0]
 800671e:	60c4      	str	r4, [r0, #12]
 8006720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006728:	b94c      	cbnz	r4, 800673e <__pow5mult+0x66>
 800672a:	f240 2171 	movw	r1, #625	@ 0x271
 800672e:	4638      	mov	r0, r7
 8006730:	f7ff ff1a 	bl	8006568 <__i2b>
 8006734:	2300      	movs	r3, #0
 8006736:	f8c8 0008 	str.w	r0, [r8, #8]
 800673a:	4604      	mov	r4, r0
 800673c:	6003      	str	r3, [r0, #0]
 800673e:	f04f 0900 	mov.w	r9, #0
 8006742:	07eb      	lsls	r3, r5, #31
 8006744:	d50a      	bpl.n	800675c <__pow5mult+0x84>
 8006746:	4631      	mov	r1, r6
 8006748:	4622      	mov	r2, r4
 800674a:	4638      	mov	r0, r7
 800674c:	f7ff ff22 	bl	8006594 <__multiply>
 8006750:	4631      	mov	r1, r6
 8006752:	4680      	mov	r8, r0
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff fe53 	bl	8006400 <_Bfree>
 800675a:	4646      	mov	r6, r8
 800675c:	106d      	asrs	r5, r5, #1
 800675e:	d00b      	beq.n	8006778 <__pow5mult+0xa0>
 8006760:	6820      	ldr	r0, [r4, #0]
 8006762:	b938      	cbnz	r0, 8006774 <__pow5mult+0x9c>
 8006764:	4622      	mov	r2, r4
 8006766:	4621      	mov	r1, r4
 8006768:	4638      	mov	r0, r7
 800676a:	f7ff ff13 	bl	8006594 <__multiply>
 800676e:	6020      	str	r0, [r4, #0]
 8006770:	f8c0 9000 	str.w	r9, [r0]
 8006774:	4604      	mov	r4, r0
 8006776:	e7e4      	b.n	8006742 <__pow5mult+0x6a>
 8006778:	4630      	mov	r0, r6
 800677a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677e:	bf00      	nop
 8006780:	08009928 	.word	0x08009928
 8006784:	080097f5 	.word	0x080097f5
 8006788:	08009875 	.word	0x08009875

0800678c <__lshift>:
 800678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006790:	460c      	mov	r4, r1
 8006792:	6849      	ldr	r1, [r1, #4]
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800679a:	68a3      	ldr	r3, [r4, #8]
 800679c:	4607      	mov	r7, r0
 800679e:	4691      	mov	r9, r2
 80067a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067a4:	f108 0601 	add.w	r6, r8, #1
 80067a8:	42b3      	cmp	r3, r6
 80067aa:	db0b      	blt.n	80067c4 <__lshift+0x38>
 80067ac:	4638      	mov	r0, r7
 80067ae:	f7ff fde7 	bl	8006380 <_Balloc>
 80067b2:	4605      	mov	r5, r0
 80067b4:	b948      	cbnz	r0, 80067ca <__lshift+0x3e>
 80067b6:	4602      	mov	r2, r0
 80067b8:	4b28      	ldr	r3, [pc, #160]	@ (800685c <__lshift+0xd0>)
 80067ba:	4829      	ldr	r0, [pc, #164]	@ (8006860 <__lshift+0xd4>)
 80067bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067c0:	f000 fd5c 	bl	800727c <__assert_func>
 80067c4:	3101      	adds	r1, #1
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	e7ee      	b.n	80067a8 <__lshift+0x1c>
 80067ca:	2300      	movs	r3, #0
 80067cc:	f100 0114 	add.w	r1, r0, #20
 80067d0:	f100 0210 	add.w	r2, r0, #16
 80067d4:	4618      	mov	r0, r3
 80067d6:	4553      	cmp	r3, sl
 80067d8:	db33      	blt.n	8006842 <__lshift+0xb6>
 80067da:	6920      	ldr	r0, [r4, #16]
 80067dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067e0:	f104 0314 	add.w	r3, r4, #20
 80067e4:	f019 091f 	ands.w	r9, r9, #31
 80067e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067f0:	d02b      	beq.n	800684a <__lshift+0xbe>
 80067f2:	f1c9 0e20 	rsb	lr, r9, #32
 80067f6:	468a      	mov	sl, r1
 80067f8:	2200      	movs	r2, #0
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006800:	4310      	orrs	r0, r2
 8006802:	f84a 0b04 	str.w	r0, [sl], #4
 8006806:	f853 2b04 	ldr.w	r2, [r3], #4
 800680a:	459c      	cmp	ip, r3
 800680c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006810:	d8f3      	bhi.n	80067fa <__lshift+0x6e>
 8006812:	ebac 0304 	sub.w	r3, ip, r4
 8006816:	3b15      	subs	r3, #21
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	3304      	adds	r3, #4
 800681e:	f104 0015 	add.w	r0, r4, #21
 8006822:	4560      	cmp	r0, ip
 8006824:	bf88      	it	hi
 8006826:	2304      	movhi	r3, #4
 8006828:	50ca      	str	r2, [r1, r3]
 800682a:	b10a      	cbz	r2, 8006830 <__lshift+0xa4>
 800682c:	f108 0602 	add.w	r6, r8, #2
 8006830:	3e01      	subs	r6, #1
 8006832:	4638      	mov	r0, r7
 8006834:	612e      	str	r6, [r5, #16]
 8006836:	4621      	mov	r1, r4
 8006838:	f7ff fde2 	bl	8006400 <_Bfree>
 800683c:	4628      	mov	r0, r5
 800683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006842:	f842 0f04 	str.w	r0, [r2, #4]!
 8006846:	3301      	adds	r3, #1
 8006848:	e7c5      	b.n	80067d6 <__lshift+0x4a>
 800684a:	3904      	subs	r1, #4
 800684c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006850:	f841 2f04 	str.w	r2, [r1, #4]!
 8006854:	459c      	cmp	ip, r3
 8006856:	d8f9      	bhi.n	800684c <__lshift+0xc0>
 8006858:	e7ea      	b.n	8006830 <__lshift+0xa4>
 800685a:	bf00      	nop
 800685c:	08009864 	.word	0x08009864
 8006860:	08009875 	.word	0x08009875

08006864 <__mcmp>:
 8006864:	690a      	ldr	r2, [r1, #16]
 8006866:	4603      	mov	r3, r0
 8006868:	6900      	ldr	r0, [r0, #16]
 800686a:	1a80      	subs	r0, r0, r2
 800686c:	b530      	push	{r4, r5, lr}
 800686e:	d10e      	bne.n	800688e <__mcmp+0x2a>
 8006870:	3314      	adds	r3, #20
 8006872:	3114      	adds	r1, #20
 8006874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800687c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006884:	4295      	cmp	r5, r2
 8006886:	d003      	beq.n	8006890 <__mcmp+0x2c>
 8006888:	d205      	bcs.n	8006896 <__mcmp+0x32>
 800688a:	f04f 30ff 	mov.w	r0, #4294967295
 800688e:	bd30      	pop	{r4, r5, pc}
 8006890:	42a3      	cmp	r3, r4
 8006892:	d3f3      	bcc.n	800687c <__mcmp+0x18>
 8006894:	e7fb      	b.n	800688e <__mcmp+0x2a>
 8006896:	2001      	movs	r0, #1
 8006898:	e7f9      	b.n	800688e <__mcmp+0x2a>
	...

0800689c <__mdiff>:
 800689c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	4689      	mov	r9, r1
 80068a2:	4606      	mov	r6, r0
 80068a4:	4611      	mov	r1, r2
 80068a6:	4648      	mov	r0, r9
 80068a8:	4614      	mov	r4, r2
 80068aa:	f7ff ffdb 	bl	8006864 <__mcmp>
 80068ae:	1e05      	subs	r5, r0, #0
 80068b0:	d112      	bne.n	80068d8 <__mdiff+0x3c>
 80068b2:	4629      	mov	r1, r5
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff fd63 	bl	8006380 <_Balloc>
 80068ba:	4602      	mov	r2, r0
 80068bc:	b928      	cbnz	r0, 80068ca <__mdiff+0x2e>
 80068be:	4b3f      	ldr	r3, [pc, #252]	@ (80069bc <__mdiff+0x120>)
 80068c0:	f240 2137 	movw	r1, #567	@ 0x237
 80068c4:	483e      	ldr	r0, [pc, #248]	@ (80069c0 <__mdiff+0x124>)
 80068c6:	f000 fcd9 	bl	800727c <__assert_func>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068d0:	4610      	mov	r0, r2
 80068d2:	b003      	add	sp, #12
 80068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d8:	bfbc      	itt	lt
 80068da:	464b      	movlt	r3, r9
 80068dc:	46a1      	movlt	r9, r4
 80068de:	4630      	mov	r0, r6
 80068e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80068e4:	bfba      	itte	lt
 80068e6:	461c      	movlt	r4, r3
 80068e8:	2501      	movlt	r5, #1
 80068ea:	2500      	movge	r5, #0
 80068ec:	f7ff fd48 	bl	8006380 <_Balloc>
 80068f0:	4602      	mov	r2, r0
 80068f2:	b918      	cbnz	r0, 80068fc <__mdiff+0x60>
 80068f4:	4b31      	ldr	r3, [pc, #196]	@ (80069bc <__mdiff+0x120>)
 80068f6:	f240 2145 	movw	r1, #581	@ 0x245
 80068fa:	e7e3      	b.n	80068c4 <__mdiff+0x28>
 80068fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006900:	6926      	ldr	r6, [r4, #16]
 8006902:	60c5      	str	r5, [r0, #12]
 8006904:	f109 0310 	add.w	r3, r9, #16
 8006908:	f109 0514 	add.w	r5, r9, #20
 800690c:	f104 0e14 	add.w	lr, r4, #20
 8006910:	f100 0b14 	add.w	fp, r0, #20
 8006914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	46d9      	mov	r9, fp
 8006920:	f04f 0c00 	mov.w	ip, #0
 8006924:	9b01      	ldr	r3, [sp, #4]
 8006926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800692a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	fa1f f38a 	uxth.w	r3, sl
 8006934:	4619      	mov	r1, r3
 8006936:	b283      	uxth	r3, r0
 8006938:	1acb      	subs	r3, r1, r3
 800693a:	0c00      	lsrs	r0, r0, #16
 800693c:	4463      	add	r3, ip
 800693e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006946:	b29b      	uxth	r3, r3
 8006948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800694c:	4576      	cmp	r6, lr
 800694e:	f849 3b04 	str.w	r3, [r9], #4
 8006952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006956:	d8e5      	bhi.n	8006924 <__mdiff+0x88>
 8006958:	1b33      	subs	r3, r6, r4
 800695a:	3b15      	subs	r3, #21
 800695c:	f023 0303 	bic.w	r3, r3, #3
 8006960:	3415      	adds	r4, #21
 8006962:	3304      	adds	r3, #4
 8006964:	42a6      	cmp	r6, r4
 8006966:	bf38      	it	cc
 8006968:	2304      	movcc	r3, #4
 800696a:	441d      	add	r5, r3
 800696c:	445b      	add	r3, fp
 800696e:	461e      	mov	r6, r3
 8006970:	462c      	mov	r4, r5
 8006972:	4544      	cmp	r4, r8
 8006974:	d30e      	bcc.n	8006994 <__mdiff+0xf8>
 8006976:	f108 0103 	add.w	r1, r8, #3
 800697a:	1b49      	subs	r1, r1, r5
 800697c:	f021 0103 	bic.w	r1, r1, #3
 8006980:	3d03      	subs	r5, #3
 8006982:	45a8      	cmp	r8, r5
 8006984:	bf38      	it	cc
 8006986:	2100      	movcc	r1, #0
 8006988:	440b      	add	r3, r1
 800698a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800698e:	b191      	cbz	r1, 80069b6 <__mdiff+0x11a>
 8006990:	6117      	str	r7, [r2, #16]
 8006992:	e79d      	b.n	80068d0 <__mdiff+0x34>
 8006994:	f854 1b04 	ldr.w	r1, [r4], #4
 8006998:	46e6      	mov	lr, ip
 800699a:	0c08      	lsrs	r0, r1, #16
 800699c:	fa1c fc81 	uxtah	ip, ip, r1
 80069a0:	4471      	add	r1, lr
 80069a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069a6:	b289      	uxth	r1, r1
 80069a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069ac:	f846 1b04 	str.w	r1, [r6], #4
 80069b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069b4:	e7dd      	b.n	8006972 <__mdiff+0xd6>
 80069b6:	3f01      	subs	r7, #1
 80069b8:	e7e7      	b.n	800698a <__mdiff+0xee>
 80069ba:	bf00      	nop
 80069bc:	08009864 	.word	0x08009864
 80069c0:	08009875 	.word	0x08009875

080069c4 <__d2b>:
 80069c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069c8:	460f      	mov	r7, r1
 80069ca:	2101      	movs	r1, #1
 80069cc:	ec59 8b10 	vmov	r8, r9, d0
 80069d0:	4616      	mov	r6, r2
 80069d2:	f7ff fcd5 	bl	8006380 <_Balloc>
 80069d6:	4604      	mov	r4, r0
 80069d8:	b930      	cbnz	r0, 80069e8 <__d2b+0x24>
 80069da:	4602      	mov	r2, r0
 80069dc:	4b23      	ldr	r3, [pc, #140]	@ (8006a6c <__d2b+0xa8>)
 80069de:	4824      	ldr	r0, [pc, #144]	@ (8006a70 <__d2b+0xac>)
 80069e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80069e4:	f000 fc4a 	bl	800727c <__assert_func>
 80069e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069f0:	b10d      	cbz	r5, 80069f6 <__d2b+0x32>
 80069f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	f1b8 0300 	subs.w	r3, r8, #0
 80069fc:	d023      	beq.n	8006a46 <__d2b+0x82>
 80069fe:	4668      	mov	r0, sp
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	f7ff fd84 	bl	800650e <__lo0bits>
 8006a06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a0a:	b1d0      	cbz	r0, 8006a42 <__d2b+0x7e>
 8006a0c:	f1c0 0320 	rsb	r3, r0, #32
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	430b      	orrs	r3, r1
 8006a16:	40c2      	lsrs	r2, r0
 8006a18:	6163      	str	r3, [r4, #20]
 8006a1a:	9201      	str	r2, [sp, #4]
 8006a1c:	9b01      	ldr	r3, [sp, #4]
 8006a1e:	61a3      	str	r3, [r4, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bf0c      	ite	eq
 8006a24:	2201      	moveq	r2, #1
 8006a26:	2202      	movne	r2, #2
 8006a28:	6122      	str	r2, [r4, #16]
 8006a2a:	b1a5      	cbz	r5, 8006a56 <__d2b+0x92>
 8006a2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a30:	4405      	add	r5, r0
 8006a32:	603d      	str	r5, [r7, #0]
 8006a34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a38:	6030      	str	r0, [r6, #0]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	b003      	add	sp, #12
 8006a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a42:	6161      	str	r1, [r4, #20]
 8006a44:	e7ea      	b.n	8006a1c <__d2b+0x58>
 8006a46:	a801      	add	r0, sp, #4
 8006a48:	f7ff fd61 	bl	800650e <__lo0bits>
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	6163      	str	r3, [r4, #20]
 8006a50:	3020      	adds	r0, #32
 8006a52:	2201      	movs	r2, #1
 8006a54:	e7e8      	b.n	8006a28 <__d2b+0x64>
 8006a56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a5e:	6038      	str	r0, [r7, #0]
 8006a60:	6918      	ldr	r0, [r3, #16]
 8006a62:	f7ff fd35 	bl	80064d0 <__hi0bits>
 8006a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a6a:	e7e5      	b.n	8006a38 <__d2b+0x74>
 8006a6c:	08009864 	.word	0x08009864
 8006a70:	08009875 	.word	0x08009875

08006a74 <__ssputs_r>:
 8006a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	688e      	ldr	r6, [r1, #8]
 8006a7a:	461f      	mov	r7, r3
 8006a7c:	42be      	cmp	r6, r7
 8006a7e:	680b      	ldr	r3, [r1, #0]
 8006a80:	4682      	mov	sl, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	4690      	mov	r8, r2
 8006a86:	d82d      	bhi.n	8006ae4 <__ssputs_r+0x70>
 8006a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a90:	d026      	beq.n	8006ae0 <__ssputs_r+0x6c>
 8006a92:	6965      	ldr	r5, [r4, #20]
 8006a94:	6909      	ldr	r1, [r1, #16]
 8006a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a9a:	eba3 0901 	sub.w	r9, r3, r1
 8006a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aa2:	1c7b      	adds	r3, r7, #1
 8006aa4:	444b      	add	r3, r9
 8006aa6:	106d      	asrs	r5, r5, #1
 8006aa8:	429d      	cmp	r5, r3
 8006aaa:	bf38      	it	cc
 8006aac:	461d      	movcc	r5, r3
 8006aae:	0553      	lsls	r3, r2, #21
 8006ab0:	d527      	bpl.n	8006b02 <__ssputs_r+0x8e>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7ff fbd8 	bl	8006268 <_malloc_r>
 8006ab8:	4606      	mov	r6, r0
 8006aba:	b360      	cbz	r0, 8006b16 <__ssputs_r+0xa2>
 8006abc:	6921      	ldr	r1, [r4, #16]
 8006abe:	464a      	mov	r2, r9
 8006ac0:	f7fe fcf7 	bl	80054b2 <memcpy>
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	6126      	str	r6, [r4, #16]
 8006ad2:	6165      	str	r5, [r4, #20]
 8006ad4:	444e      	add	r6, r9
 8006ad6:	eba5 0509 	sub.w	r5, r5, r9
 8006ada:	6026      	str	r6, [r4, #0]
 8006adc:	60a5      	str	r5, [r4, #8]
 8006ade:	463e      	mov	r6, r7
 8006ae0:	42be      	cmp	r6, r7
 8006ae2:	d900      	bls.n	8006ae6 <__ssputs_r+0x72>
 8006ae4:	463e      	mov	r6, r7
 8006ae6:	6820      	ldr	r0, [r4, #0]
 8006ae8:	4632      	mov	r2, r6
 8006aea:	4641      	mov	r1, r8
 8006aec:	f000 fb9c 	bl	8007228 <memmove>
 8006af0:	68a3      	ldr	r3, [r4, #8]
 8006af2:	1b9b      	subs	r3, r3, r6
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	4433      	add	r3, r6
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	2000      	movs	r0, #0
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	462a      	mov	r2, r5
 8006b04:	f000 fbfe 	bl	8007304 <_realloc_r>
 8006b08:	4606      	mov	r6, r0
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d1e0      	bne.n	8006ad0 <__ssputs_r+0x5c>
 8006b0e:	6921      	ldr	r1, [r4, #16]
 8006b10:	4650      	mov	r0, sl
 8006b12:	f7ff fb35 	bl	8006180 <_free_r>
 8006b16:	230c      	movs	r3, #12
 8006b18:	f8ca 3000 	str.w	r3, [sl]
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b22:	81a3      	strh	r3, [r4, #12]
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	e7e9      	b.n	8006afe <__ssputs_r+0x8a>
	...

08006b2c <_svfiprintf_r>:
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	4698      	mov	r8, r3
 8006b32:	898b      	ldrh	r3, [r1, #12]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	b09d      	sub	sp, #116	@ 0x74
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	d510      	bpl.n	8006b62 <_svfiprintf_r+0x36>
 8006b40:	690b      	ldr	r3, [r1, #16]
 8006b42:	b973      	cbnz	r3, 8006b62 <_svfiprintf_r+0x36>
 8006b44:	2140      	movs	r1, #64	@ 0x40
 8006b46:	f7ff fb8f 	bl	8006268 <_malloc_r>
 8006b4a:	6028      	str	r0, [r5, #0]
 8006b4c:	6128      	str	r0, [r5, #16]
 8006b4e:	b930      	cbnz	r0, 8006b5e <_svfiprintf_r+0x32>
 8006b50:	230c      	movs	r3, #12
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	b01d      	add	sp, #116	@ 0x74
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	2340      	movs	r3, #64	@ 0x40
 8006b60:	616b      	str	r3, [r5, #20]
 8006b62:	2300      	movs	r3, #0
 8006b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b66:	2320      	movs	r3, #32
 8006b68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b70:	2330      	movs	r3, #48	@ 0x30
 8006b72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d10 <_svfiprintf_r+0x1e4>
 8006b76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b7a:	f04f 0901 	mov.w	r9, #1
 8006b7e:	4623      	mov	r3, r4
 8006b80:	469a      	mov	sl, r3
 8006b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b86:	b10a      	cbz	r2, 8006b8c <_svfiprintf_r+0x60>
 8006b88:	2a25      	cmp	r2, #37	@ 0x25
 8006b8a:	d1f9      	bne.n	8006b80 <_svfiprintf_r+0x54>
 8006b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b90:	d00b      	beq.n	8006baa <_svfiprintf_r+0x7e>
 8006b92:	465b      	mov	r3, fp
 8006b94:	4622      	mov	r2, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f7ff ff6b 	bl	8006a74 <__ssputs_r>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	f000 80a7 	beq.w	8006cf2 <_svfiprintf_r+0x1c6>
 8006ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ba6:	445a      	add	r2, fp
 8006ba8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006baa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 809f 	beq.w	8006cf2 <_svfiprintf_r+0x1c6>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bbe:	f10a 0a01 	add.w	sl, sl, #1
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	9307      	str	r3, [sp, #28]
 8006bc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bca:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bcc:	4654      	mov	r4, sl
 8006bce:	2205      	movs	r2, #5
 8006bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd4:	484e      	ldr	r0, [pc, #312]	@ (8006d10 <_svfiprintf_r+0x1e4>)
 8006bd6:	f7f9 fb0b 	bl	80001f0 <memchr>
 8006bda:	9a04      	ldr	r2, [sp, #16]
 8006bdc:	b9d8      	cbnz	r0, 8006c16 <_svfiprintf_r+0xea>
 8006bde:	06d0      	lsls	r0, r2, #27
 8006be0:	bf44      	itt	mi
 8006be2:	2320      	movmi	r3, #32
 8006be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006be8:	0711      	lsls	r1, r2, #28
 8006bea:	bf44      	itt	mi
 8006bec:	232b      	movmi	r3, #43	@ 0x2b
 8006bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bf8:	d015      	beq.n	8006c26 <_svfiprintf_r+0xfa>
 8006bfa:	9a07      	ldr	r2, [sp, #28]
 8006bfc:	4654      	mov	r4, sl
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f04f 0c0a 	mov.w	ip, #10
 8006c04:	4621      	mov	r1, r4
 8006c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c0a:	3b30      	subs	r3, #48	@ 0x30
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d94b      	bls.n	8006ca8 <_svfiprintf_r+0x17c>
 8006c10:	b1b0      	cbz	r0, 8006c40 <_svfiprintf_r+0x114>
 8006c12:	9207      	str	r2, [sp, #28]
 8006c14:	e014      	b.n	8006c40 <_svfiprintf_r+0x114>
 8006c16:	eba0 0308 	sub.w	r3, r0, r8
 8006c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	9304      	str	r3, [sp, #16]
 8006c22:	46a2      	mov	sl, r4
 8006c24:	e7d2      	b.n	8006bcc <_svfiprintf_r+0xa0>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	1d19      	adds	r1, r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9103      	str	r1, [sp, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfbb      	ittet	lt
 8006c32:	425b      	neglt	r3, r3
 8006c34:	f042 0202 	orrlt.w	r2, r2, #2
 8006c38:	9307      	strge	r3, [sp, #28]
 8006c3a:	9307      	strlt	r3, [sp, #28]
 8006c3c:	bfb8      	it	lt
 8006c3e:	9204      	strlt	r2, [sp, #16]
 8006c40:	7823      	ldrb	r3, [r4, #0]
 8006c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c44:	d10a      	bne.n	8006c5c <_svfiprintf_r+0x130>
 8006c46:	7863      	ldrb	r3, [r4, #1]
 8006c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c4a:	d132      	bne.n	8006cb2 <_svfiprintf_r+0x186>
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	1d1a      	adds	r2, r3, #4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	9203      	str	r2, [sp, #12]
 8006c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c58:	3402      	adds	r4, #2
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d20 <_svfiprintf_r+0x1f4>
 8006c60:	7821      	ldrb	r1, [r4, #0]
 8006c62:	2203      	movs	r2, #3
 8006c64:	4650      	mov	r0, sl
 8006c66:	f7f9 fac3 	bl	80001f0 <memchr>
 8006c6a:	b138      	cbz	r0, 8006c7c <_svfiprintf_r+0x150>
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	eba0 000a 	sub.w	r0, r0, sl
 8006c72:	2240      	movs	r2, #64	@ 0x40
 8006c74:	4082      	lsls	r2, r0
 8006c76:	4313      	orrs	r3, r2
 8006c78:	3401      	adds	r4, #1
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	4824      	ldr	r0, [pc, #144]	@ (8006d14 <_svfiprintf_r+0x1e8>)
 8006c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c86:	2206      	movs	r2, #6
 8006c88:	f7f9 fab2 	bl	80001f0 <memchr>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d036      	beq.n	8006cfe <_svfiprintf_r+0x1d2>
 8006c90:	4b21      	ldr	r3, [pc, #132]	@ (8006d18 <_svfiprintf_r+0x1ec>)
 8006c92:	bb1b      	cbnz	r3, 8006cdc <_svfiprintf_r+0x1b0>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	3307      	adds	r3, #7
 8006c98:	f023 0307 	bic.w	r3, r3, #7
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca2:	4433      	add	r3, r6
 8006ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ca6:	e76a      	b.n	8006b7e <_svfiprintf_r+0x52>
 8006ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cac:	460c      	mov	r4, r1
 8006cae:	2001      	movs	r0, #1
 8006cb0:	e7a8      	b.n	8006c04 <_svfiprintf_r+0xd8>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	3401      	adds	r4, #1
 8006cb6:	9305      	str	r3, [sp, #20]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f04f 0c0a 	mov.w	ip, #10
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc4:	3a30      	subs	r2, #48	@ 0x30
 8006cc6:	2a09      	cmp	r2, #9
 8006cc8:	d903      	bls.n	8006cd2 <_svfiprintf_r+0x1a6>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0c6      	beq.n	8006c5c <_svfiprintf_r+0x130>
 8006cce:	9105      	str	r1, [sp, #20]
 8006cd0:	e7c4      	b.n	8006c5c <_svfiprintf_r+0x130>
 8006cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e7f0      	b.n	8006cbe <_svfiprintf_r+0x192>
 8006cdc:	ab03      	add	r3, sp, #12
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	462a      	mov	r2, r5
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8006d1c <_svfiprintf_r+0x1f0>)
 8006ce4:	a904      	add	r1, sp, #16
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7fd fe60 	bl	80049ac <_printf_float>
 8006cec:	1c42      	adds	r2, r0, #1
 8006cee:	4606      	mov	r6, r0
 8006cf0:	d1d6      	bne.n	8006ca0 <_svfiprintf_r+0x174>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	065b      	lsls	r3, r3, #25
 8006cf6:	f53f af2d 	bmi.w	8006b54 <_svfiprintf_r+0x28>
 8006cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cfc:	e72c      	b.n	8006b58 <_svfiprintf_r+0x2c>
 8006cfe:	ab03      	add	r3, sp, #12
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	462a      	mov	r2, r5
 8006d04:	4b05      	ldr	r3, [pc, #20]	@ (8006d1c <_svfiprintf_r+0x1f0>)
 8006d06:	a904      	add	r1, sp, #16
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f7fe f8e7 	bl	8004edc <_printf_i>
 8006d0e:	e7ed      	b.n	8006cec <_svfiprintf_r+0x1c0>
 8006d10:	080098ce 	.word	0x080098ce
 8006d14:	080098d8 	.word	0x080098d8
 8006d18:	080049ad 	.word	0x080049ad
 8006d1c:	08006a75 	.word	0x08006a75
 8006d20:	080098d4 	.word	0x080098d4

08006d24 <__sfputc_r>:
 8006d24:	6893      	ldr	r3, [r2, #8]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	b410      	push	{r4}
 8006d2c:	6093      	str	r3, [r2, #8]
 8006d2e:	da08      	bge.n	8006d42 <__sfputc_r+0x1e>
 8006d30:	6994      	ldr	r4, [r2, #24]
 8006d32:	42a3      	cmp	r3, r4
 8006d34:	db01      	blt.n	8006d3a <__sfputc_r+0x16>
 8006d36:	290a      	cmp	r1, #10
 8006d38:	d103      	bne.n	8006d42 <__sfputc_r+0x1e>
 8006d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d3e:	f000 b9df 	b.w	8007100 <__swbuf_r>
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	1c58      	adds	r0, r3, #1
 8006d46:	6010      	str	r0, [r2, #0]
 8006d48:	7019      	strb	r1, [r3, #0]
 8006d4a:	4608      	mov	r0, r1
 8006d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <__sfputs_r>:
 8006d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	4614      	mov	r4, r2
 8006d5a:	18d5      	adds	r5, r2, r3
 8006d5c:	42ac      	cmp	r4, r5
 8006d5e:	d101      	bne.n	8006d64 <__sfputs_r+0x12>
 8006d60:	2000      	movs	r0, #0
 8006d62:	e007      	b.n	8006d74 <__sfputs_r+0x22>
 8006d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d68:	463a      	mov	r2, r7
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f7ff ffda 	bl	8006d24 <__sfputc_r>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d1f3      	bne.n	8006d5c <__sfputs_r+0xa>
 8006d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d78 <_vfiprintf_r>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	460d      	mov	r5, r1
 8006d7e:	b09d      	sub	sp, #116	@ 0x74
 8006d80:	4614      	mov	r4, r2
 8006d82:	4698      	mov	r8, r3
 8006d84:	4606      	mov	r6, r0
 8006d86:	b118      	cbz	r0, 8006d90 <_vfiprintf_r+0x18>
 8006d88:	6a03      	ldr	r3, [r0, #32]
 8006d8a:	b90b      	cbnz	r3, 8006d90 <_vfiprintf_r+0x18>
 8006d8c:	f7fe fa50 	bl	8005230 <__sinit>
 8006d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d92:	07d9      	lsls	r1, r3, #31
 8006d94:	d405      	bmi.n	8006da2 <_vfiprintf_r+0x2a>
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	059a      	lsls	r2, r3, #22
 8006d9a:	d402      	bmi.n	8006da2 <_vfiprintf_r+0x2a>
 8006d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d9e:	f7fe fb86 	bl	80054ae <__retarget_lock_acquire_recursive>
 8006da2:	89ab      	ldrh	r3, [r5, #12]
 8006da4:	071b      	lsls	r3, r3, #28
 8006da6:	d501      	bpl.n	8006dac <_vfiprintf_r+0x34>
 8006da8:	692b      	ldr	r3, [r5, #16]
 8006daa:	b99b      	cbnz	r3, 8006dd4 <_vfiprintf_r+0x5c>
 8006dac:	4629      	mov	r1, r5
 8006dae:	4630      	mov	r0, r6
 8006db0:	f000 f9e4 	bl	800717c <__swsetup_r>
 8006db4:	b170      	cbz	r0, 8006dd4 <_vfiprintf_r+0x5c>
 8006db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006db8:	07dc      	lsls	r4, r3, #31
 8006dba:	d504      	bpl.n	8006dc6 <_vfiprintf_r+0x4e>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	b01d      	add	sp, #116	@ 0x74
 8006dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc6:	89ab      	ldrh	r3, [r5, #12]
 8006dc8:	0598      	lsls	r0, r3, #22
 8006dca:	d4f7      	bmi.n	8006dbc <_vfiprintf_r+0x44>
 8006dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dce:	f7fe fb6f 	bl	80054b0 <__retarget_lock_release_recursive>
 8006dd2:	e7f3      	b.n	8006dbc <_vfiprintf_r+0x44>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dd8:	2320      	movs	r3, #32
 8006dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de2:	2330      	movs	r3, #48	@ 0x30
 8006de4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f94 <_vfiprintf_r+0x21c>
 8006de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dec:	f04f 0901 	mov.w	r9, #1
 8006df0:	4623      	mov	r3, r4
 8006df2:	469a      	mov	sl, r3
 8006df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df8:	b10a      	cbz	r2, 8006dfe <_vfiprintf_r+0x86>
 8006dfa:	2a25      	cmp	r2, #37	@ 0x25
 8006dfc:	d1f9      	bne.n	8006df2 <_vfiprintf_r+0x7a>
 8006dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8006e02:	d00b      	beq.n	8006e1c <_vfiprintf_r+0xa4>
 8006e04:	465b      	mov	r3, fp
 8006e06:	4622      	mov	r2, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff ffa1 	bl	8006d52 <__sfputs_r>
 8006e10:	3001      	adds	r0, #1
 8006e12:	f000 80a7 	beq.w	8006f64 <_vfiprintf_r+0x1ec>
 8006e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e18:	445a      	add	r2, fp
 8006e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 809f 	beq.w	8006f64 <_vfiprintf_r+0x1ec>
 8006e26:	2300      	movs	r3, #0
 8006e28:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e30:	f10a 0a01 	add.w	sl, sl, #1
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e3e:	4654      	mov	r4, sl
 8006e40:	2205      	movs	r2, #5
 8006e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e46:	4853      	ldr	r0, [pc, #332]	@ (8006f94 <_vfiprintf_r+0x21c>)
 8006e48:	f7f9 f9d2 	bl	80001f0 <memchr>
 8006e4c:	9a04      	ldr	r2, [sp, #16]
 8006e4e:	b9d8      	cbnz	r0, 8006e88 <_vfiprintf_r+0x110>
 8006e50:	06d1      	lsls	r1, r2, #27
 8006e52:	bf44      	itt	mi
 8006e54:	2320      	movmi	r3, #32
 8006e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e5a:	0713      	lsls	r3, r2, #28
 8006e5c:	bf44      	itt	mi
 8006e5e:	232b      	movmi	r3, #43	@ 0x2b
 8006e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e64:	f89a 3000 	ldrb.w	r3, [sl]
 8006e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e6a:	d015      	beq.n	8006e98 <_vfiprintf_r+0x120>
 8006e6c:	9a07      	ldr	r2, [sp, #28]
 8006e6e:	4654      	mov	r4, sl
 8006e70:	2000      	movs	r0, #0
 8006e72:	f04f 0c0a 	mov.w	ip, #10
 8006e76:	4621      	mov	r1, r4
 8006e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e7c:	3b30      	subs	r3, #48	@ 0x30
 8006e7e:	2b09      	cmp	r3, #9
 8006e80:	d94b      	bls.n	8006f1a <_vfiprintf_r+0x1a2>
 8006e82:	b1b0      	cbz	r0, 8006eb2 <_vfiprintf_r+0x13a>
 8006e84:	9207      	str	r2, [sp, #28]
 8006e86:	e014      	b.n	8006eb2 <_vfiprintf_r+0x13a>
 8006e88:	eba0 0308 	sub.w	r3, r0, r8
 8006e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	9304      	str	r3, [sp, #16]
 8006e94:	46a2      	mov	sl, r4
 8006e96:	e7d2      	b.n	8006e3e <_vfiprintf_r+0xc6>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	1d19      	adds	r1, r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	9103      	str	r1, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bfbb      	ittet	lt
 8006ea4:	425b      	neglt	r3, r3
 8006ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8006eaa:	9307      	strge	r3, [sp, #28]
 8006eac:	9307      	strlt	r3, [sp, #28]
 8006eae:	bfb8      	it	lt
 8006eb0:	9204      	strlt	r2, [sp, #16]
 8006eb2:	7823      	ldrb	r3, [r4, #0]
 8006eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006eb6:	d10a      	bne.n	8006ece <_vfiprintf_r+0x156>
 8006eb8:	7863      	ldrb	r3, [r4, #1]
 8006eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ebc:	d132      	bne.n	8006f24 <_vfiprintf_r+0x1ac>
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	1d1a      	adds	r2, r3, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	9203      	str	r2, [sp, #12]
 8006ec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006eca:	3402      	adds	r4, #2
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fa4 <_vfiprintf_r+0x22c>
 8006ed2:	7821      	ldrb	r1, [r4, #0]
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	f7f9 f98a 	bl	80001f0 <memchr>
 8006edc:	b138      	cbz	r0, 8006eee <_vfiprintf_r+0x176>
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	eba0 000a 	sub.w	r0, r0, sl
 8006ee4:	2240      	movs	r2, #64	@ 0x40
 8006ee6:	4082      	lsls	r2, r0
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	3401      	adds	r4, #1
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef2:	4829      	ldr	r0, [pc, #164]	@ (8006f98 <_vfiprintf_r+0x220>)
 8006ef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ef8:	2206      	movs	r2, #6
 8006efa:	f7f9 f979 	bl	80001f0 <memchr>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d03f      	beq.n	8006f82 <_vfiprintf_r+0x20a>
 8006f02:	4b26      	ldr	r3, [pc, #152]	@ (8006f9c <_vfiprintf_r+0x224>)
 8006f04:	bb1b      	cbnz	r3, 8006f4e <_vfiprintf_r+0x1d6>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	3307      	adds	r3, #7
 8006f0a:	f023 0307 	bic.w	r3, r3, #7
 8006f0e:	3308      	adds	r3, #8
 8006f10:	9303      	str	r3, [sp, #12]
 8006f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f14:	443b      	add	r3, r7
 8006f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f18:	e76a      	b.n	8006df0 <_vfiprintf_r+0x78>
 8006f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f1e:	460c      	mov	r4, r1
 8006f20:	2001      	movs	r0, #1
 8006f22:	e7a8      	b.n	8006e76 <_vfiprintf_r+0xfe>
 8006f24:	2300      	movs	r3, #0
 8006f26:	3401      	adds	r4, #1
 8006f28:	9305      	str	r3, [sp, #20]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	f04f 0c0a 	mov.w	ip, #10
 8006f30:	4620      	mov	r0, r4
 8006f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f36:	3a30      	subs	r2, #48	@ 0x30
 8006f38:	2a09      	cmp	r2, #9
 8006f3a:	d903      	bls.n	8006f44 <_vfiprintf_r+0x1cc>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0c6      	beq.n	8006ece <_vfiprintf_r+0x156>
 8006f40:	9105      	str	r1, [sp, #20]
 8006f42:	e7c4      	b.n	8006ece <_vfiprintf_r+0x156>
 8006f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f48:	4604      	mov	r4, r0
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e7f0      	b.n	8006f30 <_vfiprintf_r+0x1b8>
 8006f4e:	ab03      	add	r3, sp, #12
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	462a      	mov	r2, r5
 8006f54:	4b12      	ldr	r3, [pc, #72]	@ (8006fa0 <_vfiprintf_r+0x228>)
 8006f56:	a904      	add	r1, sp, #16
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f7fd fd27 	bl	80049ac <_printf_float>
 8006f5e:	4607      	mov	r7, r0
 8006f60:	1c78      	adds	r0, r7, #1
 8006f62:	d1d6      	bne.n	8006f12 <_vfiprintf_r+0x19a>
 8006f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	d405      	bmi.n	8006f76 <_vfiprintf_r+0x1fe>
 8006f6a:	89ab      	ldrh	r3, [r5, #12]
 8006f6c:	059a      	lsls	r2, r3, #22
 8006f6e:	d402      	bmi.n	8006f76 <_vfiprintf_r+0x1fe>
 8006f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f72:	f7fe fa9d 	bl	80054b0 <__retarget_lock_release_recursive>
 8006f76:	89ab      	ldrh	r3, [r5, #12]
 8006f78:	065b      	lsls	r3, r3, #25
 8006f7a:	f53f af1f 	bmi.w	8006dbc <_vfiprintf_r+0x44>
 8006f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f80:	e71e      	b.n	8006dc0 <_vfiprintf_r+0x48>
 8006f82:	ab03      	add	r3, sp, #12
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	462a      	mov	r2, r5
 8006f88:	4b05      	ldr	r3, [pc, #20]	@ (8006fa0 <_vfiprintf_r+0x228>)
 8006f8a:	a904      	add	r1, sp, #16
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f7fd ffa5 	bl	8004edc <_printf_i>
 8006f92:	e7e4      	b.n	8006f5e <_vfiprintf_r+0x1e6>
 8006f94:	080098ce 	.word	0x080098ce
 8006f98:	080098d8 	.word	0x080098d8
 8006f9c:	080049ad 	.word	0x080049ad
 8006fa0:	08006d53 	.word	0x08006d53
 8006fa4:	080098d4 	.word	0x080098d4

08006fa8 <__sflush_r>:
 8006fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb0:	0716      	lsls	r6, r2, #28
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	d454      	bmi.n	8007062 <__sflush_r+0xba>
 8006fb8:	684b      	ldr	r3, [r1, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	dc02      	bgt.n	8006fc4 <__sflush_r+0x1c>
 8006fbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dd48      	ble.n	8007056 <__sflush_r+0xae>
 8006fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d045      	beq.n	8007056 <__sflush_r+0xae>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006fd0:	682f      	ldr	r7, [r5, #0]
 8006fd2:	6a21      	ldr	r1, [r4, #32]
 8006fd4:	602b      	str	r3, [r5, #0]
 8006fd6:	d030      	beq.n	800703a <__sflush_r+0x92>
 8006fd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	0759      	lsls	r1, r3, #29
 8006fde:	d505      	bpl.n	8006fec <__sflush_r+0x44>
 8006fe0:	6863      	ldr	r3, [r4, #4]
 8006fe2:	1ad2      	subs	r2, r2, r3
 8006fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fe6:	b10b      	cbz	r3, 8006fec <__sflush_r+0x44>
 8006fe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	2300      	movs	r3, #0
 8006fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ff0:	6a21      	ldr	r1, [r4, #32]
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b0      	blx	r6
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	d106      	bne.n	800700a <__sflush_r+0x62>
 8006ffc:	6829      	ldr	r1, [r5, #0]
 8006ffe:	291d      	cmp	r1, #29
 8007000:	d82b      	bhi.n	800705a <__sflush_r+0xb2>
 8007002:	4a2a      	ldr	r2, [pc, #168]	@ (80070ac <__sflush_r+0x104>)
 8007004:	40ca      	lsrs	r2, r1
 8007006:	07d6      	lsls	r6, r2, #31
 8007008:	d527      	bpl.n	800705a <__sflush_r+0xb2>
 800700a:	2200      	movs	r2, #0
 800700c:	6062      	str	r2, [r4, #4]
 800700e:	04d9      	lsls	r1, r3, #19
 8007010:	6922      	ldr	r2, [r4, #16]
 8007012:	6022      	str	r2, [r4, #0]
 8007014:	d504      	bpl.n	8007020 <__sflush_r+0x78>
 8007016:	1c42      	adds	r2, r0, #1
 8007018:	d101      	bne.n	800701e <__sflush_r+0x76>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	b903      	cbnz	r3, 8007020 <__sflush_r+0x78>
 800701e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007022:	602f      	str	r7, [r5, #0]
 8007024:	b1b9      	cbz	r1, 8007056 <__sflush_r+0xae>
 8007026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800702a:	4299      	cmp	r1, r3
 800702c:	d002      	beq.n	8007034 <__sflush_r+0x8c>
 800702e:	4628      	mov	r0, r5
 8007030:	f7ff f8a6 	bl	8006180 <_free_r>
 8007034:	2300      	movs	r3, #0
 8007036:	6363      	str	r3, [r4, #52]	@ 0x34
 8007038:	e00d      	b.n	8007056 <__sflush_r+0xae>
 800703a:	2301      	movs	r3, #1
 800703c:	4628      	mov	r0, r5
 800703e:	47b0      	blx	r6
 8007040:	4602      	mov	r2, r0
 8007042:	1c50      	adds	r0, r2, #1
 8007044:	d1c9      	bne.n	8006fda <__sflush_r+0x32>
 8007046:	682b      	ldr	r3, [r5, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0c6      	beq.n	8006fda <__sflush_r+0x32>
 800704c:	2b1d      	cmp	r3, #29
 800704e:	d001      	beq.n	8007054 <__sflush_r+0xac>
 8007050:	2b16      	cmp	r3, #22
 8007052:	d11e      	bne.n	8007092 <__sflush_r+0xea>
 8007054:	602f      	str	r7, [r5, #0]
 8007056:	2000      	movs	r0, #0
 8007058:	e022      	b.n	80070a0 <__sflush_r+0xf8>
 800705a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800705e:	b21b      	sxth	r3, r3
 8007060:	e01b      	b.n	800709a <__sflush_r+0xf2>
 8007062:	690f      	ldr	r7, [r1, #16]
 8007064:	2f00      	cmp	r7, #0
 8007066:	d0f6      	beq.n	8007056 <__sflush_r+0xae>
 8007068:	0793      	lsls	r3, r2, #30
 800706a:	680e      	ldr	r6, [r1, #0]
 800706c:	bf08      	it	eq
 800706e:	694b      	ldreq	r3, [r1, #20]
 8007070:	600f      	str	r7, [r1, #0]
 8007072:	bf18      	it	ne
 8007074:	2300      	movne	r3, #0
 8007076:	eba6 0807 	sub.w	r8, r6, r7
 800707a:	608b      	str	r3, [r1, #8]
 800707c:	f1b8 0f00 	cmp.w	r8, #0
 8007080:	dde9      	ble.n	8007056 <__sflush_r+0xae>
 8007082:	6a21      	ldr	r1, [r4, #32]
 8007084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007086:	4643      	mov	r3, r8
 8007088:	463a      	mov	r2, r7
 800708a:	4628      	mov	r0, r5
 800708c:	47b0      	blx	r6
 800708e:	2800      	cmp	r0, #0
 8007090:	dc08      	bgt.n	80070a4 <__sflush_r+0xfc>
 8007092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a4:	4407      	add	r7, r0
 80070a6:	eba8 0800 	sub.w	r8, r8, r0
 80070aa:	e7e7      	b.n	800707c <__sflush_r+0xd4>
 80070ac:	20400001 	.word	0x20400001

080070b0 <_fflush_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	690b      	ldr	r3, [r1, #16]
 80070b4:	4605      	mov	r5, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	b913      	cbnz	r3, 80070c0 <_fflush_r+0x10>
 80070ba:	2500      	movs	r5, #0
 80070bc:	4628      	mov	r0, r5
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	b118      	cbz	r0, 80070ca <_fflush_r+0x1a>
 80070c2:	6a03      	ldr	r3, [r0, #32]
 80070c4:	b90b      	cbnz	r3, 80070ca <_fflush_r+0x1a>
 80070c6:	f7fe f8b3 	bl	8005230 <__sinit>
 80070ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0f3      	beq.n	80070ba <_fflush_r+0xa>
 80070d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070d4:	07d0      	lsls	r0, r2, #31
 80070d6:	d404      	bmi.n	80070e2 <_fflush_r+0x32>
 80070d8:	0599      	lsls	r1, r3, #22
 80070da:	d402      	bmi.n	80070e2 <_fflush_r+0x32>
 80070dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070de:	f7fe f9e6 	bl	80054ae <__retarget_lock_acquire_recursive>
 80070e2:	4628      	mov	r0, r5
 80070e4:	4621      	mov	r1, r4
 80070e6:	f7ff ff5f 	bl	8006fa8 <__sflush_r>
 80070ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070ec:	07da      	lsls	r2, r3, #31
 80070ee:	4605      	mov	r5, r0
 80070f0:	d4e4      	bmi.n	80070bc <_fflush_r+0xc>
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	059b      	lsls	r3, r3, #22
 80070f6:	d4e1      	bmi.n	80070bc <_fflush_r+0xc>
 80070f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070fa:	f7fe f9d9 	bl	80054b0 <__retarget_lock_release_recursive>
 80070fe:	e7dd      	b.n	80070bc <_fflush_r+0xc>

08007100 <__swbuf_r>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	460e      	mov	r6, r1
 8007104:	4614      	mov	r4, r2
 8007106:	4605      	mov	r5, r0
 8007108:	b118      	cbz	r0, 8007112 <__swbuf_r+0x12>
 800710a:	6a03      	ldr	r3, [r0, #32]
 800710c:	b90b      	cbnz	r3, 8007112 <__swbuf_r+0x12>
 800710e:	f7fe f88f 	bl	8005230 <__sinit>
 8007112:	69a3      	ldr	r3, [r4, #24]
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	071a      	lsls	r2, r3, #28
 800711a:	d501      	bpl.n	8007120 <__swbuf_r+0x20>
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	b943      	cbnz	r3, 8007132 <__swbuf_r+0x32>
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	f000 f82a 	bl	800717c <__swsetup_r>
 8007128:	b118      	cbz	r0, 8007132 <__swbuf_r+0x32>
 800712a:	f04f 37ff 	mov.w	r7, #4294967295
 800712e:	4638      	mov	r0, r7
 8007130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	6922      	ldr	r2, [r4, #16]
 8007136:	1a98      	subs	r0, r3, r2
 8007138:	6963      	ldr	r3, [r4, #20]
 800713a:	b2f6      	uxtb	r6, r6
 800713c:	4283      	cmp	r3, r0
 800713e:	4637      	mov	r7, r6
 8007140:	dc05      	bgt.n	800714e <__swbuf_r+0x4e>
 8007142:	4621      	mov	r1, r4
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff ffb3 	bl	80070b0 <_fflush_r>
 800714a:	2800      	cmp	r0, #0
 800714c:	d1ed      	bne.n	800712a <__swbuf_r+0x2a>
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	3b01      	subs	r3, #1
 8007152:	60a3      	str	r3, [r4, #8]
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	6022      	str	r2, [r4, #0]
 800715a:	701e      	strb	r6, [r3, #0]
 800715c:	6962      	ldr	r2, [r4, #20]
 800715e:	1c43      	adds	r3, r0, #1
 8007160:	429a      	cmp	r2, r3
 8007162:	d004      	beq.n	800716e <__swbuf_r+0x6e>
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	07db      	lsls	r3, r3, #31
 8007168:	d5e1      	bpl.n	800712e <__swbuf_r+0x2e>
 800716a:	2e0a      	cmp	r6, #10
 800716c:	d1df      	bne.n	800712e <__swbuf_r+0x2e>
 800716e:	4621      	mov	r1, r4
 8007170:	4628      	mov	r0, r5
 8007172:	f7ff ff9d 	bl	80070b0 <_fflush_r>
 8007176:	2800      	cmp	r0, #0
 8007178:	d0d9      	beq.n	800712e <__swbuf_r+0x2e>
 800717a:	e7d6      	b.n	800712a <__swbuf_r+0x2a>

0800717c <__swsetup_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4b29      	ldr	r3, [pc, #164]	@ (8007224 <__swsetup_r+0xa8>)
 8007180:	4605      	mov	r5, r0
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	460c      	mov	r4, r1
 8007186:	b118      	cbz	r0, 8007190 <__swsetup_r+0x14>
 8007188:	6a03      	ldr	r3, [r0, #32]
 800718a:	b90b      	cbnz	r3, 8007190 <__swsetup_r+0x14>
 800718c:	f7fe f850 	bl	8005230 <__sinit>
 8007190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007194:	0719      	lsls	r1, r3, #28
 8007196:	d422      	bmi.n	80071de <__swsetup_r+0x62>
 8007198:	06da      	lsls	r2, r3, #27
 800719a:	d407      	bmi.n	80071ac <__swsetup_r+0x30>
 800719c:	2209      	movs	r2, #9
 800719e:	602a      	str	r2, [r5, #0]
 80071a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	e033      	b.n	8007214 <__swsetup_r+0x98>
 80071ac:	0758      	lsls	r0, r3, #29
 80071ae:	d512      	bpl.n	80071d6 <__swsetup_r+0x5a>
 80071b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071b2:	b141      	cbz	r1, 80071c6 <__swsetup_r+0x4a>
 80071b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071b8:	4299      	cmp	r1, r3
 80071ba:	d002      	beq.n	80071c2 <__swsetup_r+0x46>
 80071bc:	4628      	mov	r0, r5
 80071be:	f7fe ffdf 	bl	8006180 <_free_r>
 80071c2:	2300      	movs	r3, #0
 80071c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071cc:	81a3      	strh	r3, [r4, #12]
 80071ce:	2300      	movs	r3, #0
 80071d0:	6063      	str	r3, [r4, #4]
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	f043 0308 	orr.w	r3, r3, #8
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	b94b      	cbnz	r3, 80071f6 <__swsetup_r+0x7a>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ec:	d003      	beq.n	80071f6 <__swsetup_r+0x7a>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 f8fb 	bl	80073ec <__smakebuf_r>
 80071f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071fa:	f013 0201 	ands.w	r2, r3, #1
 80071fe:	d00a      	beq.n	8007216 <__swsetup_r+0x9a>
 8007200:	2200      	movs	r2, #0
 8007202:	60a2      	str	r2, [r4, #8]
 8007204:	6962      	ldr	r2, [r4, #20]
 8007206:	4252      	negs	r2, r2
 8007208:	61a2      	str	r2, [r4, #24]
 800720a:	6922      	ldr	r2, [r4, #16]
 800720c:	b942      	cbnz	r2, 8007220 <__swsetup_r+0xa4>
 800720e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007212:	d1c5      	bne.n	80071a0 <__swsetup_r+0x24>
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	0799      	lsls	r1, r3, #30
 8007218:	bf58      	it	pl
 800721a:	6962      	ldrpl	r2, [r4, #20]
 800721c:	60a2      	str	r2, [r4, #8]
 800721e:	e7f4      	b.n	800720a <__swsetup_r+0x8e>
 8007220:	2000      	movs	r0, #0
 8007222:	e7f7      	b.n	8007214 <__swsetup_r+0x98>
 8007224:	20000040 	.word	0x20000040

08007228 <memmove>:
 8007228:	4288      	cmp	r0, r1
 800722a:	b510      	push	{r4, lr}
 800722c:	eb01 0402 	add.w	r4, r1, r2
 8007230:	d902      	bls.n	8007238 <memmove+0x10>
 8007232:	4284      	cmp	r4, r0
 8007234:	4623      	mov	r3, r4
 8007236:	d807      	bhi.n	8007248 <memmove+0x20>
 8007238:	1e43      	subs	r3, r0, #1
 800723a:	42a1      	cmp	r1, r4
 800723c:	d008      	beq.n	8007250 <memmove+0x28>
 800723e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007246:	e7f8      	b.n	800723a <memmove+0x12>
 8007248:	4402      	add	r2, r0
 800724a:	4601      	mov	r1, r0
 800724c:	428a      	cmp	r2, r1
 800724e:	d100      	bne.n	8007252 <memmove+0x2a>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800725a:	e7f7      	b.n	800724c <memmove+0x24>

0800725c <_sbrk_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d06      	ldr	r5, [pc, #24]	@ (8007278 <_sbrk_r+0x1c>)
 8007260:	2300      	movs	r3, #0
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	f7fb fdfc 	bl	8002e64 <_sbrk>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d102      	bne.n	8007276 <_sbrk_r+0x1a>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b103      	cbz	r3, 8007276 <_sbrk_r+0x1a>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	200003b4 	.word	0x200003b4

0800727c <__assert_func>:
 800727c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800727e:	4614      	mov	r4, r2
 8007280:	461a      	mov	r2, r3
 8007282:	4b09      	ldr	r3, [pc, #36]	@ (80072a8 <__assert_func+0x2c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4605      	mov	r5, r0
 8007288:	68d8      	ldr	r0, [r3, #12]
 800728a:	b14c      	cbz	r4, 80072a0 <__assert_func+0x24>
 800728c:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <__assert_func+0x30>)
 800728e:	9100      	str	r1, [sp, #0]
 8007290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007294:	4906      	ldr	r1, [pc, #24]	@ (80072b0 <__assert_func+0x34>)
 8007296:	462b      	mov	r3, r5
 8007298:	f000 f870 	bl	800737c <fiprintf>
 800729c:	f000 f904 	bl	80074a8 <abort>
 80072a0:	4b04      	ldr	r3, [pc, #16]	@ (80072b4 <__assert_func+0x38>)
 80072a2:	461c      	mov	r4, r3
 80072a4:	e7f3      	b.n	800728e <__assert_func+0x12>
 80072a6:	bf00      	nop
 80072a8:	20000040 	.word	0x20000040
 80072ac:	080098e9 	.word	0x080098e9
 80072b0:	080098f6 	.word	0x080098f6
 80072b4:	08009924 	.word	0x08009924

080072b8 <_calloc_r>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	fba1 5402 	umull	r5, r4, r1, r2
 80072be:	b934      	cbnz	r4, 80072ce <_calloc_r+0x16>
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7fe ffd1 	bl	8006268 <_malloc_r>
 80072c6:	4606      	mov	r6, r0
 80072c8:	b928      	cbnz	r0, 80072d6 <_calloc_r+0x1e>
 80072ca:	4630      	mov	r0, r6
 80072cc:	bd70      	pop	{r4, r5, r6, pc}
 80072ce:	220c      	movs	r2, #12
 80072d0:	6002      	str	r2, [r0, #0]
 80072d2:	2600      	movs	r6, #0
 80072d4:	e7f9      	b.n	80072ca <_calloc_r+0x12>
 80072d6:	462a      	mov	r2, r5
 80072d8:	4621      	mov	r1, r4
 80072da:	f7fe f86a 	bl	80053b2 <memset>
 80072de:	e7f4      	b.n	80072ca <_calloc_r+0x12>

080072e0 <__ascii_mbtowc>:
 80072e0:	b082      	sub	sp, #8
 80072e2:	b901      	cbnz	r1, 80072e6 <__ascii_mbtowc+0x6>
 80072e4:	a901      	add	r1, sp, #4
 80072e6:	b142      	cbz	r2, 80072fa <__ascii_mbtowc+0x1a>
 80072e8:	b14b      	cbz	r3, 80072fe <__ascii_mbtowc+0x1e>
 80072ea:	7813      	ldrb	r3, [r2, #0]
 80072ec:	600b      	str	r3, [r1, #0]
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	1e10      	subs	r0, r2, #0
 80072f2:	bf18      	it	ne
 80072f4:	2001      	movne	r0, #1
 80072f6:	b002      	add	sp, #8
 80072f8:	4770      	bx	lr
 80072fa:	4610      	mov	r0, r2
 80072fc:	e7fb      	b.n	80072f6 <__ascii_mbtowc+0x16>
 80072fe:	f06f 0001 	mvn.w	r0, #1
 8007302:	e7f8      	b.n	80072f6 <__ascii_mbtowc+0x16>

08007304 <_realloc_r>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	4607      	mov	r7, r0
 800730a:	4614      	mov	r4, r2
 800730c:	460d      	mov	r5, r1
 800730e:	b921      	cbnz	r1, 800731a <_realloc_r+0x16>
 8007310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4611      	mov	r1, r2
 8007316:	f7fe bfa7 	b.w	8006268 <_malloc_r>
 800731a:	b92a      	cbnz	r2, 8007328 <_realloc_r+0x24>
 800731c:	f7fe ff30 	bl	8006180 <_free_r>
 8007320:	4625      	mov	r5, r4
 8007322:	4628      	mov	r0, r5
 8007324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007328:	f000 f8c5 	bl	80074b6 <_malloc_usable_size_r>
 800732c:	4284      	cmp	r4, r0
 800732e:	4606      	mov	r6, r0
 8007330:	d802      	bhi.n	8007338 <_realloc_r+0x34>
 8007332:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007336:	d8f4      	bhi.n	8007322 <_realloc_r+0x1e>
 8007338:	4621      	mov	r1, r4
 800733a:	4638      	mov	r0, r7
 800733c:	f7fe ff94 	bl	8006268 <_malloc_r>
 8007340:	4680      	mov	r8, r0
 8007342:	b908      	cbnz	r0, 8007348 <_realloc_r+0x44>
 8007344:	4645      	mov	r5, r8
 8007346:	e7ec      	b.n	8007322 <_realloc_r+0x1e>
 8007348:	42b4      	cmp	r4, r6
 800734a:	4622      	mov	r2, r4
 800734c:	4629      	mov	r1, r5
 800734e:	bf28      	it	cs
 8007350:	4632      	movcs	r2, r6
 8007352:	f7fe f8ae 	bl	80054b2 <memcpy>
 8007356:	4629      	mov	r1, r5
 8007358:	4638      	mov	r0, r7
 800735a:	f7fe ff11 	bl	8006180 <_free_r>
 800735e:	e7f1      	b.n	8007344 <_realloc_r+0x40>

08007360 <__ascii_wctomb>:
 8007360:	4603      	mov	r3, r0
 8007362:	4608      	mov	r0, r1
 8007364:	b141      	cbz	r1, 8007378 <__ascii_wctomb+0x18>
 8007366:	2aff      	cmp	r2, #255	@ 0xff
 8007368:	d904      	bls.n	8007374 <__ascii_wctomb+0x14>
 800736a:	228a      	movs	r2, #138	@ 0x8a
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	4770      	bx	lr
 8007374:	700a      	strb	r2, [r1, #0]
 8007376:	2001      	movs	r0, #1
 8007378:	4770      	bx	lr
	...

0800737c <fiprintf>:
 800737c:	b40e      	push	{r1, r2, r3}
 800737e:	b503      	push	{r0, r1, lr}
 8007380:	4601      	mov	r1, r0
 8007382:	ab03      	add	r3, sp, #12
 8007384:	4805      	ldr	r0, [pc, #20]	@ (800739c <fiprintf+0x20>)
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	f7ff fcf3 	bl	8006d78 <_vfiprintf_r>
 8007392:	b002      	add	sp, #8
 8007394:	f85d eb04 	ldr.w	lr, [sp], #4
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr
 800739c:	20000040 	.word	0x20000040

080073a0 <__swhatbuf_r>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	460c      	mov	r4, r1
 80073a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a8:	2900      	cmp	r1, #0
 80073aa:	b096      	sub	sp, #88	@ 0x58
 80073ac:	4615      	mov	r5, r2
 80073ae:	461e      	mov	r6, r3
 80073b0:	da0d      	bge.n	80073ce <__swhatbuf_r+0x2e>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073b8:	f04f 0100 	mov.w	r1, #0
 80073bc:	bf14      	ite	ne
 80073be:	2340      	movne	r3, #64	@ 0x40
 80073c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073c4:	2000      	movs	r0, #0
 80073c6:	6031      	str	r1, [r6, #0]
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	b016      	add	sp, #88	@ 0x58
 80073cc:	bd70      	pop	{r4, r5, r6, pc}
 80073ce:	466a      	mov	r2, sp
 80073d0:	f000 f848 	bl	8007464 <_fstat_r>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	dbec      	blt.n	80073b2 <__swhatbuf_r+0x12>
 80073d8:	9901      	ldr	r1, [sp, #4]
 80073da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073e2:	4259      	negs	r1, r3
 80073e4:	4159      	adcs	r1, r3
 80073e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073ea:	e7eb      	b.n	80073c4 <__swhatbuf_r+0x24>

080073ec <__smakebuf_r>:
 80073ec:	898b      	ldrh	r3, [r1, #12]
 80073ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073f0:	079d      	lsls	r5, r3, #30
 80073f2:	4606      	mov	r6, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	d507      	bpl.n	8007408 <__smakebuf_r+0x1c>
 80073f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	2301      	movs	r3, #1
 8007402:	6163      	str	r3, [r4, #20]
 8007404:	b003      	add	sp, #12
 8007406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007408:	ab01      	add	r3, sp, #4
 800740a:	466a      	mov	r2, sp
 800740c:	f7ff ffc8 	bl	80073a0 <__swhatbuf_r>
 8007410:	9f00      	ldr	r7, [sp, #0]
 8007412:	4605      	mov	r5, r0
 8007414:	4639      	mov	r1, r7
 8007416:	4630      	mov	r0, r6
 8007418:	f7fe ff26 	bl	8006268 <_malloc_r>
 800741c:	b948      	cbnz	r0, 8007432 <__smakebuf_r+0x46>
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	059a      	lsls	r2, r3, #22
 8007424:	d4ee      	bmi.n	8007404 <__smakebuf_r+0x18>
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	f043 0302 	orr.w	r3, r3, #2
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	e7e2      	b.n	80073f8 <__smakebuf_r+0xc>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	6020      	str	r0, [r4, #0]
 8007436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007442:	b15b      	cbz	r3, 800745c <__smakebuf_r+0x70>
 8007444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007448:	4630      	mov	r0, r6
 800744a:	f000 f81d 	bl	8007488 <_isatty_r>
 800744e:	b128      	cbz	r0, 800745c <__smakebuf_r+0x70>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	f043 0301 	orr.w	r3, r3, #1
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	431d      	orrs	r5, r3
 8007460:	81a5      	strh	r5, [r4, #12]
 8007462:	e7cf      	b.n	8007404 <__smakebuf_r+0x18>

08007464 <_fstat_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	@ (8007484 <_fstat_r+0x20>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	4611      	mov	r1, r2
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f7fb fcce 	bl	8002e12 <_fstat>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d102      	bne.n	8007480 <_fstat_r+0x1c>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b103      	cbz	r3, 8007480 <_fstat_r+0x1c>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	200003b4 	.word	0x200003b4

08007488 <_isatty_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d06      	ldr	r5, [pc, #24]	@ (80074a4 <_isatty_r+0x1c>)
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fb fccd 	bl	8002e32 <_isatty>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_isatty_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_isatty_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	200003b4 	.word	0x200003b4

080074a8 <abort>:
 80074a8:	b508      	push	{r3, lr}
 80074aa:	2006      	movs	r0, #6
 80074ac:	f000 f834 	bl	8007518 <raise>
 80074b0:	2001      	movs	r0, #1
 80074b2:	f7fb fc5e 	bl	8002d72 <_exit>

080074b6 <_malloc_usable_size_r>:
 80074b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ba:	1f18      	subs	r0, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfbc      	itt	lt
 80074c0:	580b      	ldrlt	r3, [r1, r0]
 80074c2:	18c0      	addlt	r0, r0, r3
 80074c4:	4770      	bx	lr

080074c6 <_raise_r>:
 80074c6:	291f      	cmp	r1, #31
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4605      	mov	r5, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	d904      	bls.n	80074da <_raise_r+0x14>
 80074d0:	2316      	movs	r3, #22
 80074d2:	6003      	str	r3, [r0, #0]
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	bd38      	pop	{r3, r4, r5, pc}
 80074da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074dc:	b112      	cbz	r2, 80074e4 <_raise_r+0x1e>
 80074de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074e2:	b94b      	cbnz	r3, 80074f8 <_raise_r+0x32>
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 f831 	bl	800754c <_getpid_r>
 80074ea:	4622      	mov	r2, r4
 80074ec:	4601      	mov	r1, r0
 80074ee:	4628      	mov	r0, r5
 80074f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f4:	f000 b818 	b.w	8007528 <_kill_r>
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d00a      	beq.n	8007512 <_raise_r+0x4c>
 80074fc:	1c59      	adds	r1, r3, #1
 80074fe:	d103      	bne.n	8007508 <_raise_r+0x42>
 8007500:	2316      	movs	r3, #22
 8007502:	6003      	str	r3, [r0, #0]
 8007504:	2001      	movs	r0, #1
 8007506:	e7e7      	b.n	80074d8 <_raise_r+0x12>
 8007508:	2100      	movs	r1, #0
 800750a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800750e:	4620      	mov	r0, r4
 8007510:	4798      	blx	r3
 8007512:	2000      	movs	r0, #0
 8007514:	e7e0      	b.n	80074d8 <_raise_r+0x12>
	...

08007518 <raise>:
 8007518:	4b02      	ldr	r3, [pc, #8]	@ (8007524 <raise+0xc>)
 800751a:	4601      	mov	r1, r0
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f7ff bfd2 	b.w	80074c6 <_raise_r>
 8007522:	bf00      	nop
 8007524:	20000040 	.word	0x20000040

08007528 <_kill_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	@ (8007548 <_kill_r+0x20>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	4611      	mov	r1, r2
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f7fb fc0c 	bl	8002d52 <_kill>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d102      	bne.n	8007544 <_kill_r+0x1c>
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	b103      	cbz	r3, 8007544 <_kill_r+0x1c>
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	200003b4 	.word	0x200003b4

0800754c <_getpid_r>:
 800754c:	f7fb bbf9 	b.w	8002d42 <_getpid>

08007550 <exp>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	ed2d 8b02 	vpush	{d8}
 8007556:	ec55 4b10 	vmov	r4, r5, d0
 800755a:	f000 fb99 	bl	8007c90 <__ieee754_exp>
 800755e:	eeb0 8a40 	vmov.f32	s16, s0
 8007562:	eef0 8a60 	vmov.f32	s17, s1
 8007566:	ec45 4b10 	vmov	d0, r4, r5
 800756a:	f000 f929 	bl	80077c0 <finite>
 800756e:	b168      	cbz	r0, 800758c <exp+0x3c>
 8007570:	a317      	add	r3, pc, #92	@ (adr r3, 80075d0 <exp+0x80>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f9 fadd 	bl	8000b38 <__aeabi_dcmpgt>
 800757e:	b160      	cbz	r0, 800759a <exp+0x4a>
 8007580:	f7fd ff6a 	bl	8005458 <__errno>
 8007584:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80075c0 <exp+0x70>
 8007588:	2322      	movs	r3, #34	@ 0x22
 800758a:	6003      	str	r3, [r0, #0]
 800758c:	eeb0 0a48 	vmov.f32	s0, s16
 8007590:	eef0 0a68 	vmov.f32	s1, s17
 8007594:	ecbd 8b02 	vpop	{d8}
 8007598:	bd38      	pop	{r3, r4, r5, pc}
 800759a:	a30f      	add	r3, pc, #60	@ (adr r3, 80075d8 <exp+0x88>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	4620      	mov	r0, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	f7f9 faaa 	bl	8000afc <__aeabi_dcmplt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d0ef      	beq.n	800758c <exp+0x3c>
 80075ac:	f7fd ff54 	bl	8005458 <__errno>
 80075b0:	2322      	movs	r3, #34	@ 0x22
 80075b2:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80075c8 <exp+0x78>
 80075b6:	6003      	str	r3, [r0, #0]
 80075b8:	e7e8      	b.n	800758c <exp+0x3c>
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
 80075c0:	00000000 	.word	0x00000000
 80075c4:	7ff00000 	.word	0x7ff00000
	...
 80075d0:	fefa39ef 	.word	0xfefa39ef
 80075d4:	40862e42 	.word	0x40862e42
 80075d8:	d52d3051 	.word	0xd52d3051
 80075dc:	c0874910 	.word	0xc0874910

080075e0 <pow>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	ed2d 8b02 	vpush	{d8}
 80075e6:	eeb0 8a40 	vmov.f32	s16, s0
 80075ea:	eef0 8a60 	vmov.f32	s17, s1
 80075ee:	ec55 4b11 	vmov	r4, r5, d1
 80075f2:	f000 fcc9 	bl	8007f88 <__ieee754_pow>
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	4620      	mov	r0, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	ec57 6b10 	vmov	r6, r7, d0
 8007602:	f7f9 faa3 	bl	8000b4c <__aeabi_dcmpun>
 8007606:	2800      	cmp	r0, #0
 8007608:	d13b      	bne.n	8007682 <pow+0xa2>
 800760a:	ec51 0b18 	vmov	r0, r1, d8
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	f7f9 fa69 	bl	8000ae8 <__aeabi_dcmpeq>
 8007616:	b1b8      	cbz	r0, 8007648 <pow+0x68>
 8007618:	2200      	movs	r2, #0
 800761a:	2300      	movs	r3, #0
 800761c:	4620      	mov	r0, r4
 800761e:	4629      	mov	r1, r5
 8007620:	f7f9 fa62 	bl	8000ae8 <__aeabi_dcmpeq>
 8007624:	2800      	cmp	r0, #0
 8007626:	d146      	bne.n	80076b6 <pow+0xd6>
 8007628:	ec45 4b10 	vmov	d0, r4, r5
 800762c:	f000 f8c8 	bl	80077c0 <finite>
 8007630:	b338      	cbz	r0, 8007682 <pow+0xa2>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	f7f9 fa5f 	bl	8000afc <__aeabi_dcmplt>
 800763e:	b300      	cbz	r0, 8007682 <pow+0xa2>
 8007640:	f7fd ff0a 	bl	8005458 <__errno>
 8007644:	2322      	movs	r3, #34	@ 0x22
 8007646:	e01b      	b.n	8007680 <pow+0xa0>
 8007648:	ec47 6b10 	vmov	d0, r6, r7
 800764c:	f000 f8b8 	bl	80077c0 <finite>
 8007650:	b9e0      	cbnz	r0, 800768c <pow+0xac>
 8007652:	eeb0 0a48 	vmov.f32	s0, s16
 8007656:	eef0 0a68 	vmov.f32	s1, s17
 800765a:	f000 f8b1 	bl	80077c0 <finite>
 800765e:	b1a8      	cbz	r0, 800768c <pow+0xac>
 8007660:	ec45 4b10 	vmov	d0, r4, r5
 8007664:	f000 f8ac 	bl	80077c0 <finite>
 8007668:	b180      	cbz	r0, 800768c <pow+0xac>
 800766a:	4632      	mov	r2, r6
 800766c:	463b      	mov	r3, r7
 800766e:	4630      	mov	r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	f7f9 fa6b 	bl	8000b4c <__aeabi_dcmpun>
 8007676:	2800      	cmp	r0, #0
 8007678:	d0e2      	beq.n	8007640 <pow+0x60>
 800767a:	f7fd feed 	bl	8005458 <__errno>
 800767e:	2321      	movs	r3, #33	@ 0x21
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	ecbd 8b02 	vpop	{d8}
 8007686:	ec47 6b10 	vmov	d0, r6, r7
 800768a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800768c:	2200      	movs	r2, #0
 800768e:	2300      	movs	r3, #0
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f9 fa28 	bl	8000ae8 <__aeabi_dcmpeq>
 8007698:	2800      	cmp	r0, #0
 800769a:	d0f2      	beq.n	8007682 <pow+0xa2>
 800769c:	eeb0 0a48 	vmov.f32	s0, s16
 80076a0:	eef0 0a68 	vmov.f32	s1, s17
 80076a4:	f000 f88c 	bl	80077c0 <finite>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0ea      	beq.n	8007682 <pow+0xa2>
 80076ac:	ec45 4b10 	vmov	d0, r4, r5
 80076b0:	f000 f886 	bl	80077c0 <finite>
 80076b4:	e7c3      	b.n	800763e <pow+0x5e>
 80076b6:	4f01      	ldr	r7, [pc, #4]	@ (80076bc <pow+0xdc>)
 80076b8:	2600      	movs	r6, #0
 80076ba:	e7e2      	b.n	8007682 <pow+0xa2>
 80076bc:	3ff00000 	.word	0x3ff00000

080076c0 <sqrt>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	ed2d 8b02 	vpush	{d8}
 80076c6:	ec55 4b10 	vmov	r4, r5, d0
 80076ca:	f000 f885 	bl	80077d8 <__ieee754_sqrt>
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	4620      	mov	r0, r4
 80076d4:	4629      	mov	r1, r5
 80076d6:	eeb0 8a40 	vmov.f32	s16, s0
 80076da:	eef0 8a60 	vmov.f32	s17, s1
 80076de:	f7f9 fa35 	bl	8000b4c <__aeabi_dcmpun>
 80076e2:	b990      	cbnz	r0, 800770a <sqrt+0x4a>
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	4620      	mov	r0, r4
 80076ea:	4629      	mov	r1, r5
 80076ec:	f7f9 fa06 	bl	8000afc <__aeabi_dcmplt>
 80076f0:	b158      	cbz	r0, 800770a <sqrt+0x4a>
 80076f2:	f7fd feb1 	bl	8005458 <__errno>
 80076f6:	2321      	movs	r3, #33	@ 0x21
 80076f8:	6003      	str	r3, [r0, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	2300      	movs	r3, #0
 80076fe:	4610      	mov	r0, r2
 8007700:	4619      	mov	r1, r3
 8007702:	f7f9 f8b3 	bl	800086c <__aeabi_ddiv>
 8007706:	ec41 0b18 	vmov	d8, r0, r1
 800770a:	eeb0 0a48 	vmov.f32	s0, s16
 800770e:	eef0 0a68 	vmov.f32	s1, s17
 8007712:	ecbd 8b02 	vpop	{d8}
 8007716:	bd38      	pop	{r3, r4, r5, pc}

08007718 <sin>:
 8007718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800771a:	ec53 2b10 	vmov	r2, r3, d0
 800771e:	4826      	ldr	r0, [pc, #152]	@ (80077b8 <sin+0xa0>)
 8007720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007724:	4281      	cmp	r1, r0
 8007726:	d807      	bhi.n	8007738 <sin+0x20>
 8007728:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80077b0 <sin+0x98>
 800772c:	2000      	movs	r0, #0
 800772e:	b005      	add	sp, #20
 8007730:	f85d eb04 	ldr.w	lr, [sp], #4
 8007734:	f000 b9f0 	b.w	8007b18 <__kernel_sin>
 8007738:	4820      	ldr	r0, [pc, #128]	@ (80077bc <sin+0xa4>)
 800773a:	4281      	cmp	r1, r0
 800773c:	d908      	bls.n	8007750 <sin+0x38>
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	f7f8 fdb1 	bl	80002a8 <__aeabi_dsub>
 8007746:	ec41 0b10 	vmov	d0, r0, r1
 800774a:	b005      	add	sp, #20
 800774c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007750:	4668      	mov	r0, sp
 8007752:	f001 f965 	bl	8008a20 <__ieee754_rem_pio2>
 8007756:	f000 0003 	and.w	r0, r0, #3
 800775a:	2801      	cmp	r0, #1
 800775c:	d00c      	beq.n	8007778 <sin+0x60>
 800775e:	2802      	cmp	r0, #2
 8007760:	d011      	beq.n	8007786 <sin+0x6e>
 8007762:	b9e8      	cbnz	r0, 80077a0 <sin+0x88>
 8007764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007768:	ed9d 0b00 	vldr	d0, [sp]
 800776c:	2001      	movs	r0, #1
 800776e:	f000 f9d3 	bl	8007b18 <__kernel_sin>
 8007772:	ec51 0b10 	vmov	r0, r1, d0
 8007776:	e7e6      	b.n	8007746 <sin+0x2e>
 8007778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800777c:	ed9d 0b00 	vldr	d0, [sp]
 8007780:	f000 f902 	bl	8007988 <__kernel_cos>
 8007784:	e7f5      	b.n	8007772 <sin+0x5a>
 8007786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800778a:	ed9d 0b00 	vldr	d0, [sp]
 800778e:	2001      	movs	r0, #1
 8007790:	f000 f9c2 	bl	8007b18 <__kernel_sin>
 8007794:	ec53 2b10 	vmov	r2, r3, d0
 8007798:	4610      	mov	r0, r2
 800779a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800779e:	e7d2      	b.n	8007746 <sin+0x2e>
 80077a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077a4:	ed9d 0b00 	vldr	d0, [sp]
 80077a8:	f000 f8ee 	bl	8007988 <__kernel_cos>
 80077ac:	e7f2      	b.n	8007794 <sin+0x7c>
 80077ae:	bf00      	nop
	...
 80077b8:	3fe921fb 	.word	0x3fe921fb
 80077bc:	7fefffff 	.word	0x7fefffff

080077c0 <finite>:
 80077c0:	b082      	sub	sp, #8
 80077c2:	ed8d 0b00 	vstr	d0, [sp]
 80077c6:	9801      	ldr	r0, [sp, #4]
 80077c8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80077cc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80077d0:	0fc0      	lsrs	r0, r0, #31
 80077d2:	b002      	add	sp, #8
 80077d4:	4770      	bx	lr
	...

080077d8 <__ieee754_sqrt>:
 80077d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	4a66      	ldr	r2, [pc, #408]	@ (8007978 <__ieee754_sqrt+0x1a0>)
 80077de:	ec55 4b10 	vmov	r4, r5, d0
 80077e2:	43aa      	bics	r2, r5
 80077e4:	462b      	mov	r3, r5
 80077e6:	4621      	mov	r1, r4
 80077e8:	d110      	bne.n	800780c <__ieee754_sqrt+0x34>
 80077ea:	4622      	mov	r2, r4
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 ff12 	bl	8000618 <__aeabi_dmul>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4620      	mov	r0, r4
 80077fa:	4629      	mov	r1, r5
 80077fc:	f7f8 fd56 	bl	80002ac <__adddf3>
 8007800:	4604      	mov	r4, r0
 8007802:	460d      	mov	r5, r1
 8007804:	ec45 4b10 	vmov	d0, r4, r5
 8007808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780c:	2d00      	cmp	r5, #0
 800780e:	dc0e      	bgt.n	800782e <__ieee754_sqrt+0x56>
 8007810:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007814:	4322      	orrs	r2, r4
 8007816:	d0f5      	beq.n	8007804 <__ieee754_sqrt+0x2c>
 8007818:	b19d      	cbz	r5, 8007842 <__ieee754_sqrt+0x6a>
 800781a:	4622      	mov	r2, r4
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f8 fd42 	bl	80002a8 <__aeabi_dsub>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	f7f9 f820 	bl	800086c <__aeabi_ddiv>
 800782c:	e7e8      	b.n	8007800 <__ieee754_sqrt+0x28>
 800782e:	152a      	asrs	r2, r5, #20
 8007830:	d115      	bne.n	800785e <__ieee754_sqrt+0x86>
 8007832:	2000      	movs	r0, #0
 8007834:	e009      	b.n	800784a <__ieee754_sqrt+0x72>
 8007836:	0acb      	lsrs	r3, r1, #11
 8007838:	3a15      	subs	r2, #21
 800783a:	0549      	lsls	r1, r1, #21
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0fa      	beq.n	8007836 <__ieee754_sqrt+0x5e>
 8007840:	e7f7      	b.n	8007832 <__ieee754_sqrt+0x5a>
 8007842:	462a      	mov	r2, r5
 8007844:	e7fa      	b.n	800783c <__ieee754_sqrt+0x64>
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	3001      	adds	r0, #1
 800784a:	02dc      	lsls	r4, r3, #11
 800784c:	d5fb      	bpl.n	8007846 <__ieee754_sqrt+0x6e>
 800784e:	1e44      	subs	r4, r0, #1
 8007850:	1b12      	subs	r2, r2, r4
 8007852:	f1c0 0420 	rsb	r4, r0, #32
 8007856:	fa21 f404 	lsr.w	r4, r1, r4
 800785a:	4323      	orrs	r3, r4
 800785c:	4081      	lsls	r1, r0
 800785e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007862:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800786a:	07d2      	lsls	r2, r2, #31
 800786c:	bf5c      	itt	pl
 800786e:	005b      	lslpl	r3, r3, #1
 8007870:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007874:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007878:	bf58      	it	pl
 800787a:	0049      	lslpl	r1, r1, #1
 800787c:	2600      	movs	r6, #0
 800787e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007882:	107f      	asrs	r7, r7, #1
 8007884:	0049      	lsls	r1, r1, #1
 8007886:	2016      	movs	r0, #22
 8007888:	4632      	mov	r2, r6
 800788a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800788e:	1915      	adds	r5, r2, r4
 8007890:	429d      	cmp	r5, r3
 8007892:	bfde      	ittt	le
 8007894:	192a      	addle	r2, r5, r4
 8007896:	1b5b      	suble	r3, r3, r5
 8007898:	1936      	addle	r6, r6, r4
 800789a:	0fcd      	lsrs	r5, r1, #31
 800789c:	3801      	subs	r0, #1
 800789e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80078a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80078a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80078aa:	d1f0      	bne.n	800788e <__ieee754_sqrt+0xb6>
 80078ac:	4605      	mov	r5, r0
 80078ae:	2420      	movs	r4, #32
 80078b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80078b4:	4293      	cmp	r3, r2
 80078b6:	eb0c 0e00 	add.w	lr, ip, r0
 80078ba:	dc02      	bgt.n	80078c2 <__ieee754_sqrt+0xea>
 80078bc:	d113      	bne.n	80078e6 <__ieee754_sqrt+0x10e>
 80078be:	458e      	cmp	lr, r1
 80078c0:	d811      	bhi.n	80078e6 <__ieee754_sqrt+0x10e>
 80078c2:	f1be 0f00 	cmp.w	lr, #0
 80078c6:	eb0e 000c 	add.w	r0, lr, ip
 80078ca:	da3f      	bge.n	800794c <__ieee754_sqrt+0x174>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	db3d      	blt.n	800794c <__ieee754_sqrt+0x174>
 80078d0:	f102 0801 	add.w	r8, r2, #1
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	458e      	cmp	lr, r1
 80078d8:	bf88      	it	hi
 80078da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80078de:	eba1 010e 	sub.w	r1, r1, lr
 80078e2:	4465      	add	r5, ip
 80078e4:	4642      	mov	r2, r8
 80078e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80078ea:	3c01      	subs	r4, #1
 80078ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80078f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80078f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80078f8:	d1dc      	bne.n	80078b4 <__ieee754_sqrt+0xdc>
 80078fa:	4319      	orrs	r1, r3
 80078fc:	d01b      	beq.n	8007936 <__ieee754_sqrt+0x15e>
 80078fe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800797c <__ieee754_sqrt+0x1a4>
 8007902:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007980 <__ieee754_sqrt+0x1a8>
 8007906:	e9da 0100 	ldrd	r0, r1, [sl]
 800790a:	e9db 2300 	ldrd	r2, r3, [fp]
 800790e:	f7f8 fccb 	bl	80002a8 <__aeabi_dsub>
 8007912:	e9da 8900 	ldrd	r8, r9, [sl]
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f9 f8f7 	bl	8000b10 <__aeabi_dcmple>
 8007922:	b140      	cbz	r0, 8007936 <__ieee754_sqrt+0x15e>
 8007924:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007928:	e9da 0100 	ldrd	r0, r1, [sl]
 800792c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007930:	d10e      	bne.n	8007950 <__ieee754_sqrt+0x178>
 8007932:	3601      	adds	r6, #1
 8007934:	4625      	mov	r5, r4
 8007936:	1073      	asrs	r3, r6, #1
 8007938:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800793c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007940:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8007944:	086b      	lsrs	r3, r5, #1
 8007946:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800794a:	e759      	b.n	8007800 <__ieee754_sqrt+0x28>
 800794c:	4690      	mov	r8, r2
 800794e:	e7c1      	b.n	80078d4 <__ieee754_sqrt+0xfc>
 8007950:	f7f8 fcac 	bl	80002ac <__adddf3>
 8007954:	e9da 8900 	ldrd	r8, r9, [sl]
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f9 f8cc 	bl	8000afc <__aeabi_dcmplt>
 8007964:	b120      	cbz	r0, 8007970 <__ieee754_sqrt+0x198>
 8007966:	1cab      	adds	r3, r5, #2
 8007968:	bf08      	it	eq
 800796a:	3601      	addeq	r6, #1
 800796c:	3502      	adds	r5, #2
 800796e:	e7e2      	b.n	8007936 <__ieee754_sqrt+0x15e>
 8007970:	1c6b      	adds	r3, r5, #1
 8007972:	f023 0501 	bic.w	r5, r3, #1
 8007976:	e7de      	b.n	8007936 <__ieee754_sqrt+0x15e>
 8007978:	7ff00000 	.word	0x7ff00000
 800797c:	08009b38 	.word	0x08009b38
 8007980:	08009b30 	.word	0x08009b30
 8007984:	00000000 	.word	0x00000000

08007988 <__kernel_cos>:
 8007988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	ec57 6b10 	vmov	r6, r7, d0
 8007990:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007994:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007998:	ed8d 1b00 	vstr	d1, [sp]
 800799c:	d206      	bcs.n	80079ac <__kernel_cos+0x24>
 800799e:	4630      	mov	r0, r6
 80079a0:	4639      	mov	r1, r7
 80079a2:	f7f9 f8e9 	bl	8000b78 <__aeabi_d2iz>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	f000 8088 	beq.w	8007abc <__kernel_cos+0x134>
 80079ac:	4632      	mov	r2, r6
 80079ae:	463b      	mov	r3, r7
 80079b0:	4630      	mov	r0, r6
 80079b2:	4639      	mov	r1, r7
 80079b4:	f7f8 fe30 	bl	8000618 <__aeabi_dmul>
 80079b8:	4b51      	ldr	r3, [pc, #324]	@ (8007b00 <__kernel_cos+0x178>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	f7f8 fe2a 	bl	8000618 <__aeabi_dmul>
 80079c4:	a340      	add	r3, pc, #256	@ (adr r3, 8007ac8 <__kernel_cos+0x140>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	4682      	mov	sl, r0
 80079cc:	468b      	mov	fp, r1
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 fe21 	bl	8000618 <__aeabi_dmul>
 80079d6:	a33e      	add	r3, pc, #248	@ (adr r3, 8007ad0 <__kernel_cos+0x148>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fc66 	bl	80002ac <__adddf3>
 80079e0:	4622      	mov	r2, r4
 80079e2:	462b      	mov	r3, r5
 80079e4:	f7f8 fe18 	bl	8000618 <__aeabi_dmul>
 80079e8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007ad8 <__kernel_cos+0x150>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fc5b 	bl	80002a8 <__aeabi_dsub>
 80079f2:	4622      	mov	r2, r4
 80079f4:	462b      	mov	r3, r5
 80079f6:	f7f8 fe0f 	bl	8000618 <__aeabi_dmul>
 80079fa:	a339      	add	r3, pc, #228	@ (adr r3, 8007ae0 <__kernel_cos+0x158>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fc54 	bl	80002ac <__adddf3>
 8007a04:	4622      	mov	r2, r4
 8007a06:	462b      	mov	r3, r5
 8007a08:	f7f8 fe06 	bl	8000618 <__aeabi_dmul>
 8007a0c:	a336      	add	r3, pc, #216	@ (adr r3, 8007ae8 <__kernel_cos+0x160>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fc49 	bl	80002a8 <__aeabi_dsub>
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f7f8 fdfd 	bl	8000618 <__aeabi_dmul>
 8007a1e:	a334      	add	r3, pc, #208	@ (adr r3, 8007af0 <__kernel_cos+0x168>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fc42 	bl	80002ac <__adddf3>
 8007a28:	4622      	mov	r2, r4
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	f7f8 fdf4 	bl	8000618 <__aeabi_dmul>
 8007a30:	4622      	mov	r2, r4
 8007a32:	462b      	mov	r3, r5
 8007a34:	f7f8 fdf0 	bl	8000618 <__aeabi_dmul>
 8007a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	460d      	mov	r5, r1
 8007a40:	4630      	mov	r0, r6
 8007a42:	4639      	mov	r1, r7
 8007a44:	f7f8 fde8 	bl	8000618 <__aeabi_dmul>
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f7f8 fc2a 	bl	80002a8 <__aeabi_dsub>
 8007a54:	4b2b      	ldr	r3, [pc, #172]	@ (8007b04 <__kernel_cos+0x17c>)
 8007a56:	4598      	cmp	r8, r3
 8007a58:	4606      	mov	r6, r0
 8007a5a:	460f      	mov	r7, r1
 8007a5c:	d810      	bhi.n	8007a80 <__kernel_cos+0xf8>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4650      	mov	r0, sl
 8007a64:	4659      	mov	r1, fp
 8007a66:	f7f8 fc1f 	bl	80002a8 <__aeabi_dsub>
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4926      	ldr	r1, [pc, #152]	@ (8007b08 <__kernel_cos+0x180>)
 8007a6e:	4602      	mov	r2, r0
 8007a70:	2000      	movs	r0, #0
 8007a72:	f7f8 fc19 	bl	80002a8 <__aeabi_dsub>
 8007a76:	ec41 0b10 	vmov	d0, r0, r1
 8007a7a:	b003      	add	sp, #12
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a80:	4b22      	ldr	r3, [pc, #136]	@ (8007b0c <__kernel_cos+0x184>)
 8007a82:	4921      	ldr	r1, [pc, #132]	@ (8007b08 <__kernel_cos+0x180>)
 8007a84:	4598      	cmp	r8, r3
 8007a86:	bf8c      	ite	hi
 8007a88:	4d21      	ldrhi	r5, [pc, #132]	@ (8007b10 <__kernel_cos+0x188>)
 8007a8a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007a8e:	2400      	movs	r4, #0
 8007a90:	4622      	mov	r2, r4
 8007a92:	462b      	mov	r3, r5
 8007a94:	2000      	movs	r0, #0
 8007a96:	f7f8 fc07 	bl	80002a8 <__aeabi_dsub>
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	4650      	mov	r0, sl
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	f7f8 fbff 	bl	80002a8 <__aeabi_dsub>
 8007aaa:	4632      	mov	r2, r6
 8007aac:	463b      	mov	r3, r7
 8007aae:	f7f8 fbfb 	bl	80002a8 <__aeabi_dsub>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	e7da      	b.n	8007a72 <__kernel_cos+0xea>
 8007abc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007af8 <__kernel_cos+0x170>
 8007ac0:	e7db      	b.n	8007a7a <__kernel_cos+0xf2>
 8007ac2:	bf00      	nop
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	be8838d4 	.word	0xbe8838d4
 8007acc:	bda8fae9 	.word	0xbda8fae9
 8007ad0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ad4:	3e21ee9e 	.word	0x3e21ee9e
 8007ad8:	809c52ad 	.word	0x809c52ad
 8007adc:	3e927e4f 	.word	0x3e927e4f
 8007ae0:	19cb1590 	.word	0x19cb1590
 8007ae4:	3efa01a0 	.word	0x3efa01a0
 8007ae8:	16c15177 	.word	0x16c15177
 8007aec:	3f56c16c 	.word	0x3f56c16c
 8007af0:	5555554c 	.word	0x5555554c
 8007af4:	3fa55555 	.word	0x3fa55555
 8007af8:	00000000 	.word	0x00000000
 8007afc:	3ff00000 	.word	0x3ff00000
 8007b00:	3fe00000 	.word	0x3fe00000
 8007b04:	3fd33332 	.word	0x3fd33332
 8007b08:	3ff00000 	.word	0x3ff00000
 8007b0c:	3fe90000 	.word	0x3fe90000
 8007b10:	3fd20000 	.word	0x3fd20000
 8007b14:	00000000 	.word	0x00000000

08007b18 <__kernel_sin>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	ec55 4b10 	vmov	r4, r5, d0
 8007b20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007b24:	b085      	sub	sp, #20
 8007b26:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007b2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007b2e:	4680      	mov	r8, r0
 8007b30:	d205      	bcs.n	8007b3e <__kernel_sin+0x26>
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f9 f81f 	bl	8000b78 <__aeabi_d2iz>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d052      	beq.n	8007be4 <__kernel_sin+0xcc>
 8007b3e:	4622      	mov	r2, r4
 8007b40:	462b      	mov	r3, r5
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7f8 fd67 	bl	8000618 <__aeabi_dmul>
 8007b4a:	4682      	mov	sl, r0
 8007b4c:	468b      	mov	fp, r1
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4620      	mov	r0, r4
 8007b54:	4629      	mov	r1, r5
 8007b56:	f7f8 fd5f 	bl	8000618 <__aeabi_dmul>
 8007b5a:	a342      	add	r3, pc, #264	@ (adr r3, 8007c64 <__kernel_sin+0x14c>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	e9cd 0100 	strd	r0, r1, [sp]
 8007b64:	4650      	mov	r0, sl
 8007b66:	4659      	mov	r1, fp
 8007b68:	f7f8 fd56 	bl	8000618 <__aeabi_dmul>
 8007b6c:	a33f      	add	r3, pc, #252	@ (adr r3, 8007c6c <__kernel_sin+0x154>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fb99 	bl	80002a8 <__aeabi_dsub>
 8007b76:	4652      	mov	r2, sl
 8007b78:	465b      	mov	r3, fp
 8007b7a:	f7f8 fd4d 	bl	8000618 <__aeabi_dmul>
 8007b7e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007c74 <__kernel_sin+0x15c>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fb92 	bl	80002ac <__adddf3>
 8007b88:	4652      	mov	r2, sl
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	f7f8 fd44 	bl	8000618 <__aeabi_dmul>
 8007b90:	a33a      	add	r3, pc, #232	@ (adr r3, 8007c7c <__kernel_sin+0x164>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fb87 	bl	80002a8 <__aeabi_dsub>
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	f7f8 fd3b 	bl	8000618 <__aeabi_dmul>
 8007ba2:	a338      	add	r3, pc, #224	@ (adr r3, 8007c84 <__kernel_sin+0x16c>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fb80 	bl	80002ac <__adddf3>
 8007bac:	4606      	mov	r6, r0
 8007bae:	460f      	mov	r7, r1
 8007bb0:	f1b8 0f00 	cmp.w	r8, #0
 8007bb4:	d11b      	bne.n	8007bee <__kernel_sin+0xd6>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4650      	mov	r0, sl
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	f7f8 fd2b 	bl	8000618 <__aeabi_dmul>
 8007bc2:	a325      	add	r3, pc, #148	@ (adr r3, 8007c58 <__kernel_sin+0x140>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fb6e 	bl	80002a8 <__aeabi_dsub>
 8007bcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bd0:	f7f8 fd22 	bl	8000618 <__aeabi_dmul>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4620      	mov	r0, r4
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7f8 fb66 	bl	80002ac <__adddf3>
 8007be0:	4604      	mov	r4, r0
 8007be2:	460d      	mov	r5, r1
 8007be4:	ec45 4b10 	vmov	d0, r4, r5
 8007be8:	b005      	add	sp, #20
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8007c60 <__kernel_sin+0x148>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f7f8 fd0f 	bl	8000618 <__aeabi_dmul>
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4689      	mov	r9, r1
 8007c00:	463b      	mov	r3, r7
 8007c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c06:	f7f8 fd07 	bl	8000618 <__aeabi_dmul>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 fb49 	bl	80002a8 <__aeabi_dsub>
 8007c16:	4652      	mov	r2, sl
 8007c18:	465b      	mov	r3, fp
 8007c1a:	f7f8 fcfd 	bl	8000618 <__aeabi_dmul>
 8007c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c22:	f7f8 fb41 	bl	80002a8 <__aeabi_dsub>
 8007c26:	a30c      	add	r3, pc, #48	@ (adr r3, 8007c58 <__kernel_sin+0x140>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	460f      	mov	r7, r1
 8007c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c34:	f7f8 fcf0 	bl	8000618 <__aeabi_dmul>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 fb34 	bl	80002ac <__adddf3>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fb2c 	bl	80002a8 <__aeabi_dsub>
 8007c50:	e7c6      	b.n	8007be0 <__kernel_sin+0xc8>
 8007c52:	bf00      	nop
 8007c54:	f3af 8000 	nop.w
 8007c58:	55555549 	.word	0x55555549
 8007c5c:	3fc55555 	.word	0x3fc55555
 8007c60:	3fe00000 	.word	0x3fe00000
 8007c64:	5acfd57c 	.word	0x5acfd57c
 8007c68:	3de5d93a 	.word	0x3de5d93a
 8007c6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007c70:	3e5ae5e6 	.word	0x3e5ae5e6
 8007c74:	57b1fe7d 	.word	0x57b1fe7d
 8007c78:	3ec71de3 	.word	0x3ec71de3
 8007c7c:	19c161d5 	.word	0x19c161d5
 8007c80:	3f2a01a0 	.word	0x3f2a01a0
 8007c84:	1110f8a6 	.word	0x1110f8a6
 8007c88:	3f811111 	.word	0x3f811111
 8007c8c:	00000000 	.word	0x00000000

08007c90 <__ieee754_exp>:
 8007c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	ec55 4b10 	vmov	r4, r5, d0
 8007c98:	49b1      	ldr	r1, [pc, #708]	@ (8007f60 <__ieee754_exp+0x2d0>)
 8007c9a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007c9e:	428a      	cmp	r2, r1
 8007ca0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007ca4:	d936      	bls.n	8007d14 <__ieee754_exp+0x84>
 8007ca6:	49af      	ldr	r1, [pc, #700]	@ (8007f64 <__ieee754_exp+0x2d4>)
 8007ca8:	428a      	cmp	r2, r1
 8007caa:	d914      	bls.n	8007cd6 <__ieee754_exp+0x46>
 8007cac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007cb0:	4323      	orrs	r3, r4
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	d007      	beq.n	8007cc6 <__ieee754_exp+0x36>
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	4620      	mov	r0, r4
 8007cba:	4629      	mov	r1, r5
 8007cbc:	f7f8 faf6 	bl	80002ac <__adddf3>
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	460d      	mov	r5, r1
 8007cc4:	e002      	b.n	8007ccc <__ieee754_exp+0x3c>
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	f040 8118 	bne.w	8007efc <__ieee754_exp+0x26c>
 8007ccc:	ec45 4b10 	vmov	d0, r4, r5
 8007cd0:	b004      	add	sp, #16
 8007cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd6:	a38c      	add	r3, pc, #560	@ (adr r3, 8007f08 <__ieee754_exp+0x278>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 ff2a 	bl	8000b38 <__aeabi_dcmpgt>
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	b128      	cbz	r0, 8007cf4 <__ieee754_exp+0x64>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	b004      	add	sp, #16
 8007cec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	f001 b94a 	b.w	8008f88 <__math_oflow>
 8007cf4:	a386      	add	r3, pc, #536	@ (adr r3, 8007f10 <__ieee754_exp+0x280>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	f7f8 fefd 	bl	8000afc <__aeabi_dcmplt>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f000 8087 	beq.w	8007e16 <__ieee754_exp+0x186>
 8007d08:	4638      	mov	r0, r7
 8007d0a:	b004      	add	sp, #16
 8007d0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d10:	f001 b932 	b.w	8008f78 <__math_uflow>
 8007d14:	4b94      	ldr	r3, [pc, #592]	@ (8007f68 <__ieee754_exp+0x2d8>)
 8007d16:	429a      	cmp	r2, r3
 8007d18:	f240 80a9 	bls.w	8007e6e <__ieee754_exp+0x1de>
 8007d1c:	4b93      	ldr	r3, [pc, #588]	@ (8007f6c <__ieee754_exp+0x2dc>)
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d879      	bhi.n	8007e16 <__ieee754_exp+0x186>
 8007d22:	4b93      	ldr	r3, [pc, #588]	@ (8007f70 <__ieee754_exp+0x2e0>)
 8007d24:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	f7f8 faba 	bl	80002a8 <__aeabi_dsub>
 8007d34:	4b8f      	ldr	r3, [pc, #572]	@ (8007f74 <__ieee754_exp+0x2e4>)
 8007d36:	00f7      	lsls	r7, r6, #3
 8007d38:	443b      	add	r3, r7
 8007d3a:	ed93 7b00 	vldr	d7, [r3]
 8007d3e:	ed8d 7b00 	vstr	d7, [sp]
 8007d42:	f086 0a01 	eor.w	sl, r6, #1
 8007d46:	4680      	mov	r8, r0
 8007d48:	4689      	mov	r9, r1
 8007d4a:	ebaa 0a06 	sub.w	sl, sl, r6
 8007d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	f7f8 faa7 	bl	80002a8 <__aeabi_dsub>
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	4622      	mov	r2, r4
 8007d60:	462b      	mov	r3, r5
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 fc57 	bl	8000618 <__aeabi_dmul>
 8007d6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007f18 <__ieee754_exp+0x288>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	4606      	mov	r6, r0
 8007d72:	460f      	mov	r7, r1
 8007d74:	f7f8 fc50 	bl	8000618 <__aeabi_dmul>
 8007d78:	a369      	add	r3, pc, #420	@ (adr r3, 8007f20 <__ieee754_exp+0x290>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fa93 	bl	80002a8 <__aeabi_dsub>
 8007d82:	4632      	mov	r2, r6
 8007d84:	463b      	mov	r3, r7
 8007d86:	f7f8 fc47 	bl	8000618 <__aeabi_dmul>
 8007d8a:	a367      	add	r3, pc, #412	@ (adr r3, 8007f28 <__ieee754_exp+0x298>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fa8c 	bl	80002ac <__adddf3>
 8007d94:	4632      	mov	r2, r6
 8007d96:	463b      	mov	r3, r7
 8007d98:	f7f8 fc3e 	bl	8000618 <__aeabi_dmul>
 8007d9c:	a364      	add	r3, pc, #400	@ (adr r3, 8007f30 <__ieee754_exp+0x2a0>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f7f8 fa81 	bl	80002a8 <__aeabi_dsub>
 8007da6:	4632      	mov	r2, r6
 8007da8:	463b      	mov	r3, r7
 8007daa:	f7f8 fc35 	bl	8000618 <__aeabi_dmul>
 8007dae:	a362      	add	r3, pc, #392	@ (adr r3, 8007f38 <__ieee754_exp+0x2a8>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fa7a 	bl	80002ac <__adddf3>
 8007db8:	4632      	mov	r2, r6
 8007dba:	463b      	mov	r3, r7
 8007dbc:	f7f8 fc2c 	bl	8000618 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa6e 	bl	80002a8 <__aeabi_dsub>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	460f      	mov	r7, r1
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	f7f8 fc1e 	bl	8000618 <__aeabi_dmul>
 8007ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de0:	f1ba 0f00 	cmp.w	sl, #0
 8007de4:	d15c      	bne.n	8007ea0 <__ieee754_exp+0x210>
 8007de6:	2200      	movs	r2, #0
 8007de8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007dec:	4630      	mov	r0, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	f7f8 fa5a 	bl	80002a8 <__aeabi_dsub>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfc:	f7f8 fd36 	bl	800086c <__aeabi_ddiv>
 8007e00:	4622      	mov	r2, r4
 8007e02:	462b      	mov	r3, r5
 8007e04:	f7f8 fa50 	bl	80002a8 <__aeabi_dsub>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	495a      	ldr	r1, [pc, #360]	@ (8007f78 <__ieee754_exp+0x2e8>)
 8007e10:	f7f8 fa4a 	bl	80002a8 <__aeabi_dsub>
 8007e14:	e754      	b.n	8007cc0 <__ieee754_exp+0x30>
 8007e16:	4b59      	ldr	r3, [pc, #356]	@ (8007f7c <__ieee754_exp+0x2ec>)
 8007e18:	4620      	mov	r0, r4
 8007e1a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e1e:	4629      	mov	r1, r5
 8007e20:	a347      	add	r3, pc, #284	@ (adr r3, 8007f40 <__ieee754_exp+0x2b0>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fbf7 	bl	8000618 <__aeabi_dmul>
 8007e2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e2e:	f7f8 fa3d 	bl	80002ac <__adddf3>
 8007e32:	f7f8 fea1 	bl	8000b78 <__aeabi_d2iz>
 8007e36:	4682      	mov	sl, r0
 8007e38:	f7f8 fb84 	bl	8000544 <__aeabi_i2d>
 8007e3c:	a342      	add	r3, pc, #264	@ (adr r3, 8007f48 <__ieee754_exp+0x2b8>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	4606      	mov	r6, r0
 8007e44:	460f      	mov	r7, r1
 8007e46:	f7f8 fbe7 	bl	8000618 <__aeabi_dmul>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fa29 	bl	80002a8 <__aeabi_dsub>
 8007e56:	a33e      	add	r3, pc, #248	@ (adr r3, 8007f50 <__ieee754_exp+0x2c0>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	4689      	mov	r9, r1
 8007e60:	4630      	mov	r0, r6
 8007e62:	4639      	mov	r1, r7
 8007e64:	f7f8 fbd8 	bl	8000618 <__aeabi_dmul>
 8007e68:	e9cd 0100 	strd	r0, r1, [sp]
 8007e6c:	e76f      	b.n	8007d4e <__ieee754_exp+0xbe>
 8007e6e:	4b44      	ldr	r3, [pc, #272]	@ (8007f80 <__ieee754_exp+0x2f0>)
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d810      	bhi.n	8007e96 <__ieee754_exp+0x206>
 8007e74:	a338      	add	r3, pc, #224	@ (adr r3, 8007f58 <__ieee754_exp+0x2c8>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f7f8 fa15 	bl	80002ac <__adddf3>
 8007e82:	4b3d      	ldr	r3, [pc, #244]	@ (8007f78 <__ieee754_exp+0x2e8>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	f7f8 fe57 	bl	8000b38 <__aeabi_dcmpgt>
 8007e8a:	b138      	cbz	r0, 8007e9c <__ieee754_exp+0x20c>
 8007e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8007f78 <__ieee754_exp+0x2e8>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4620      	mov	r0, r4
 8007e92:	4629      	mov	r1, r5
 8007e94:	e712      	b.n	8007cbc <__ieee754_exp+0x2c>
 8007e96:	f04f 0a00 	mov.w	sl, #0
 8007e9a:	e760      	b.n	8007d5e <__ieee754_exp+0xce>
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	e75e      	b.n	8007d5e <__ieee754_exp+0xce>
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007eaa:	f7f8 f9fd 	bl	80002a8 <__aeabi_dsub>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb6:	f7f8 fcd9 	bl	800086c <__aeabi_ddiv>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ec2:	f7f8 f9f1 	bl	80002a8 <__aeabi_dsub>
 8007ec6:	4642      	mov	r2, r8
 8007ec8:	464b      	mov	r3, r9
 8007eca:	f7f8 f9ed 	bl	80002a8 <__aeabi_dsub>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	4928      	ldr	r1, [pc, #160]	@ (8007f78 <__ieee754_exp+0x2e8>)
 8007ed6:	f7f8 f9e7 	bl	80002a8 <__aeabi_dsub>
 8007eda:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8007ede:	4592      	cmp	sl, r2
 8007ee0:	db02      	blt.n	8007ee8 <__ieee754_exp+0x258>
 8007ee2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007ee6:	e6eb      	b.n	8007cc0 <__ieee754_exp+0x30>
 8007ee8:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8007eec:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8007ef6:	f7f8 fb8f 	bl	8000618 <__aeabi_dmul>
 8007efa:	e6e1      	b.n	8007cc0 <__ieee754_exp+0x30>
 8007efc:	2400      	movs	r4, #0
 8007efe:	2500      	movs	r5, #0
 8007f00:	e6e4      	b.n	8007ccc <__ieee754_exp+0x3c>
 8007f02:	bf00      	nop
 8007f04:	f3af 8000 	nop.w
 8007f08:	fefa39ef 	.word	0xfefa39ef
 8007f0c:	40862e42 	.word	0x40862e42
 8007f10:	d52d3051 	.word	0xd52d3051
 8007f14:	c0874910 	.word	0xc0874910
 8007f18:	72bea4d0 	.word	0x72bea4d0
 8007f1c:	3e663769 	.word	0x3e663769
 8007f20:	c5d26bf1 	.word	0xc5d26bf1
 8007f24:	3ebbbd41 	.word	0x3ebbbd41
 8007f28:	af25de2c 	.word	0xaf25de2c
 8007f2c:	3f11566a 	.word	0x3f11566a
 8007f30:	16bebd93 	.word	0x16bebd93
 8007f34:	3f66c16c 	.word	0x3f66c16c
 8007f38:	5555553e 	.word	0x5555553e
 8007f3c:	3fc55555 	.word	0x3fc55555
 8007f40:	652b82fe 	.word	0x652b82fe
 8007f44:	3ff71547 	.word	0x3ff71547
 8007f48:	fee00000 	.word	0xfee00000
 8007f4c:	3fe62e42 	.word	0x3fe62e42
 8007f50:	35793c76 	.word	0x35793c76
 8007f54:	3dea39ef 	.word	0x3dea39ef
 8007f58:	8800759c 	.word	0x8800759c
 8007f5c:	7e37e43c 	.word	0x7e37e43c
 8007f60:	40862e41 	.word	0x40862e41
 8007f64:	7fefffff 	.word	0x7fefffff
 8007f68:	3fd62e42 	.word	0x3fd62e42
 8007f6c:	3ff0a2b1 	.word	0x3ff0a2b1
 8007f70:	08009b50 	.word	0x08009b50
 8007f74:	08009b40 	.word	0x08009b40
 8007f78:	3ff00000 	.word	0x3ff00000
 8007f7c:	08009b60 	.word	0x08009b60
 8007f80:	3defffff 	.word	0x3defffff
 8007f84:	00000000 	.word	0x00000000

08007f88 <__ieee754_pow>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	b091      	sub	sp, #68	@ 0x44
 8007f8e:	ed8d 1b00 	vstr	d1, [sp]
 8007f92:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007f96:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007f9a:	ea5a 0001 	orrs.w	r0, sl, r1
 8007f9e:	ec57 6b10 	vmov	r6, r7, d0
 8007fa2:	d113      	bne.n	8007fcc <__ieee754_pow+0x44>
 8007fa4:	19b3      	adds	r3, r6, r6
 8007fa6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007faa:	4152      	adcs	r2, r2
 8007fac:	4298      	cmp	r0, r3
 8007fae:	4b9a      	ldr	r3, [pc, #616]	@ (8008218 <__ieee754_pow+0x290>)
 8007fb0:	4193      	sbcs	r3, r2
 8007fb2:	f080 84ee 	bcs.w	8008992 <__ieee754_pow+0xa0a>
 8007fb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fba:	4630      	mov	r0, r6
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	f7f8 f975 	bl	80002ac <__adddf3>
 8007fc2:	ec41 0b10 	vmov	d0, r0, r1
 8007fc6:	b011      	add	sp, #68	@ 0x44
 8007fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fcc:	4a93      	ldr	r2, [pc, #588]	@ (800821c <__ieee754_pow+0x294>)
 8007fce:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8007fd2:	4295      	cmp	r5, r2
 8007fd4:	46b8      	mov	r8, r7
 8007fd6:	4633      	mov	r3, r6
 8007fd8:	d80a      	bhi.n	8007ff0 <__ieee754_pow+0x68>
 8007fda:	d104      	bne.n	8007fe6 <__ieee754_pow+0x5e>
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	d1ea      	bne.n	8007fb6 <__ieee754_pow+0x2e>
 8007fe0:	45aa      	cmp	sl, r5
 8007fe2:	d8e8      	bhi.n	8007fb6 <__ieee754_pow+0x2e>
 8007fe4:	e001      	b.n	8007fea <__ieee754_pow+0x62>
 8007fe6:	4592      	cmp	sl, r2
 8007fe8:	d802      	bhi.n	8007ff0 <__ieee754_pow+0x68>
 8007fea:	4592      	cmp	sl, r2
 8007fec:	d10f      	bne.n	800800e <__ieee754_pow+0x86>
 8007fee:	b171      	cbz	r1, 800800e <__ieee754_pow+0x86>
 8007ff0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007ff4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007ff8:	ea58 0803 	orrs.w	r8, r8, r3
 8007ffc:	d1db      	bne.n	8007fb6 <__ieee754_pow+0x2e>
 8007ffe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008002:	18db      	adds	r3, r3, r3
 8008004:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008008:	4152      	adcs	r2, r2
 800800a:	4598      	cmp	r8, r3
 800800c:	e7cf      	b.n	8007fae <__ieee754_pow+0x26>
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	46ab      	mov	fp, r5
 8008014:	da43      	bge.n	800809e <__ieee754_pow+0x116>
 8008016:	4a82      	ldr	r2, [pc, #520]	@ (8008220 <__ieee754_pow+0x298>)
 8008018:	4592      	cmp	sl, r2
 800801a:	d856      	bhi.n	80080ca <__ieee754_pow+0x142>
 800801c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008020:	4592      	cmp	sl, r2
 8008022:	f240 84c5 	bls.w	80089b0 <__ieee754_pow+0xa28>
 8008026:	ea4f 522a 	mov.w	r2, sl, asr #20
 800802a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800802e:	2a14      	cmp	r2, #20
 8008030:	dd18      	ble.n	8008064 <__ieee754_pow+0xdc>
 8008032:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008036:	fa21 f402 	lsr.w	r4, r1, r2
 800803a:	fa04 f202 	lsl.w	r2, r4, r2
 800803e:	428a      	cmp	r2, r1
 8008040:	f040 84b6 	bne.w	80089b0 <__ieee754_pow+0xa28>
 8008044:	f004 0401 	and.w	r4, r4, #1
 8008048:	f1c4 0402 	rsb	r4, r4, #2
 800804c:	2900      	cmp	r1, #0
 800804e:	d159      	bne.n	8008104 <__ieee754_pow+0x17c>
 8008050:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008054:	d148      	bne.n	80080e8 <__ieee754_pow+0x160>
 8008056:	4632      	mov	r2, r6
 8008058:	463b      	mov	r3, r7
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 fadb 	bl	8000618 <__aeabi_dmul>
 8008062:	e7ae      	b.n	8007fc2 <__ieee754_pow+0x3a>
 8008064:	2900      	cmp	r1, #0
 8008066:	d14c      	bne.n	8008102 <__ieee754_pow+0x17a>
 8008068:	f1c2 0214 	rsb	r2, r2, #20
 800806c:	fa4a f402 	asr.w	r4, sl, r2
 8008070:	fa04 f202 	lsl.w	r2, r4, r2
 8008074:	4552      	cmp	r2, sl
 8008076:	f040 8498 	bne.w	80089aa <__ieee754_pow+0xa22>
 800807a:	f004 0401 	and.w	r4, r4, #1
 800807e:	f1c4 0402 	rsb	r4, r4, #2
 8008082:	4a68      	ldr	r2, [pc, #416]	@ (8008224 <__ieee754_pow+0x29c>)
 8008084:	4592      	cmp	sl, r2
 8008086:	d1e3      	bne.n	8008050 <__ieee754_pow+0xc8>
 8008088:	f1b9 0f00 	cmp.w	r9, #0
 800808c:	f280 8489 	bge.w	80089a2 <__ieee754_pow+0xa1a>
 8008090:	4964      	ldr	r1, [pc, #400]	@ (8008224 <__ieee754_pow+0x29c>)
 8008092:	4632      	mov	r2, r6
 8008094:	463b      	mov	r3, r7
 8008096:	2000      	movs	r0, #0
 8008098:	f7f8 fbe8 	bl	800086c <__aeabi_ddiv>
 800809c:	e791      	b.n	8007fc2 <__ieee754_pow+0x3a>
 800809e:	2400      	movs	r4, #0
 80080a0:	bb81      	cbnz	r1, 8008104 <__ieee754_pow+0x17c>
 80080a2:	4a5e      	ldr	r2, [pc, #376]	@ (800821c <__ieee754_pow+0x294>)
 80080a4:	4592      	cmp	sl, r2
 80080a6:	d1ec      	bne.n	8008082 <__ieee754_pow+0xfa>
 80080a8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80080ac:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80080b0:	431a      	orrs	r2, r3
 80080b2:	f000 846e 	beq.w	8008992 <__ieee754_pow+0xa0a>
 80080b6:	4b5c      	ldr	r3, [pc, #368]	@ (8008228 <__ieee754_pow+0x2a0>)
 80080b8:	429d      	cmp	r5, r3
 80080ba:	d908      	bls.n	80080ce <__ieee754_pow+0x146>
 80080bc:	f1b9 0f00 	cmp.w	r9, #0
 80080c0:	f280 846b 	bge.w	800899a <__ieee754_pow+0xa12>
 80080c4:	2000      	movs	r0, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	e77b      	b.n	8007fc2 <__ieee754_pow+0x3a>
 80080ca:	2402      	movs	r4, #2
 80080cc:	e7e8      	b.n	80080a0 <__ieee754_pow+0x118>
 80080ce:	f1b9 0f00 	cmp.w	r9, #0
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f04f 0100 	mov.w	r1, #0
 80080da:	f6bf af72 	bge.w	8007fc2 <__ieee754_pow+0x3a>
 80080de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80080e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80080e6:	e76c      	b.n	8007fc2 <__ieee754_pow+0x3a>
 80080e8:	4a50      	ldr	r2, [pc, #320]	@ (800822c <__ieee754_pow+0x2a4>)
 80080ea:	4591      	cmp	r9, r2
 80080ec:	d10a      	bne.n	8008104 <__ieee754_pow+0x17c>
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	db07      	blt.n	8008104 <__ieee754_pow+0x17c>
 80080f4:	ec47 6b10 	vmov	d0, r6, r7
 80080f8:	b011      	add	sp, #68	@ 0x44
 80080fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fe:	f7ff bb6b 	b.w	80077d8 <__ieee754_sqrt>
 8008102:	2400      	movs	r4, #0
 8008104:	ec47 6b10 	vmov	d0, r6, r7
 8008108:	9302      	str	r3, [sp, #8]
 800810a:	f000 fe85 	bl	8008e18 <fabs>
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	ec51 0b10 	vmov	r0, r1, d0
 8008114:	bb43      	cbnz	r3, 8008168 <__ieee754_pow+0x1e0>
 8008116:	4b43      	ldr	r3, [pc, #268]	@ (8008224 <__ieee754_pow+0x29c>)
 8008118:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800811c:	429a      	cmp	r2, r3
 800811e:	d000      	beq.n	8008122 <__ieee754_pow+0x19a>
 8008120:	bb15      	cbnz	r5, 8008168 <__ieee754_pow+0x1e0>
 8008122:	f1b9 0f00 	cmp.w	r9, #0
 8008126:	da05      	bge.n	8008134 <__ieee754_pow+0x1ac>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	2000      	movs	r0, #0
 800812e:	493d      	ldr	r1, [pc, #244]	@ (8008224 <__ieee754_pow+0x29c>)
 8008130:	f7f8 fb9c 	bl	800086c <__aeabi_ddiv>
 8008134:	f1b8 0f00 	cmp.w	r8, #0
 8008138:	f6bf af43 	bge.w	8007fc2 <__ieee754_pow+0x3a>
 800813c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008140:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008144:	4325      	orrs	r5, r4
 8008146:	d108      	bne.n	800815a <__ieee754_pow+0x1d2>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4610      	mov	r0, r2
 800814e:	4619      	mov	r1, r3
 8008150:	f7f8 f8aa 	bl	80002a8 <__aeabi_dsub>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	e79e      	b.n	8008098 <__ieee754_pow+0x110>
 800815a:	2c01      	cmp	r4, #1
 800815c:	f47f af31 	bne.w	8007fc2 <__ieee754_pow+0x3a>
 8008160:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008164:	4619      	mov	r1, r3
 8008166:	e72c      	b.n	8007fc2 <__ieee754_pow+0x3a>
 8008168:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800816c:	3b01      	subs	r3, #1
 800816e:	ea53 0204 	orrs.w	r2, r3, r4
 8008172:	d102      	bne.n	800817a <__ieee754_pow+0x1f2>
 8008174:	4632      	mov	r2, r6
 8008176:	463b      	mov	r3, r7
 8008178:	e7e8      	b.n	800814c <__ieee754_pow+0x1c4>
 800817a:	3c01      	subs	r4, #1
 800817c:	431c      	orrs	r4, r3
 800817e:	d016      	beq.n	80081ae <__ieee754_pow+0x226>
 8008180:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008208 <__ieee754_pow+0x280>
 8008184:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800818c:	f240 8110 	bls.w	80083b0 <__ieee754_pow+0x428>
 8008190:	4b27      	ldr	r3, [pc, #156]	@ (8008230 <__ieee754_pow+0x2a8>)
 8008192:	459a      	cmp	sl, r3
 8008194:	4b24      	ldr	r3, [pc, #144]	@ (8008228 <__ieee754_pow+0x2a0>)
 8008196:	d916      	bls.n	80081c6 <__ieee754_pow+0x23e>
 8008198:	429d      	cmp	r5, r3
 800819a:	d80b      	bhi.n	80081b4 <__ieee754_pow+0x22c>
 800819c:	f1b9 0f00 	cmp.w	r9, #0
 80081a0:	da0b      	bge.n	80081ba <__ieee754_pow+0x232>
 80081a2:	2000      	movs	r0, #0
 80081a4:	b011      	add	sp, #68	@ 0x44
 80081a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	f000 beed 	b.w	8008f88 <__math_oflow>
 80081ae:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8008210 <__ieee754_pow+0x288>
 80081b2:	e7e7      	b.n	8008184 <__ieee754_pow+0x1fc>
 80081b4:	f1b9 0f00 	cmp.w	r9, #0
 80081b8:	dcf3      	bgt.n	80081a2 <__ieee754_pow+0x21a>
 80081ba:	2000      	movs	r0, #0
 80081bc:	b011      	add	sp, #68	@ 0x44
 80081be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c2:	f000 bed9 	b.w	8008f78 <__math_uflow>
 80081c6:	429d      	cmp	r5, r3
 80081c8:	d20c      	bcs.n	80081e4 <__ieee754_pow+0x25c>
 80081ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2300      	movs	r3, #0
 80081d2:	f7f8 fc93 	bl	8000afc <__aeabi_dcmplt>
 80081d6:	3800      	subs	r0, #0
 80081d8:	bf18      	it	ne
 80081da:	2001      	movne	r0, #1
 80081dc:	f1b9 0f00 	cmp.w	r9, #0
 80081e0:	daec      	bge.n	80081bc <__ieee754_pow+0x234>
 80081e2:	e7df      	b.n	80081a4 <__ieee754_pow+0x21c>
 80081e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008224 <__ieee754_pow+0x29c>)
 80081e6:	429d      	cmp	r5, r3
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	d922      	bls.n	8008234 <__ieee754_pow+0x2ac>
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	2300      	movs	r3, #0
 80081f4:	f7f8 fc82 	bl	8000afc <__aeabi_dcmplt>
 80081f8:	3800      	subs	r0, #0
 80081fa:	bf18      	it	ne
 80081fc:	2001      	movne	r0, #1
 80081fe:	f1b9 0f00 	cmp.w	r9, #0
 8008202:	dccf      	bgt.n	80081a4 <__ieee754_pow+0x21c>
 8008204:	e7da      	b.n	80081bc <__ieee754_pow+0x234>
 8008206:	bf00      	nop
 8008208:	00000000 	.word	0x00000000
 800820c:	3ff00000 	.word	0x3ff00000
 8008210:	00000000 	.word	0x00000000
 8008214:	bff00000 	.word	0xbff00000
 8008218:	fff00000 	.word	0xfff00000
 800821c:	7ff00000 	.word	0x7ff00000
 8008220:	433fffff 	.word	0x433fffff
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	3fefffff 	.word	0x3fefffff
 800822c:	3fe00000 	.word	0x3fe00000
 8008230:	43f00000 	.word	0x43f00000
 8008234:	4b5a      	ldr	r3, [pc, #360]	@ (80083a0 <__ieee754_pow+0x418>)
 8008236:	f7f8 f837 	bl	80002a8 <__aeabi_dsub>
 800823a:	a351      	add	r3, pc, #324	@ (adr r3, 8008380 <__ieee754_pow+0x3f8>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	4604      	mov	r4, r0
 8008242:	460d      	mov	r5, r1
 8008244:	f7f8 f9e8 	bl	8000618 <__aeabi_dmul>
 8008248:	a34f      	add	r3, pc, #316	@ (adr r3, 8008388 <__ieee754_pow+0x400>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 f9df 	bl	8000618 <__aeabi_dmul>
 800825a:	4b52      	ldr	r3, [pc, #328]	@ (80083a4 <__ieee754_pow+0x41c>)
 800825c:	4682      	mov	sl, r0
 800825e:	468b      	mov	fp, r1
 8008260:	2200      	movs	r2, #0
 8008262:	4620      	mov	r0, r4
 8008264:	4629      	mov	r1, r5
 8008266:	f7f8 f9d7 	bl	8000618 <__aeabi_dmul>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	a148      	add	r1, pc, #288	@ (adr r1, 8008390 <__ieee754_pow+0x408>)
 8008270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008274:	f7f8 f818 	bl	80002a8 <__aeabi_dsub>
 8008278:	4622      	mov	r2, r4
 800827a:	462b      	mov	r3, r5
 800827c:	f7f8 f9cc 	bl	8000618 <__aeabi_dmul>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	2000      	movs	r0, #0
 8008286:	4948      	ldr	r1, [pc, #288]	@ (80083a8 <__ieee754_pow+0x420>)
 8008288:	f7f8 f80e 	bl	80002a8 <__aeabi_dsub>
 800828c:	4622      	mov	r2, r4
 800828e:	4680      	mov	r8, r0
 8008290:	4689      	mov	r9, r1
 8008292:	462b      	mov	r3, r5
 8008294:	4620      	mov	r0, r4
 8008296:	4629      	mov	r1, r5
 8008298:	f7f8 f9be 	bl	8000618 <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	f7f8 f9b8 	bl	8000618 <__aeabi_dmul>
 80082a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8008398 <__ieee754_pow+0x410>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f7f8 f9b3 	bl	8000618 <__aeabi_dmul>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4650      	mov	r0, sl
 80082b8:	4659      	mov	r1, fp
 80082ba:	f7f7 fff5 	bl	80002a8 <__aeabi_dsub>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	4630      	mov	r0, r6
 80082c8:	4639      	mov	r1, r7
 80082ca:	f7f7 ffef 	bl	80002ac <__adddf3>
 80082ce:	2400      	movs	r4, #0
 80082d0:	4632      	mov	r2, r6
 80082d2:	463b      	mov	r3, r7
 80082d4:	4620      	mov	r0, r4
 80082d6:	460d      	mov	r5, r1
 80082d8:	f7f7 ffe6 	bl	80002a8 <__aeabi_dsub>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4640      	mov	r0, r8
 80082e2:	4649      	mov	r1, r9
 80082e4:	f7f7 ffe0 	bl	80002a8 <__aeabi_dsub>
 80082e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082f0:	2300      	movs	r3, #0
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80082f8:	4606      	mov	r6, r0
 80082fa:	460f      	mov	r7, r1
 80082fc:	465b      	mov	r3, fp
 80082fe:	4652      	mov	r2, sl
 8008300:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008304:	f7f7 ffd0 	bl	80002a8 <__aeabi_dsub>
 8008308:	4622      	mov	r2, r4
 800830a:	462b      	mov	r3, r5
 800830c:	f7f8 f984 	bl	8000618 <__aeabi_dmul>
 8008310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008314:	4680      	mov	r8, r0
 8008316:	4689      	mov	r9, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f8 f97c 	bl	8000618 <__aeabi_dmul>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4640      	mov	r0, r8
 8008326:	4649      	mov	r1, r9
 8008328:	f7f7 ffc0 	bl	80002ac <__adddf3>
 800832c:	465b      	mov	r3, fp
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	4652      	mov	r2, sl
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f8 f96e 	bl	8000618 <__aeabi_dmul>
 800833c:	460b      	mov	r3, r1
 800833e:	4602      	mov	r2, r0
 8008340:	4680      	mov	r8, r0
 8008342:	4689      	mov	r9, r1
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f7 ffb0 	bl	80002ac <__adddf3>
 800834c:	4b17      	ldr	r3, [pc, #92]	@ (80083ac <__ieee754_pow+0x424>)
 800834e:	4299      	cmp	r1, r3
 8008350:	4604      	mov	r4, r0
 8008352:	460d      	mov	r5, r1
 8008354:	468b      	mov	fp, r1
 8008356:	f340 820b 	ble.w	8008770 <__ieee754_pow+0x7e8>
 800835a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800835e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008362:	4303      	orrs	r3, r0
 8008364:	f000 81ea 	beq.w	800873c <__ieee754_pow+0x7b4>
 8008368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800836c:	2200      	movs	r2, #0
 800836e:	2300      	movs	r3, #0
 8008370:	f7f8 fbc4 	bl	8000afc <__aeabi_dcmplt>
 8008374:	3800      	subs	r0, #0
 8008376:	bf18      	it	ne
 8008378:	2001      	movne	r0, #1
 800837a:	e713      	b.n	80081a4 <__ieee754_pow+0x21c>
 800837c:	f3af 8000 	nop.w
 8008380:	60000000 	.word	0x60000000
 8008384:	3ff71547 	.word	0x3ff71547
 8008388:	f85ddf44 	.word	0xf85ddf44
 800838c:	3e54ae0b 	.word	0x3e54ae0b
 8008390:	55555555 	.word	0x55555555
 8008394:	3fd55555 	.word	0x3fd55555
 8008398:	652b82fe 	.word	0x652b82fe
 800839c:	3ff71547 	.word	0x3ff71547
 80083a0:	3ff00000 	.word	0x3ff00000
 80083a4:	3fd00000 	.word	0x3fd00000
 80083a8:	3fe00000 	.word	0x3fe00000
 80083ac:	408fffff 	.word	0x408fffff
 80083b0:	4bd5      	ldr	r3, [pc, #852]	@ (8008708 <__ieee754_pow+0x780>)
 80083b2:	ea08 0303 	and.w	r3, r8, r3
 80083b6:	2200      	movs	r2, #0
 80083b8:	b92b      	cbnz	r3, 80083c6 <__ieee754_pow+0x43e>
 80083ba:	4bd4      	ldr	r3, [pc, #848]	@ (800870c <__ieee754_pow+0x784>)
 80083bc:	f7f8 f92c 	bl	8000618 <__aeabi_dmul>
 80083c0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80083c4:	468b      	mov	fp, r1
 80083c6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80083ca:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80083ce:	4413      	add	r3, r2
 80083d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d2:	4bcf      	ldr	r3, [pc, #828]	@ (8008710 <__ieee754_pow+0x788>)
 80083d4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80083d8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80083dc:	459b      	cmp	fp, r3
 80083de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80083e2:	dd08      	ble.n	80083f6 <__ieee754_pow+0x46e>
 80083e4:	4bcb      	ldr	r3, [pc, #812]	@ (8008714 <__ieee754_pow+0x78c>)
 80083e6:	459b      	cmp	fp, r3
 80083e8:	f340 81a5 	ble.w	8008736 <__ieee754_pow+0x7ae>
 80083ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ee:	3301      	adds	r3, #1
 80083f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80083f6:	f04f 0a00 	mov.w	sl, #0
 80083fa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80083fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008400:	4bc5      	ldr	r3, [pc, #788]	@ (8008718 <__ieee754_pow+0x790>)
 8008402:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008406:	ed93 7b00 	vldr	d7, [r3]
 800840a:	4629      	mov	r1, r5
 800840c:	ec53 2b17 	vmov	r2, r3, d7
 8008410:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008414:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008418:	f7f7 ff46 	bl	80002a8 <__aeabi_dsub>
 800841c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008428:	f7f7 ff40 	bl	80002ac <__adddf3>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	2000      	movs	r0, #0
 8008432:	49ba      	ldr	r1, [pc, #744]	@ (800871c <__ieee754_pow+0x794>)
 8008434:	f7f8 fa1a 	bl	800086c <__aeabi_ddiv>
 8008438:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f7f8 f8e8 	bl	8000618 <__aeabi_dmul>
 8008448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800844c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008450:	106d      	asrs	r5, r5, #1
 8008452:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008456:	f04f 0b00 	mov.w	fp, #0
 800845a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800845e:	4661      	mov	r1, ip
 8008460:	2200      	movs	r2, #0
 8008462:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008466:	4658      	mov	r0, fp
 8008468:	46e1      	mov	r9, ip
 800846a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800846e:	4614      	mov	r4, r2
 8008470:	461d      	mov	r5, r3
 8008472:	f7f8 f8d1 	bl	8000618 <__aeabi_dmul>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4630      	mov	r0, r6
 800847c:	4639      	mov	r1, r7
 800847e:	f7f7 ff13 	bl	80002a8 <__aeabi_dsub>
 8008482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	4620      	mov	r0, r4
 800848c:	4629      	mov	r1, r5
 800848e:	f7f7 ff0b 	bl	80002a8 <__aeabi_dsub>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800849a:	f7f7 ff05 	bl	80002a8 <__aeabi_dsub>
 800849e:	465a      	mov	r2, fp
 80084a0:	464b      	mov	r3, r9
 80084a2:	f7f8 f8b9 	bl	8000618 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4630      	mov	r0, r6
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7f7 fefb 	bl	80002a8 <__aeabi_dsub>
 80084b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80084b6:	f7f8 f8af 	bl	8000618 <__aeabi_dmul>
 80084ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084c2:	4610      	mov	r0, r2
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7f8 f8a7 	bl	8000618 <__aeabi_dmul>
 80084ca:	a37d      	add	r3, pc, #500	@ (adr r3, 80086c0 <__ieee754_pow+0x738>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	4604      	mov	r4, r0
 80084d2:	460d      	mov	r5, r1
 80084d4:	f7f8 f8a0 	bl	8000618 <__aeabi_dmul>
 80084d8:	a37b      	add	r3, pc, #492	@ (adr r3, 80086c8 <__ieee754_pow+0x740>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f7 fee5 	bl	80002ac <__adddf3>
 80084e2:	4622      	mov	r2, r4
 80084e4:	462b      	mov	r3, r5
 80084e6:	f7f8 f897 	bl	8000618 <__aeabi_dmul>
 80084ea:	a379      	add	r3, pc, #484	@ (adr r3, 80086d0 <__ieee754_pow+0x748>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f7 fedc 	bl	80002ac <__adddf3>
 80084f4:	4622      	mov	r2, r4
 80084f6:	462b      	mov	r3, r5
 80084f8:	f7f8 f88e 	bl	8000618 <__aeabi_dmul>
 80084fc:	a376      	add	r3, pc, #472	@ (adr r3, 80086d8 <__ieee754_pow+0x750>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f7 fed3 	bl	80002ac <__adddf3>
 8008506:	4622      	mov	r2, r4
 8008508:	462b      	mov	r3, r5
 800850a:	f7f8 f885 	bl	8000618 <__aeabi_dmul>
 800850e:	a374      	add	r3, pc, #464	@ (adr r3, 80086e0 <__ieee754_pow+0x758>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f7f7 feca 	bl	80002ac <__adddf3>
 8008518:	4622      	mov	r2, r4
 800851a:	462b      	mov	r3, r5
 800851c:	f7f8 f87c 	bl	8000618 <__aeabi_dmul>
 8008520:	a371      	add	r3, pc, #452	@ (adr r3, 80086e8 <__ieee754_pow+0x760>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f7 fec1 	bl	80002ac <__adddf3>
 800852a:	4622      	mov	r2, r4
 800852c:	4606      	mov	r6, r0
 800852e:	460f      	mov	r7, r1
 8008530:	462b      	mov	r3, r5
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f8 f86f 	bl	8000618 <__aeabi_dmul>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	f7f8 f869 	bl	8000618 <__aeabi_dmul>
 8008546:	465a      	mov	r2, fp
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	464b      	mov	r3, r9
 800854e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008552:	f7f7 feab 	bl	80002ac <__adddf3>
 8008556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800855a:	f7f8 f85d 	bl	8000618 <__aeabi_dmul>
 800855e:	4622      	mov	r2, r4
 8008560:	462b      	mov	r3, r5
 8008562:	f7f7 fea3 	bl	80002ac <__adddf3>
 8008566:	465a      	mov	r2, fp
 8008568:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800856c:	464b      	mov	r3, r9
 800856e:	4658      	mov	r0, fp
 8008570:	4649      	mov	r1, r9
 8008572:	f7f8 f851 	bl	8000618 <__aeabi_dmul>
 8008576:	4b6a      	ldr	r3, [pc, #424]	@ (8008720 <__ieee754_pow+0x798>)
 8008578:	2200      	movs	r2, #0
 800857a:	4606      	mov	r6, r0
 800857c:	460f      	mov	r7, r1
 800857e:	f7f7 fe95 	bl	80002ac <__adddf3>
 8008582:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008586:	f7f7 fe91 	bl	80002ac <__adddf3>
 800858a:	46d8      	mov	r8, fp
 800858c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008590:	460d      	mov	r5, r1
 8008592:	465a      	mov	r2, fp
 8008594:	460b      	mov	r3, r1
 8008596:	4640      	mov	r0, r8
 8008598:	4649      	mov	r1, r9
 800859a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800859e:	f7f8 f83b 	bl	8000618 <__aeabi_dmul>
 80085a2:	465c      	mov	r4, fp
 80085a4:	4680      	mov	r8, r0
 80085a6:	4689      	mov	r9, r1
 80085a8:	4b5d      	ldr	r3, [pc, #372]	@ (8008720 <__ieee754_pow+0x798>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	4620      	mov	r0, r4
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7f7 fe7a 	bl	80002a8 <__aeabi_dsub>
 80085b4:	4632      	mov	r2, r6
 80085b6:	463b      	mov	r3, r7
 80085b8:	f7f7 fe76 	bl	80002a8 <__aeabi_dsub>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085c4:	f7f7 fe70 	bl	80002a8 <__aeabi_dsub>
 80085c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085cc:	f7f8 f824 	bl	8000618 <__aeabi_dmul>
 80085d0:	4622      	mov	r2, r4
 80085d2:	4606      	mov	r6, r0
 80085d4:	460f      	mov	r7, r1
 80085d6:	462b      	mov	r3, r5
 80085d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085dc:	f7f8 f81c 	bl	8000618 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f7 fe60 	bl	80002ac <__adddf3>
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4640      	mov	r0, r8
 80085f6:	4649      	mov	r1, r9
 80085f8:	f7f7 fe58 	bl	80002ac <__adddf3>
 80085fc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008600:	a33b      	add	r3, pc, #236	@ (adr r3, 80086f0 <__ieee754_pow+0x768>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	4658      	mov	r0, fp
 8008608:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800860c:	460d      	mov	r5, r1
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	465c      	mov	r4, fp
 8008614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008618:	4642      	mov	r2, r8
 800861a:	464b      	mov	r3, r9
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7f7 fe42 	bl	80002a8 <__aeabi_dsub>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	f7f7 fe3c 	bl	80002a8 <__aeabi_dsub>
 8008630:	a331      	add	r3, pc, #196	@ (adr r3, 80086f8 <__ieee754_pow+0x770>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f7f7 ffef 	bl	8000618 <__aeabi_dmul>
 800863a:	a331      	add	r3, pc, #196	@ (adr r3, 8008700 <__ieee754_pow+0x778>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	4606      	mov	r6, r0
 8008642:	460f      	mov	r7, r1
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f7 ffe6 	bl	8000618 <__aeabi_dmul>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f7 fe2a 	bl	80002ac <__adddf3>
 8008658:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800865a:	4b32      	ldr	r3, [pc, #200]	@ (8008724 <__ieee754_pow+0x79c>)
 800865c:	4413      	add	r3, r2
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f7 fe23 	bl	80002ac <__adddf3>
 8008666:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800866a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800866c:	f7f7 ff6a 	bl	8000544 <__aeabi_i2d>
 8008670:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008672:	4b2d      	ldr	r3, [pc, #180]	@ (8008728 <__ieee754_pow+0x7a0>)
 8008674:	4413      	add	r3, r2
 8008676:	e9d3 8900 	ldrd	r8, r9, [r3]
 800867a:	4606      	mov	r6, r0
 800867c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008680:	460f      	mov	r7, r1
 8008682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008686:	f7f7 fe11 	bl	80002ac <__adddf3>
 800868a:	4642      	mov	r2, r8
 800868c:	464b      	mov	r3, r9
 800868e:	f7f7 fe0d 	bl	80002ac <__adddf3>
 8008692:	4632      	mov	r2, r6
 8008694:	463b      	mov	r3, r7
 8008696:	f7f7 fe09 	bl	80002ac <__adddf3>
 800869a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800869e:	4632      	mov	r2, r6
 80086a0:	463b      	mov	r3, r7
 80086a2:	4658      	mov	r0, fp
 80086a4:	460d      	mov	r5, r1
 80086a6:	f7f7 fdff 	bl	80002a8 <__aeabi_dsub>
 80086aa:	4642      	mov	r2, r8
 80086ac:	464b      	mov	r3, r9
 80086ae:	f7f7 fdfb 	bl	80002a8 <__aeabi_dsub>
 80086b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086b6:	f7f7 fdf7 	bl	80002a8 <__aeabi_dsub>
 80086ba:	465c      	mov	r4, fp
 80086bc:	e036      	b.n	800872c <__ieee754_pow+0x7a4>
 80086be:	bf00      	nop
 80086c0:	4a454eef 	.word	0x4a454eef
 80086c4:	3fca7e28 	.word	0x3fca7e28
 80086c8:	93c9db65 	.word	0x93c9db65
 80086cc:	3fcd864a 	.word	0x3fcd864a
 80086d0:	a91d4101 	.word	0xa91d4101
 80086d4:	3fd17460 	.word	0x3fd17460
 80086d8:	518f264d 	.word	0x518f264d
 80086dc:	3fd55555 	.word	0x3fd55555
 80086e0:	db6fabff 	.word	0xdb6fabff
 80086e4:	3fdb6db6 	.word	0x3fdb6db6
 80086e8:	33333303 	.word	0x33333303
 80086ec:	3fe33333 	.word	0x3fe33333
 80086f0:	e0000000 	.word	0xe0000000
 80086f4:	3feec709 	.word	0x3feec709
 80086f8:	dc3a03fd 	.word	0xdc3a03fd
 80086fc:	3feec709 	.word	0x3feec709
 8008700:	145b01f5 	.word	0x145b01f5
 8008704:	be3e2fe0 	.word	0xbe3e2fe0
 8008708:	7ff00000 	.word	0x7ff00000
 800870c:	43400000 	.word	0x43400000
 8008710:	0003988e 	.word	0x0003988e
 8008714:	000bb679 	.word	0x000bb679
 8008718:	08009b90 	.word	0x08009b90
 800871c:	3ff00000 	.word	0x3ff00000
 8008720:	40080000 	.word	0x40080000
 8008724:	08009b70 	.word	0x08009b70
 8008728:	08009b80 	.word	0x08009b80
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008734:	e5d6      	b.n	80082e4 <__ieee754_pow+0x35c>
 8008736:	f04f 0a01 	mov.w	sl, #1
 800873a:	e65e      	b.n	80083fa <__ieee754_pow+0x472>
 800873c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008a14 <__ieee754_pow+0xa8c>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	4630      	mov	r0, r6
 8008744:	4639      	mov	r1, r7
 8008746:	f7f7 fdb1 	bl	80002ac <__adddf3>
 800874a:	4642      	mov	r2, r8
 800874c:	e9cd 0100 	strd	r0, r1, [sp]
 8008750:	464b      	mov	r3, r9
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f7f7 fda7 	bl	80002a8 <__aeabi_dsub>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008762:	f7f8 f9e9 	bl	8000b38 <__aeabi_dcmpgt>
 8008766:	2800      	cmp	r0, #0
 8008768:	f47f adfe 	bne.w	8008368 <__ieee754_pow+0x3e0>
 800876c:	4ba2      	ldr	r3, [pc, #648]	@ (80089f8 <__ieee754_pow+0xa70>)
 800876e:	e022      	b.n	80087b6 <__ieee754_pow+0x82e>
 8008770:	4ca2      	ldr	r4, [pc, #648]	@ (80089fc <__ieee754_pow+0xa74>)
 8008772:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008776:	42a3      	cmp	r3, r4
 8008778:	d919      	bls.n	80087ae <__ieee754_pow+0x826>
 800877a:	4ba1      	ldr	r3, [pc, #644]	@ (8008a00 <__ieee754_pow+0xa78>)
 800877c:	440b      	add	r3, r1
 800877e:	4303      	orrs	r3, r0
 8008780:	d009      	beq.n	8008796 <__ieee754_pow+0x80e>
 8008782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	f7f8 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800878e:	3800      	subs	r0, #0
 8008790:	bf18      	it	ne
 8008792:	2001      	movne	r0, #1
 8008794:	e512      	b.n	80081bc <__ieee754_pow+0x234>
 8008796:	4642      	mov	r2, r8
 8008798:	464b      	mov	r3, r9
 800879a:	f7f7 fd85 	bl	80002a8 <__aeabi_dsub>
 800879e:	4632      	mov	r2, r6
 80087a0:	463b      	mov	r3, r7
 80087a2:	f7f8 f9bf 	bl	8000b24 <__aeabi_dcmpge>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d1eb      	bne.n	8008782 <__ieee754_pow+0x7fa>
 80087aa:	4b96      	ldr	r3, [pc, #600]	@ (8008a04 <__ieee754_pow+0xa7c>)
 80087ac:	e003      	b.n	80087b6 <__ieee754_pow+0x82e>
 80087ae:	4a96      	ldr	r2, [pc, #600]	@ (8008a08 <__ieee754_pow+0xa80>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	f240 80e7 	bls.w	8008984 <__ieee754_pow+0x9fc>
 80087b6:	151b      	asrs	r3, r3, #20
 80087b8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80087bc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80087c0:	fa4a fa03 	asr.w	sl, sl, r3
 80087c4:	44da      	add	sl, fp
 80087c6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80087ca:	4890      	ldr	r0, [pc, #576]	@ (8008a0c <__ieee754_pow+0xa84>)
 80087cc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80087d0:	4108      	asrs	r0, r1
 80087d2:	ea00 030a 	and.w	r3, r0, sl
 80087d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80087da:	f1c1 0114 	rsb	r1, r1, #20
 80087de:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80087e2:	fa4a fa01 	asr.w	sl, sl, r1
 80087e6:	f1bb 0f00 	cmp.w	fp, #0
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	bfb8      	it	lt
 80087f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80087f8:	f7f7 fd56 	bl	80002a8 <__aeabi_dsub>
 80087fc:	4680      	mov	r8, r0
 80087fe:	4689      	mov	r9, r1
 8008800:	4632      	mov	r2, r6
 8008802:	463b      	mov	r3, r7
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f7 fd50 	bl	80002ac <__adddf3>
 800880c:	2400      	movs	r4, #0
 800880e:	a36a      	add	r3, pc, #424	@ (adr r3, 80089b8 <__ieee754_pow+0xa30>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	4620      	mov	r0, r4
 8008816:	460d      	mov	r5, r1
 8008818:	f7f7 fefe 	bl	8000618 <__aeabi_dmul>
 800881c:	4642      	mov	r2, r8
 800881e:	e9cd 0100 	strd	r0, r1, [sp]
 8008822:	464b      	mov	r3, r9
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f7f7 fd3e 	bl	80002a8 <__aeabi_dsub>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f7 fd38 	bl	80002a8 <__aeabi_dsub>
 8008838:	a361      	add	r3, pc, #388	@ (adr r3, 80089c0 <__ieee754_pow+0xa38>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f7f7 feeb 	bl	8000618 <__aeabi_dmul>
 8008842:	a361      	add	r3, pc, #388	@ (adr r3, 80089c8 <__ieee754_pow+0xa40>)
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	4680      	mov	r8, r0
 800884a:	4689      	mov	r9, r1
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	f7f7 fee2 	bl	8000618 <__aeabi_dmul>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4640      	mov	r0, r8
 800885a:	4649      	mov	r1, r9
 800885c:	f7f7 fd26 	bl	80002ac <__adddf3>
 8008860:	4604      	mov	r4, r0
 8008862:	460d      	mov	r5, r1
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800886c:	f7f7 fd1e 	bl	80002ac <__adddf3>
 8008870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008874:	4680      	mov	r8, r0
 8008876:	4689      	mov	r9, r1
 8008878:	f7f7 fd16 	bl	80002a8 <__aeabi_dsub>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4620      	mov	r0, r4
 8008882:	4629      	mov	r1, r5
 8008884:	f7f7 fd10 	bl	80002a8 <__aeabi_dsub>
 8008888:	4642      	mov	r2, r8
 800888a:	4606      	mov	r6, r0
 800888c:	460f      	mov	r7, r1
 800888e:	464b      	mov	r3, r9
 8008890:	4640      	mov	r0, r8
 8008892:	4649      	mov	r1, r9
 8008894:	f7f7 fec0 	bl	8000618 <__aeabi_dmul>
 8008898:	a34d      	add	r3, pc, #308	@ (adr r3, 80089d0 <__ieee754_pow+0xa48>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	f7f7 feb9 	bl	8000618 <__aeabi_dmul>
 80088a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80089d8 <__ieee754_pow+0xa50>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 fcfc 	bl	80002a8 <__aeabi_dsub>
 80088b0:	4622      	mov	r2, r4
 80088b2:	462b      	mov	r3, r5
 80088b4:	f7f7 feb0 	bl	8000618 <__aeabi_dmul>
 80088b8:	a349      	add	r3, pc, #292	@ (adr r3, 80089e0 <__ieee754_pow+0xa58>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fcf5 	bl	80002ac <__adddf3>
 80088c2:	4622      	mov	r2, r4
 80088c4:	462b      	mov	r3, r5
 80088c6:	f7f7 fea7 	bl	8000618 <__aeabi_dmul>
 80088ca:	a347      	add	r3, pc, #284	@ (adr r3, 80089e8 <__ieee754_pow+0xa60>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fcea 	bl	80002a8 <__aeabi_dsub>
 80088d4:	4622      	mov	r2, r4
 80088d6:	462b      	mov	r3, r5
 80088d8:	f7f7 fe9e 	bl	8000618 <__aeabi_dmul>
 80088dc:	a344      	add	r3, pc, #272	@ (adr r3, 80089f0 <__ieee754_pow+0xa68>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f7f7 fce3 	bl	80002ac <__adddf3>
 80088e6:	4622      	mov	r2, r4
 80088e8:	462b      	mov	r3, r5
 80088ea:	f7f7 fe95 	bl	8000618 <__aeabi_dmul>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4640      	mov	r0, r8
 80088f4:	4649      	mov	r1, r9
 80088f6:	f7f7 fcd7 	bl	80002a8 <__aeabi_dsub>
 80088fa:	4604      	mov	r4, r0
 80088fc:	460d      	mov	r5, r1
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f7 fe87 	bl	8000618 <__aeabi_dmul>
 800890a:	2200      	movs	r2, #0
 800890c:	e9cd 0100 	strd	r0, r1, [sp]
 8008910:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fcc6 	bl	80002a8 <__aeabi_dsub>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008924:	f7f7 ffa2 	bl	800086c <__aeabi_ddiv>
 8008928:	4632      	mov	r2, r6
 800892a:	4604      	mov	r4, r0
 800892c:	460d      	mov	r5, r1
 800892e:	463b      	mov	r3, r7
 8008930:	4640      	mov	r0, r8
 8008932:	4649      	mov	r1, r9
 8008934:	f7f7 fe70 	bl	8000618 <__aeabi_dmul>
 8008938:	4632      	mov	r2, r6
 800893a:	463b      	mov	r3, r7
 800893c:	f7f7 fcb6 	bl	80002ac <__adddf3>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f7 fcae 	bl	80002a8 <__aeabi_dsub>
 800894c:	4642      	mov	r2, r8
 800894e:	464b      	mov	r3, r9
 8008950:	f7f7 fcaa 	bl	80002a8 <__aeabi_dsub>
 8008954:	460b      	mov	r3, r1
 8008956:	4602      	mov	r2, r0
 8008958:	492d      	ldr	r1, [pc, #180]	@ (8008a10 <__ieee754_pow+0xa88>)
 800895a:	2000      	movs	r0, #0
 800895c:	f7f7 fca4 	bl	80002a8 <__aeabi_dsub>
 8008960:	ec41 0b10 	vmov	d0, r0, r1
 8008964:	ee10 3a90 	vmov	r3, s1
 8008968:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800896c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008970:	da0b      	bge.n	800898a <__ieee754_pow+0xa02>
 8008972:	4650      	mov	r0, sl
 8008974:	f000 fa58 	bl	8008e28 <scalbn>
 8008978:	ec51 0b10 	vmov	r0, r1, d0
 800897c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008980:	f7ff bb6d 	b.w	800805e <__ieee754_pow+0xd6>
 8008984:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008988:	e73a      	b.n	8008800 <__ieee754_pow+0x878>
 800898a:	ec51 0b10 	vmov	r0, r1, d0
 800898e:	4619      	mov	r1, r3
 8008990:	e7f4      	b.n	800897c <__ieee754_pow+0x9f4>
 8008992:	491f      	ldr	r1, [pc, #124]	@ (8008a10 <__ieee754_pow+0xa88>)
 8008994:	2000      	movs	r0, #0
 8008996:	f7ff bb14 	b.w	8007fc2 <__ieee754_pow+0x3a>
 800899a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800899e:	f7ff bb10 	b.w	8007fc2 <__ieee754_pow+0x3a>
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7ff bb0c 	b.w	8007fc2 <__ieee754_pow+0x3a>
 80089aa:	460c      	mov	r4, r1
 80089ac:	f7ff bb69 	b.w	8008082 <__ieee754_pow+0xfa>
 80089b0:	2400      	movs	r4, #0
 80089b2:	f7ff bb4b 	b.w	800804c <__ieee754_pow+0xc4>
 80089b6:	bf00      	nop
 80089b8:	00000000 	.word	0x00000000
 80089bc:	3fe62e43 	.word	0x3fe62e43
 80089c0:	fefa39ef 	.word	0xfefa39ef
 80089c4:	3fe62e42 	.word	0x3fe62e42
 80089c8:	0ca86c39 	.word	0x0ca86c39
 80089cc:	be205c61 	.word	0xbe205c61
 80089d0:	72bea4d0 	.word	0x72bea4d0
 80089d4:	3e663769 	.word	0x3e663769
 80089d8:	c5d26bf1 	.word	0xc5d26bf1
 80089dc:	3ebbbd41 	.word	0x3ebbbd41
 80089e0:	af25de2c 	.word	0xaf25de2c
 80089e4:	3f11566a 	.word	0x3f11566a
 80089e8:	16bebd93 	.word	0x16bebd93
 80089ec:	3f66c16c 	.word	0x3f66c16c
 80089f0:	5555553e 	.word	0x5555553e
 80089f4:	3fc55555 	.word	0x3fc55555
 80089f8:	40900000 	.word	0x40900000
 80089fc:	4090cbff 	.word	0x4090cbff
 8008a00:	3f6f3400 	.word	0x3f6f3400
 8008a04:	4090cc00 	.word	0x4090cc00
 8008a08:	3fe00000 	.word	0x3fe00000
 8008a0c:	fff00000 	.word	0xfff00000
 8008a10:	3ff00000 	.word	0x3ff00000
 8008a14:	652b82fe 	.word	0x652b82fe
 8008a18:	3c971547 	.word	0x3c971547
 8008a1c:	00000000 	.word	0x00000000

08008a20 <__ieee754_rem_pio2>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	ec57 6b10 	vmov	r6, r7, d0
 8008a28:	4bc5      	ldr	r3, [pc, #788]	@ (8008d40 <__ieee754_rem_pio2+0x320>)
 8008a2a:	b08d      	sub	sp, #52	@ 0x34
 8008a2c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008a30:	4598      	cmp	r8, r3
 8008a32:	4604      	mov	r4, r0
 8008a34:	9704      	str	r7, [sp, #16]
 8008a36:	d807      	bhi.n	8008a48 <__ieee754_rem_pio2+0x28>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	ed80 0b00 	vstr	d0, [r0]
 8008a40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008a44:	2500      	movs	r5, #0
 8008a46:	e028      	b.n	8008a9a <__ieee754_rem_pio2+0x7a>
 8008a48:	4bbe      	ldr	r3, [pc, #760]	@ (8008d44 <__ieee754_rem_pio2+0x324>)
 8008a4a:	4598      	cmp	r8, r3
 8008a4c:	d878      	bhi.n	8008b40 <__ieee754_rem_pio2+0x120>
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	4dbd      	ldr	r5, [pc, #756]	@ (8008d48 <__ieee754_rem_pio2+0x328>)
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	4630      	mov	r0, r6
 8008a56:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008d08 <__ieee754_rem_pio2+0x2e8>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	dd38      	ble.n	8008ad2 <__ieee754_rem_pio2+0xb2>
 8008a60:	f7f7 fc22 	bl	80002a8 <__aeabi_dsub>
 8008a64:	45a8      	cmp	r8, r5
 8008a66:	4606      	mov	r6, r0
 8008a68:	460f      	mov	r7, r1
 8008a6a:	d01a      	beq.n	8008aa2 <__ieee754_rem_pio2+0x82>
 8008a6c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008d10 <__ieee754_rem_pio2+0x2f0>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fc19 	bl	80002a8 <__aeabi_dsub>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4680      	mov	r8, r0
 8008a7c:	4689      	mov	r9, r1
 8008a7e:	4630      	mov	r0, r6
 8008a80:	4639      	mov	r1, r7
 8008a82:	f7f7 fc11 	bl	80002a8 <__aeabi_dsub>
 8008a86:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008d10 <__ieee754_rem_pio2+0x2f0>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 fc0c 	bl	80002a8 <__aeabi_dsub>
 8008a90:	e9c4 8900 	strd	r8, r9, [r4]
 8008a94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a98:	2501      	movs	r5, #1
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	b00d      	add	sp, #52	@ 0x34
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	a39d      	add	r3, pc, #628	@ (adr r3, 8008d18 <__ieee754_rem_pio2+0x2f8>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f7f7 fbfe 	bl	80002a8 <__aeabi_dsub>
 8008aac:	a39c      	add	r3, pc, #624	@ (adr r3, 8008d20 <__ieee754_rem_pio2+0x300>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	f7f7 fbf7 	bl	80002a8 <__aeabi_dsub>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4689      	mov	r9, r1
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f7 fbef 	bl	80002a8 <__aeabi_dsub>
 8008aca:	a395      	add	r3, pc, #596	@ (adr r3, 8008d20 <__ieee754_rem_pio2+0x300>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	e7dc      	b.n	8008a8c <__ieee754_rem_pio2+0x6c>
 8008ad2:	f7f7 fbeb 	bl	80002ac <__adddf3>
 8008ad6:	45a8      	cmp	r8, r5
 8008ad8:	4606      	mov	r6, r0
 8008ada:	460f      	mov	r7, r1
 8008adc:	d018      	beq.n	8008b10 <__ieee754_rem_pio2+0xf0>
 8008ade:	a38c      	add	r3, pc, #560	@ (adr r3, 8008d10 <__ieee754_rem_pio2+0x2f0>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 fbe2 	bl	80002ac <__adddf3>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4680      	mov	r8, r0
 8008aee:	4689      	mov	r9, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fbd8 	bl	80002a8 <__aeabi_dsub>
 8008af8:	a385      	add	r3, pc, #532	@ (adr r3, 8008d10 <__ieee754_rem_pio2+0x2f0>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 fbd5 	bl	80002ac <__adddf3>
 8008b02:	f04f 35ff 	mov.w	r5, #4294967295
 8008b06:	e9c4 8900 	strd	r8, r9, [r4]
 8008b0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b0e:	e7c4      	b.n	8008a9a <__ieee754_rem_pio2+0x7a>
 8008b10:	a381      	add	r3, pc, #516	@ (adr r3, 8008d18 <__ieee754_rem_pio2+0x2f8>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 fbc9 	bl	80002ac <__adddf3>
 8008b1a:	a381      	add	r3, pc, #516	@ (adr r3, 8008d20 <__ieee754_rem_pio2+0x300>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	4606      	mov	r6, r0
 8008b22:	460f      	mov	r7, r1
 8008b24:	f7f7 fbc2 	bl	80002ac <__adddf3>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 fbb8 	bl	80002a8 <__aeabi_dsub>
 8008b38:	a379      	add	r3, pc, #484	@ (adr r3, 8008d20 <__ieee754_rem_pio2+0x300>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	e7de      	b.n	8008afe <__ieee754_rem_pio2+0xde>
 8008b40:	4b82      	ldr	r3, [pc, #520]	@ (8008d4c <__ieee754_rem_pio2+0x32c>)
 8008b42:	4598      	cmp	r8, r3
 8008b44:	f200 80d1 	bhi.w	8008cea <__ieee754_rem_pio2+0x2ca>
 8008b48:	f000 f966 	bl	8008e18 <fabs>
 8008b4c:	ec57 6b10 	vmov	r6, r7, d0
 8008b50:	a375      	add	r3, pc, #468	@ (adr r3, 8008d28 <__ieee754_rem_pio2+0x308>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	4630      	mov	r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	f7f7 fd5d 	bl	8000618 <__aeabi_dmul>
 8008b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8008d50 <__ieee754_rem_pio2+0x330>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	f7f7 fba3 	bl	80002ac <__adddf3>
 8008b66:	f7f8 f807 	bl	8000b78 <__aeabi_d2iz>
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	f7f7 fcea 	bl	8000544 <__aeabi_i2d>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b78:	a363      	add	r3, pc, #396	@ (adr r3, 8008d08 <__ieee754_rem_pio2+0x2e8>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fd4b 	bl	8000618 <__aeabi_dmul>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	f7f7 fb8d 	bl	80002a8 <__aeabi_dsub>
 8008b8e:	a360      	add	r3, pc, #384	@ (adr r3, 8008d10 <__ieee754_rem_pio2+0x2f0>)
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	4682      	mov	sl, r0
 8008b96:	468b      	mov	fp, r1
 8008b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9c:	f7f7 fd3c 	bl	8000618 <__aeabi_dmul>
 8008ba0:	2d1f      	cmp	r5, #31
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	dc0c      	bgt.n	8008bc2 <__ieee754_rem_pio2+0x1a2>
 8008ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8008d54 <__ieee754_rem_pio2+0x334>)
 8008baa:	1e6a      	subs	r2, r5, #1
 8008bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb0:	4543      	cmp	r3, r8
 8008bb2:	d006      	beq.n	8008bc2 <__ieee754_rem_pio2+0x1a2>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	4650      	mov	r0, sl
 8008bba:	4659      	mov	r1, fp
 8008bbc:	f7f7 fb74 	bl	80002a8 <__aeabi_dsub>
 8008bc0:	e00e      	b.n	8008be0 <__ieee754_rem_pio2+0x1c0>
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	4650      	mov	r0, sl
 8008bc8:	4659      	mov	r1, fp
 8008bca:	f7f7 fb6d 	bl	80002a8 <__aeabi_dsub>
 8008bce:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008bd2:	9305      	str	r3, [sp, #20]
 8008bd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008bd8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008bdc:	2b10      	cmp	r3, #16
 8008bde:	dc02      	bgt.n	8008be6 <__ieee754_rem_pio2+0x1c6>
 8008be0:	e9c4 0100 	strd	r0, r1, [r4]
 8008be4:	e039      	b.n	8008c5a <__ieee754_rem_pio2+0x23a>
 8008be6:	a34c      	add	r3, pc, #304	@ (adr r3, 8008d18 <__ieee754_rem_pio2+0x2f8>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf0:	f7f7 fd12 	bl	8000618 <__aeabi_dmul>
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	4659      	mov	r1, fp
 8008c00:	f7f7 fb52 	bl	80002a8 <__aeabi_dsub>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4689      	mov	r9, r1
 8008c0c:	4650      	mov	r0, sl
 8008c0e:	4659      	mov	r1, fp
 8008c10:	f7f7 fb4a 	bl	80002a8 <__aeabi_dsub>
 8008c14:	4632      	mov	r2, r6
 8008c16:	463b      	mov	r3, r7
 8008c18:	f7f7 fb46 	bl	80002a8 <__aeabi_dsub>
 8008c1c:	a340      	add	r3, pc, #256	@ (adr r3, 8008d20 <__ieee754_rem_pio2+0x300>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c2a:	f7f7 fcf5 	bl	8000618 <__aeabi_dmul>
 8008c2e:	4632      	mov	r2, r6
 8008c30:	463b      	mov	r3, r7
 8008c32:	f7f7 fb39 	bl	80002a8 <__aeabi_dsub>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	4640      	mov	r0, r8
 8008c40:	4649      	mov	r1, r9
 8008c42:	f7f7 fb31 	bl	80002a8 <__aeabi_dsub>
 8008c46:	9a05      	ldr	r2, [sp, #20]
 8008c48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b31      	cmp	r3, #49	@ 0x31
 8008c50:	dc20      	bgt.n	8008c94 <__ieee754_rem_pio2+0x274>
 8008c52:	e9c4 0100 	strd	r0, r1, [r4]
 8008c56:	46c2      	mov	sl, r8
 8008c58:	46cb      	mov	fp, r9
 8008c5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c5e:	4650      	mov	r0, sl
 8008c60:	4642      	mov	r2, r8
 8008c62:	464b      	mov	r3, r9
 8008c64:	4659      	mov	r1, fp
 8008c66:	f7f7 fb1f 	bl	80002a8 <__aeabi_dsub>
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	f7f7 fb1b 	bl	80002a8 <__aeabi_dsub>
 8008c72:	9b04      	ldr	r3, [sp, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c7a:	f6bf af0e 	bge.w	8008a9a <__ieee754_rem_pio2+0x7a>
 8008c7e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008c82:	6063      	str	r3, [r4, #4]
 8008c84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c88:	f8c4 8000 	str.w	r8, [r4]
 8008c8c:	60a0      	str	r0, [r4, #8]
 8008c8e:	60e3      	str	r3, [r4, #12]
 8008c90:	426d      	negs	r5, r5
 8008c92:	e702      	b.n	8008a9a <__ieee754_rem_pio2+0x7a>
 8008c94:	a326      	add	r3, pc, #152	@ (adr r3, 8008d30 <__ieee754_rem_pio2+0x310>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c9e:	f7f7 fcbb 	bl	8000618 <__aeabi_dmul>
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4640      	mov	r0, r8
 8008cac:	4649      	mov	r1, r9
 8008cae:	f7f7 fafb 	bl	80002a8 <__aeabi_dsub>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4682      	mov	sl, r0
 8008cb8:	468b      	mov	fp, r1
 8008cba:	4640      	mov	r0, r8
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	f7f7 faf3 	bl	80002a8 <__aeabi_dsub>
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	463b      	mov	r3, r7
 8008cc6:	f7f7 faef 	bl	80002a8 <__aeabi_dsub>
 8008cca:	a31b      	add	r3, pc, #108	@ (adr r3, 8008d38 <__ieee754_rem_pio2+0x318>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	460f      	mov	r7, r1
 8008cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd8:	f7f7 fc9e 	bl	8000618 <__aeabi_dmul>
 8008cdc:	4632      	mov	r2, r6
 8008cde:	463b      	mov	r3, r7
 8008ce0:	f7f7 fae2 	bl	80002a8 <__aeabi_dsub>
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	460f      	mov	r7, r1
 8008ce8:	e764      	b.n	8008bb4 <__ieee754_rem_pio2+0x194>
 8008cea:	4b1b      	ldr	r3, [pc, #108]	@ (8008d58 <__ieee754_rem_pio2+0x338>)
 8008cec:	4598      	cmp	r8, r3
 8008cee:	d935      	bls.n	8008d5c <__ieee754_rem_pio2+0x33c>
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	f7f7 fad6 	bl	80002a8 <__aeabi_dsub>
 8008cfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d00:	e9c4 0100 	strd	r0, r1, [r4]
 8008d04:	e69e      	b.n	8008a44 <__ieee754_rem_pio2+0x24>
 8008d06:	bf00      	nop
 8008d08:	54400000 	.word	0x54400000
 8008d0c:	3ff921fb 	.word	0x3ff921fb
 8008d10:	1a626331 	.word	0x1a626331
 8008d14:	3dd0b461 	.word	0x3dd0b461
 8008d18:	1a600000 	.word	0x1a600000
 8008d1c:	3dd0b461 	.word	0x3dd0b461
 8008d20:	2e037073 	.word	0x2e037073
 8008d24:	3ba3198a 	.word	0x3ba3198a
 8008d28:	6dc9c883 	.word	0x6dc9c883
 8008d2c:	3fe45f30 	.word	0x3fe45f30
 8008d30:	2e000000 	.word	0x2e000000
 8008d34:	3ba3198a 	.word	0x3ba3198a
 8008d38:	252049c1 	.word	0x252049c1
 8008d3c:	397b839a 	.word	0x397b839a
 8008d40:	3fe921fb 	.word	0x3fe921fb
 8008d44:	4002d97b 	.word	0x4002d97b
 8008d48:	3ff921fb 	.word	0x3ff921fb
 8008d4c:	413921fb 	.word	0x413921fb
 8008d50:	3fe00000 	.word	0x3fe00000
 8008d54:	08009ba0 	.word	0x08009ba0
 8008d58:	7fefffff 	.word	0x7fefffff
 8008d5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008d60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008d64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008d68:	4630      	mov	r0, r6
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	f7f7 ff04 	bl	8000b78 <__aeabi_d2iz>
 8008d70:	f7f7 fbe8 	bl	8000544 <__aeabi_i2d>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4630      	mov	r0, r6
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d80:	f7f7 fa92 	bl	80002a8 <__aeabi_dsub>
 8008d84:	4b22      	ldr	r3, [pc, #136]	@ (8008e10 <__ieee754_rem_pio2+0x3f0>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	f7f7 fc46 	bl	8000618 <__aeabi_dmul>
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	4606      	mov	r6, r0
 8008d90:	f7f7 fef2 	bl	8000b78 <__aeabi_d2iz>
 8008d94:	f7f7 fbd6 	bl	8000544 <__aeabi_i2d>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008da4:	f7f7 fa80 	bl	80002a8 <__aeabi_dsub>
 8008da8:	4b19      	ldr	r3, [pc, #100]	@ (8008e10 <__ieee754_rem_pio2+0x3f0>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	f7f7 fc34 	bl	8000618 <__aeabi_dmul>
 8008db0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008db4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008db8:	f04f 0803 	mov.w	r8, #3
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	2700      	movs	r7, #0
 8008dc0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	46c2      	mov	sl, r8
 8008dca:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dce:	f7f7 fe8b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1f4      	bne.n	8008dc0 <__ieee754_rem_pio2+0x3a0>
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e14 <__ieee754_rem_pio2+0x3f4>)
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	2302      	movs	r3, #2
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	462a      	mov	r2, r5
 8008de0:	4653      	mov	r3, sl
 8008de2:	4621      	mov	r1, r4
 8008de4:	a806      	add	r0, sp, #24
 8008de6:	f000 f8d7 	bl	8008f98 <__kernel_rem_pio2>
 8008dea:	9b04      	ldr	r3, [sp, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	4605      	mov	r5, r0
 8008df0:	f6bf ae53 	bge.w	8008a9a <__ieee754_rem_pio2+0x7a>
 8008df4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008df8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008dfc:	e9c4 2300 	strd	r2, r3, [r4]
 8008e00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008e04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008e0c:	e740      	b.n	8008c90 <__ieee754_rem_pio2+0x270>
 8008e0e:	bf00      	nop
 8008e10:	41700000 	.word	0x41700000
 8008e14:	08009c20 	.word	0x08009c20

08008e18 <fabs>:
 8008e18:	ec51 0b10 	vmov	r0, r1, d0
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e22:	ec43 2b10 	vmov	d0, r2, r3
 8008e26:	4770      	bx	lr

08008e28 <scalbn>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	ec55 4b10 	vmov	r4, r5, d0
 8008e2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008e32:	4606      	mov	r6, r0
 8008e34:	462b      	mov	r3, r5
 8008e36:	b991      	cbnz	r1, 8008e5e <scalbn+0x36>
 8008e38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008e3c:	4323      	orrs	r3, r4
 8008e3e:	d03b      	beq.n	8008eb8 <scalbn+0x90>
 8008e40:	4b33      	ldr	r3, [pc, #204]	@ (8008f10 <scalbn+0xe8>)
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	2200      	movs	r2, #0
 8008e48:	f7f7 fbe6 	bl	8000618 <__aeabi_dmul>
 8008e4c:	4b31      	ldr	r3, [pc, #196]	@ (8008f14 <scalbn+0xec>)
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	da0f      	bge.n	8008e76 <scalbn+0x4e>
 8008e56:	a326      	add	r3, pc, #152	@ (adr r3, 8008ef0 <scalbn+0xc8>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	e01e      	b.n	8008e9c <scalbn+0x74>
 8008e5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008e62:	4291      	cmp	r1, r2
 8008e64:	d10b      	bne.n	8008e7e <scalbn+0x56>
 8008e66:	4622      	mov	r2, r4
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 fa1e 	bl	80002ac <__adddf3>
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	e020      	b.n	8008eb8 <scalbn+0x90>
 8008e76:	460b      	mov	r3, r1
 8008e78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008e7c:	3936      	subs	r1, #54	@ 0x36
 8008e7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008e82:	4296      	cmp	r6, r2
 8008e84:	dd0d      	ble.n	8008ea2 <scalbn+0x7a>
 8008e86:	2d00      	cmp	r5, #0
 8008e88:	a11b      	add	r1, pc, #108	@ (adr r1, 8008ef8 <scalbn+0xd0>)
 8008e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e8e:	da02      	bge.n	8008e96 <scalbn+0x6e>
 8008e90:	a11b      	add	r1, pc, #108	@ (adr r1, 8008f00 <scalbn+0xd8>)
 8008e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e96:	a318      	add	r3, pc, #96	@ (adr r3, 8008ef8 <scalbn+0xd0>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 fbbc 	bl	8000618 <__aeabi_dmul>
 8008ea0:	e7e6      	b.n	8008e70 <scalbn+0x48>
 8008ea2:	1872      	adds	r2, r6, r1
 8008ea4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008ea8:	428a      	cmp	r2, r1
 8008eaa:	dcec      	bgt.n	8008e86 <scalbn+0x5e>
 8008eac:	2a00      	cmp	r2, #0
 8008eae:	dd06      	ble.n	8008ebe <scalbn+0x96>
 8008eb0:	f36f 531e 	bfc	r3, #20, #11
 8008eb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008eb8:	ec45 4b10 	vmov	d0, r4, r5
 8008ebc:	bd70      	pop	{r4, r5, r6, pc}
 8008ebe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008ec2:	da08      	bge.n	8008ed6 <scalbn+0xae>
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ef0 <scalbn+0xc8>)
 8008ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ecc:	dac3      	bge.n	8008e56 <scalbn+0x2e>
 8008ece:	a10e      	add	r1, pc, #56	@ (adr r1, 8008f08 <scalbn+0xe0>)
 8008ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed4:	e7bf      	b.n	8008e56 <scalbn+0x2e>
 8008ed6:	3236      	adds	r2, #54	@ 0x36
 8008ed8:	f36f 531e 	bfc	r3, #20, #11
 8008edc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <scalbn+0xf0>)
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	e7d8      	b.n	8008e9c <scalbn+0x74>
 8008eea:	bf00      	nop
 8008eec:	f3af 8000 	nop.w
 8008ef0:	c2f8f359 	.word	0xc2f8f359
 8008ef4:	01a56e1f 	.word	0x01a56e1f
 8008ef8:	8800759c 	.word	0x8800759c
 8008efc:	7e37e43c 	.word	0x7e37e43c
 8008f00:	8800759c 	.word	0x8800759c
 8008f04:	fe37e43c 	.word	0xfe37e43c
 8008f08:	c2f8f359 	.word	0xc2f8f359
 8008f0c:	81a56e1f 	.word	0x81a56e1f
 8008f10:	43500000 	.word	0x43500000
 8008f14:	ffff3cb0 	.word	0xffff3cb0
 8008f18:	3c900000 	.word	0x3c900000

08008f1c <with_errno>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	ed2d 8b02 	vpush	{d8}
 8008f22:	eeb0 8a40 	vmov.f32	s16, s0
 8008f26:	eef0 8a60 	vmov.f32	s17, s1
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	f7fc fa94 	bl	8005458 <__errno>
 8008f30:	eeb0 0a48 	vmov.f32	s0, s16
 8008f34:	eef0 0a68 	vmov.f32	s1, s17
 8008f38:	ecbd 8b02 	vpop	{d8}
 8008f3c:	6004      	str	r4, [r0, #0]
 8008f3e:	bd10      	pop	{r4, pc}

08008f40 <xflow>:
 8008f40:	4603      	mov	r3, r0
 8008f42:	b507      	push	{r0, r1, r2, lr}
 8008f44:	ec51 0b10 	vmov	r0, r1, d0
 8008f48:	b183      	cbz	r3, 8008f6c <xflow+0x2c>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f50:	e9cd 2300 	strd	r2, r3, [sp]
 8008f54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f58:	f7f7 fb5e 	bl	8000618 <__aeabi_dmul>
 8008f5c:	ec41 0b10 	vmov	d0, r0, r1
 8008f60:	2022      	movs	r0, #34	@ 0x22
 8008f62:	b003      	add	sp, #12
 8008f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f68:	f7ff bfd8 	b.w	8008f1c <with_errno>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	e7ee      	b.n	8008f50 <xflow+0x10>
 8008f72:	0000      	movs	r0, r0
 8008f74:	0000      	movs	r0, r0
	...

08008f78 <__math_uflow>:
 8008f78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f80 <__math_uflow+0x8>
 8008f7c:	f7ff bfe0 	b.w	8008f40 <xflow>
 8008f80:	00000000 	.word	0x00000000
 8008f84:	10000000 	.word	0x10000000

08008f88 <__math_oflow>:
 8008f88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f90 <__math_oflow+0x8>
 8008f8c:	f7ff bfd8 	b.w	8008f40 <xflow>
 8008f90:	00000000 	.word	0x00000000
 8008f94:	70000000 	.word	0x70000000

08008f98 <__kernel_rem_pio2>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	ed2d 8b02 	vpush	{d8}
 8008fa0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008fa4:	f112 0f14 	cmn.w	r2, #20
 8008fa8:	9306      	str	r3, [sp, #24]
 8008faa:	9104      	str	r1, [sp, #16]
 8008fac:	4bc2      	ldr	r3, [pc, #776]	@ (80092b8 <__kernel_rem_pio2+0x320>)
 8008fae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008fb0:	9008      	str	r0, [sp, #32]
 8008fb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	9b06      	ldr	r3, [sp, #24]
 8008fba:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fbe:	bfa8      	it	ge
 8008fc0:	1ed4      	subge	r4, r2, #3
 8008fc2:	9305      	str	r3, [sp, #20]
 8008fc4:	bfb2      	itee	lt
 8008fc6:	2400      	movlt	r4, #0
 8008fc8:	2318      	movge	r3, #24
 8008fca:	fb94 f4f3 	sdivge	r4, r4, r3
 8008fce:	f06f 0317 	mvn.w	r3, #23
 8008fd2:	fb04 3303 	mla	r3, r4, r3, r3
 8008fd6:	eb03 0b02 	add.w	fp, r3, r2
 8008fda:	9b00      	ldr	r3, [sp, #0]
 8008fdc:	9a05      	ldr	r2, [sp, #20]
 8008fde:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80092a8 <__kernel_rem_pio2+0x310>
 8008fe2:	eb03 0802 	add.w	r8, r3, r2
 8008fe6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008fe8:	1aa7      	subs	r7, r4, r2
 8008fea:	ae20      	add	r6, sp, #128	@ 0x80
 8008fec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	4545      	cmp	r5, r8
 8008ff4:	dd12      	ble.n	800901c <__kernel_rem_pio2+0x84>
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	aa20      	add	r2, sp, #128	@ 0x80
 8008ffa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008ffe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009002:	2700      	movs	r7, #0
 8009004:	9b00      	ldr	r3, [sp, #0]
 8009006:	429f      	cmp	r7, r3
 8009008:	dc2e      	bgt.n	8009068 <__kernel_rem_pio2+0xd0>
 800900a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80092a8 <__kernel_rem_pio2+0x310>
 800900e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009012:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009016:	46a8      	mov	r8, r5
 8009018:	2600      	movs	r6, #0
 800901a:	e01b      	b.n	8009054 <__kernel_rem_pio2+0xbc>
 800901c:	42ef      	cmn	r7, r5
 800901e:	d407      	bmi.n	8009030 <__kernel_rem_pio2+0x98>
 8009020:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009024:	f7f7 fa8e 	bl	8000544 <__aeabi_i2d>
 8009028:	e8e6 0102 	strd	r0, r1, [r6], #8
 800902c:	3501      	adds	r5, #1
 800902e:	e7e0      	b.n	8008ff2 <__kernel_rem_pio2+0x5a>
 8009030:	ec51 0b18 	vmov	r0, r1, d8
 8009034:	e7f8      	b.n	8009028 <__kernel_rem_pio2+0x90>
 8009036:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800903a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800903e:	f7f7 faeb 	bl	8000618 <__aeabi_dmul>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800904a:	f7f7 f92f 	bl	80002ac <__adddf3>
 800904e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009052:	3601      	adds	r6, #1
 8009054:	9b05      	ldr	r3, [sp, #20]
 8009056:	429e      	cmp	r6, r3
 8009058:	dded      	ble.n	8009036 <__kernel_rem_pio2+0x9e>
 800905a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800905e:	3701      	adds	r7, #1
 8009060:	ecaa 7b02 	vstmia	sl!, {d7}
 8009064:	3508      	adds	r5, #8
 8009066:	e7cd      	b.n	8009004 <__kernel_rem_pio2+0x6c>
 8009068:	9b00      	ldr	r3, [sp, #0]
 800906a:	f8dd 8000 	ldr.w	r8, [sp]
 800906e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009074:	930a      	str	r3, [sp, #40]	@ 0x28
 8009076:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009078:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800907c:	9309      	str	r3, [sp, #36]	@ 0x24
 800907e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009082:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009084:	ab98      	add	r3, sp, #608	@ 0x260
 8009086:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800908a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800908e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009092:	ac0c      	add	r4, sp, #48	@ 0x30
 8009094:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009096:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800909a:	46a1      	mov	r9, r4
 800909c:	46c2      	mov	sl, r8
 800909e:	f1ba 0f00 	cmp.w	sl, #0
 80090a2:	dc77      	bgt.n	8009194 <__kernel_rem_pio2+0x1fc>
 80090a4:	4658      	mov	r0, fp
 80090a6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80090aa:	f7ff febd 	bl	8008e28 <scalbn>
 80090ae:	ec57 6b10 	vmov	r6, r7, d0
 80090b2:	2200      	movs	r2, #0
 80090b4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80090b8:	4630      	mov	r0, r6
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 faac 	bl	8000618 <__aeabi_dmul>
 80090c0:	ec41 0b10 	vmov	d0, r0, r1
 80090c4:	f000 fab8 	bl	8009638 <floor>
 80090c8:	4b7c      	ldr	r3, [pc, #496]	@ (80092bc <__kernel_rem_pio2+0x324>)
 80090ca:	ec51 0b10 	vmov	r0, r1, d0
 80090ce:	2200      	movs	r2, #0
 80090d0:	f7f7 faa2 	bl	8000618 <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f7f7 f8e4 	bl	80002a8 <__aeabi_dsub>
 80090e0:	460f      	mov	r7, r1
 80090e2:	4606      	mov	r6, r0
 80090e4:	f7f7 fd48 	bl	8000b78 <__aeabi_d2iz>
 80090e8:	9002      	str	r0, [sp, #8]
 80090ea:	f7f7 fa2b 	bl	8000544 <__aeabi_i2d>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4630      	mov	r0, r6
 80090f4:	4639      	mov	r1, r7
 80090f6:	f7f7 f8d7 	bl	80002a8 <__aeabi_dsub>
 80090fa:	f1bb 0f00 	cmp.w	fp, #0
 80090fe:	4606      	mov	r6, r0
 8009100:	460f      	mov	r7, r1
 8009102:	dd6c      	ble.n	80091de <__kernel_rem_pio2+0x246>
 8009104:	f108 31ff 	add.w	r1, r8, #4294967295
 8009108:	ab0c      	add	r3, sp, #48	@ 0x30
 800910a:	9d02      	ldr	r5, [sp, #8]
 800910c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009110:	f1cb 0018 	rsb	r0, fp, #24
 8009114:	fa43 f200 	asr.w	r2, r3, r0
 8009118:	4415      	add	r5, r2
 800911a:	4082      	lsls	r2, r0
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009120:	9502      	str	r5, [sp, #8]
 8009122:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009126:	f1cb 0217 	rsb	r2, fp, #23
 800912a:	fa43 f902 	asr.w	r9, r3, r2
 800912e:	f1b9 0f00 	cmp.w	r9, #0
 8009132:	dd64      	ble.n	80091fe <__kernel_rem_pio2+0x266>
 8009134:	9b02      	ldr	r3, [sp, #8]
 8009136:	2200      	movs	r2, #0
 8009138:	3301      	adds	r3, #1
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	4615      	mov	r5, r2
 800913e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009142:	4590      	cmp	r8, r2
 8009144:	f300 80a1 	bgt.w	800928a <__kernel_rem_pio2+0x2f2>
 8009148:	f1bb 0f00 	cmp.w	fp, #0
 800914c:	dd07      	ble.n	800915e <__kernel_rem_pio2+0x1c6>
 800914e:	f1bb 0f01 	cmp.w	fp, #1
 8009152:	f000 80c1 	beq.w	80092d8 <__kernel_rem_pio2+0x340>
 8009156:	f1bb 0f02 	cmp.w	fp, #2
 800915a:	f000 80c8 	beq.w	80092ee <__kernel_rem_pio2+0x356>
 800915e:	f1b9 0f02 	cmp.w	r9, #2
 8009162:	d14c      	bne.n	80091fe <__kernel_rem_pio2+0x266>
 8009164:	4632      	mov	r2, r6
 8009166:	463b      	mov	r3, r7
 8009168:	4955      	ldr	r1, [pc, #340]	@ (80092c0 <__kernel_rem_pio2+0x328>)
 800916a:	2000      	movs	r0, #0
 800916c:	f7f7 f89c 	bl	80002a8 <__aeabi_dsub>
 8009170:	4606      	mov	r6, r0
 8009172:	460f      	mov	r7, r1
 8009174:	2d00      	cmp	r5, #0
 8009176:	d042      	beq.n	80091fe <__kernel_rem_pio2+0x266>
 8009178:	4658      	mov	r0, fp
 800917a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80092b0 <__kernel_rem_pio2+0x318>
 800917e:	f7ff fe53 	bl	8008e28 <scalbn>
 8009182:	4630      	mov	r0, r6
 8009184:	4639      	mov	r1, r7
 8009186:	ec53 2b10 	vmov	r2, r3, d0
 800918a:	f7f7 f88d 	bl	80002a8 <__aeabi_dsub>
 800918e:	4606      	mov	r6, r0
 8009190:	460f      	mov	r7, r1
 8009192:	e034      	b.n	80091fe <__kernel_rem_pio2+0x266>
 8009194:	4b4b      	ldr	r3, [pc, #300]	@ (80092c4 <__kernel_rem_pio2+0x32c>)
 8009196:	2200      	movs	r2, #0
 8009198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800919c:	f7f7 fa3c 	bl	8000618 <__aeabi_dmul>
 80091a0:	f7f7 fcea 	bl	8000b78 <__aeabi_d2iz>
 80091a4:	f7f7 f9ce 	bl	8000544 <__aeabi_i2d>
 80091a8:	4b47      	ldr	r3, [pc, #284]	@ (80092c8 <__kernel_rem_pio2+0x330>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	f7f7 fa32 	bl	8000618 <__aeabi_dmul>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091bc:	f7f7 f874 	bl	80002a8 <__aeabi_dsub>
 80091c0:	f7f7 fcda 	bl	8000b78 <__aeabi_d2iz>
 80091c4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80091c8:	f849 0b04 	str.w	r0, [r9], #4
 80091cc:	4639      	mov	r1, r7
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7f7 f86c 	bl	80002ac <__adddf3>
 80091d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091dc:	e75f      	b.n	800909e <__kernel_rem_pio2+0x106>
 80091de:	d107      	bne.n	80091f0 <__kernel_rem_pio2+0x258>
 80091e0:	f108 33ff 	add.w	r3, r8, #4294967295
 80091e4:	aa0c      	add	r2, sp, #48	@ 0x30
 80091e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ea:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80091ee:	e79e      	b.n	800912e <__kernel_rem_pio2+0x196>
 80091f0:	4b36      	ldr	r3, [pc, #216]	@ (80092cc <__kernel_rem_pio2+0x334>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	f7f7 fc96 	bl	8000b24 <__aeabi_dcmpge>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d143      	bne.n	8009284 <__kernel_rem_pio2+0x2ec>
 80091fc:	4681      	mov	r9, r0
 80091fe:	2200      	movs	r2, #0
 8009200:	2300      	movs	r3, #0
 8009202:	4630      	mov	r0, r6
 8009204:	4639      	mov	r1, r7
 8009206:	f7f7 fc6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800920a:	2800      	cmp	r0, #0
 800920c:	f000 80c1 	beq.w	8009392 <__kernel_rem_pio2+0x3fa>
 8009210:	f108 33ff 	add.w	r3, r8, #4294967295
 8009214:	2200      	movs	r2, #0
 8009216:	9900      	ldr	r1, [sp, #0]
 8009218:	428b      	cmp	r3, r1
 800921a:	da70      	bge.n	80092fe <__kernel_rem_pio2+0x366>
 800921c:	2a00      	cmp	r2, #0
 800921e:	f000 808b 	beq.w	8009338 <__kernel_rem_pio2+0x3a0>
 8009222:	f108 38ff 	add.w	r8, r8, #4294967295
 8009226:	ab0c      	add	r3, sp, #48	@ 0x30
 8009228:	f1ab 0b18 	sub.w	fp, fp, #24
 800922c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d0f6      	beq.n	8009222 <__kernel_rem_pio2+0x28a>
 8009234:	4658      	mov	r0, fp
 8009236:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80092b0 <__kernel_rem_pio2+0x318>
 800923a:	f7ff fdf5 	bl	8008e28 <scalbn>
 800923e:	f108 0301 	add.w	r3, r8, #1
 8009242:	00da      	lsls	r2, r3, #3
 8009244:	9205      	str	r2, [sp, #20]
 8009246:	ec55 4b10 	vmov	r4, r5, d0
 800924a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800924c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80092c4 <__kernel_rem_pio2+0x32c>
 8009250:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009254:	4646      	mov	r6, r8
 8009256:	f04f 0a00 	mov.w	sl, #0
 800925a:	2e00      	cmp	r6, #0
 800925c:	f280 80d1 	bge.w	8009402 <__kernel_rem_pio2+0x46a>
 8009260:	4644      	mov	r4, r8
 8009262:	2c00      	cmp	r4, #0
 8009264:	f2c0 80ff 	blt.w	8009466 <__kernel_rem_pio2+0x4ce>
 8009268:	4b19      	ldr	r3, [pc, #100]	@ (80092d0 <__kernel_rem_pio2+0x338>)
 800926a:	461f      	mov	r7, r3
 800926c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800926e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009272:	9306      	str	r3, [sp, #24]
 8009274:	f04f 0a00 	mov.w	sl, #0
 8009278:	f04f 0b00 	mov.w	fp, #0
 800927c:	2600      	movs	r6, #0
 800927e:	eba8 0504 	sub.w	r5, r8, r4
 8009282:	e0e4      	b.n	800944e <__kernel_rem_pio2+0x4b6>
 8009284:	f04f 0902 	mov.w	r9, #2
 8009288:	e754      	b.n	8009134 <__kernel_rem_pio2+0x19c>
 800928a:	f854 3b04 	ldr.w	r3, [r4], #4
 800928e:	bb0d      	cbnz	r5, 80092d4 <__kernel_rem_pio2+0x33c>
 8009290:	b123      	cbz	r3, 800929c <__kernel_rem_pio2+0x304>
 8009292:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009296:	f844 3c04 	str.w	r3, [r4, #-4]
 800929a:	2301      	movs	r3, #1
 800929c:	3201      	adds	r2, #1
 800929e:	461d      	mov	r5, r3
 80092a0:	e74f      	b.n	8009142 <__kernel_rem_pio2+0x1aa>
 80092a2:	bf00      	nop
 80092a4:	f3af 8000 	nop.w
	...
 80092b4:	3ff00000 	.word	0x3ff00000
 80092b8:	08009d68 	.word	0x08009d68
 80092bc:	40200000 	.word	0x40200000
 80092c0:	3ff00000 	.word	0x3ff00000
 80092c4:	3e700000 	.word	0x3e700000
 80092c8:	41700000 	.word	0x41700000
 80092cc:	3fe00000 	.word	0x3fe00000
 80092d0:	08009d28 	.word	0x08009d28
 80092d4:	1acb      	subs	r3, r1, r3
 80092d6:	e7de      	b.n	8009296 <__kernel_rem_pio2+0x2fe>
 80092d8:	f108 32ff 	add.w	r2, r8, #4294967295
 80092dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80092de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80092e6:	a90c      	add	r1, sp, #48	@ 0x30
 80092e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80092ec:	e737      	b.n	800915e <__kernel_rem_pio2+0x1c6>
 80092ee:	f108 32ff 	add.w	r2, r8, #4294967295
 80092f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80092f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80092fc:	e7f3      	b.n	80092e6 <__kernel_rem_pio2+0x34e>
 80092fe:	a90c      	add	r1, sp, #48	@ 0x30
 8009300:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009304:	3b01      	subs	r3, #1
 8009306:	430a      	orrs	r2, r1
 8009308:	e785      	b.n	8009216 <__kernel_rem_pio2+0x27e>
 800930a:	3401      	adds	r4, #1
 800930c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009310:	2a00      	cmp	r2, #0
 8009312:	d0fa      	beq.n	800930a <__kernel_rem_pio2+0x372>
 8009314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009316:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800931a:	eb0d 0503 	add.w	r5, sp, r3
 800931e:	9b06      	ldr	r3, [sp, #24]
 8009320:	aa20      	add	r2, sp, #128	@ 0x80
 8009322:	4443      	add	r3, r8
 8009324:	f108 0701 	add.w	r7, r8, #1
 8009328:	3d98      	subs	r5, #152	@ 0x98
 800932a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800932e:	4444      	add	r4, r8
 8009330:	42bc      	cmp	r4, r7
 8009332:	da04      	bge.n	800933e <__kernel_rem_pio2+0x3a6>
 8009334:	46a0      	mov	r8, r4
 8009336:	e6a2      	b.n	800907e <__kernel_rem_pio2+0xe6>
 8009338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800933a:	2401      	movs	r4, #1
 800933c:	e7e6      	b.n	800930c <__kernel_rem_pio2+0x374>
 800933e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009340:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009344:	f7f7 f8fe 	bl	8000544 <__aeabi_i2d>
 8009348:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009608 <__kernel_rem_pio2+0x670>
 800934c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009350:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009358:	46b2      	mov	sl, r6
 800935a:	f04f 0800 	mov.w	r8, #0
 800935e:	9b05      	ldr	r3, [sp, #20]
 8009360:	4598      	cmp	r8, r3
 8009362:	dd05      	ble.n	8009370 <__kernel_rem_pio2+0x3d8>
 8009364:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009368:	3701      	adds	r7, #1
 800936a:	eca5 7b02 	vstmia	r5!, {d7}
 800936e:	e7df      	b.n	8009330 <__kernel_rem_pio2+0x398>
 8009370:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009374:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009378:	f7f7 f94e 	bl	8000618 <__aeabi_dmul>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009384:	f7f6 ff92 	bl	80002ac <__adddf3>
 8009388:	f108 0801 	add.w	r8, r8, #1
 800938c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009390:	e7e5      	b.n	800935e <__kernel_rem_pio2+0x3c6>
 8009392:	f1cb 0000 	rsb	r0, fp, #0
 8009396:	ec47 6b10 	vmov	d0, r6, r7
 800939a:	f7ff fd45 	bl	8008e28 <scalbn>
 800939e:	ec55 4b10 	vmov	r4, r5, d0
 80093a2:	4b9b      	ldr	r3, [pc, #620]	@ (8009610 <__kernel_rem_pio2+0x678>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	f7f7 fbbb 	bl	8000b24 <__aeabi_dcmpge>
 80093ae:	b300      	cbz	r0, 80093f2 <__kernel_rem_pio2+0x45a>
 80093b0:	4b98      	ldr	r3, [pc, #608]	@ (8009614 <__kernel_rem_pio2+0x67c>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	4620      	mov	r0, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	f7f7 f92e 	bl	8000618 <__aeabi_dmul>
 80093bc:	f7f7 fbdc 	bl	8000b78 <__aeabi_d2iz>
 80093c0:	4606      	mov	r6, r0
 80093c2:	f7f7 f8bf 	bl	8000544 <__aeabi_i2d>
 80093c6:	4b92      	ldr	r3, [pc, #584]	@ (8009610 <__kernel_rem_pio2+0x678>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	f7f7 f925 	bl	8000618 <__aeabi_dmul>
 80093ce:	460b      	mov	r3, r1
 80093d0:	4602      	mov	r2, r0
 80093d2:	4629      	mov	r1, r5
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7f6 ff67 	bl	80002a8 <__aeabi_dsub>
 80093da:	f7f7 fbcd 	bl	8000b78 <__aeabi_d2iz>
 80093de:	ab0c      	add	r3, sp, #48	@ 0x30
 80093e0:	f10b 0b18 	add.w	fp, fp, #24
 80093e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80093e8:	f108 0801 	add.w	r8, r8, #1
 80093ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80093f0:	e720      	b.n	8009234 <__kernel_rem_pio2+0x29c>
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7f7 fbbf 	bl	8000b78 <__aeabi_d2iz>
 80093fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80093fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009400:	e718      	b.n	8009234 <__kernel_rem_pio2+0x29c>
 8009402:	ab0c      	add	r3, sp, #48	@ 0x30
 8009404:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009408:	f7f7 f89c 	bl	8000544 <__aeabi_i2d>
 800940c:	4622      	mov	r2, r4
 800940e:	462b      	mov	r3, r5
 8009410:	f7f7 f902 	bl	8000618 <__aeabi_dmul>
 8009414:	4652      	mov	r2, sl
 8009416:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800941a:	465b      	mov	r3, fp
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f7 f8fa 	bl	8000618 <__aeabi_dmul>
 8009424:	3e01      	subs	r6, #1
 8009426:	4604      	mov	r4, r0
 8009428:	460d      	mov	r5, r1
 800942a:	e716      	b.n	800925a <__kernel_rem_pio2+0x2c2>
 800942c:	9906      	ldr	r1, [sp, #24]
 800942e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009432:	9106      	str	r1, [sp, #24]
 8009434:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009438:	f7f7 f8ee 	bl	8000618 <__aeabi_dmul>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4650      	mov	r0, sl
 8009442:	4659      	mov	r1, fp
 8009444:	f7f6 ff32 	bl	80002ac <__adddf3>
 8009448:	3601      	adds	r6, #1
 800944a:	4682      	mov	sl, r0
 800944c:	468b      	mov	fp, r1
 800944e:	9b00      	ldr	r3, [sp, #0]
 8009450:	429e      	cmp	r6, r3
 8009452:	dc01      	bgt.n	8009458 <__kernel_rem_pio2+0x4c0>
 8009454:	42ae      	cmp	r6, r5
 8009456:	dde9      	ble.n	800942c <__kernel_rem_pio2+0x494>
 8009458:	ab48      	add	r3, sp, #288	@ 0x120
 800945a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800945e:	e9c5 ab00 	strd	sl, fp, [r5]
 8009462:	3c01      	subs	r4, #1
 8009464:	e6fd      	b.n	8009262 <__kernel_rem_pio2+0x2ca>
 8009466:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009468:	2b02      	cmp	r3, #2
 800946a:	dc0b      	bgt.n	8009484 <__kernel_rem_pio2+0x4ec>
 800946c:	2b00      	cmp	r3, #0
 800946e:	dc35      	bgt.n	80094dc <__kernel_rem_pio2+0x544>
 8009470:	d059      	beq.n	8009526 <__kernel_rem_pio2+0x58e>
 8009472:	9b02      	ldr	r3, [sp, #8]
 8009474:	f003 0007 	and.w	r0, r3, #7
 8009478:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800947c:	ecbd 8b02 	vpop	{d8}
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009486:	2b03      	cmp	r3, #3
 8009488:	d1f3      	bne.n	8009472 <__kernel_rem_pio2+0x4da>
 800948a:	9b05      	ldr	r3, [sp, #20]
 800948c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009490:	eb0d 0403 	add.w	r4, sp, r3
 8009494:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009498:	4625      	mov	r5, r4
 800949a:	46c2      	mov	sl, r8
 800949c:	f1ba 0f00 	cmp.w	sl, #0
 80094a0:	dc69      	bgt.n	8009576 <__kernel_rem_pio2+0x5de>
 80094a2:	4645      	mov	r5, r8
 80094a4:	2d01      	cmp	r5, #1
 80094a6:	f300 8087 	bgt.w	80095b8 <__kernel_rem_pio2+0x620>
 80094aa:	9c05      	ldr	r4, [sp, #20]
 80094ac:	ab48      	add	r3, sp, #288	@ 0x120
 80094ae:	441c      	add	r4, r3
 80094b0:	2000      	movs	r0, #0
 80094b2:	2100      	movs	r1, #0
 80094b4:	f1b8 0f01 	cmp.w	r8, #1
 80094b8:	f300 809c 	bgt.w	80095f4 <__kernel_rem_pio2+0x65c>
 80094bc:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80094c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80094c4:	f1b9 0f00 	cmp.w	r9, #0
 80094c8:	f040 80a6 	bne.w	8009618 <__kernel_rem_pio2+0x680>
 80094cc:	9b04      	ldr	r3, [sp, #16]
 80094ce:	e9c3 5600 	strd	r5, r6, [r3]
 80094d2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80094d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80094da:	e7ca      	b.n	8009472 <__kernel_rem_pio2+0x4da>
 80094dc:	9d05      	ldr	r5, [sp, #20]
 80094de:	ab48      	add	r3, sp, #288	@ 0x120
 80094e0:	441d      	add	r5, r3
 80094e2:	4644      	mov	r4, r8
 80094e4:	2000      	movs	r0, #0
 80094e6:	2100      	movs	r1, #0
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	da35      	bge.n	8009558 <__kernel_rem_pio2+0x5c0>
 80094ec:	f1b9 0f00 	cmp.w	r9, #0
 80094f0:	d038      	beq.n	8009564 <__kernel_rem_pio2+0x5cc>
 80094f2:	4602      	mov	r2, r0
 80094f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094f8:	9c04      	ldr	r4, [sp, #16]
 80094fa:	e9c4 2300 	strd	r2, r3, [r4]
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009506:	f7f6 fecf 	bl	80002a8 <__aeabi_dsub>
 800950a:	ad4a      	add	r5, sp, #296	@ 0x128
 800950c:	2401      	movs	r4, #1
 800950e:	45a0      	cmp	r8, r4
 8009510:	da2b      	bge.n	800956a <__kernel_rem_pio2+0x5d2>
 8009512:	f1b9 0f00 	cmp.w	r9, #0
 8009516:	d002      	beq.n	800951e <__kernel_rem_pio2+0x586>
 8009518:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800951c:	4619      	mov	r1, r3
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009524:	e7a5      	b.n	8009472 <__kernel_rem_pio2+0x4da>
 8009526:	9c05      	ldr	r4, [sp, #20]
 8009528:	ab48      	add	r3, sp, #288	@ 0x120
 800952a:	441c      	add	r4, r3
 800952c:	2000      	movs	r0, #0
 800952e:	2100      	movs	r1, #0
 8009530:	f1b8 0f00 	cmp.w	r8, #0
 8009534:	da09      	bge.n	800954a <__kernel_rem_pio2+0x5b2>
 8009536:	f1b9 0f00 	cmp.w	r9, #0
 800953a:	d002      	beq.n	8009542 <__kernel_rem_pio2+0x5aa>
 800953c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009540:	4619      	mov	r1, r3
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	e9c3 0100 	strd	r0, r1, [r3]
 8009548:	e793      	b.n	8009472 <__kernel_rem_pio2+0x4da>
 800954a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800954e:	f7f6 fead 	bl	80002ac <__adddf3>
 8009552:	f108 38ff 	add.w	r8, r8, #4294967295
 8009556:	e7eb      	b.n	8009530 <__kernel_rem_pio2+0x598>
 8009558:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800955c:	f7f6 fea6 	bl	80002ac <__adddf3>
 8009560:	3c01      	subs	r4, #1
 8009562:	e7c1      	b.n	80094e8 <__kernel_rem_pio2+0x550>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	e7c6      	b.n	80094f8 <__kernel_rem_pio2+0x560>
 800956a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800956e:	f7f6 fe9d 	bl	80002ac <__adddf3>
 8009572:	3401      	adds	r4, #1
 8009574:	e7cb      	b.n	800950e <__kernel_rem_pio2+0x576>
 8009576:	ed35 7b02 	vldmdb	r5!, {d7}
 800957a:	ed8d 7b00 	vstr	d7, [sp]
 800957e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009582:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009586:	ec53 2b17 	vmov	r2, r3, d7
 800958a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800958e:	f7f6 fe8d 	bl	80002ac <__adddf3>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4606      	mov	r6, r0
 8009598:	460f      	mov	r7, r1
 800959a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800959e:	f7f6 fe83 	bl	80002a8 <__aeabi_dsub>
 80095a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095a6:	f7f6 fe81 	bl	80002ac <__adddf3>
 80095aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80095b2:	e9c5 6700 	strd	r6, r7, [r5]
 80095b6:	e771      	b.n	800949c <__kernel_rem_pio2+0x504>
 80095b8:	ed34 7b02 	vldmdb	r4!, {d7}
 80095bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80095c0:	ec51 0b17 	vmov	r0, r1, d7
 80095c4:	4652      	mov	r2, sl
 80095c6:	465b      	mov	r3, fp
 80095c8:	ed8d 7b00 	vstr	d7, [sp]
 80095cc:	f7f6 fe6e 	bl	80002ac <__adddf3>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4606      	mov	r6, r0
 80095d6:	460f      	mov	r7, r1
 80095d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095dc:	f7f6 fe64 	bl	80002a8 <__aeabi_dsub>
 80095e0:	4652      	mov	r2, sl
 80095e2:	465b      	mov	r3, fp
 80095e4:	f7f6 fe62 	bl	80002ac <__adddf3>
 80095e8:	3d01      	subs	r5, #1
 80095ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80095ee:	e9c4 6700 	strd	r6, r7, [r4]
 80095f2:	e757      	b.n	80094a4 <__kernel_rem_pio2+0x50c>
 80095f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80095f8:	f7f6 fe58 	bl	80002ac <__adddf3>
 80095fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8009600:	e758      	b.n	80094b4 <__kernel_rem_pio2+0x51c>
 8009602:	bf00      	nop
 8009604:	f3af 8000 	nop.w
	...
 8009610:	41700000 	.word	0x41700000
 8009614:	3e700000 	.word	0x3e700000
 8009618:	9b04      	ldr	r3, [sp, #16]
 800961a:	9a04      	ldr	r2, [sp, #16]
 800961c:	601d      	str	r5, [r3, #0]
 800961e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009622:	605c      	str	r4, [r3, #4]
 8009624:	609f      	str	r7, [r3, #8]
 8009626:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800962a:	60d3      	str	r3, [r2, #12]
 800962c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009630:	6110      	str	r0, [r2, #16]
 8009632:	6153      	str	r3, [r2, #20]
 8009634:	e71d      	b.n	8009472 <__kernel_rem_pio2+0x4da>
 8009636:	bf00      	nop

08009638 <floor>:
 8009638:	ec51 0b10 	vmov	r0, r1, d0
 800963c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009644:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009648:	2e13      	cmp	r6, #19
 800964a:	460c      	mov	r4, r1
 800964c:	4605      	mov	r5, r0
 800964e:	4680      	mov	r8, r0
 8009650:	dc34      	bgt.n	80096bc <floor+0x84>
 8009652:	2e00      	cmp	r6, #0
 8009654:	da17      	bge.n	8009686 <floor+0x4e>
 8009656:	a332      	add	r3, pc, #200	@ (adr r3, 8009720 <floor+0xe8>)
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f7f6 fe26 	bl	80002ac <__adddf3>
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	f7f7 fa68 	bl	8000b38 <__aeabi_dcmpgt>
 8009668:	b150      	cbz	r0, 8009680 <floor+0x48>
 800966a:	2c00      	cmp	r4, #0
 800966c:	da55      	bge.n	800971a <floor+0xe2>
 800966e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009672:	432c      	orrs	r4, r5
 8009674:	2500      	movs	r5, #0
 8009676:	42ac      	cmp	r4, r5
 8009678:	4c2b      	ldr	r4, [pc, #172]	@ (8009728 <floor+0xf0>)
 800967a:	bf08      	it	eq
 800967c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009680:	4621      	mov	r1, r4
 8009682:	4628      	mov	r0, r5
 8009684:	e023      	b.n	80096ce <floor+0x96>
 8009686:	4f29      	ldr	r7, [pc, #164]	@ (800972c <floor+0xf4>)
 8009688:	4137      	asrs	r7, r6
 800968a:	ea01 0307 	and.w	r3, r1, r7
 800968e:	4303      	orrs	r3, r0
 8009690:	d01d      	beq.n	80096ce <floor+0x96>
 8009692:	a323      	add	r3, pc, #140	@ (adr r3, 8009720 <floor+0xe8>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 fe08 	bl	80002ac <__adddf3>
 800969c:	2200      	movs	r2, #0
 800969e:	2300      	movs	r3, #0
 80096a0:	f7f7 fa4a 	bl	8000b38 <__aeabi_dcmpgt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d0eb      	beq.n	8009680 <floor+0x48>
 80096a8:	2c00      	cmp	r4, #0
 80096aa:	bfbe      	ittt	lt
 80096ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80096b0:	4133      	asrlt	r3, r6
 80096b2:	18e4      	addlt	r4, r4, r3
 80096b4:	ea24 0407 	bic.w	r4, r4, r7
 80096b8:	2500      	movs	r5, #0
 80096ba:	e7e1      	b.n	8009680 <floor+0x48>
 80096bc:	2e33      	cmp	r6, #51	@ 0x33
 80096be:	dd0a      	ble.n	80096d6 <floor+0x9e>
 80096c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80096c4:	d103      	bne.n	80096ce <floor+0x96>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	f7f6 fdef 	bl	80002ac <__adddf3>
 80096ce:	ec41 0b10 	vmov	d0, r0, r1
 80096d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80096da:	f04f 37ff 	mov.w	r7, #4294967295
 80096de:	40df      	lsrs	r7, r3
 80096e0:	4207      	tst	r7, r0
 80096e2:	d0f4      	beq.n	80096ce <floor+0x96>
 80096e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009720 <floor+0xe8>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fddf 	bl	80002ac <__adddf3>
 80096ee:	2200      	movs	r2, #0
 80096f0:	2300      	movs	r3, #0
 80096f2:	f7f7 fa21 	bl	8000b38 <__aeabi_dcmpgt>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d0c2      	beq.n	8009680 <floor+0x48>
 80096fa:	2c00      	cmp	r4, #0
 80096fc:	da0a      	bge.n	8009714 <floor+0xdc>
 80096fe:	2e14      	cmp	r6, #20
 8009700:	d101      	bne.n	8009706 <floor+0xce>
 8009702:	3401      	adds	r4, #1
 8009704:	e006      	b.n	8009714 <floor+0xdc>
 8009706:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800970a:	2301      	movs	r3, #1
 800970c:	40b3      	lsls	r3, r6
 800970e:	441d      	add	r5, r3
 8009710:	4545      	cmp	r5, r8
 8009712:	d3f6      	bcc.n	8009702 <floor+0xca>
 8009714:	ea25 0507 	bic.w	r5, r5, r7
 8009718:	e7b2      	b.n	8009680 <floor+0x48>
 800971a:	2500      	movs	r5, #0
 800971c:	462c      	mov	r4, r5
 800971e:	e7af      	b.n	8009680 <floor+0x48>
 8009720:	8800759c 	.word	0x8800759c
 8009724:	7e37e43c 	.word	0x7e37e43c
 8009728:	bff00000 	.word	0xbff00000
 800972c:	000fffff 	.word	0x000fffff

08009730 <_init>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	bf00      	nop
 8009734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009736:	bc08      	pop	{r3}
 8009738:	469e      	mov	lr, r3
 800973a:	4770      	bx	lr

0800973c <_fini>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	bf00      	nop
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr
