
MOGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000719c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08007350  08007350  00008350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007714  08007714  000091ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007714  08007714  00008714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800771c  0800771c  000091ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800771c  0800771c  0000871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007720  08007720  00008720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08007724  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091ec  2**0
                  CONTENTS
 10 .bss          000001c8  200001ec  200001ec  000091ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  000091ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d3b  00000000  00000000  0000921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be1  00000000  00000000  00012f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00014b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067a  00000000  00000000  000153c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002409b  00000000  00000000  00015a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa23  00000000  00000000  00039add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5042  00000000  00000000  00044500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119542  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003360  00000000  00000000  00119588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0011c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007334 	.word	0x08007334

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08007334 	.word	0x08007334

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <trng_rand>:
float crossover_prob = 0.6;
float mutation_prob = 0.05;
int rate_local_search = 30;
float step_size = 0.02;

uint32_t trng_rand() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
    uint32_t value;
    HAL_RNG_GenerateRandomNumber(&hrng, &value);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <trng_rand+0x1c>)
 8000fa0:	f002 ff08 	bl	8003db4 <HAL_RNG_GenerateRandomNumber>
    return value;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000208 	.word	0x20000208

08000fb4 <rand01>:

float rand01() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    return (float)trng_rand() / (float)0xFFFFFFFF;
 8000fb8:	f7ff ffec 	bl	8000f94 <trng_rand>
 8000fbc:	ee07 0a90 	vmov	s15, r0
 8000fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000fd8 <rand01+0x24>
 8000fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fcc:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	4f800000 	.word	0x4f800000

08000fdc <rand_range>:

float rand_range(float min, float max) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	ed2d 8b02 	vpush	{d8}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	edc7 0a00 	vstr	s1, [r7]
    return min + (max - min) * rand01();
 8000fee:	ed97 7a00 	vldr	s14, [r7]
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000ffa:	f7ff ffdb 	bl	8000fb4 <rand01>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001006:	edd7 7a01 	vldr	s15, [r7, #4]
 800100a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	ecbd 8b02 	vpop	{d8}
 800101a:	bd80      	pop	{r7, pc}

0800101c <random_population>:

void random_population(Population *pop) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < POP_SIZE; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e02a      	b.n	8001080 <random_population+0x64>
        for (int j = 0; j < NV; j++) {
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	e021      	b.n	8001074 <random_population+0x58>
            pop->solutions[i].x[j] = rand_range(lb[j], ub[j]);
 8001030:	4a19      	ldr	r2, [pc, #100]	@ (8001098 <random_population+0x7c>)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	4a17      	ldr	r2, [pc, #92]	@ (800109c <random_population+0x80>)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	eef0 0a47 	vmov.f32	s1, s14
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	f7ff ffc4 	bl	8000fdc <rand_range>
 8001054:	eef0 7a40 	vmov.f32	s15, s0
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < NV; j++) {
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3301      	adds	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	ddda      	ble.n	8001030 <random_population+0x14>
    for (int i = 0; i < POP_SIZE; i++) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b63      	cmp	r3, #99	@ 0x63
 8001084:	ddd1      	ble.n	800102a <random_population+0xe>
        }
    }
    pop->size = POP_SIZE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2264      	movs	r2, #100	@ 0x64
 800108a:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000
 800109c:	20000004 	.word	0x20000004

080010a0 <evaluate>:

void evaluate(Solution *sol) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    float x = sol->x[0];
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
    sol->fitness[0] = x * x;
 80010ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edc3 7a01 	vstr	s15, [r3, #4]
    sol->fitness[1] = (x - 2) * (x - 2);
 80010bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80010c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80010c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010cc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80010d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80010d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <crossover>:

void crossover(Population *pop, Population *offspring) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size / 2; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e0b4      	b.n	800126e <crossover+0x182>
        if (rand01() < crossover_prob) {
 8001104:	f7ff ff56 	bl	8000fb4 <rand01>
 8001108:	eeb0 7a40 	vmov.f32	s14, s0
 800110c:	4b60      	ldr	r3, [pc, #384]	@ (8001290 <crossover+0x1a4>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	f140 80a5 	bpl.w	8001268 <crossover+0x17c>
            int r1 = trng_rand() % pop->size;
 800111e:	f7ff ff39 	bl	8000f94 <trng_rand>
 8001122:	4603      	mov	r3, r0
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	f8d2 2e10 	ldr.w	r2, [r2, #3600]	@ 0xe10
 800112a:	fbb3 f1f2 	udiv	r1, r3, r2
 800112e:	fb01 f202 	mul.w	r2, r1, r2
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	60bb      	str	r3, [r7, #8]
            int r2 = trng_rand() % pop->size;
 8001136:	f7ff ff2d 	bl	8000f94 <trng_rand>
 800113a:	4603      	mov	r3, r0
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	f8d2 2e10 	ldr.w	r2, [r2, #3600]	@ 0xe10
 8001142:	fbb3 f1f2 	udiv	r1, r3, r2
 8001146:	fb01 f202 	mul.w	r2, r1, r2
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	613b      	str	r3, [r7, #16]
            while (r1 == r2) {
 800114e:	e00b      	b.n	8001168 <crossover+0x7c>
                r2 = trng_rand() % pop->size;
 8001150:	f7ff ff20 	bl	8000f94 <trng_rand>
 8001154:	4603      	mov	r3, r0
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	f8d2 2e10 	ldr.w	r2, [r2, #3600]	@ 0xe10
 800115c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001160:	fb01 f202 	mul.w	r2, r1, r2
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	613b      	str	r3, [r7, #16]
            while (r1 == r2) {
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d0ef      	beq.n	8001150 <crossover+0x64>
            }

            for (int j = 0; j < NV; j++) {
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e055      	b.n	8001222 <crossover+0x136>
                offspring->solutions[offspring->size].x[j] =
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	ed93 7a00 	vldr	s14, [r3]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee37 7a27 	vadd.f32	s14, s14, s15
                offspring->solutions[offspring->size].x[j] =
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 80011ac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80011b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
                offspring->solutions[offspring->size].x[j] =
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	edc3 7a00 	vstr	s15, [r3]
                offspring->solutions[offspring->size + 1].x[j] =
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee37 7a27 	vadd.f32	s14, s14, s15
                offspring->solutions[offspring->size + 1].x[j] =
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80011fe:	1c5a      	adds	r2, r3, #1
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 8001200:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
                offspring->solutions[offspring->size + 1].x[j] =
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < NV; j++) {
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	dda6      	ble.n	8001176 <crossover+0x8a>
            }

            evaluate(&offspring->solutions[offspring->size]);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff30 	bl	80010a0 <evaluate>
            evaluate(&offspring->solutions[offspring->size + 1]);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff23 	bl	80010a0 <evaluate>

            offspring->size += 2;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001260:	1c9a      	adds	r2, r3, #2
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size / 2; i++) {
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001274:	0fda      	lsrs	r2, r3, #31
 8001276:	4413      	add	r3, r2
 8001278:	105b      	asrs	r3, r3, #1
 800127a:	461a      	mov	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4293      	cmp	r3, r2
 8001280:	f6ff af40 	blt.w	8001104 <crossover+0x18>
        }
    }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <mutation>:

void mutation(Population *pop, Population *offspring) {
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size; i++) {
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e04e      	b.n	800134a <mutation+0xb6>
        if (rand01() < mutation_prob) {
 80012ac:	f7ff fe82 	bl	8000fb4 <rand01>
 80012b0:	eeb0 7a40 	vmov.f32	s14, s0
 80012b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <mutation+0xcc>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d53f      	bpl.n	8001344 <mutation+0xb0>
            offspring->solutions[offspring->size] = pop->solutions[i];
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	18c8      	adds	r0, r1, r3
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	18ca      	adds	r2, r1, r3
 80012e4:	4603      	mov	r3, r0
 80012e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            offspring->solutions[offspring->size].x[0] = rand_range(lb[0], ub[0]);
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <mutation+0xd0>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <mutation+0xd4>)
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f8d3 4e10 	ldr.w	r4, [r3, #3600]	@ 0xe10
 80012fe:	eef0 0a47 	vmov.f32	s1, s14
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	f7ff fe69 	bl	8000fdc <rand_range>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4623      	mov	r3, r4
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4423      	add	r3, r4
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	edc3 7a00 	vstr	s15, [r3]
            evaluate(&offspring->solutions[offspring->size]);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff feb5 	bl	80010a0 <evaluate>
            offspring->size++;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size; i++) {
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbaa      	blt.n	80012ac <mutation+0x18>
        }
    }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	2000000c 	.word	0x2000000c
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <local_search>:

void local_search(Population *pop, Population *offspring) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
    offspring->size = rate_local_search;
 8001376:	4b4c      	ldr	r3, [pc, #304]	@ (80014a8 <local_search+0x13c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < rate_local_search; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e084      	b.n	8001490 <local_search+0x124>
        int r1 = trng_rand() % pop->size;
 8001386:	f7ff fe05 	bl	8000f94 <trng_rand>
 800138a:	4603      	mov	r3, r0
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	f8d2 2e10 	ldr.w	r2, [r2, #3600]	@ 0xe10
 8001392:	fbb3 f1f2 	udiv	r1, r3, r2
 8001396:	fb01 f202 	mul.w	r2, r1, r2
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	60bb      	str	r3, [r7, #8]
        offspring->solutions[i] = pop->solutions[r1];
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	18c8      	adds	r0, r1, r3
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	18ca      	adds	r2, r1, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80013be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        offspring->solutions[i].x[0] += rand_range(-step_size, step_size);
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <local_search+0x140>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eef1 7a67 	vneg.f32	s15, s15
 80013cc:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <local_search+0x140>)
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	eef0 0a47 	vmov.f32	s1, s14
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f7ff fdff 	bl	8000fdc <rand_range>
 80013de:	eeb0 7a40 	vmov.f32	s14, s0
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	edc3 7a00 	vstr	s15, [r3]

        if (offspring->solutions[i].x[0] < lb[0]) offspring->solutions[i].x[0] = lb[0];
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <local_search+0x144>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	d509      	bpl.n	8001440 <local_search+0xd4>
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <local_search+0x144>)
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4403      	add	r3, r0
 800143e:	6019      	str	r1, [r3, #0]
        if (offspring->solutions[i].x[0] > ub[0]) offspring->solutions[i].x[0] = ub[0];
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	ed93 7a00 	vldr	s14, [r3]
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <local_search+0x148>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd09      	ble.n	8001476 <local_search+0x10a>
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <local_search+0x148>)
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4403      	add	r3, r0
 8001474:	6019      	str	r1, [r3, #0]

        evaluate(&offspring->solutions[i]);
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fe0b 	bl	80010a0 <evaluate>
    for (int i = 0; i < rate_local_search; i++) {
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3301      	adds	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <local_search+0x13c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	f6ff af75 	blt.w	8001386 <local_search+0x1a>
    }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000010 	.word	0x20000010
 80014ac:	20000014 	.word	0x20000014
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004

080014b8 <dominates>:

bool dominates(Solution *sol1, Solution *sol2) {
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    bool better = false;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	e02c      	b.n	8001526 <dominates+0x6e>
        if (sol1->fitness[i] > sol2->fitness[i]) {
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	dd01      	ble.n	80014f6 <dominates+0x3e>
            return false;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e01b      	b.n	800152e <dominates+0x76>
        }
        if (sol1->fitness[i] < sol2->fitness[i]) {
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3304      	adds	r3, #4
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d501      	bpl.n	8001520 <dominates+0x68>
            better = true;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	ddcf      	ble.n	80014cc <dominates+0x14>
        }
    }
    return better;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <find_pareto_front>:

void find_pareto_front(Solution *solutions, int size, int *front_indices, int *front_size) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b088      	sub	sp, #32
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	603b      	str	r3, [r7, #0]
    *front_size = 0;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e03c      	b.n	80015ce <find_pareto_front+0x94>
        bool is_dominated = false;
 8001554:	2300      	movs	r3, #0
 8001556:	76fb      	strb	r3, [r7, #27]
        for (int j = 0; j < size; j++) {
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e020      	b.n	80015a0 <find_pareto_front+0x66>
            if (i == j) continue;
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	429a      	cmp	r2, r3
 8001564:	d018      	beq.n	8001598 <find_pareto_front+0x5e>
            if (dominates(&solutions[j], &solutions[i])) {
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1898      	adds	r0, r3, r2
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff ff96 	bl	80014b8 <dominates>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <find_pareto_front+0x60>
                is_dominated = true;
 8001592:	2301      	movs	r3, #1
 8001594:	76fb      	strb	r3, [r7, #27]
                break;
 8001596:	e007      	b.n	80015a8 <find_pareto_front+0x6e>
            if (i == j) continue;
 8001598:	bf00      	nop
        for (int j = 0; j < size; j++) {
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbda      	blt.n	800155e <find_pareto_front+0x24>
            }
        }
        if (!is_dominated) {
 80015a8:	7efb      	ldrb	r3, [r7, #27]
 80015aa:	f083 0301 	eor.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <find_pareto_front+0x8e>
            front_indices[(*front_size)++] = i;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	6011      	str	r1, [r2, #0]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbbe      	blt.n	8001554 <find_pareto_front+0x1a>
        }
    }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <crowding_distance>:

void crowding_distance(Solution *front, int front_size, float *distances) {
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	f5ad 6d9f 	sub.w	sp, sp, #1272	@ 0x4f8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80015ec:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 80015f0:	6018      	str	r0, [r3, #0]
 80015f2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80015f6:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80015fa:	6019      	str	r1, [r3, #0]
 80015fc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001600:	f2a3 43f4 	subw	r3, r3, #1268	@ 0x4f4
 8001604:	601a      	str	r2, [r3, #0]
    if (front_size == 0) return;
 8001606:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800160a:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 81e4 	beq.w	80019de <crowding_distance+0x3fe>

    for (int i = 0; i < front_size; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 800161c:	e010      	b.n	8001640 <crowding_distance+0x60>
        distances[i] = 0.0;
 800161e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001628:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	4413      	add	r3, r2
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < front_size; i++) {
 8001636:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 800163a:	3301      	adds	r3, #1
 800163c:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8001640:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001644:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001648:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	@ 0x4f4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbe5      	blt.n	800161e <crowding_distance+0x3e>
    }

    for (int obj = 0; obj < 2; obj++) {
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 8001658:	e1bb      	b.n	80019d2 <crowding_distance+0x3f2>
        int indices[MAX_ARCHIVE];
        for (int i = 0; i < front_size; i++) indices[i] = i;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8001660:	e00e      	b.n	8001680 <crowding_distance+0xa0>
 8001662:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001666:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800166a:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	@ 0x4ec
 800166e:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 8001672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001676:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	@ 0x4ec
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8001680:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001684:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001688:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	@ 0x4ec
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbe7      	blt.n	8001662 <crowding_distance+0x82>

        for (int i = 0; i < front_size - 1; i++) {
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8001698:	e077      	b.n	800178a <crowding_distance+0x1aa>
            for (int j = i + 1; j < front_size; j++) {
 800169a:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 800169e:	3301      	adds	r3, #1
 80016a0:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80016a4:	e063      	b.n	800176e <crowding_distance+0x18e>
                if (front[indices[i]].fitness[obj] > front[indices[j]].fitness[obj]) {
 80016a6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80016aa:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80016ae:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	461a      	mov	r2, r3
 80016c2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80016c6:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	441a      	add	r2, r3
 80016ce:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3304      	adds	r3, #4
 80016d8:	ed93 7a00 	vldr	s14, [r3]
 80016dc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80016e0:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80016e4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80016fc:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	441a      	add	r2, r3
 8001704:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3304      	adds	r3, #4
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dd23      	ble.n	8001764 <crowding_distance+0x184>
                    int temp = indices[i];
 800171c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001720:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001724:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
                    indices[i] = indices[j];
 8001730:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001734:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001738:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 800173c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001740:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001744:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001748:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    indices[j] = temp;
 8001750:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001754:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001758:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 800175c:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = i + 1; j < front_size; j++) {
 8001764:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 8001768:	3301      	adds	r3, #1
 800176a:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 800176e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001772:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001776:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	db92      	blt.n	80016a6 <crowding_distance+0xc6>
        for (int i = 0; i < front_size - 1; i++) {
 8001780:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8001784:	3301      	adds	r3, #1
 8001786:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 800178a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800178e:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 800179a:	429a      	cmp	r2, r3
 800179c:	f6ff af7d 	blt.w	800169a <crowding_distance+0xba>
                }
            }
        }

        distances[indices[0]] = DBL_MAX;
 80017a0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80017a4:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 80017b0:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 80017bc:	601a      	str	r2, [r3, #0]
        distances[indices[front_size - 1]] = DBL_MAX;
 80017be:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80017c2:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80017ce:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 80017dc:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 80017e8:	601a      	str	r2, [r3, #0]

        double fmin = front[indices[0]].fitness[obj];
 80017ea:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80017ee:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	461a      	mov	r2, r3
 8001800:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001804:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	441a      	add	r2, r3
 800180c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3304      	adds	r3, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fea5 	bl	8000568 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8001826:	e9c1 2300 	strd	r2, r3, [r1]
        double fmax = front[indices[front_size - 1]].fitness[obj];
 800182a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800182e:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800183a:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	461a      	mov	r2, r3
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	461a      	mov	r2, r3
 800184e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001852:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	441a      	add	r2, r3
 800185a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe7e 	bl	8000568 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8001874:	e9c1 2300 	strd	r2, r3, [r1]
        double range = fmax - fmin;
 8001878:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8001884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001888:	f7fe fd0e 	bl	80002a8 <__aeabi_dsub>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 8001894:	e9c1 2300 	strd	r2, r3, [r1]

        if (range > 0) {
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 80018a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018a8:	f7ff f946 	bl	8000b38 <__aeabi_dcmpgt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 808a 	beq.w	80019c8 <crowding_distance+0x3e8>
            for (int i = 1; i < front_size - 1; i++) {
 80018b4:	2301      	movs	r3, #1
 80018b6:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80018ba:	e07a      	b.n	80019b2 <crowding_distance+0x3d2>
                distances[indices[i]] +=
 80018bc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80018c0:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80018c4:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 80018d2:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe43 	bl	8000568 <__aeabi_f2d>
 80018e2:	4604      	mov	r4, r0
 80018e4:	460d      	mov	r5, r1
                    (front[indices[i + 1]].fitness[obj] - front[indices[i - 1]].fitness[obj]) / range;
 80018e6:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80018f0:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	461a      	mov	r2, r3
 8001904:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001908:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	441a      	add	r2, r3
 8001910:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3304      	adds	r3, #4
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001928:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	461a      	mov	r2, r3
 800193c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001940:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	441a      	add	r2, r3
 8001948:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3304      	adds	r3, #4
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195a:	ee17 0a90 	vmov	r0, s15
 800195e:	f7fe fe03 	bl	8000568 <__aeabi_f2d>
 8001962:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe ff7f 	bl	800086c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
                distances[indices[i]] +=
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe fc99 	bl	80002ac <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001986:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800198a:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 800198e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8001998:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	18d4      	adds	r4, r2, r3
 80019a0:	f7ff f912 	bl	8000bc8 <__aeabi_d2f>
 80019a4:	4603      	mov	r3, r0
 80019a6:	6023      	str	r3, [r4, #0]
            for (int i = 1; i < front_size - 1; i++) {
 80019a8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80019ac:	3301      	adds	r3, #1
 80019ae:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80019b2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80019b6:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 80019c2:	429a      	cmp	r2, r3
 80019c4:	f6ff af7a 	blt.w	80018bc <crowding_distance+0x2dc>
    for (int obj = 0; obj < 2; obj++) {
 80019c8:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 80019cc:	3301      	adds	r3, #1
 80019ce:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 80019d2:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	f77f ae3f 	ble.w	800165a <crowding_distance+0x7a>
 80019dc:	e000      	b.n	80019e0 <crowding_distance+0x400>
    if (front_size == 0) return;
 80019de:	bf00      	nop
            }
        }
    }
}
 80019e0:	f507 679f 	add.w	r7, r7, #1272	@ 0x4f8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}

080019e8 <select_by_crowding>:

void select_by_crowding(Solution *solutions, int size, int num_to_select, Solution *selected) {
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	f2ad 4dd4 	subw	sp, sp, #1236	@ 0x4d4
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	f507 649a 	add.w	r4, r7, #1232	@ 0x4d0
 80019f4:	f2a4 44c4 	subw	r4, r4, #1220	@ 0x4c4
 80019f8:	6020      	str	r0, [r4, #0]
 80019fa:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 80019fe:	f5a0 6099 	sub.w	r0, r0, #1224	@ 0x4c8
 8001a02:	6001      	str	r1, [r0, #0]
 8001a04:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8001a08:	f2a1 41cc 	subw	r1, r1, #1228	@ 0x4cc
 8001a0c:	600a      	str	r2, [r1, #0]
 8001a0e:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8001a12:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001a16:	6013      	str	r3, [r2, #0]
    float distances[MAX_ARCHIVE];
    crowding_distance(solutions, size, distances);
 8001a18:	f107 0214 	add.w	r2, r7, #20
 8001a1c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a20:	f5a3 6199 	sub.w	r1, r3, #1224	@ 0x4c8
 8001a24:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a28:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001a2c:	6809      	ldr	r1, [r1, #0]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f7ff fdd6 	bl	80015e0 <crowding_distance>

    for (int i = 0; i < num_to_select; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001a3a:	e05e      	b.n	8001afa <select_by_crowding+0x112>
        int best = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001a42:	2301      	movs	r3, #1
 8001a44:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001a48:	e021      	b.n	8001a8e <select_by_crowding+0xa6>
            if (distances[j] > distances[best]) {
 8001a4a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a4e:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001a52:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	ed93 7a00 	vldr	s14, [r3]
 8001a5e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a62:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001a66:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	dd03      	ble.n	8001a84 <select_by_crowding+0x9c>
                best = j;
 8001a7c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001a80:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001a84:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001a8e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a92:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8001a96:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbd4      	blt.n	8001a4a <select_by_crowding+0x62>
            }
        }

        selected[i] = solutions[best];
 8001aa0:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	461a      	mov	r2, r3
 8001aae:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001ab2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1899      	adds	r1, r3, r2
 8001aba:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001acc:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        distances[best] = -1.0;
 8001adc:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001ae0:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001ae4:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <select_by_crowding+0x130>)
 8001aee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < num_to_select; i++) {
 8001af0:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001af4:	3301      	adds	r3, #1
 8001af6:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001afa:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001afe:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8001b02:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	db97      	blt.n	8001a3c <select_by_crowding+0x54>
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	f207 47d4 	addw	r7, r7, #1236	@ 0x4d4
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}
 8001b18:	bf800000 	.word	0xbf800000

08001b1c <selection>:

void selection(Population *pop, Population *selected) {
 8001b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b20:	b0b3      	sub	sp, #204	@ 0xcc
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6778      	str	r0, [r7, #116]	@ 0x74
 8001b26:	6739      	str	r1, [r7, #112]	@ 0x70
 8001b28:	466b      	mov	r3, sp
 8001b2a:	607b      	str	r3, [r7, #4]
    int remaining_indices[pop->size];
 8001b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b2e:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 8001b32:	1e4b      	subs	r3, r1, #1
 8001b34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b38:	460a      	mov	r2, r1
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	461d      	mov	r5, r3
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	016b      	lsls	r3, r5, #5
 8001b4a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001b4e:	0162      	lsls	r2, r4, #5
 8001b50:	460a      	mov	r2, r1
 8001b52:	2300      	movs	r3, #0
 8001b54:	4690      	mov	r8, r2
 8001b56:	4699      	mov	r9, r3
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001b64:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001b68:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	3307      	adds	r3, #7
 8001b72:	08db      	lsrs	r3, r3, #3
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	ebad 0d03 	sub.w	sp, sp, r3
 8001b7a:	466b      	mov	r3, sp
 8001b7c:	3303      	adds	r3, #3
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    int remaining_size = pop->size;
 8001b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b88:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    for (int i = 0; i < pop->size; i++) remaining_indices[i] = i;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001b96:	e00c      	b.n	8001bb2 <selection+0x96>
 8001b98:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001b9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ba4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bac:	3301      	adds	r3, #1
 8001bae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bb4:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	dbeb      	blt.n	8001b98 <selection+0x7c>

    selected->size = 0;
 8001bc0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c2 3e10 	str.w	r3, [r2, #3600]	@ 0xe10

    while (selected->size < POP_SIZE) {
 8001bc8:	e1d6      	b.n	8001f78 <selection+0x45c>
 8001bca:	466b      	mov	r3, sp
 8001bcc:	461e      	mov	r6, r3
        int front_indices[remaining_size];
 8001bce:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001bd2:	1e4b      	subs	r3, r1, #1
 8001bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001bd8:	460a      	mov	r2, r1
 8001bda:	2300      	movs	r3, #0
 8001bdc:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001bec:	4628      	mov	r0, r5
 8001bee:	0143      	lsls	r3, r0, #5
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	0142      	lsls	r2, r0, #5
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	663a      	str	r2, [r7, #96]	@ 0x60
 8001c00:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c0e:	4628      	mov	r0, r5
 8001c10:	0143      	lsls	r3, r0, #5
 8001c12:	4620      	mov	r0, r4
 8001c14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c18:	4620      	mov	r0, r4
 8001c1a:	0142      	lsls	r2, r0, #5
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	3307      	adds	r3, #7
 8001c22:	08db      	lsrs	r3, r3, #3
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	ebad 0d03 	sub.w	sp, sp, r3
 8001c2a:	466b      	mov	r3, sp
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        int front_size;
        find_pareto_front(pop->solutions, remaining_size, front_indices, &front_size);
 8001c36:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001c38:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001c3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c40:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001c44:	f7ff fc79 	bl	800153a <find_pareto_front>

        if (selected->size + front_size > POP_SIZE) {
 8001c48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c4a:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001c4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c50:	4413      	add	r3, r2
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	f340 8114 	ble.w	8001e80 <selection+0x364>
 8001c58:	466b      	mov	r3, sp
 8001c5a:	461d      	mov	r5, r3
            int needed = POP_SIZE - selected->size;
 8001c5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c5e:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001c62:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            Solution temp_front[front_size];
 8001c6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001c6c:	1e4b      	subs	r3, r1, #1
 8001c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c72:	460a      	mov	r2, r1
 8001c74:	2300      	movs	r3, #0
 8001c76:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c7a:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001c7e:	4642      	mov	r2, r8
 8001c80:	464b      	mov	r3, r9
 8001c82:	1890      	adds	r0, r2, r2
 8001c84:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001c86:	415b      	adcs	r3, r3
 8001c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c8e:	4640      	mov	r0, r8
 8001c90:	eb12 0a00 	adds.w	sl, r2, r0
 8001c94:	4648      	mov	r0, r9
 8001c96:	eb43 0b00 	adc.w	fp, r3, r0
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001ca6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001caa:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001cae:	460a      	mov	r2, r1
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	653a      	str	r2, [r7, #80]	@ 0x50
 8001cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001cba:	4642      	mov	r2, r8
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	1890      	adds	r0, r2, r2
 8001cc0:	6338      	str	r0, [r7, #48]	@ 0x30
 8001cc2:	415b      	adcs	r3, r3
 8001cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cca:	4640      	mov	r0, r8
 8001ccc:	1810      	adds	r0, r2, r0
 8001cce:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001cd0:	4648      	mov	r0, r9
 8001cd2:	eb43 0000 	adc.w	r0, r3, r0
 8001cd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ce4:	4648      	mov	r0, r9
 8001ce6:	0143      	lsls	r3, r0, #5
 8001ce8:	4640      	mov	r0, r8
 8001cea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cee:	4640      	mov	r0, r8
 8001cf0:	0142      	lsls	r2, r0, #5
 8001cf2:	460a      	mov	r2, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	ebad 0d03 	sub.w	sp, sp, r3
 8001d06:	466b      	mov	r3, sp
 8001d08:	3303      	adds	r3, #3
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            for (int i = 0; i < front_size; i++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d18:	e01e      	b.n	8001d58 <selection+0x23c>
                temp_front[i] = pop->solutions[front_indices[i]];
 8001d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d26:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4419      	add	r1, r3
 8001d38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4403      	add	r3, r0
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	460c      	mov	r4, r1
 8001d46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (int i = 0; i < front_size; i++) {
 8001d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d52:	3301      	adds	r3, #1
 8001d54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	dbdb      	blt.n	8001d1a <selection+0x1fe>
            }

            Solution selected_from_front[needed];
 8001d62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001d66:	1e4b      	subs	r3, r1, #1
 8001d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d74:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	1890      	adds	r0, r2, r2
 8001d7e:	6238      	str	r0, [r7, #32]
 8001d80:	415b      	adcs	r3, r3
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d88:	4640      	mov	r0, r8
 8001d8a:	1810      	adds	r0, r2, r0
 8001d8c:	61b8      	str	r0, [r7, #24]
 8001d8e:	4648      	mov	r0, r9
 8001d90:	eb43 0000 	adc.w	r0, r3, r0
 8001d94:	61f8      	str	r0, [r7, #28]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001da2:	4648      	mov	r0, r9
 8001da4:	0143      	lsls	r3, r0, #5
 8001da6:	4640      	mov	r0, r8
 8001da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dac:	4640      	mov	r0, r8
 8001dae:	0142      	lsls	r2, r0, #5
 8001db0:	460a      	mov	r2, r1
 8001db2:	2300      	movs	r3, #0
 8001db4:	643a      	str	r2, [r7, #64]	@ 0x40
 8001db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001db8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	1890      	adds	r0, r2, r2
 8001dc2:	6138      	str	r0, [r7, #16]
 8001dc4:	415b      	adcs	r3, r3
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dcc:	4640      	mov	r0, r8
 8001dce:	1810      	adds	r0, r2, r0
 8001dd0:	60b8      	str	r0, [r7, #8]
 8001dd2:	4648      	mov	r0, r9
 8001dd4:	eb43 0000 	adc.w	r0, r3, r0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001de6:	4648      	mov	r0, r9
 8001de8:	0143      	lsls	r3, r0, #5
 8001dea:	4640      	mov	r0, r8
 8001dec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001df0:	4640      	mov	r0, r8
 8001df2:	0142      	lsls	r2, r0, #5
 8001df4:	460a      	mov	r2, r1
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	3307      	adds	r3, #7
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	ebad 0d03 	sub.w	sp, sp, r3
 8001e08:	466b      	mov	r3, sp
 8001e0a:	3303      	adds	r3, #3
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            select_by_crowding(temp_front, front_size, needed, selected_from_front);
 8001e14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001e1e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001e22:	f7ff fde1 	bl	80019e8 <select_by_crowding>

            for (int i = 0; i < needed; i++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e2c:	e01e      	b.n	8001e6c <selection+0x350>
                selected->solutions[selected->size++] = selected_from_front[i];
 8001e2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e30:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001e34:	1c51      	adds	r1, r2, #1
 8001e36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e38:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 8001e3c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	18c8      	adds	r0, r1, r3
 8001e48:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001e4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	18ca      	adds	r2, r1, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            for (int i = 0; i < needed; i++) {
 8001e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbda      	blt.n	8001e2e <selection+0x312>
            }
            break;
 8001e78:	bf00      	nop
 8001e7a:	46ad      	mov	sp, r5
 8001e7c:	46b5      	mov	sp, r6
 8001e7e:	e081      	b.n	8001f84 <selection+0x468>
        } else {
            for (int i = 0; i < front_size; i++) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e86:	e022      	b.n	8001ece <selection+0x3b2>
                selected->solutions[selected->size++] = pop->solutions[front_indices[i]];
 8001e88:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e96:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 8001e9a:	1c4a      	adds	r2, r1, #1
 8001e9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e9e:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
 8001ea2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	440b      	add	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	18d1      	adds	r1, r2, r3
 8001eae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4403      	add	r3, r0
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	460c      	mov	r4, r1
 8001ebc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ec0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (int i = 0; i < front_size; i++) {
 8001ec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ece:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	dbd7      	blt.n	8001e88 <selection+0x36c>
            }

            int new_remaining_size = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            for (int i = 0; i < remaining_size; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001ee4:	e03d      	b.n	8001f62 <selection+0x446>
                bool in_front = false;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                for (int j = 0; j < front_size; j++) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001ef2:	e016      	b.n	8001f22 <selection+0x406>
                    if (remaining_indices[i] == front_indices[j]) {
 8001ef4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001efc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f00:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	4299      	cmp	r1, r3
 8001f0e:	d103      	bne.n	8001f18 <selection+0x3fc>
                        in_front = true;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                        break;
 8001f16:	e009      	b.n	8001f2c <selection+0x410>
                for (int j = 0; j < front_size; j++) {
 8001f18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001f22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	dbe3      	blt.n	8001ef4 <selection+0x3d8>
                    }
                }
                if (!in_front) {
 8001f2c:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00e      	beq.n	8001f58 <selection+0x43c>
                    remaining_indices[new_remaining_size++] = remaining_indices[i];
 8001f3a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001f3e:	1c4b      	adds	r3, r1, #1
 8001f40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f44:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f54:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            for (int i = 0; i < remaining_size; i++) {
 8001f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbbb      	blt.n	8001ee6 <selection+0x3ca>
                }
            }
            remaining_size = new_remaining_size;
 8001f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001f76:	46b5      	mov	sp, r6
    while (selected->size < POP_SIZE) {
 8001f78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f7a:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001f7e:	2b63      	cmp	r3, #99	@ 0x63
 8001f80:	f77f ae23 	ble.w	8001bca <selection+0xae>
 8001f84:	f8d7 d004 	ldr.w	sp, [r7, #4]
        }
    }
}
 8001f88:	bf00      	nop
 8001f8a:	37cc      	adds	r7, #204	@ 0xcc
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f92 <update_archive>:

void update_archive(Population *pop, Archive *archive) {
 8001f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f96:	f6ad 6d34 	subw	sp, sp, #3636	@ 0xe34
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8001fa0:	f6a3 632c 	subw	r3, r3, #3628	@ 0xe2c
 8001fa4:	6018      	str	r0, [r3, #0]
 8001fa6:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8001faa:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 8001fae:	6019      	str	r1, [r3, #0]
 8001fb0:	466b      	mov	r3, sp
 8001fb2:	461e      	mov	r6, r3
    int front_indices[pop->size];
 8001fb4:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8001fb8:	f6a3 632c 	subw	r3, r3, #3628	@ 0xe2c
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 8001fc2:	1e4b      	subs	r3, r1, #1
 8001fc4:	f8c7 3e24 	str.w	r3, [r7, #3620]	@ 0xe24
 8001fc8:	460a      	mov	r2, r1
 8001fca:	2300      	movs	r3, #0
 8001fcc:	4690      	mov	r8, r2
 8001fce:	4699      	mov	r9, r3
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001fdc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001fe0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4614      	mov	r4, r2
 8001fea:	461d      	mov	r5, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	016b      	lsls	r3, r5, #5
 8001ff6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001ffa:	0162      	lsls	r2, r4, #5
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3307      	adds	r3, #7
 8002002:	08db      	lsrs	r3, r3, #3
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	ebad 0d03 	sub.w	sp, sp, r3
 800200a:	466b      	mov	r3, sp
 800200c:	3303      	adds	r3, #3
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	f8c7 3e20 	str.w	r3, [r7, #3616]	@ 0xe20
    int front_size;
    find_pareto_front(pop->solutions, pop->size, front_indices, &front_size);
 8002016:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 800201a:	f6a3 632c 	subw	r3, r3, #3628	@ 0xe2c
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002024:	f6a3 632c 	subw	r3, r3, #3628	@ 0xe2c
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 800202e:	f607 631c 	addw	r3, r7, #3612	@ 0xe1c
 8002032:	f8d7 2e20 	ldr.w	r2, [r7, #3616]	@ 0xe20
 8002036:	f7ff fa80 	bl	800153a <find_pareto_front>

    for (int i = 0; i < front_size; i++) {
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 3e2c 	str.w	r3, [r7, #3628]	@ 0xe2c
 8002040:	e03b      	b.n	80020ba <update_archive+0x128>
        if (archive->size < MAX_ARCHIVE) {
 8002042:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002046:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8002050:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002054:	da2c      	bge.n	80020b0 <update_archive+0x11e>
            archive->solutions[archive->size++] = pop->solutions[front_indices[i]];
 8002056:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	@ 0xe20
 800205a:	f8d7 2e2c 	ldr.w	r2, [r7, #3628]	@ 0xe2c
 800205e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002062:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002066:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8002070:	1c50      	adds	r0, r2, #1
 8002072:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002076:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8c3 0e10 	str.w	r0, [r3, #3600]	@ 0xe10
 8002080:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002084:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4418      	add	r0, r3
 8002094:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002098:	f6a3 632c 	subw	r3, r3, #3628	@ 0xe2c
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	460b      	mov	r3, r1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	440b      	add	r3, r1
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (int i = 0; i < front_size; i++) {
 80020b0:	f8d7 3e2c 	ldr.w	r3, [r7, #3628]	@ 0xe2c
 80020b4:	3301      	adds	r3, #1
 80020b6:	f8c7 3e2c 	str.w	r3, [r7, #3628]	@ 0xe2c
 80020ba:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	@ 0xe1c
 80020be:	f8d7 2e2c 	ldr.w	r2, [r7, #3628]	@ 0xe2c
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbbd      	blt.n	8002042 <update_archive+0xb0>
        }
    }

    if (archive->size > MAX_ARCHIVE) {
 80020c6:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 80020ca:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80020d4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80020d8:	dd43      	ble.n	8002162 <update_archive+0x1d0>
        Solution temp[MAX_ARCHIVE];
        select_by_crowding(archive->solutions, archive->size, MAX_ARCHIVE, temp);
 80020da:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 80020de:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 80020e8:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020fa:	f7ff fc75 	bl	80019e8 <select_by_crowding>
        for (int i = 0; i < MAX_ARCHIVE; i++) {
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3e28 	str.w	r3, [r7, #3624]	@ 0xe28
 8002104:	e01f      	b.n	8002146 <update_archive+0x1b4>
            archive->solutions[i] = temp[i];
 8002106:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 800210a:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	f8d7 2e28 	ldr.w	r2, [r7, #3624]	@ 0xe28
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	18c8      	adds	r0, r1, r3
 800211e:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002122:	f6a3 6124 	subw	r1, r3, #3620	@ 0xe24
 8002126:	f8d7 2e28 	ldr.w	r2, [r7, #3624]	@ 0xe28
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	18ca      	adds	r2, r1, r3
 8002134:	4603      	mov	r3, r0
 8002136:	ca07      	ldmia	r2, {r0, r1, r2}
 8002138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (int i = 0; i < MAX_ARCHIVE; i++) {
 800213c:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	@ 0xe28
 8002140:	3301      	adds	r3, #1
 8002142:	f8c7 3e28 	str.w	r3, [r7, #3624]	@ 0xe28
 8002146:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	@ 0xe28
 800214a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800214e:	dbda      	blt.n	8002106 <update_archive+0x174>
        }
        archive->size = MAX_ARCHIVE;
 8002150:	f507 6363 	add.w	r3, r7, #3632	@ 0xe30
 8002154:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800215e:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
 8002162:	46b5      	mov	sp, r6
    }
}
 8002164:	bf00      	nop
 8002166:	f607 6734 	addw	r7, r7, #3636	@ 0xe34
 800216a:	46bd      	mov	sp, r7
 800216c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002170 <send_archive>:

void send_archive(UART_HandleTypeDef *huart, Archive *archive) {
 8002170:	b5b0      	push	{r4, r5, r7, lr}
 8002172:	b098      	sub	sp, #96	@ 0x60
 8002174:	af04      	add	r7, sp, #16
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
    char msg[64];
    for (int i = 0; i < archive->size; i++) {
 800217a:	2300      	movs	r3, #0
 800217c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800217e:	e036      	b.n	80021ee <send_archive+0x7e>
        snprintf(msg, sizeof(msg), "%f,%f\r\n",
                 archive->solutions[i].fitness[0],
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	3304      	adds	r3, #4
 8002190:	681b      	ldr	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "%f,%f\r\n",
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9e8 	bl	8000568 <__aeabi_f2d>
 8002198:	4604      	mov	r4, r0
 800219a:	460d      	mov	r5, r1
                 archive->solutions[i].fitness[1]);
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	3308      	adds	r3, #8
 80021ac:	681b      	ldr	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "%f,%f\r\n",
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9da 	bl	8000568 <__aeabi_f2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	f107 000c 	add.w	r0, r7, #12
 80021bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021c0:	e9cd 4500 	strd	r4, r5, [sp]
 80021c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002204 <send_archive+0x94>)
 80021c6:	2140      	movs	r1, #64	@ 0x40
 80021c8:	f002 ff6e 	bl	80050a8 <sniprintf>
        HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f85d 	bl	8000290 <strlen>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b29a      	uxth	r2, r3
 80021da:	f107 010c 	add.w	r1, r7, #12
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f001 fe8c 	bl	8003f00 <HAL_UART_Transmit>
    for (int i = 0; i < archive->size; i++) {
 80021e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ea:	3301      	adds	r3, #1
 80021ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80021f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbc2      	blt.n	8002180 <send_archive+0x10>
    }
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	3750      	adds	r7, #80	@ 0x50
 8002200:	46bd      	mov	sp, r7
 8002202:	bdb0      	pop	{r4, r5, r7, pc}
 8002204:	08007350 	.word	0x08007350

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800220c:	f5ad 4dc6 	sub.w	sp, sp, #25344	@ 0x6300
 8002210:	b096      	sub	sp, #88	@ 0x58
 8002212:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002214:	f000 fd60 	bl	8002cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002218:	f000 fa94 	bl	8002744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221c:	f000 fb40 	bl	80028a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002220:	f000 fb14 	bl	800284c <MX_USART1_UART_Init>
  MX_RNG_Init();
 8002224:	f000 fafe 	bl	8002824 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  Population pop, offspring_cross, offspring_mut, offspring_ls, combined, selected;
  Archive archive = {0};
 8002228:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800222c:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002230:	4618      	mov	r0, r3
 8002232:	f640 6314 	movw	r3, #3604	@ 0xe14
 8002236:	461a      	mov	r2, r3
 8002238:	2100      	movs	r1, #0
 800223a:	f002 ffae 	bl	800519a <memset>

  random_population(&pop);
 800223e:	f507 43a9 	add.w	r3, r7, #21632	@ 0x5480
 8002242:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fee8 	bl	800101c <random_population>
  for (int i = 0; i < pop.size; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 8002252:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e01b      	b.n	8002292 <main+0x8a>
	  evaluate(&pop.solutions[i]);
 800225a:	f507 41a9 	add.w	r1, r7, #21632	@ 0x5480
 800225e:	f101 017c 	add.w	r1, r1, #124	@ 0x7c
 8002262:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002266:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe ff12 	bl	80010a0 <evaluate>
  for (int i = 0; i < pop.size; i++) {
 800227c:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002280:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 800228c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002296:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800229a:	f6a3 6344 	subw	r3, r3, #3652	@ 0xe44
 800229e:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80022a2:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80022a6:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbd4      	blt.n	800225a <main+0x52>
  }

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80022b0:	4b95      	ldr	r3, [pc, #596]	@ (8002508 <main+0x300>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a94      	ldr	r2, [pc, #592]	@ (8002508 <main+0x300>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80022bc:	4b93      	ldr	r3, [pc, #588]	@ (800250c <main+0x304>)
 80022be:	2200      	movs	r2, #0
 80022c0:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80022c2:	4b92      	ldr	r3, [pc, #584]	@ (800250c <main+0x304>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a91      	ldr	r2, [pc, #580]	@ (800250c <main+0x304>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6013      	str	r3, [r2, #0]

  uint32_t start_cycles = DWT->CYCCNT;
 80022ce:	4b8f      	ldr	r3, [pc, #572]	@ (800250c <main+0x304>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80022d6:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80022da:	6013      	str	r3, [r2, #0]

  for (int iter = 0; iter < MAX_ITER; iter++) {
 80022dc:	2300      	movs	r3, #0
 80022de:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80022e2:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e183      	b.n	80025f2 <main+0x3ea>
	  crossover(&pop, &offspring_cross);
 80022ea:	f507 438e 	add.w	r3, r7, #18176	@ 0x4700
 80022ee:	3b18      	subs	r3, #24
 80022f0:	f507 42a9 	add.w	r2, r7, #21632	@ 0x5480
 80022f4:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f7fe fef6 	bl	80010ec <crossover>
	  mutation(&pop, &offspring_mut);
 8002300:	f507 5364 	add.w	r3, r7, #14592	@ 0x3900
 8002304:	3b2c      	subs	r3, #44	@ 0x2c
 8002306:	f507 42a9 	add.w	r2, r7, #21632	@ 0x5480
 800230a:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f7fe ffbf 	bl	8001294 <mutation>
	  local_search(&pop, &offspring_ls);
 8002316:	f507 522b 	add.w	r2, r7, #10944	@ 0x2ac0
 800231a:	f507 43a9 	add.w	r3, r7, #21632	@ 0x5480
 800231e:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff f821 	bl	800136c <local_search>

	  combined.size = 0;
 800232a:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 800232e:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 8002332:	2200      	movs	r2, #0
 8002334:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
	  for (int i = 0; i < pop.size; i++) {
 8002338:	2300      	movs	r3, #0
 800233a:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 800233e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e034      	b.n	80023b0 <main+0x1a8>
		  combined.solutions[combined.size++] = pop.solutions[i];
 8002346:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 800234a:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 800234e:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8002352:	1c51      	adds	r1, r2, #1
 8002354:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002358:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 800235c:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 8002360:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002364:	f2a3 6194 	subw	r1, r3, #1684	@ 0x694
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	18c8      	adds	r0, r1, r3
 8002372:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002376:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800237a:	f6a3 6144 	subw	r1, r3, #3652	@ 0xe44
 800237e:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002382:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	18ca      	adds	r2, r1, r3
 8002392:	4603      	mov	r3, r0
 8002394:	ca07      	ldmia	r2, {r0, r1, r2}
 8002396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < pop.size; i++) {
 800239a:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 800239e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80023aa:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80023b4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80023b8:	f6a3 6344 	subw	r3, r3, #3652	@ 0xe44
 80023bc:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80023c0:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80023c4:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbbb      	blt.n	8002346 <main+0x13e>
	  }
	  for (int i = 0; i < offspring_cross.size; i++) {
 80023ce:	2300      	movs	r3, #0
 80023d0:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80023d4:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e034      	b.n	8002446 <main+0x23e>
		  combined.solutions[combined.size++] = offspring_cross.solutions[i];
 80023dc:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 80023e0:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 80023e4:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 80023e8:	1c51      	adds	r1, r2, #1
 80023ea:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 80023ee:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 80023f2:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 80023f6:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 80023fa:	f2a3 6194 	subw	r1, r3, #1684	@ 0x694
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	18c8      	adds	r0, r1, r3
 8002408:	f507 43a6 	add.w	r3, r7, #21248	@ 0x5300
 800240c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002410:	f6a3 4158 	subw	r1, r3, #3160	@ 0xc58
 8002414:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002418:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	18ca      	adds	r2, r1, r3
 8002428:	4603      	mov	r3, r0
 800242a:	ca07      	ldmia	r2, {r0, r1, r2}
 800242c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < offspring_cross.size; i++) {
 8002430:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002434:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 8002440:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	f507 43a6 	add.w	r3, r7, #21248	@ 0x5300
 800244a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800244e:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 8002452:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8002456:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 800245a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	dbbb      	blt.n	80023dc <main+0x1d4>
	  }
	  for (int i = 0; i < offspring_mut.size; i++) {
 8002464:	2300      	movs	r3, #0
 8002466:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 800246a:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e034      	b.n	80024dc <main+0x2d4>
		  combined.solutions[combined.size++] = offspring_mut.solutions[i];
 8002472:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002476:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 800247a:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 800247e:	1c51      	adds	r1, r2, #1
 8002480:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002484:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 8002488:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 800248c:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002490:	f2a3 6194 	subw	r1, r3, #1684	@ 0x694
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	18c8      	adds	r0, r1, r3
 800249e:	f507 4386 	add.w	r3, r7, #17152	@ 0x4300
 80024a2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80024a6:	f6a3 216c 	subw	r1, r3, #2668	@ 0xa6c
 80024aa:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80024ae:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	18ca      	adds	r2, r1, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < offspring_mut.size; i++) {
 80024c6:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80024ca:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80024d6:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	f507 4386 	add.w	r3, r7, #17152	@ 0x4300
 80024e0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80024e4:	f6a3 236c 	subw	r3, r3, #2668	@ 0xa6c
 80024e8:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80024ec:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80024f0:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbbb      	blt.n	8002472 <main+0x26a>
	  }
	  for (int i = 0; i < offspring_ls.size; i++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 8002500:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e036      	b.n	8002576 <main+0x36e>
 8002508:	e000edf0 	.word	0xe000edf0
 800250c:	e0001000 	.word	0xe0001000
		  combined.solutions[combined.size++] = offspring_ls.solutions[i];
 8002510:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002514:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 8002518:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 800251c:	1c51      	adds	r1, r2, #1
 800251e:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002522:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 8002526:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 800252a:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 800252e:	f2a3 6194 	subw	r1, r3, #1684	@ 0x694
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	18c8      	adds	r0, r1, r3
 800253c:	f507 534d 	add.w	r3, r7, #13120	@ 0x3340
 8002540:	f5a3 6108 	sub.w	r1, r3, #2176	@ 0x880
 8002544:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002548:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	18ca      	adds	r2, r1, r3
 8002558:	4603      	mov	r3, r0
 800255a:	ca07      	ldmia	r2, {r0, r1, r2}
 800255c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < offspring_ls.size; i++) {
 8002560:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002564:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 8002570:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	f507 534d 	add.w	r3, r7, #13120	@ 0x3340
 800257a:	f5a3 6308 	sub.w	r3, r3, #2176	@ 0x880
 800257e:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8002582:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 8002586:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	dbbf      	blt.n	8002510 <main+0x308>
	  }

	  selection(&combined, &selected);
 8002590:	f507 626c 	add.w	r2, r7, #3776	@ 0xec0
 8002594:	3a28      	subs	r2, #40	@ 0x28
 8002596:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 800259a:	3b14      	subs	r3, #20
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fabc 	bl	8001b1c <selection>
	  pop = selected;
 80025a4:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80025a8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80025ac:	f6a3 6244 	subw	r2, r3, #3652	@ 0xe44
 80025b0:	f507 539a 	add.w	r3, r7, #4928	@ 0x1340
 80025b4:	f5a3 6395 	sub.w	r3, r3, #1192	@ 0x4a8
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f640 6314 	movw	r3, #3604	@ 0xe14
 80025c0:	461a      	mov	r2, r3
 80025c2:	f002 fe6a 	bl	800529a <memcpy>
	  update_archive(&pop, &archive);
 80025c6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80025ca:	3b3c      	subs	r3, #60	@ 0x3c
 80025cc:	f507 42a9 	add.w	r2, r7, #21632	@ 0x5480
 80025d0:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7ff fcdb 	bl	8001f92 <update_archive>
  for (int iter = 0; iter < MAX_ITER; iter++) {
 80025dc:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80025e0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 80025ec:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80025f6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80025fe:	f77f ae74 	ble.w	80022ea <main+0xe2>
  }

  uint32_t end_cycles = DWT->CYCCNT;
 8002602:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <main+0x520>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 800260a:	f102 0220 	add.w	r2, r2, #32
 800260e:	6013      	str	r3, [r2, #0]
  uint32_t elapsed_cycles = end_cycles - start_cycles;
 8002610:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002614:	f103 0320 	add.w	r3, r3, #32
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 800261e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f507 42c6 	add.w	r2, r7, #25344	@ 0x6300
 800262a:	f102 021c 	add.w	r2, r2, #28
 800262e:	6013      	str	r3, [r2, #0]
  float time_sec = (float)elapsed_cycles / 180000000.0f;
 8002630:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 8002634:	f103 031c 	add.w	r3, r3, #28
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002642:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800272c <main+0x524>
 8002646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264a:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 800264e:	f103 0318 	add.w	r3, r3, #24
 8002652:	edc3 7a00 	vstr	s15, [r3]
  float elapsed_ms = time_sec * 1000.0f;
 8002656:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 800265a:	f103 0318 	add.w	r3, r3, #24
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002730 <main+0x528>
 8002666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266a:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 800266e:	f103 0314 	add.w	r3, r3, #20
 8002672:	edc3 7a00 	vstr	s15, [r3]
  float energy_joules = VOLTAGE * CURRENT * time_sec;
 8002676:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 800267a:	f103 0318 	add.w	r3, r3, #24
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002734 <main+0x52c>
 8002686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268a:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 800268e:	f103 0310 	add.w	r3, r3, #16
 8002692:	edc3 7a00 	vstr	s15, [r3]

  send_archive(&huart1, &archive);
 8002696:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800269a:	3b3c      	subs	r3, #60	@ 0x3c
 800269c:	4619      	mov	r1, r3
 800269e:	4826      	ldr	r0, [pc, #152]	@ (8002738 <main+0x530>)
 80026a0:	f7ff fd66 	bl	8002170 <send_archive>

  char msg[128];
  snprintf(msg, sizeof(msg), "Done! Time: %.2fms (%.2fs), Energy: %.4fJ\r\n", elapsed_ms, time_sec, energy_joules);
 80026a4:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80026a8:	f103 0314 	add.w	r3, r3, #20
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	f7fd ff5b 	bl	8000568 <__aeabi_f2d>
 80026b2:	4604      	mov	r4, r0
 80026b4:	460d      	mov	r5, r1
 80026b6:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80026ba:	f103 0318 	add.w	r3, r3, #24
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	f7fd ff52 	bl	8000568 <__aeabi_f2d>
 80026c4:	4680      	mov	r8, r0
 80026c6:	4689      	mov	r9, r1
 80026c8:	f507 43c6 	add.w	r3, r7, #25344	@ 0x6300
 80026cc:	f103 0310 	add.w	r3, r3, #16
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	f7fd ff49 	bl	8000568 <__aeabi_f2d>
 80026d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026da:	3b3c      	subs	r3, #60	@ 0x3c
 80026dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80026e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80026e4:	e9cd 4500 	strd	r4, r5, [sp]
 80026e8:	4a14      	ldr	r2, [pc, #80]	@ (800273c <main+0x534>)
 80026ea:	2180      	movs	r1, #128	@ 0x80
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fcdb 	bl	80050a8 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80026f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026f6:	3b3c      	subs	r3, #60	@ 0x3c
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fdc9 	bl	8000290 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29a      	uxth	r2, r3
 8002702:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8002706:	393c      	subs	r1, #60	@ 0x3c
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
 800270c:	480a      	ldr	r0, [pc, #40]	@ (8002738 <main+0x530>)
 800270e:	f001 fbf7 	bl	8003f00 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
 8002712:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002716:	480a      	ldr	r0, [pc, #40]	@ (8002740 <main+0x538>)
 8002718:	f000 fe1f 	bl	800335a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800271c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002720:	f000 fb4c 	bl	8002dbc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // hoặc pin LED nào đó
 8002724:	bf00      	nop
 8002726:	e7f4      	b.n	8002712 <main+0x50a>
 8002728:	e0001000 	.word	0xe0001000
 800272c:	4d2ba950 	.word	0x4d2ba950
 8002730:	447a0000 	.word	0x447a0000
 8002734:	3d872b02 	.word	0x3d872b02
 8002738:	20000218 	.word	0x20000218
 800273c:	08007358 	.word	0x08007358
 8002740:	40021800 	.word	0x40021800

08002744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b094      	sub	sp, #80	@ 0x50
 8002748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274a:	f107 0320 	add.w	r3, r7, #32
 800274e:	2230      	movs	r2, #48	@ 0x30
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fd21 	bl	800519a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <SystemClock_Config+0xd8>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	4a2a      	ldr	r2, [pc, #168]	@ (800281c <SystemClock_Config+0xd8>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	@ 0x40
 8002778:	4b28      	ldr	r3, [pc, #160]	@ (800281c <SystemClock_Config+0xd8>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <SystemClock_Config+0xdc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a24      	ldr	r2, [pc, #144]	@ (8002820 <SystemClock_Config+0xdc>)
 800278e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <SystemClock_Config+0xdc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027aa:	2302      	movs	r3, #2
 80027ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027b4:	2304      	movs	r3, #4
 80027b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027b8:	23b4      	movs	r3, #180	@ 0xb4
 80027ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027bc:	2302      	movs	r3, #2
 80027be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80027c0:	2308      	movs	r3, #8
 80027c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c4:	f107 0320 	add.w	r3, r7, #32
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fe31 	bl	8003430 <HAL_RCC_OscConfig>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027d4:	f000 f8b6 	bl	8002944 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027d8:	f000 fdda 	bl	8003390 <HAL_PWREx_EnableOverDrive>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80027e2:	f000 f8af 	bl	8002944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e6:	230f      	movs	r3, #15
 80027e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ea:	2302      	movs	r3, #2
 80027ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80027f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027fe:	f107 030c 	add.w	r3, r7, #12
 8002802:	2105      	movs	r1, #5
 8002804:	4618      	mov	r0, r3
 8002806:	f001 f88b 	bl	8003920 <HAL_RCC_ClockConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002810:	f000 f898 	bl	8002944 <Error_Handler>
  }
}
 8002814:	bf00      	nop
 8002816:	3750      	adds	r7, #80	@ 0x50
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000

08002824 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <MX_RNG_Init+0x20>)
 800282a:	4a07      	ldr	r2, [pc, #28]	@ (8002848 <MX_RNG_Init+0x24>)
 800282c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <MX_RNG_Init+0x20>)
 8002830:	f001 fa96 	bl	8003d60 <HAL_RNG_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800283a:	f000 f883 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000208 	.word	0x20000208
 8002848:	50060800 	.word	0x50060800

0800284c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <MX_USART1_UART_Init+0x50>)
 8002854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	@ (8002898 <MX_USART1_UART_Init+0x4c>)
 8002884:	f001 faec 	bl	8003e60 <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800288e:	f000 f859 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000218 	.word	0x20000218
 800289c:	40011000 	.word	0x40011000

080028a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b20      	ldr	r3, [pc, #128]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a18      	ldr	r2, [pc, #96]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a11      	ldr	r2, [pc, #68]	@ (800293c <MX_GPIO_Init+0x9c>)
 80028f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <MX_GPIO_Init+0x9c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002910:	480b      	ldr	r0, [pc, #44]	@ (8002940 <MX_GPIO_Init+0xa0>)
 8002912:	f000 fd09 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002916:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800291a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291c:	2301      	movs	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4619      	mov	r1, r3
 800292e:	4804      	ldr	r0, [pc, #16]	@ (8002940 <MX_GPIO_Init+0xa0>)
 8002930:	f000 fb4e 	bl	8002fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002934:	bf00      	nop
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	40021800 	.word	0x40021800

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <Error_Handler+0x8>

08002950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_MspInit+0x4c>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <HAL_MspInit+0x4c>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002964:	6453      	str	r3, [r2, #68]	@ 0x44
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_MspInit+0x4c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_MspInit+0x4c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <HAL_MspInit+0x4c>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_MspInit+0x4c>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_RNG_MspInit+0x3c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10d      	bne.n	80029ce <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <HAL_RNG_MspInit+0x40>)
 80029b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_RNG_MspInit+0x40>)
 80029bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029c0:	6353      	str	r3, [r2, #52]	@ 0x34
 80029c2:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <HAL_RNG_MspInit+0x40>)
 80029c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	50060800 	.word	0x50060800
 80029e0:	40023800 	.word	0x40023800

080029e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	@ (8002a68 <HAL_UART_MspInit+0x84>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d12c      	bne.n	8002a60 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <HAL_UART_MspInit+0x88>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	4a17      	ldr	r2, [pc, #92]	@ (8002a6c <HAL_UART_MspInit+0x88>)
 8002a10:	f043 0310 	orr.w	r3, r3, #16
 8002a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <HAL_UART_MspInit+0x88>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_UART_MspInit+0x88>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4a10      	ldr	r2, [pc, #64]	@ (8002a6c <HAL_UART_MspInit+0x88>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_UART_MspInit+0x88>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a50:	2307      	movs	r3, #7
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4805      	ldr	r0, [pc, #20]	@ (8002a70 <HAL_UART_MspInit+0x8c>)
 8002a5c:	f000 fab8 	bl	8002fd0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a60:	bf00      	nop
 8002a62:	3728      	adds	r7, #40	@ 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <NMI_Handler+0x4>

08002a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <BusFault_Handler+0x4>

08002a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <UsageFault_Handler+0x4>

08002a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aca:	f000 f957 	bl	8002d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_kill>:

int _kill(int pid, int sig)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aec:	f002 fba8 	bl	8005240 <__errno>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2216      	movs	r2, #22
 8002af4:	601a      	str	r2, [r3, #0]
  return -1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <_exit>:

void _exit (int status)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffe7 	bl	8002ae2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <_exit+0x12>

08002b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e00a      	b.n	8002b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b2a:	f3af 8000 	nop.w
 8002b2e:	4601      	mov	r1, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	60ba      	str	r2, [r7, #8]
 8002b36:	b2ca      	uxtb	r2, r1
 8002b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	dbf0      	blt.n	8002b2a <_read+0x12>
  }

  return len;
 8002b48:	687b      	ldr	r3, [r7, #4]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e009      	b.n	8002b78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	60ba      	str	r2, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dbf1      	blt.n	8002b64 <_write+0x12>
  }
  return len;
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_close>:

int _close(int file)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bb2:	605a      	str	r2, [r3, #4]
  return 0;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <_isatty>:

int _isatty(int file)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bfc:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <_sbrk+0x5c>)
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <_sbrk+0x60>)
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c08:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <_sbrk+0x64>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <_sbrk+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d207      	bcs.n	8002c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c24:	f002 fb0c 	bl	8005240 <__errno>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e009      	b.n	8002c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <_sbrk+0x64>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <_sbrk+0x64>)
 8002c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20030000 	.word	0x20030000
 8002c54:	00000400 	.word	0x00000400
 8002c58:	20000260 	.word	0x20000260
 8002c5c:	200003b8 	.word	0x200003b8

08002c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <SystemInit+0x20>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <SystemInit+0x20>)
 8002c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c88:	f7ff ffea 	bl	8002c60 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c8c:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c8e:	490d      	ldr	r1, [pc, #52]	@ (8002cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c90:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c94:	e002      	b.n	8002c9c <LoopCopyDataInit>

08002c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9a:	3304      	adds	r3, #4

08002c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca0:	d3f9      	bcc.n	8002c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca8:	e001      	b.n	8002cae <LoopFillZerobss>

08002caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cac:	3204      	adds	r2, #4

08002cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb0:	d3fb      	bcc.n	8002caa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f002 facb 	bl	800524c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb6:	f7ff faa7 	bl	8002208 <main>
  bx  lr    
 8002cba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002cbc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002cc8:	08007724 	.word	0x08007724
  ldr r2, =_sbss
 8002ccc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002cd0:	200003b4 	.word	0x200003b4

08002cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC_IRQHandler>
	...

08002cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <HAL_Init+0x40>)
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_Init+0x40>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <HAL_Init+0x40>)
 8002cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <HAL_Init+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	@ (8002d18 <HAL_Init+0x40>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f000 f931 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d06:	200f      	movs	r0, #15
 8002d08:	f000 f808 	bl	8002d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0c:	f7ff fe20 	bl	8002950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d24:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <HAL_InitTick+0x54>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <HAL_InitTick+0x58>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f93b 	bl	8002fb6 <HAL_SYSTICK_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00e      	b.n	8002d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d80a      	bhi.n	8002d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d50:	2200      	movs	r2, #0
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f000 f911 	bl	8002f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d5c:	4a06      	ldr	r2, [pc, #24]	@ (8002d78 <HAL_InitTick+0x5c>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e000      	b.n	8002d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000018 	.word	0x20000018
 8002d74:	20000020 	.word	0x20000020
 8002d78:	2000001c 	.word	0x2000001c

08002d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_IncTick+0x20>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_IncTick+0x24>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <HAL_IncTick+0x24>)
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000020 	.word	0x20000020
 8002da0:	20000264 	.word	0x20000264

08002da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return uwTick;
 8002da8:	4b03      	ldr	r3, [pc, #12]	@ (8002db8 <HAL_GetTick+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000264 	.word	0x20000264

08002dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff ffee 	bl	8002da4 <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d005      	beq.n	8002de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <HAL_Delay+0x44>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002de2:	bf00      	nop
 8002de4:	f7ff ffde 	bl	8002da4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d8f7      	bhi.n	8002de4 <HAL_Delay+0x28>
  {
  }
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000020 	.word	0x20000020

08002e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e36:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <__NVIC_GetPriorityGrouping+0x18>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f003 0307 	and.w	r3, r3, #7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db0a      	blt.n	8002e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	490c      	ldr	r1, [pc, #48]	@ (8002eb4 <__NVIC_SetPriority+0x4c>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e90:	e00a      	b.n	8002ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4908      	ldr	r1, [pc, #32]	@ (8002eb8 <__NVIC_SetPriority+0x50>)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	761a      	strb	r2, [r3, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	bf28      	it	cs
 8002eda:	2304      	movcs	r3, #4
 8002edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <NVIC_EncodePriority+0x30>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3b03      	subs	r3, #3
 8002eea:	e000      	b.n	8002eee <NVIC_EncodePriority+0x32>
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	401a      	ands	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	4313      	orrs	r3, r2
         );
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f34:	d301      	bcc.n	8002f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00f      	b.n	8002f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <SysTick_Config+0x40>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f42:	210f      	movs	r1, #15
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f7ff ff8e 	bl	8002e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <SysTick_Config+0x40>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <SysTick_Config+0x40>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff47 	bl	8002e04 <__NVIC_SetPriorityGrouping>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff5c 	bl	8002e4c <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff8e 	bl	8002ebc <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5d 	bl	8002e68 <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ffb0 	bl	8002f24 <SysTick_Config>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e177      	b.n	80032dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	f040 8166 	bne.w	80032d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d005      	beq.n	8003022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	2b02      	cmp	r3, #2
 8003020:	d130      	bne.n	8003084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80c0 	beq.w	80032d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b66      	ldr	r3, [pc, #408]	@ (80032f4 <HAL_GPIO_Init+0x324>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	4a65      	ldr	r2, [pc, #404]	@ (80032f4 <HAL_GPIO_Init+0x324>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003164:	6453      	str	r3, [r2, #68]	@ 0x44
 8003166:	4b63      	ldr	r3, [pc, #396]	@ (80032f4 <HAL_GPIO_Init+0x324>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003172:	4a61      	ldr	r2, [pc, #388]	@ (80032f8 <HAL_GPIO_Init+0x328>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a58      	ldr	r2, [pc, #352]	@ (80032fc <HAL_GPIO_Init+0x32c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d037      	beq.n	800320e <HAL_GPIO_Init+0x23e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a57      	ldr	r2, [pc, #348]	@ (8003300 <HAL_GPIO_Init+0x330>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d031      	beq.n	800320a <HAL_GPIO_Init+0x23a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a56      	ldr	r2, [pc, #344]	@ (8003304 <HAL_GPIO_Init+0x334>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d02b      	beq.n	8003206 <HAL_GPIO_Init+0x236>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a55      	ldr	r2, [pc, #340]	@ (8003308 <HAL_GPIO_Init+0x338>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d025      	beq.n	8003202 <HAL_GPIO_Init+0x232>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a54      	ldr	r2, [pc, #336]	@ (800330c <HAL_GPIO_Init+0x33c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01f      	beq.n	80031fe <HAL_GPIO_Init+0x22e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a53      	ldr	r2, [pc, #332]	@ (8003310 <HAL_GPIO_Init+0x340>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d019      	beq.n	80031fa <HAL_GPIO_Init+0x22a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a52      	ldr	r2, [pc, #328]	@ (8003314 <HAL_GPIO_Init+0x344>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_GPIO_Init+0x226>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a51      	ldr	r2, [pc, #324]	@ (8003318 <HAL_GPIO_Init+0x348>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00d      	beq.n	80031f2 <HAL_GPIO_Init+0x222>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a50      	ldr	r2, [pc, #320]	@ (800331c <HAL_GPIO_Init+0x34c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <HAL_GPIO_Init+0x21e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003320 <HAL_GPIO_Init+0x350>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_GPIO_Init+0x21a>
 80031e6:	2309      	movs	r3, #9
 80031e8:	e012      	b.n	8003210 <HAL_GPIO_Init+0x240>
 80031ea:	230a      	movs	r3, #10
 80031ec:	e010      	b.n	8003210 <HAL_GPIO_Init+0x240>
 80031ee:	2308      	movs	r3, #8
 80031f0:	e00e      	b.n	8003210 <HAL_GPIO_Init+0x240>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e00c      	b.n	8003210 <HAL_GPIO_Init+0x240>
 80031f6:	2306      	movs	r3, #6
 80031f8:	e00a      	b.n	8003210 <HAL_GPIO_Init+0x240>
 80031fa:	2305      	movs	r3, #5
 80031fc:	e008      	b.n	8003210 <HAL_GPIO_Init+0x240>
 80031fe:	2304      	movs	r3, #4
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x240>
 8003202:	2303      	movs	r3, #3
 8003204:	e004      	b.n	8003210 <HAL_GPIO_Init+0x240>
 8003206:	2302      	movs	r3, #2
 8003208:	e002      	b.n	8003210 <HAL_GPIO_Init+0x240>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_GPIO_Init+0x240>
 800320e:	2300      	movs	r3, #0
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f002 0203 	and.w	r2, r2, #3
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	4093      	lsls	r3, r2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003220:	4935      	ldr	r1, [pc, #212]	@ (80032f8 <HAL_GPIO_Init+0x328>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	3302      	adds	r3, #2
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322e:	4b3d      	ldr	r3, [pc, #244]	@ (8003324 <HAL_GPIO_Init+0x354>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003252:	4a34      	ldr	r2, [pc, #208]	@ (8003324 <HAL_GPIO_Init+0x354>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003258:	4b32      	ldr	r3, [pc, #200]	@ (8003324 <HAL_GPIO_Init+0x354>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800327c:	4a29      	ldr	r2, [pc, #164]	@ (8003324 <HAL_GPIO_Init+0x354>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003282:	4b28      	ldr	r3, [pc, #160]	@ (8003324 <HAL_GPIO_Init+0x354>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003324 <HAL_GPIO_Init+0x354>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <HAL_GPIO_Init+0x354>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d0:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <HAL_GPIO_Init+0x354>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3301      	adds	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	f67f ae84 	bls.w	8002fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40020000 	.word	0x40020000
 8003300:	40020400 	.word	0x40020400
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40021000 	.word	0x40021000
 8003310:	40021400 	.word	0x40021400
 8003314:	40021800 	.word	0x40021800
 8003318:	40021c00 	.word	0x40021c00
 800331c:	40022000 	.word	0x40022000
 8003320:	40022400 	.word	0x40022400
 8003324:	40013c00 	.word	0x40013c00

08003328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
 8003334:	4613      	mov	r3, r2
 8003336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003344:	e003      	b.n	800334e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	041a      	lsls	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	619a      	str	r2, [r3, #24]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800336c:	887a      	ldrh	r2, [r7, #2]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	041a      	lsls	r2, r3, #16
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43d9      	mvns	r1, r3
 8003378:	887b      	ldrh	r3, [r7, #2]
 800337a:	400b      	ands	r3, r1
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <HAL_PWREx_EnableOverDrive+0x90>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003420 <HAL_PWREx_EnableOverDrive+0x90>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <HAL_PWREx_EnableOverDrive+0x90>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x94>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033bc:	f7ff fcf2 	bl	8002da4 <HAL_GetTick>
 80033c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033c2:	e009      	b.n	80033d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c4:	f7ff fcee 	bl	8002da4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d2:	d901      	bls.n	80033d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e01f      	b.n	8003418 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033d8:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x98>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d1ee      	bne.n	80033c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ec:	f7ff fcda 	bl	8002da4 <HAL_GetTick>
 80033f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033f2:	e009      	b.n	8003408 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033f4:	f7ff fcd6 	bl	8002da4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003402:	d901      	bls.n	8003408 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e007      	b.n	8003418 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003408:	4b07      	ldr	r3, [pc, #28]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x98>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003414:	d1ee      	bne.n	80033f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	420e0040 	.word	0x420e0040
 8003428:	40007000 	.word	0x40007000
 800342c:	420e0044 	.word	0x420e0044

08003430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e267      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00c      	beq.n	8003474 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b85      	ldr	r3, [pc, #532]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003462:	2b08      	cmp	r3, #8
 8003464:	d112      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b82      	ldr	r3, [pc, #520]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	4b7e      	ldr	r3, [pc, #504]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e242      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x74>
 8003496:	4b76      	ldr	r3, [pc, #472]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a75      	ldr	r2, [pc, #468]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b70      	ldr	r3, [pc, #448]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6c      	ldr	r2, [pc, #432]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034c8:	4b69      	ldr	r3, [pc, #420]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a68      	ldr	r2, [pc, #416]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b66      	ldr	r3, [pc, #408]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a65      	ldr	r2, [pc, #404]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7ff fc5c 	bl	8002da4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7ff fc58 	bl	8002da4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e207      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b5b      	ldr	r3, [pc, #364]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7ff fc48 	bl	8002da4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7ff fc44 	bl	8002da4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	@ 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1f3      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b51      	ldr	r3, [pc, #324]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b47      	ldr	r3, [pc, #284]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355e:	4b44      	ldr	r3, [pc, #272]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1c7      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b3b      	ldr	r3, [pc, #236]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4937      	ldr	r1, [pc, #220]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b34      	ldr	r3, [pc, #208]	@ (8003674 <HAL_RCC_OscConfig+0x244>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7ff fbfd 	bl	8002da4 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7ff fbf9 	bl	8002da4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1a8      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4925      	ldr	r1, [pc, #148]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b24      	ldr	r3, [pc, #144]	@ (8003674 <HAL_RCC_OscConfig+0x244>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7ff fbdc 	bl	8002da4 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7ff fbd8 	bl	8002da4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e187      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d036      	beq.n	8003688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_RCC_OscConfig+0x248>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7ff fbbc 	bl	8002da4 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7ff fbb8 	bl	8002da4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e167      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x200>
 800364e:	e01b      	b.n	8003688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_OscConfig+0x248>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003656:	f7ff fba5 	bl	8002da4 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	e00e      	b.n	800367c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7ff fba1 	bl	8002da4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d907      	bls.n	800367c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e150      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003670:	40023800 	.word	0x40023800
 8003674:	42470000 	.word	0x42470000
 8003678:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	4b88      	ldr	r3, [pc, #544]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ea      	bne.n	800365e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8097 	beq.w	80037c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369a:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	4b7d      	ldr	r3, [pc, #500]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	4a7c      	ldr	r2, [pc, #496]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b6:	4b7a      	ldr	r3, [pc, #488]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b77      	ldr	r3, [pc, #476]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b74      	ldr	r3, [pc, #464]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a73      	ldr	r2, [pc, #460]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7ff fb61 	bl	8002da4 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7ff fb5d 	bl	8002da4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e10c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b6a      	ldr	r3, [pc, #424]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x2ea>
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a63      	ldr	r2, [pc, #396]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b05      	cmp	r3, #5
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x30c>
 8003722:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a5e      	ldr	r2, [pc, #376]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
 800372e:	4b5c      	ldr	r3, [pc, #368]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	4a5b      	ldr	r2, [pc, #364]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6713      	str	r3, [r2, #112]	@ 0x70
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800373c:	4b58      	ldr	r3, [pc, #352]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	@ 0x70
 8003748:	4b55      	ldr	r3, [pc, #340]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	4a54      	ldr	r2, [pc, #336]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7ff fb22 	bl	8002da4 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7ff fb1e 	bl	8002da4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0cb      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	4b49      	ldr	r3, [pc, #292]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCC_OscConfig+0x334>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003788:	f7ff fb0c 	bl	8002da4 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7ff fb08 	bl	8002da4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0b5      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	4b3e      	ldr	r3, [pc, #248]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ee      	bne.n	8003790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	4a38      	ldr	r2, [pc, #224]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80a1 	beq.w	8003910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ce:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d05c      	beq.n	8003894 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d141      	bne.n	8003866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7ff fadc 	bl	8002da4 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7ff fad8 	bl	8002da4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e087      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	3b01      	subs	r3, #1
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	491b      	ldr	r1, [pc, #108]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7ff fab1 	bl	8002da4 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7ff faad 	bl	8002da4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e05c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x416>
 8003864:	e054      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7ff fa9a 	bl	8002da4 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7ff fa96 	bl	8002da4 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e045      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x444>
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e038      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_RCC_OscConfig+0x4ec>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d028      	beq.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d121      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d11a      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d111      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	3b01      	subs	r3, #1
 80038f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0cc      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b68      	ldr	r3, [pc, #416]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d90c      	bls.n	800395c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b65      	ldr	r3, [pc, #404]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b8      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a58      	ldr	r2, [pc, #352]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800397e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800398c:	4b53      	ldr	r3, [pc, #332]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a52      	ldr	r2, [pc, #328]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003998:	4b50      	ldr	r3, [pc, #320]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	494d      	ldr	r1, [pc, #308]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d044      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b47      	ldr	r3, [pc, #284]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d119      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e07f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d003      	beq.n	80039de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	4b3f      	ldr	r3, [pc, #252]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e067      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b37      	ldr	r3, [pc, #220]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4934      	ldr	r1, [pc, #208]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a10:	f7ff f9c8 	bl	8002da4 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7ff f9c4 	bl	8002da4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e04f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b25      	ldr	r3, [pc, #148]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d20c      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b20      	ldr	r3, [pc, #128]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e032      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4916      	ldr	r1, [pc, #88]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	490e      	ldr	r1, [pc, #56]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa6:	f000 f821 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	490a      	ldr	r1, [pc, #40]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	5ccb      	ldrb	r3, [r1, r3]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f928 	bl	8002d1c <HAL_InitTick>

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023c00 	.word	0x40023c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	08007384 	.word	0x08007384
 8003ae4:	20000018 	.word	0x20000018
 8003ae8:	2000001c 	.word	0x2000001c

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b094      	sub	sp, #80	@ 0x50
 8003af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b04:	4b79      	ldr	r3, [pc, #484]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d00d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x40>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	f200 80e1 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1e:	e0db      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b73      	ldr	r3, [pc, #460]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b24:	e0db      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b26:	4b73      	ldr	r3, [pc, #460]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b2a:	e0d8      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b5e:	4622      	mov	r2, r4
 8003b60:	462b      	mov	r3, r5
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	0159      	lsls	r1, r3, #5
 8003b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b70:	0150      	lsls	r0, r2, #5
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4621      	mov	r1, r4
 8003b78:	1a51      	subs	r1, r2, r1
 8003b7a:	6139      	str	r1, [r7, #16]
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b90:	4659      	mov	r1, fp
 8003b92:	018b      	lsls	r3, r1, #6
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	018a      	lsls	r2, r1, #6
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bbe:	4690      	mov	r8, r2
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	eb18 0303 	adds.w	r3, r8, r3
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	462b      	mov	r3, r5
 8003bcc:	eb49 0303 	adc.w	r3, r9, r3
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bde:	4629      	mov	r1, r5
 8003be0:	024b      	lsls	r3, r1, #9
 8003be2:	4621      	mov	r1, r4
 8003be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003be8:	4621      	mov	r1, r4
 8003bea:	024a      	lsls	r2, r1, #9
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bfc:	f7fd f834 	bl	8000c68 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c08:	e058      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b38      	ldr	r3, [pc, #224]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	4611      	mov	r1, r2
 8003c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	f04f 0000 	mov.w	r0, #0
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	0159      	lsls	r1, r3, #5
 8003c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c36:	0150      	lsls	r0, r2, #5
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c60:	eb63 050b 	sbc.w	r5, r3, fp
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	61fa      	str	r2, [r7, #28]
 8003cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb0:	f7fc ffda 	bl	8000c68 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3750      	adds	r7, #80	@ 0x50
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000018 	.word	0x20000018

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d14:	f7ff fff0 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	08007394 	.word	0x08007394

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d3c:	f7ff ffdc 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0b5b      	lsrs	r3, r3, #13
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08007394 	.word	0x08007394

08003d60 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e01c      	b.n	8003dac <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	795b      	ldrb	r3, [r3, #5]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fe fe0c 	bl	80029a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0204 	orr.w	r2, r2, #4
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	791b      	ldrb	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_RNG_GenerateRandomNumber+0x1a>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e044      	b.n	8003e58 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	795b      	ldrb	r3, [r3, #5]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d133      	bne.n	8003e46 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003de4:	f7fe ffde 	bl	8002da4 <HAL_GetTick>
 8003de8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dea:	e018      	b.n	8003e1e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003dec:	f7fe ffda 	bl	8002da4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d911      	bls.n	8003e1e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d00a      	beq.n	8003e1e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e01c      	b.n	8003e58 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d1df      	bne.n	8003dec <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	715a      	strb	r2, [r3, #5]
 8003e44:	e004      	b.n	8003e50 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	711a      	strb	r2, [r3, #4]

  return status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e042      	b.n	8003ef8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe fdac 	bl	80029e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	@ 0x24
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f973 	bl	8004190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	@ 0x28
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d175      	bne.n	800400c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_UART_Transmit+0x2c>
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e06e      	b.n	800400e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2221      	movs	r2, #33	@ 0x21
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f3e:	f7fe ff31 	bl	8002da4 <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f58:	d108      	bne.n	8003f6c <HAL_UART_Transmit+0x6c>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e003      	b.n	8003f74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f74:	e02e      	b.n	8003fd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2180      	movs	r1, #128	@ 0x80
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f848 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e03a      	b.n	800400e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e007      	b.n	8003fc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1cb      	bne.n	8003f76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2140      	movs	r1, #64	@ 0x40
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f814 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e006      	b.n	800400e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b086      	sub	sp, #24
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004026:	e03b      	b.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d037      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7fe feb8 	bl	8002da4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <UART_WaitOnFlagUntilTimeout+0x30>
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e03a      	b.n	80040c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d020      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d01d      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b08      	cmp	r3, #8
 8004070:	d116      	bne.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f81d 	bl	80040c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2208      	movs	r2, #8
 8004092:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e00f      	b.n	80040c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d0b4      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b095      	sub	sp, #84	@ 0x54
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80040f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3314      	adds	r3, #20
 800410a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	61fb      	str	r3, [r7, #28]
   return(result);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800412a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e5      	bne.n	8004104 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	2b01      	cmp	r3, #1
 800413e:	d119      	bne.n	8004174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f023 0310 	bic.w	r3, r3, #16
 8004156:	647b      	str	r3, [r7, #68]	@ 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004160:	61ba      	str	r2, [r7, #24]
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	613b      	str	r3, [r7, #16]
   return(result);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004182:	bf00      	nop
 8004184:	3754      	adds	r7, #84	@ 0x54
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b0c0      	sub	sp, #256	@ 0x100
 8004196:	af00      	add	r7, sp, #0
 8004198:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	ea40 0301 	orr.w	r3, r0, r1
 80041b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041e8:	f021 010c 	bic.w	r1, r1, #12
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041f6:	430b      	orrs	r3, r1
 80041f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420a:	6999      	ldr	r1, [r3, #24]
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	ea40 0301 	orr.w	r3, r0, r1
 8004216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b8f      	ldr	r3, [pc, #572]	@ (800445c <UART_SetConfig+0x2cc>)
 8004220:	429a      	cmp	r2, r3
 8004222:	d005      	beq.n	8004230 <UART_SetConfig+0xa0>
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b8d      	ldr	r3, [pc, #564]	@ (8004460 <UART_SetConfig+0x2d0>)
 800422c:	429a      	cmp	r2, r3
 800422e:	d104      	bne.n	800423a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7ff fd82 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8004234:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004238:	e003      	b.n	8004242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800423a:	f7ff fd69 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 800423e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800424c:	f040 810c 	bne.w	8004468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004254:	2200      	movs	r2, #0
 8004256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800425a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800425e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004262:	4622      	mov	r2, r4
 8004264:	462b      	mov	r3, r5
 8004266:	1891      	adds	r1, r2, r2
 8004268:	65b9      	str	r1, [r7, #88]	@ 0x58
 800426a:	415b      	adcs	r3, r3
 800426c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800426e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004272:	4621      	mov	r1, r4
 8004274:	eb12 0801 	adds.w	r8, r2, r1
 8004278:	4629      	mov	r1, r5
 800427a:	eb43 0901 	adc.w	r9, r3, r1
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800428a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004292:	4690      	mov	r8, r2
 8004294:	4699      	mov	r9, r3
 8004296:	4623      	mov	r3, r4
 8004298:	eb18 0303 	adds.w	r3, r8, r3
 800429c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042a0:	462b      	mov	r3, r5
 80042a2:	eb49 0303 	adc.w	r3, r9, r3
 80042a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042be:	460b      	mov	r3, r1
 80042c0:	18db      	adds	r3, r3, r3
 80042c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c4:	4613      	mov	r3, r2
 80042c6:	eb42 0303 	adc.w	r3, r2, r3
 80042ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80042cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042d4:	f7fc fcc8 	bl	8000c68 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4b61      	ldr	r3, [pc, #388]	@ (8004464 <UART_SetConfig+0x2d4>)
 80042de:	fba3 2302 	umull	r2, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	011c      	lsls	r4, r3, #4
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	1891      	adds	r1, r2, r2
 80042fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004300:	415b      	adcs	r3, r3
 8004302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004308:	4641      	mov	r1, r8
 800430a:	eb12 0a01 	adds.w	sl, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb43 0b01 	adc.w	fp, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004328:	4692      	mov	sl, r2
 800432a:	469b      	mov	fp, r3
 800432c:	4643      	mov	r3, r8
 800432e:	eb1a 0303 	adds.w	r3, sl, r3
 8004332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004336:	464b      	mov	r3, r9
 8004338:	eb4b 0303 	adc.w	r3, fp, r3
 800433c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800434c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004354:	460b      	mov	r3, r1
 8004356:	18db      	adds	r3, r3, r3
 8004358:	643b      	str	r3, [r7, #64]	@ 0x40
 800435a:	4613      	mov	r3, r2
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	647b      	str	r3, [r7, #68]	@ 0x44
 8004362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800436a:	f7fc fc7d 	bl	8000c68 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4611      	mov	r1, r2
 8004374:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <UART_SetConfig+0x2d4>)
 8004376:	fba3 2301 	umull	r2, r3, r3, r1
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2264      	movs	r2, #100	@ 0x64
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	1acb      	subs	r3, r1, r3
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800438a:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <UART_SetConfig+0x2d4>)
 800438c:	fba3 2302 	umull	r2, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004398:	441c      	add	r4, r3
 800439a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	1891      	adds	r1, r2, r2
 80043b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043b4:	415b      	adcs	r3, r3
 80043b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043bc:	4641      	mov	r1, r8
 80043be:	1851      	adds	r1, r2, r1
 80043c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80043c2:	4649      	mov	r1, r9
 80043c4:	414b      	adcs	r3, r1
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043d4:	4659      	mov	r1, fp
 80043d6:	00cb      	lsls	r3, r1, #3
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043de:	4651      	mov	r1, sl
 80043e0:	00ca      	lsls	r2, r1, #3
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	4642      	mov	r2, r8
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043f0:	464b      	mov	r3, r9
 80043f2:	460a      	mov	r2, r1
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004408:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800440c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004410:	460b      	mov	r3, r1
 8004412:	18db      	adds	r3, r3, r3
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004416:	4613      	mov	r3, r2
 8004418:	eb42 0303 	adc.w	r3, r2, r3
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004426:	f7fc fc1f 	bl	8000c68 <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <UART_SetConfig+0x2d4>)
 8004430:	fba3 1302 	umull	r1, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	2164      	movs	r1, #100	@ 0x64
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	3332      	adds	r3, #50	@ 0x32
 8004442:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <UART_SetConfig+0x2d4>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	f003 0207 	and.w	r2, r3, #7
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4422      	add	r2, r4
 8004456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004458:	e106      	b.n	8004668 <UART_SetConfig+0x4d8>
 800445a:	bf00      	nop
 800445c:	40011000 	.word	0x40011000
 8004460:	40011400 	.word	0x40011400
 8004464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004472:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800447a:	4642      	mov	r2, r8
 800447c:	464b      	mov	r3, r9
 800447e:	1891      	adds	r1, r2, r2
 8004480:	6239      	str	r1, [r7, #32]
 8004482:	415b      	adcs	r3, r3
 8004484:	627b      	str	r3, [r7, #36]	@ 0x24
 8004486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800448a:	4641      	mov	r1, r8
 800448c:	1854      	adds	r4, r2, r1
 800448e:	4649      	mov	r1, r9
 8004490:	eb43 0501 	adc.w	r5, r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	00eb      	lsls	r3, r5, #3
 800449e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044a2:	00e2      	lsls	r2, r4, #3
 80044a4:	4614      	mov	r4, r2
 80044a6:	461d      	mov	r5, r3
 80044a8:	4643      	mov	r3, r8
 80044aa:	18e3      	adds	r3, r4, r3
 80044ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044b0:	464b      	mov	r3, r9
 80044b2:	eb45 0303 	adc.w	r3, r5, r3
 80044b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044d6:	4629      	mov	r1, r5
 80044d8:	008b      	lsls	r3, r1, #2
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e0:	4621      	mov	r1, r4
 80044e2:	008a      	lsls	r2, r1, #2
 80044e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044e8:	f7fc fbbe 	bl	8000c68 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4b60      	ldr	r3, [pc, #384]	@ (8004674 <UART_SetConfig+0x4e4>)
 80044f2:	fba3 2302 	umull	r2, r3, r3, r2
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	011c      	lsls	r4, r3, #4
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	1891      	adds	r1, r2, r2
 8004512:	61b9      	str	r1, [r7, #24]
 8004514:	415b      	adcs	r3, r3
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800451c:	4641      	mov	r1, r8
 800451e:	1851      	adds	r1, r2, r1
 8004520:	6139      	str	r1, [r7, #16]
 8004522:	4649      	mov	r1, r9
 8004524:	414b      	adcs	r3, r1
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004534:	4659      	mov	r1, fp
 8004536:	00cb      	lsls	r3, r1, #3
 8004538:	4651      	mov	r1, sl
 800453a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453e:	4651      	mov	r1, sl
 8004540:	00ca      	lsls	r2, r1, #3
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	4603      	mov	r3, r0
 8004548:	4642      	mov	r2, r8
 800454a:	189b      	adds	r3, r3, r2
 800454c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004550:	464b      	mov	r3, r9
 8004552:	460a      	mov	r2, r1
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004566:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004574:	4649      	mov	r1, r9
 8004576:	008b      	lsls	r3, r1, #2
 8004578:	4641      	mov	r1, r8
 800457a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800457e:	4641      	mov	r1, r8
 8004580:	008a      	lsls	r2, r1, #2
 8004582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004586:	f7fc fb6f 	bl	8000c68 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4611      	mov	r1, r2
 8004590:	4b38      	ldr	r3, [pc, #224]	@ (8004674 <UART_SetConfig+0x4e4>)
 8004592:	fba3 2301 	umull	r2, r3, r3, r1
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2264      	movs	r2, #100	@ 0x64
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	1acb      	subs	r3, r1, r3
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	3332      	adds	r3, #50	@ 0x32
 80045a4:	4a33      	ldr	r2, [pc, #204]	@ (8004674 <UART_SetConfig+0x4e4>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045b0:	441c      	add	r4, r3
 80045b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b6:	2200      	movs	r2, #0
 80045b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80045ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80045bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045c0:	4642      	mov	r2, r8
 80045c2:	464b      	mov	r3, r9
 80045c4:	1891      	adds	r1, r2, r2
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	415b      	adcs	r3, r3
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d0:	4641      	mov	r1, r8
 80045d2:	1851      	adds	r1, r2, r1
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	4649      	mov	r1, r9
 80045d8:	414b      	adcs	r3, r1
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045e8:	4659      	mov	r1, fp
 80045ea:	00cb      	lsls	r3, r1, #3
 80045ec:	4651      	mov	r1, sl
 80045ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f2:	4651      	mov	r1, sl
 80045f4:	00ca      	lsls	r2, r1, #3
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	4642      	mov	r2, r8
 80045fe:	189b      	adds	r3, r3, r2
 8004600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004602:	464b      	mov	r3, r9
 8004604:	460a      	mov	r2, r1
 8004606:	eb42 0303 	adc.w	r3, r2, r3
 800460a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	663b      	str	r3, [r7, #96]	@ 0x60
 8004616:	667a      	str	r2, [r7, #100]	@ 0x64
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004624:	4649      	mov	r1, r9
 8004626:	008b      	lsls	r3, r1, #2
 8004628:	4641      	mov	r1, r8
 800462a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462e:	4641      	mov	r1, r8
 8004630:	008a      	lsls	r2, r1, #2
 8004632:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004636:	f7fc fb17 	bl	8000c68 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <UART_SetConfig+0x4e4>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	@ 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	3332      	adds	r3, #50	@ 0x32
 8004652:	4a08      	ldr	r2, [pc, #32]	@ (8004674 <UART_SetConfig+0x4e4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 020f 	and.w	r2, r3, #15
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4422      	add	r2, r4
 8004666:	609a      	str	r2, [r3, #8]
}
 8004668:	bf00      	nop
 800466a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800466e:	46bd      	mov	sp, r7
 8004670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004674:	51eb851f 	.word	0x51eb851f

08004678 <__cvt>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	ec57 6b10 	vmov	r6, r7, d0
 8004680:	2f00      	cmp	r7, #0
 8004682:	460c      	mov	r4, r1
 8004684:	4619      	mov	r1, r3
 8004686:	463b      	mov	r3, r7
 8004688:	bfbb      	ittet	lt
 800468a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800468e:	461f      	movlt	r7, r3
 8004690:	2300      	movge	r3, #0
 8004692:	232d      	movlt	r3, #45	@ 0x2d
 8004694:	700b      	strb	r3, [r1, #0]
 8004696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004698:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800469c:	4691      	mov	r9, r2
 800469e:	f023 0820 	bic.w	r8, r3, #32
 80046a2:	bfbc      	itt	lt
 80046a4:	4632      	movlt	r2, r6
 80046a6:	4616      	movlt	r6, r2
 80046a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046ac:	d005      	beq.n	80046ba <__cvt+0x42>
 80046ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80046b2:	d100      	bne.n	80046b6 <__cvt+0x3e>
 80046b4:	3401      	adds	r4, #1
 80046b6:	2102      	movs	r1, #2
 80046b8:	e000      	b.n	80046bc <__cvt+0x44>
 80046ba:	2103      	movs	r1, #3
 80046bc:	ab03      	add	r3, sp, #12
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	ab02      	add	r3, sp, #8
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	ec47 6b10 	vmov	d0, r6, r7
 80046c8:	4653      	mov	r3, sl
 80046ca:	4622      	mov	r2, r4
 80046cc:	f000 fe7c 	bl	80053c8 <_dtoa_r>
 80046d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80046d4:	4605      	mov	r5, r0
 80046d6:	d119      	bne.n	800470c <__cvt+0x94>
 80046d8:	f019 0f01 	tst.w	r9, #1
 80046dc:	d00e      	beq.n	80046fc <__cvt+0x84>
 80046de:	eb00 0904 	add.w	r9, r0, r4
 80046e2:	2200      	movs	r2, #0
 80046e4:	2300      	movs	r3, #0
 80046e6:	4630      	mov	r0, r6
 80046e8:	4639      	mov	r1, r7
 80046ea:	f7fc f9fd 	bl	8000ae8 <__aeabi_dcmpeq>
 80046ee:	b108      	cbz	r0, 80046f4 <__cvt+0x7c>
 80046f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80046f4:	2230      	movs	r2, #48	@ 0x30
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	454b      	cmp	r3, r9
 80046fa:	d31e      	bcc.n	800473a <__cvt+0xc2>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004700:	1b5b      	subs	r3, r3, r5
 8004702:	4628      	mov	r0, r5
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	b004      	add	sp, #16
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004710:	eb00 0904 	add.w	r9, r0, r4
 8004714:	d1e5      	bne.n	80046e2 <__cvt+0x6a>
 8004716:	7803      	ldrb	r3, [r0, #0]
 8004718:	2b30      	cmp	r3, #48	@ 0x30
 800471a:	d10a      	bne.n	8004732 <__cvt+0xba>
 800471c:	2200      	movs	r2, #0
 800471e:	2300      	movs	r3, #0
 8004720:	4630      	mov	r0, r6
 8004722:	4639      	mov	r1, r7
 8004724:	f7fc f9e0 	bl	8000ae8 <__aeabi_dcmpeq>
 8004728:	b918      	cbnz	r0, 8004732 <__cvt+0xba>
 800472a:	f1c4 0401 	rsb	r4, r4, #1
 800472e:	f8ca 4000 	str.w	r4, [sl]
 8004732:	f8da 3000 	ldr.w	r3, [sl]
 8004736:	4499      	add	r9, r3
 8004738:	e7d3      	b.n	80046e2 <__cvt+0x6a>
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	9103      	str	r1, [sp, #12]
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e7d9      	b.n	80046f6 <__cvt+0x7e>

08004742 <__exponent>:
 8004742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004744:	2900      	cmp	r1, #0
 8004746:	bfba      	itte	lt
 8004748:	4249      	neglt	r1, r1
 800474a:	232d      	movlt	r3, #45	@ 0x2d
 800474c:	232b      	movge	r3, #43	@ 0x2b
 800474e:	2909      	cmp	r1, #9
 8004750:	7002      	strb	r2, [r0, #0]
 8004752:	7043      	strb	r3, [r0, #1]
 8004754:	dd29      	ble.n	80047aa <__exponent+0x68>
 8004756:	f10d 0307 	add.w	r3, sp, #7
 800475a:	461d      	mov	r5, r3
 800475c:	270a      	movs	r7, #10
 800475e:	461a      	mov	r2, r3
 8004760:	fbb1 f6f7 	udiv	r6, r1, r7
 8004764:	fb07 1416 	mls	r4, r7, r6, r1
 8004768:	3430      	adds	r4, #48	@ 0x30
 800476a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800476e:	460c      	mov	r4, r1
 8004770:	2c63      	cmp	r4, #99	@ 0x63
 8004772:	f103 33ff 	add.w	r3, r3, #4294967295
 8004776:	4631      	mov	r1, r6
 8004778:	dcf1      	bgt.n	800475e <__exponent+0x1c>
 800477a:	3130      	adds	r1, #48	@ 0x30
 800477c:	1e94      	subs	r4, r2, #2
 800477e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004782:	1c41      	adds	r1, r0, #1
 8004784:	4623      	mov	r3, r4
 8004786:	42ab      	cmp	r3, r5
 8004788:	d30a      	bcc.n	80047a0 <__exponent+0x5e>
 800478a:	f10d 0309 	add.w	r3, sp, #9
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	42ac      	cmp	r4, r5
 8004792:	bf88      	it	hi
 8004794:	2300      	movhi	r3, #0
 8004796:	3302      	adds	r3, #2
 8004798:	4403      	add	r3, r0
 800479a:	1a18      	subs	r0, r3, r0
 800479c:	b003      	add	sp, #12
 800479e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80047a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80047a8:	e7ed      	b.n	8004786 <__exponent+0x44>
 80047aa:	2330      	movs	r3, #48	@ 0x30
 80047ac:	3130      	adds	r1, #48	@ 0x30
 80047ae:	7083      	strb	r3, [r0, #2]
 80047b0:	70c1      	strb	r1, [r0, #3]
 80047b2:	1d03      	adds	r3, r0, #4
 80047b4:	e7f1      	b.n	800479a <__exponent+0x58>
	...

080047b8 <_printf_float>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	b08d      	sub	sp, #52	@ 0x34
 80047be:	460c      	mov	r4, r1
 80047c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80047c4:	4616      	mov	r6, r2
 80047c6:	461f      	mov	r7, r3
 80047c8:	4605      	mov	r5, r0
 80047ca:	f000 fcef 	bl	80051ac <_localeconv_r>
 80047ce:	6803      	ldr	r3, [r0, #0]
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fb fd5c 	bl	8000290 <strlen>
 80047d8:	2300      	movs	r3, #0
 80047da:	930a      	str	r3, [sp, #40]	@ 0x28
 80047dc:	f8d8 3000 	ldr.w	r3, [r8]
 80047e0:	9005      	str	r0, [sp, #20]
 80047e2:	3307      	adds	r3, #7
 80047e4:	f023 0307 	bic.w	r3, r3, #7
 80047e8:	f103 0208 	add.w	r2, r3, #8
 80047ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80047f0:	f8d4 b000 	ldr.w	fp, [r4]
 80047f4:	f8c8 2000 	str.w	r2, [r8]
 80047f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	f8cd 8018 	str.w	r8, [sp, #24]
 8004806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800480a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480e:	4b9c      	ldr	r3, [pc, #624]	@ (8004a80 <_printf_float+0x2c8>)
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	f7fc f99a 	bl	8000b4c <__aeabi_dcmpun>
 8004818:	bb70      	cbnz	r0, 8004878 <_printf_float+0xc0>
 800481a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800481e:	4b98      	ldr	r3, [pc, #608]	@ (8004a80 <_printf_float+0x2c8>)
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	f7fc f974 	bl	8000b10 <__aeabi_dcmple>
 8004828:	bb30      	cbnz	r0, 8004878 <_printf_float+0xc0>
 800482a:	2200      	movs	r2, #0
 800482c:	2300      	movs	r3, #0
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fc f963 	bl	8000afc <__aeabi_dcmplt>
 8004836:	b110      	cbz	r0, 800483e <_printf_float+0x86>
 8004838:	232d      	movs	r3, #45	@ 0x2d
 800483a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800483e:	4a91      	ldr	r2, [pc, #580]	@ (8004a84 <_printf_float+0x2cc>)
 8004840:	4b91      	ldr	r3, [pc, #580]	@ (8004a88 <_printf_float+0x2d0>)
 8004842:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004846:	bf8c      	ite	hi
 8004848:	4690      	movhi	r8, r2
 800484a:	4698      	movls	r8, r3
 800484c:	2303      	movs	r3, #3
 800484e:	6123      	str	r3, [r4, #16]
 8004850:	f02b 0304 	bic.w	r3, fp, #4
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	f04f 0900 	mov.w	r9, #0
 800485a:	9700      	str	r7, [sp, #0]
 800485c:	4633      	mov	r3, r6
 800485e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004860:	4621      	mov	r1, r4
 8004862:	4628      	mov	r0, r5
 8004864:	f000 f9d2 	bl	8004c0c <_printf_common>
 8004868:	3001      	adds	r0, #1
 800486a:	f040 808d 	bne.w	8004988 <_printf_float+0x1d0>
 800486e:	f04f 30ff 	mov.w	r0, #4294967295
 8004872:	b00d      	add	sp, #52	@ 0x34
 8004874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	4640      	mov	r0, r8
 800487e:	4649      	mov	r1, r9
 8004880:	f7fc f964 	bl	8000b4c <__aeabi_dcmpun>
 8004884:	b140      	cbz	r0, 8004898 <_printf_float+0xe0>
 8004886:	464b      	mov	r3, r9
 8004888:	2b00      	cmp	r3, #0
 800488a:	bfbc      	itt	lt
 800488c:	232d      	movlt	r3, #45	@ 0x2d
 800488e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004892:	4a7e      	ldr	r2, [pc, #504]	@ (8004a8c <_printf_float+0x2d4>)
 8004894:	4b7e      	ldr	r3, [pc, #504]	@ (8004a90 <_printf_float+0x2d8>)
 8004896:	e7d4      	b.n	8004842 <_printf_float+0x8a>
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800489e:	9206      	str	r2, [sp, #24]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	d13b      	bne.n	800491c <_printf_float+0x164>
 80048a4:	2306      	movs	r3, #6
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80048ac:	2300      	movs	r3, #0
 80048ae:	6022      	str	r2, [r4, #0]
 80048b0:	9303      	str	r3, [sp, #12]
 80048b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80048b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80048b8:	ab09      	add	r3, sp, #36	@ 0x24
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	6861      	ldr	r1, [r4, #4]
 80048be:	ec49 8b10 	vmov	d0, r8, r9
 80048c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80048c6:	4628      	mov	r0, r5
 80048c8:	f7ff fed6 	bl	8004678 <__cvt>
 80048cc:	9b06      	ldr	r3, [sp, #24]
 80048ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048d0:	2b47      	cmp	r3, #71	@ 0x47
 80048d2:	4680      	mov	r8, r0
 80048d4:	d129      	bne.n	800492a <_printf_float+0x172>
 80048d6:	1cc8      	adds	r0, r1, #3
 80048d8:	db02      	blt.n	80048e0 <_printf_float+0x128>
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	4299      	cmp	r1, r3
 80048de:	dd41      	ble.n	8004964 <_printf_float+0x1ac>
 80048e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80048e4:	fa5f fa8a 	uxtb.w	sl, sl
 80048e8:	3901      	subs	r1, #1
 80048ea:	4652      	mov	r2, sl
 80048ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80048f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80048f2:	f7ff ff26 	bl	8004742 <__exponent>
 80048f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048f8:	1813      	adds	r3, r2, r0
 80048fa:	2a01      	cmp	r2, #1
 80048fc:	4681      	mov	r9, r0
 80048fe:	6123      	str	r3, [r4, #16]
 8004900:	dc02      	bgt.n	8004908 <_printf_float+0x150>
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	07d2      	lsls	r2, r2, #31
 8004906:	d501      	bpl.n	800490c <_printf_float+0x154>
 8004908:	3301      	adds	r3, #1
 800490a:	6123      	str	r3, [r4, #16]
 800490c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0a2      	beq.n	800485a <_printf_float+0xa2>
 8004914:	232d      	movs	r3, #45	@ 0x2d
 8004916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800491a:	e79e      	b.n	800485a <_printf_float+0xa2>
 800491c:	9a06      	ldr	r2, [sp, #24]
 800491e:	2a47      	cmp	r2, #71	@ 0x47
 8004920:	d1c2      	bne.n	80048a8 <_printf_float+0xf0>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1c0      	bne.n	80048a8 <_printf_float+0xf0>
 8004926:	2301      	movs	r3, #1
 8004928:	e7bd      	b.n	80048a6 <_printf_float+0xee>
 800492a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800492e:	d9db      	bls.n	80048e8 <_printf_float+0x130>
 8004930:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004934:	d118      	bne.n	8004968 <_printf_float+0x1b0>
 8004936:	2900      	cmp	r1, #0
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	dd0b      	ble.n	8004954 <_printf_float+0x19c>
 800493c:	6121      	str	r1, [r4, #16]
 800493e:	b913      	cbnz	r3, 8004946 <_printf_float+0x18e>
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	07d0      	lsls	r0, r2, #31
 8004944:	d502      	bpl.n	800494c <_printf_float+0x194>
 8004946:	3301      	adds	r3, #1
 8004948:	440b      	add	r3, r1
 800494a:	6123      	str	r3, [r4, #16]
 800494c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800494e:	f04f 0900 	mov.w	r9, #0
 8004952:	e7db      	b.n	800490c <_printf_float+0x154>
 8004954:	b913      	cbnz	r3, 800495c <_printf_float+0x1a4>
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	07d2      	lsls	r2, r2, #31
 800495a:	d501      	bpl.n	8004960 <_printf_float+0x1a8>
 800495c:	3302      	adds	r3, #2
 800495e:	e7f4      	b.n	800494a <_printf_float+0x192>
 8004960:	2301      	movs	r3, #1
 8004962:	e7f2      	b.n	800494a <_printf_float+0x192>
 8004964:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800496a:	4299      	cmp	r1, r3
 800496c:	db05      	blt.n	800497a <_printf_float+0x1c2>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	6121      	str	r1, [r4, #16]
 8004972:	07d8      	lsls	r0, r3, #31
 8004974:	d5ea      	bpl.n	800494c <_printf_float+0x194>
 8004976:	1c4b      	adds	r3, r1, #1
 8004978:	e7e7      	b.n	800494a <_printf_float+0x192>
 800497a:	2900      	cmp	r1, #0
 800497c:	bfd4      	ite	le
 800497e:	f1c1 0202 	rsble	r2, r1, #2
 8004982:	2201      	movgt	r2, #1
 8004984:	4413      	add	r3, r2
 8004986:	e7e0      	b.n	800494a <_printf_float+0x192>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	055a      	lsls	r2, r3, #21
 800498c:	d407      	bmi.n	800499e <_printf_float+0x1e6>
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	4642      	mov	r2, r8
 8004992:	4631      	mov	r1, r6
 8004994:	4628      	mov	r0, r5
 8004996:	47b8      	blx	r7
 8004998:	3001      	adds	r0, #1
 800499a:	d12b      	bne.n	80049f4 <_printf_float+0x23c>
 800499c:	e767      	b.n	800486e <_printf_float+0xb6>
 800499e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049a2:	f240 80dd 	bls.w	8004b60 <_printf_float+0x3a8>
 80049a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049aa:	2200      	movs	r2, #0
 80049ac:	2300      	movs	r3, #0
 80049ae:	f7fc f89b 	bl	8000ae8 <__aeabi_dcmpeq>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d033      	beq.n	8004a1e <_printf_float+0x266>
 80049b6:	4a37      	ldr	r2, [pc, #220]	@ (8004a94 <_printf_float+0x2dc>)
 80049b8:	2301      	movs	r3, #1
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f af54 	beq.w	800486e <_printf_float+0xb6>
 80049c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80049ca:	4543      	cmp	r3, r8
 80049cc:	db02      	blt.n	80049d4 <_printf_float+0x21c>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	07d8      	lsls	r0, r3, #31
 80049d2:	d50f      	bpl.n	80049f4 <_printf_float+0x23c>
 80049d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	f43f af45 	beq.w	800486e <_printf_float+0xb6>
 80049e4:	f04f 0900 	mov.w	r9, #0
 80049e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80049ec:	f104 0a1a 	add.w	sl, r4, #26
 80049f0:	45c8      	cmp	r8, r9
 80049f2:	dc09      	bgt.n	8004a08 <_printf_float+0x250>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	079b      	lsls	r3, r3, #30
 80049f8:	f100 8103 	bmi.w	8004c02 <_printf_float+0x44a>
 80049fc:	68e0      	ldr	r0, [r4, #12]
 80049fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a00:	4298      	cmp	r0, r3
 8004a02:	bfb8      	it	lt
 8004a04:	4618      	movlt	r0, r3
 8004a06:	e734      	b.n	8004872 <_printf_float+0xba>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f af2b 	beq.w	800486e <_printf_float+0xb6>
 8004a18:	f109 0901 	add.w	r9, r9, #1
 8004a1c:	e7e8      	b.n	80049f0 <_printf_float+0x238>
 8004a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dc39      	bgt.n	8004a98 <_printf_float+0x2e0>
 8004a24:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <_printf_float+0x2dc>)
 8004a26:	2301      	movs	r3, #1
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f43f af1d 	beq.w	800486e <_printf_float+0xb6>
 8004a34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a38:	ea59 0303 	orrs.w	r3, r9, r3
 8004a3c:	d102      	bne.n	8004a44 <_printf_float+0x28c>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	07d9      	lsls	r1, r3, #31
 8004a42:	d5d7      	bpl.n	80049f4 <_printf_float+0x23c>
 8004a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f af0d 	beq.w	800486e <_printf_float+0xb6>
 8004a54:	f04f 0a00 	mov.w	sl, #0
 8004a58:	f104 0b1a 	add.w	fp, r4, #26
 8004a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5e:	425b      	negs	r3, r3
 8004a60:	4553      	cmp	r3, sl
 8004a62:	dc01      	bgt.n	8004a68 <_printf_float+0x2b0>
 8004a64:	464b      	mov	r3, r9
 8004a66:	e793      	b.n	8004990 <_printf_float+0x1d8>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	465a      	mov	r2, fp
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	f43f aefb 	beq.w	800486e <_printf_float+0xb6>
 8004a78:	f10a 0a01 	add.w	sl, sl, #1
 8004a7c:	e7ee      	b.n	8004a5c <_printf_float+0x2a4>
 8004a7e:	bf00      	nop
 8004a80:	7fefffff 	.word	0x7fefffff
 8004a84:	080073a0 	.word	0x080073a0
 8004a88:	0800739c 	.word	0x0800739c
 8004a8c:	080073a8 	.word	0x080073a8
 8004a90:	080073a4 	.word	0x080073a4
 8004a94:	080073ac 	.word	0x080073ac
 8004a98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a9e:	4553      	cmp	r3, sl
 8004aa0:	bfa8      	it	ge
 8004aa2:	4653      	movge	r3, sl
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	4699      	mov	r9, r3
 8004aa8:	dc36      	bgt.n	8004b18 <_printf_float+0x360>
 8004aaa:	f04f 0b00 	mov.w	fp, #0
 8004aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ab2:	f104 021a 	add.w	r2, r4, #26
 8004ab6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ab8:	9306      	str	r3, [sp, #24]
 8004aba:	eba3 0309 	sub.w	r3, r3, r9
 8004abe:	455b      	cmp	r3, fp
 8004ac0:	dc31      	bgt.n	8004b26 <_printf_float+0x36e>
 8004ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac4:	459a      	cmp	sl, r3
 8004ac6:	dc3a      	bgt.n	8004b3e <_printf_float+0x386>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	07da      	lsls	r2, r3, #31
 8004acc:	d437      	bmi.n	8004b3e <_printf_float+0x386>
 8004ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ad0:	ebaa 0903 	sub.w	r9, sl, r3
 8004ad4:	9b06      	ldr	r3, [sp, #24]
 8004ad6:	ebaa 0303 	sub.w	r3, sl, r3
 8004ada:	4599      	cmp	r9, r3
 8004adc:	bfa8      	it	ge
 8004ade:	4699      	movge	r9, r3
 8004ae0:	f1b9 0f00 	cmp.w	r9, #0
 8004ae4:	dc33      	bgt.n	8004b4e <_printf_float+0x396>
 8004ae6:	f04f 0800 	mov.w	r8, #0
 8004aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004aee:	f104 0b1a 	add.w	fp, r4, #26
 8004af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af4:	ebaa 0303 	sub.w	r3, sl, r3
 8004af8:	eba3 0309 	sub.w	r3, r3, r9
 8004afc:	4543      	cmp	r3, r8
 8004afe:	f77f af79 	ble.w	80049f4 <_printf_float+0x23c>
 8004b02:	2301      	movs	r3, #1
 8004b04:	465a      	mov	r2, fp
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f aeae 	beq.w	800486e <_printf_float+0xb6>
 8004b12:	f108 0801 	add.w	r8, r8, #1
 8004b16:	e7ec      	b.n	8004af2 <_printf_float+0x33a>
 8004b18:	4642      	mov	r2, r8
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	d1c2      	bne.n	8004aaa <_printf_float+0x2f2>
 8004b24:	e6a3      	b.n	800486e <_printf_float+0xb6>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	9206      	str	r2, [sp, #24]
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f ae9c 	beq.w	800486e <_printf_float+0xb6>
 8004b36:	9a06      	ldr	r2, [sp, #24]
 8004b38:	f10b 0b01 	add.w	fp, fp, #1
 8004b3c:	e7bb      	b.n	8004ab6 <_printf_float+0x2fe>
 8004b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d1c0      	bne.n	8004ace <_printf_float+0x316>
 8004b4c:	e68f      	b.n	800486e <_printf_float+0xb6>
 8004b4e:	9a06      	ldr	r2, [sp, #24]
 8004b50:	464b      	mov	r3, r9
 8004b52:	4442      	add	r2, r8
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d1c3      	bne.n	8004ae6 <_printf_float+0x32e>
 8004b5e:	e686      	b.n	800486e <_printf_float+0xb6>
 8004b60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b64:	f1ba 0f01 	cmp.w	sl, #1
 8004b68:	dc01      	bgt.n	8004b6e <_printf_float+0x3b6>
 8004b6a:	07db      	lsls	r3, r3, #31
 8004b6c:	d536      	bpl.n	8004bdc <_printf_float+0x424>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4642      	mov	r2, r8
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	47b8      	blx	r7
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f43f ae78 	beq.w	800486e <_printf_float+0xb6>
 8004b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	47b8      	blx	r7
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f43f ae70 	beq.w	800486e <_printf_float+0xb6>
 8004b8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b92:	2200      	movs	r2, #0
 8004b94:	2300      	movs	r3, #0
 8004b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b9a:	f7fb ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b9e:	b9c0      	cbnz	r0, 8004bd2 <_printf_float+0x41a>
 8004ba0:	4653      	mov	r3, sl
 8004ba2:	f108 0201 	add.w	r2, r8, #1
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	d10c      	bne.n	8004bca <_printf_float+0x412>
 8004bb0:	e65d      	b.n	800486e <_printf_float+0xb6>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	465a      	mov	r2, fp
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b8      	blx	r7
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	f43f ae56 	beq.w	800486e <_printf_float+0xb6>
 8004bc2:	f108 0801 	add.w	r8, r8, #1
 8004bc6:	45d0      	cmp	r8, sl
 8004bc8:	dbf3      	blt.n	8004bb2 <_printf_float+0x3fa>
 8004bca:	464b      	mov	r3, r9
 8004bcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bd0:	e6df      	b.n	8004992 <_printf_float+0x1da>
 8004bd2:	f04f 0800 	mov.w	r8, #0
 8004bd6:	f104 0b1a 	add.w	fp, r4, #26
 8004bda:	e7f4      	b.n	8004bc6 <_printf_float+0x40e>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4642      	mov	r2, r8
 8004be0:	e7e1      	b.n	8004ba6 <_printf_float+0x3ee>
 8004be2:	2301      	movs	r3, #1
 8004be4:	464a      	mov	r2, r9
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	f43f ae3e 	beq.w	800486e <_printf_float+0xb6>
 8004bf2:	f108 0801 	add.w	r8, r8, #1
 8004bf6:	68e3      	ldr	r3, [r4, #12]
 8004bf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004bfa:	1a5b      	subs	r3, r3, r1
 8004bfc:	4543      	cmp	r3, r8
 8004bfe:	dcf0      	bgt.n	8004be2 <_printf_float+0x42a>
 8004c00:	e6fc      	b.n	80049fc <_printf_float+0x244>
 8004c02:	f04f 0800 	mov.w	r8, #0
 8004c06:	f104 0919 	add.w	r9, r4, #25
 8004c0a:	e7f4      	b.n	8004bf6 <_printf_float+0x43e>

08004c0c <_printf_common>:
 8004c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	4616      	mov	r6, r2
 8004c12:	4698      	mov	r8, r3
 8004c14:	688a      	ldr	r2, [r1, #8]
 8004c16:	690b      	ldr	r3, [r1, #16]
 8004c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bfb8      	it	lt
 8004c20:	4613      	movlt	r3, r2
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c28:	4607      	mov	r7, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	b10a      	cbz	r2, 8004c32 <_printf_common+0x26>
 8004c2e:	3301      	adds	r3, #1
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	0699      	lsls	r1, r3, #26
 8004c36:	bf42      	ittt	mi
 8004c38:	6833      	ldrmi	r3, [r6, #0]
 8004c3a:	3302      	addmi	r3, #2
 8004c3c:	6033      	strmi	r3, [r6, #0]
 8004c3e:	6825      	ldr	r5, [r4, #0]
 8004c40:	f015 0506 	ands.w	r5, r5, #6
 8004c44:	d106      	bne.n	8004c54 <_printf_common+0x48>
 8004c46:	f104 0a19 	add.w	sl, r4, #25
 8004c4a:	68e3      	ldr	r3, [r4, #12]
 8004c4c:	6832      	ldr	r2, [r6, #0]
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	42ab      	cmp	r3, r5
 8004c52:	dc26      	bgt.n	8004ca2 <_printf_common+0x96>
 8004c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c58:	6822      	ldr	r2, [r4, #0]
 8004c5a:	3b00      	subs	r3, #0
 8004c5c:	bf18      	it	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	0692      	lsls	r2, r2, #26
 8004c62:	d42b      	bmi.n	8004cbc <_printf_common+0xb0>
 8004c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c68:	4641      	mov	r1, r8
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	47c8      	blx	r9
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d01e      	beq.n	8004cb0 <_printf_common+0xa4>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	6922      	ldr	r2, [r4, #16]
 8004c76:	f003 0306 	and.w	r3, r3, #6
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	bf02      	ittt	eq
 8004c7e:	68e5      	ldreq	r5, [r4, #12]
 8004c80:	6833      	ldreq	r3, [r6, #0]
 8004c82:	1aed      	subeq	r5, r5, r3
 8004c84:	68a3      	ldr	r3, [r4, #8]
 8004c86:	bf0c      	ite	eq
 8004c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c8c:	2500      	movne	r5, #0
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	bfc4      	itt	gt
 8004c92:	1a9b      	subgt	r3, r3, r2
 8004c94:	18ed      	addgt	r5, r5, r3
 8004c96:	2600      	movs	r6, #0
 8004c98:	341a      	adds	r4, #26
 8004c9a:	42b5      	cmp	r5, r6
 8004c9c:	d11a      	bne.n	8004cd4 <_printf_common+0xc8>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e008      	b.n	8004cb4 <_printf_common+0xa8>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4652      	mov	r2, sl
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	4638      	mov	r0, r7
 8004caa:	47c8      	blx	r9
 8004cac:	3001      	adds	r0, #1
 8004cae:	d103      	bne.n	8004cb8 <_printf_common+0xac>
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb8:	3501      	adds	r5, #1
 8004cba:	e7c6      	b.n	8004c4a <_printf_common+0x3e>
 8004cbc:	18e1      	adds	r1, r4, r3
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	2030      	movs	r0, #48	@ 0x30
 8004cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cc6:	4422      	add	r2, r4
 8004cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	e7c7      	b.n	8004c64 <_printf_common+0x58>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	4641      	mov	r1, r8
 8004cda:	4638      	mov	r0, r7
 8004cdc:	47c8      	blx	r9
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d0e6      	beq.n	8004cb0 <_printf_common+0xa4>
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7d9      	b.n	8004c9a <_printf_common+0x8e>
	...

08004ce8 <_printf_i>:
 8004ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	7e0f      	ldrb	r7, [r1, #24]
 8004cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cf0:	2f78      	cmp	r7, #120	@ 0x78
 8004cf2:	4691      	mov	r9, r2
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	469a      	mov	sl, r3
 8004cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cfe:	d807      	bhi.n	8004d10 <_printf_i+0x28>
 8004d00:	2f62      	cmp	r7, #98	@ 0x62
 8004d02:	d80a      	bhi.n	8004d1a <_printf_i+0x32>
 8004d04:	2f00      	cmp	r7, #0
 8004d06:	f000 80d1 	beq.w	8004eac <_printf_i+0x1c4>
 8004d0a:	2f58      	cmp	r7, #88	@ 0x58
 8004d0c:	f000 80b8 	beq.w	8004e80 <_printf_i+0x198>
 8004d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d18:	e03a      	b.n	8004d90 <_printf_i+0xa8>
 8004d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d1e:	2b15      	cmp	r3, #21
 8004d20:	d8f6      	bhi.n	8004d10 <_printf_i+0x28>
 8004d22:	a101      	add	r1, pc, #4	@ (adr r1, 8004d28 <_printf_i+0x40>)
 8004d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d28:	08004d81 	.word	0x08004d81
 8004d2c:	08004d95 	.word	0x08004d95
 8004d30:	08004d11 	.word	0x08004d11
 8004d34:	08004d11 	.word	0x08004d11
 8004d38:	08004d11 	.word	0x08004d11
 8004d3c:	08004d11 	.word	0x08004d11
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004d11 	.word	0x08004d11
 8004d48:	08004d11 	.word	0x08004d11
 8004d4c:	08004d11 	.word	0x08004d11
 8004d50:	08004d11 	.word	0x08004d11
 8004d54:	08004e93 	.word	0x08004e93
 8004d58:	08004dbf 	.word	0x08004dbf
 8004d5c:	08004e4d 	.word	0x08004e4d
 8004d60:	08004d11 	.word	0x08004d11
 8004d64:	08004d11 	.word	0x08004d11
 8004d68:	08004eb5 	.word	0x08004eb5
 8004d6c:	08004d11 	.word	0x08004d11
 8004d70:	08004dbf 	.word	0x08004dbf
 8004d74:	08004d11 	.word	0x08004d11
 8004d78:	08004d11 	.word	0x08004d11
 8004d7c:	08004e55 	.word	0x08004e55
 8004d80:	6833      	ldr	r3, [r6, #0]
 8004d82:	1d1a      	adds	r2, r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6032      	str	r2, [r6, #0]
 8004d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d90:	2301      	movs	r3, #1
 8004d92:	e09c      	b.n	8004ece <_printf_i+0x1e6>
 8004d94:	6833      	ldr	r3, [r6, #0]
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	1d19      	adds	r1, r3, #4
 8004d9a:	6031      	str	r1, [r6, #0]
 8004d9c:	0606      	lsls	r6, r0, #24
 8004d9e:	d501      	bpl.n	8004da4 <_printf_i+0xbc>
 8004da0:	681d      	ldr	r5, [r3, #0]
 8004da2:	e003      	b.n	8004dac <_printf_i+0xc4>
 8004da4:	0645      	lsls	r5, r0, #25
 8004da6:	d5fb      	bpl.n	8004da0 <_printf_i+0xb8>
 8004da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	da03      	bge.n	8004db8 <_printf_i+0xd0>
 8004db0:	232d      	movs	r3, #45	@ 0x2d
 8004db2:	426d      	negs	r5, r5
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004db8:	4858      	ldr	r0, [pc, #352]	@ (8004f1c <_printf_i+0x234>)
 8004dba:	230a      	movs	r3, #10
 8004dbc:	e011      	b.n	8004de2 <_printf_i+0xfa>
 8004dbe:	6821      	ldr	r1, [r4, #0]
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	0608      	lsls	r0, r1, #24
 8004dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004dc8:	d402      	bmi.n	8004dd0 <_printf_i+0xe8>
 8004dca:	0649      	lsls	r1, r1, #25
 8004dcc:	bf48      	it	mi
 8004dce:	b2ad      	uxthmi	r5, r5
 8004dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dd2:	4852      	ldr	r0, [pc, #328]	@ (8004f1c <_printf_i+0x234>)
 8004dd4:	6033      	str	r3, [r6, #0]
 8004dd6:	bf14      	ite	ne
 8004dd8:	230a      	movne	r3, #10
 8004dda:	2308      	moveq	r3, #8
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004de2:	6866      	ldr	r6, [r4, #4]
 8004de4:	60a6      	str	r6, [r4, #8]
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	db05      	blt.n	8004df6 <_printf_i+0x10e>
 8004dea:	6821      	ldr	r1, [r4, #0]
 8004dec:	432e      	orrs	r6, r5
 8004dee:	f021 0104 	bic.w	r1, r1, #4
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	d04b      	beq.n	8004e8e <_printf_i+0x1a6>
 8004df6:	4616      	mov	r6, r2
 8004df8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dfc:	fb03 5711 	mls	r7, r3, r1, r5
 8004e00:	5dc7      	ldrb	r7, [r0, r7]
 8004e02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e06:	462f      	mov	r7, r5
 8004e08:	42bb      	cmp	r3, r7
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	d9f4      	bls.n	8004df8 <_printf_i+0x110>
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d10b      	bne.n	8004e2a <_printf_i+0x142>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	07df      	lsls	r7, r3, #31
 8004e16:	d508      	bpl.n	8004e2a <_printf_i+0x142>
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	6861      	ldr	r1, [r4, #4]
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	bfde      	ittt	le
 8004e20:	2330      	movle	r3, #48	@ 0x30
 8004e22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e2a:	1b92      	subs	r2, r2, r6
 8004e2c:	6122      	str	r2, [r4, #16]
 8004e2e:	f8cd a000 	str.w	sl, [sp]
 8004e32:	464b      	mov	r3, r9
 8004e34:	aa03      	add	r2, sp, #12
 8004e36:	4621      	mov	r1, r4
 8004e38:	4640      	mov	r0, r8
 8004e3a:	f7ff fee7 	bl	8004c0c <_printf_common>
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d14a      	bne.n	8004ed8 <_printf_i+0x1f0>
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	b004      	add	sp, #16
 8004e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	f043 0320 	orr.w	r3, r3, #32
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	4832      	ldr	r0, [pc, #200]	@ (8004f20 <_printf_i+0x238>)
 8004e56:	2778      	movs	r7, #120	@ 0x78
 8004e58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	6831      	ldr	r1, [r6, #0]
 8004e60:	061f      	lsls	r7, r3, #24
 8004e62:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e66:	d402      	bmi.n	8004e6e <_printf_i+0x186>
 8004e68:	065f      	lsls	r7, r3, #25
 8004e6a:	bf48      	it	mi
 8004e6c:	b2ad      	uxthmi	r5, r5
 8004e6e:	6031      	str	r1, [r6, #0]
 8004e70:	07d9      	lsls	r1, r3, #31
 8004e72:	bf44      	itt	mi
 8004e74:	f043 0320 	orrmi.w	r3, r3, #32
 8004e78:	6023      	strmi	r3, [r4, #0]
 8004e7a:	b11d      	cbz	r5, 8004e84 <_printf_i+0x19c>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	e7ad      	b.n	8004ddc <_printf_i+0xf4>
 8004e80:	4826      	ldr	r0, [pc, #152]	@ (8004f1c <_printf_i+0x234>)
 8004e82:	e7e9      	b.n	8004e58 <_printf_i+0x170>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	f023 0320 	bic.w	r3, r3, #32
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	e7f6      	b.n	8004e7c <_printf_i+0x194>
 8004e8e:	4616      	mov	r6, r2
 8004e90:	e7bd      	b.n	8004e0e <_printf_i+0x126>
 8004e92:	6833      	ldr	r3, [r6, #0]
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	6961      	ldr	r1, [r4, #20]
 8004e98:	1d18      	adds	r0, r3, #4
 8004e9a:	6030      	str	r0, [r6, #0]
 8004e9c:	062e      	lsls	r6, r5, #24
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	d501      	bpl.n	8004ea6 <_printf_i+0x1be>
 8004ea2:	6019      	str	r1, [r3, #0]
 8004ea4:	e002      	b.n	8004eac <_printf_i+0x1c4>
 8004ea6:	0668      	lsls	r0, r5, #25
 8004ea8:	d5fb      	bpl.n	8004ea2 <_printf_i+0x1ba>
 8004eaa:	8019      	strh	r1, [r3, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	6123      	str	r3, [r4, #16]
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	e7bc      	b.n	8004e2e <_printf_i+0x146>
 8004eb4:	6833      	ldr	r3, [r6, #0]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	6032      	str	r2, [r6, #0]
 8004eba:	681e      	ldr	r6, [r3, #0]
 8004ebc:	6862      	ldr	r2, [r4, #4]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f7fb f995 	bl	80001f0 <memchr>
 8004ec6:	b108      	cbz	r0, 8004ecc <_printf_i+0x1e4>
 8004ec8:	1b80      	subs	r0, r0, r6
 8004eca:	6060      	str	r0, [r4, #4]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ed6:	e7aa      	b.n	8004e2e <_printf_i+0x146>
 8004ed8:	6923      	ldr	r3, [r4, #16]
 8004eda:	4632      	mov	r2, r6
 8004edc:	4649      	mov	r1, r9
 8004ede:	4640      	mov	r0, r8
 8004ee0:	47d0      	blx	sl
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d0ad      	beq.n	8004e42 <_printf_i+0x15a>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	079b      	lsls	r3, r3, #30
 8004eea:	d413      	bmi.n	8004f14 <_printf_i+0x22c>
 8004eec:	68e0      	ldr	r0, [r4, #12]
 8004eee:	9b03      	ldr	r3, [sp, #12]
 8004ef0:	4298      	cmp	r0, r3
 8004ef2:	bfb8      	it	lt
 8004ef4:	4618      	movlt	r0, r3
 8004ef6:	e7a6      	b.n	8004e46 <_printf_i+0x15e>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4632      	mov	r2, r6
 8004efc:	4649      	mov	r1, r9
 8004efe:	4640      	mov	r0, r8
 8004f00:	47d0      	blx	sl
 8004f02:	3001      	adds	r0, #1
 8004f04:	d09d      	beq.n	8004e42 <_printf_i+0x15a>
 8004f06:	3501      	adds	r5, #1
 8004f08:	68e3      	ldr	r3, [r4, #12]
 8004f0a:	9903      	ldr	r1, [sp, #12]
 8004f0c:	1a5b      	subs	r3, r3, r1
 8004f0e:	42ab      	cmp	r3, r5
 8004f10:	dcf2      	bgt.n	8004ef8 <_printf_i+0x210>
 8004f12:	e7eb      	b.n	8004eec <_printf_i+0x204>
 8004f14:	2500      	movs	r5, #0
 8004f16:	f104 0619 	add.w	r6, r4, #25
 8004f1a:	e7f5      	b.n	8004f08 <_printf_i+0x220>
 8004f1c:	080073ae 	.word	0x080073ae
 8004f20:	080073bf 	.word	0x080073bf

08004f24 <std>:
 8004f24:	2300      	movs	r3, #0
 8004f26:	b510      	push	{r4, lr}
 8004f28:	4604      	mov	r4, r0
 8004f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f32:	6083      	str	r3, [r0, #8]
 8004f34:	8181      	strh	r1, [r0, #12]
 8004f36:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f38:	81c2      	strh	r2, [r0, #14]
 8004f3a:	6183      	str	r3, [r0, #24]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	2208      	movs	r2, #8
 8004f40:	305c      	adds	r0, #92	@ 0x5c
 8004f42:	f000 f92a 	bl	800519a <memset>
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <std+0x58>)
 8004f48:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <std+0x5c>)
 8004f4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <std+0x60>)
 8004f50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f52:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <std+0x64>)
 8004f54:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <std+0x68>)
 8004f58:	6224      	str	r4, [r4, #32]
 8004f5a:	429c      	cmp	r4, r3
 8004f5c:	d006      	beq.n	8004f6c <std+0x48>
 8004f5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f62:	4294      	cmp	r4, r2
 8004f64:	d002      	beq.n	8004f6c <std+0x48>
 8004f66:	33d0      	adds	r3, #208	@ 0xd0
 8004f68:	429c      	cmp	r4, r3
 8004f6a:	d105      	bne.n	8004f78 <std+0x54>
 8004f6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f74:	f000 b98e 	b.w	8005294 <__retarget_lock_init_recursive>
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	bf00      	nop
 8004f7c:	08005115 	.word	0x08005115
 8004f80:	08005137 	.word	0x08005137
 8004f84:	0800516f 	.word	0x0800516f
 8004f88:	08005193 	.word	0x08005193
 8004f8c:	20000268 	.word	0x20000268

08004f90 <stdio_exit_handler>:
 8004f90:	4a02      	ldr	r2, [pc, #8]	@ (8004f9c <stdio_exit_handler+0xc>)
 8004f92:	4903      	ldr	r1, [pc, #12]	@ (8004fa0 <stdio_exit_handler+0x10>)
 8004f94:	4803      	ldr	r0, [pc, #12]	@ (8004fa4 <stdio_exit_handler+0x14>)
 8004f96:	f000 b869 	b.w	800506c <_fwalk_sglue>
 8004f9a:	bf00      	nop
 8004f9c:	20000024 	.word	0x20000024
 8004fa0:	08006c15 	.word	0x08006c15
 8004fa4:	20000034 	.word	0x20000034

08004fa8 <cleanup_stdio>:
 8004fa8:	6841      	ldr	r1, [r0, #4]
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <cleanup_stdio+0x34>)
 8004fac:	4299      	cmp	r1, r3
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	d001      	beq.n	8004fb8 <cleanup_stdio+0x10>
 8004fb4:	f001 fe2e 	bl	8006c14 <_fflush_r>
 8004fb8:	68a1      	ldr	r1, [r4, #8]
 8004fba:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <cleanup_stdio+0x38>)
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	d002      	beq.n	8004fc6 <cleanup_stdio+0x1e>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f001 fe27 	bl	8006c14 <_fflush_r>
 8004fc6:	68e1      	ldr	r1, [r4, #12]
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <cleanup_stdio+0x3c>)
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	d004      	beq.n	8004fd8 <cleanup_stdio+0x30>
 8004fce:	4620      	mov	r0, r4
 8004fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd4:	f001 be1e 	b.w	8006c14 <_fflush_r>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000268 	.word	0x20000268
 8004fe0:	200002d0 	.word	0x200002d0
 8004fe4:	20000338 	.word	0x20000338

08004fe8 <global_stdio_init.part.0>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <global_stdio_init.part.0+0x30>)
 8004fec:	4c0b      	ldr	r4, [pc, #44]	@ (800501c <global_stdio_init.part.0+0x34>)
 8004fee:	4a0c      	ldr	r2, [pc, #48]	@ (8005020 <global_stdio_init.part.0+0x38>)
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	f7ff ff94 	bl	8004f24 <std>
 8004ffc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005000:	2201      	movs	r2, #1
 8005002:	2109      	movs	r1, #9
 8005004:	f7ff ff8e 	bl	8004f24 <std>
 8005008:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800500c:	2202      	movs	r2, #2
 800500e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005012:	2112      	movs	r1, #18
 8005014:	f7ff bf86 	b.w	8004f24 <std>
 8005018:	200003a0 	.word	0x200003a0
 800501c:	20000268 	.word	0x20000268
 8005020:	08004f91 	.word	0x08004f91

08005024 <__sfp_lock_acquire>:
 8005024:	4801      	ldr	r0, [pc, #4]	@ (800502c <__sfp_lock_acquire+0x8>)
 8005026:	f000 b936 	b.w	8005296 <__retarget_lock_acquire_recursive>
 800502a:	bf00      	nop
 800502c:	200003a9 	.word	0x200003a9

08005030 <__sfp_lock_release>:
 8005030:	4801      	ldr	r0, [pc, #4]	@ (8005038 <__sfp_lock_release+0x8>)
 8005032:	f000 b931 	b.w	8005298 <__retarget_lock_release_recursive>
 8005036:	bf00      	nop
 8005038:	200003a9 	.word	0x200003a9

0800503c <__sinit>:
 800503c:	b510      	push	{r4, lr}
 800503e:	4604      	mov	r4, r0
 8005040:	f7ff fff0 	bl	8005024 <__sfp_lock_acquire>
 8005044:	6a23      	ldr	r3, [r4, #32]
 8005046:	b11b      	cbz	r3, 8005050 <__sinit+0x14>
 8005048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504c:	f7ff bff0 	b.w	8005030 <__sfp_lock_release>
 8005050:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <__sinit+0x28>)
 8005052:	6223      	str	r3, [r4, #32]
 8005054:	4b04      	ldr	r3, [pc, #16]	@ (8005068 <__sinit+0x2c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f5      	bne.n	8005048 <__sinit+0xc>
 800505c:	f7ff ffc4 	bl	8004fe8 <global_stdio_init.part.0>
 8005060:	e7f2      	b.n	8005048 <__sinit+0xc>
 8005062:	bf00      	nop
 8005064:	08004fa9 	.word	0x08004fa9
 8005068:	200003a0 	.word	0x200003a0

0800506c <_fwalk_sglue>:
 800506c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005070:	4607      	mov	r7, r0
 8005072:	4688      	mov	r8, r1
 8005074:	4614      	mov	r4, r2
 8005076:	2600      	movs	r6, #0
 8005078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800507c:	f1b9 0901 	subs.w	r9, r9, #1
 8005080:	d505      	bpl.n	800508e <_fwalk_sglue+0x22>
 8005082:	6824      	ldr	r4, [r4, #0]
 8005084:	2c00      	cmp	r4, #0
 8005086:	d1f7      	bne.n	8005078 <_fwalk_sglue+0xc>
 8005088:	4630      	mov	r0, r6
 800508a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d907      	bls.n	80050a4 <_fwalk_sglue+0x38>
 8005094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005098:	3301      	adds	r3, #1
 800509a:	d003      	beq.n	80050a4 <_fwalk_sglue+0x38>
 800509c:	4629      	mov	r1, r5
 800509e:	4638      	mov	r0, r7
 80050a0:	47c0      	blx	r8
 80050a2:	4306      	orrs	r6, r0
 80050a4:	3568      	adds	r5, #104	@ 0x68
 80050a6:	e7e9      	b.n	800507c <_fwalk_sglue+0x10>

080050a8 <sniprintf>:
 80050a8:	b40c      	push	{r2, r3}
 80050aa:	b530      	push	{r4, r5, lr}
 80050ac:	4b18      	ldr	r3, [pc, #96]	@ (8005110 <sniprintf+0x68>)
 80050ae:	1e0c      	subs	r4, r1, #0
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	b09d      	sub	sp, #116	@ 0x74
 80050b4:	da08      	bge.n	80050c8 <sniprintf+0x20>
 80050b6:	238b      	movs	r3, #139	@ 0x8b
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	b01d      	add	sp, #116	@ 0x74
 80050c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c4:	b002      	add	sp, #8
 80050c6:	4770      	bx	lr
 80050c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80050cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80050d6:	bf14      	ite	ne
 80050d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80050dc:	4623      	moveq	r3, r4
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	9307      	str	r3, [sp, #28]
 80050e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050e6:	9002      	str	r0, [sp, #8]
 80050e8:	9006      	str	r0, [sp, #24]
 80050ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80050f0:	ab21      	add	r3, sp, #132	@ 0x84
 80050f2:	a902      	add	r1, sp, #8
 80050f4:	4628      	mov	r0, r5
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	f001 fc0c 	bl	8006914 <_svfiprintf_r>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	bfbc      	itt	lt
 8005100:	238b      	movlt	r3, #139	@ 0x8b
 8005102:	602b      	strlt	r3, [r5, #0]
 8005104:	2c00      	cmp	r4, #0
 8005106:	d0da      	beq.n	80050be <sniprintf+0x16>
 8005108:	9b02      	ldr	r3, [sp, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e7d6      	b.n	80050be <sniprintf+0x16>
 8005110:	20000030 	.word	0x20000030

08005114 <__sread>:
 8005114:	b510      	push	{r4, lr}
 8005116:	460c      	mov	r4, r1
 8005118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511c:	f000 f86c 	bl	80051f8 <_read_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	bfab      	itete	ge
 8005124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005126:	89a3      	ldrhlt	r3, [r4, #12]
 8005128:	181b      	addge	r3, r3, r0
 800512a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800512e:	bfac      	ite	ge
 8005130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005132:	81a3      	strhlt	r3, [r4, #12]
 8005134:	bd10      	pop	{r4, pc}

08005136 <__swrite>:
 8005136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513a:	461f      	mov	r7, r3
 800513c:	898b      	ldrh	r3, [r1, #12]
 800513e:	05db      	lsls	r3, r3, #23
 8005140:	4605      	mov	r5, r0
 8005142:	460c      	mov	r4, r1
 8005144:	4616      	mov	r6, r2
 8005146:	d505      	bpl.n	8005154 <__swrite+0x1e>
 8005148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514c:	2302      	movs	r3, #2
 800514e:	2200      	movs	r2, #0
 8005150:	f000 f840 	bl	80051d4 <_lseek_r>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	4632      	mov	r2, r6
 8005162:	463b      	mov	r3, r7
 8005164:	4628      	mov	r0, r5
 8005166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800516a:	f000 b857 	b.w	800521c <_write_r>

0800516e <__sseek>:
 800516e:	b510      	push	{r4, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005176:	f000 f82d 	bl	80051d4 <_lseek_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	bf15      	itete	ne
 8005180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800518a:	81a3      	strheq	r3, [r4, #12]
 800518c:	bf18      	it	ne
 800518e:	81a3      	strhne	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__sclose>:
 8005192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005196:	f000 b80d 	b.w	80051b4 <_close_r>

0800519a <memset>:
 800519a:	4402      	add	r2, r0
 800519c:	4603      	mov	r3, r0
 800519e:	4293      	cmp	r3, r2
 80051a0:	d100      	bne.n	80051a4 <memset+0xa>
 80051a2:	4770      	bx	lr
 80051a4:	f803 1b01 	strb.w	r1, [r3], #1
 80051a8:	e7f9      	b.n	800519e <memset+0x4>
	...

080051ac <_localeconv_r>:
 80051ac:	4800      	ldr	r0, [pc, #0]	@ (80051b0 <_localeconv_r+0x4>)
 80051ae:	4770      	bx	lr
 80051b0:	20000170 	.word	0x20000170

080051b4 <_close_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4d06      	ldr	r5, [pc, #24]	@ (80051d0 <_close_r+0x1c>)
 80051b8:	2300      	movs	r3, #0
 80051ba:	4604      	mov	r4, r0
 80051bc:	4608      	mov	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fd fce3 	bl	8002b8a <_close>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_close_r+0x1a>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_close_r+0x1a>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	200003a4 	.word	0x200003a4

080051d4 <_lseek_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4d07      	ldr	r5, [pc, #28]	@ (80051f4 <_lseek_r+0x20>)
 80051d8:	4604      	mov	r4, r0
 80051da:	4608      	mov	r0, r1
 80051dc:	4611      	mov	r1, r2
 80051de:	2200      	movs	r2, #0
 80051e0:	602a      	str	r2, [r5, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f7fd fcf8 	bl	8002bd8 <_lseek>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d102      	bne.n	80051f2 <_lseek_r+0x1e>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	b103      	cbz	r3, 80051f2 <_lseek_r+0x1e>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	200003a4 	.word	0x200003a4

080051f8 <_read_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4d07      	ldr	r5, [pc, #28]	@ (8005218 <_read_r+0x20>)
 80051fc:	4604      	mov	r4, r0
 80051fe:	4608      	mov	r0, r1
 8005200:	4611      	mov	r1, r2
 8005202:	2200      	movs	r2, #0
 8005204:	602a      	str	r2, [r5, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	f7fd fc86 	bl	8002b18 <_read>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_read_r+0x1e>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	b103      	cbz	r3, 8005216 <_read_r+0x1e>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	200003a4 	.word	0x200003a4

0800521c <_write_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d07      	ldr	r5, [pc, #28]	@ (800523c <_write_r+0x20>)
 8005220:	4604      	mov	r4, r0
 8005222:	4608      	mov	r0, r1
 8005224:	4611      	mov	r1, r2
 8005226:	2200      	movs	r2, #0
 8005228:	602a      	str	r2, [r5, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f7fd fc91 	bl	8002b52 <_write>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_write_r+0x1e>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_write_r+0x1e>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	200003a4 	.word	0x200003a4

08005240 <__errno>:
 8005240:	4b01      	ldr	r3, [pc, #4]	@ (8005248 <__errno+0x8>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000030 	.word	0x20000030

0800524c <__libc_init_array>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	4d0d      	ldr	r5, [pc, #52]	@ (8005284 <__libc_init_array+0x38>)
 8005250:	4c0d      	ldr	r4, [pc, #52]	@ (8005288 <__libc_init_array+0x3c>)
 8005252:	1b64      	subs	r4, r4, r5
 8005254:	10a4      	asrs	r4, r4, #2
 8005256:	2600      	movs	r6, #0
 8005258:	42a6      	cmp	r6, r4
 800525a:	d109      	bne.n	8005270 <__libc_init_array+0x24>
 800525c:	4d0b      	ldr	r5, [pc, #44]	@ (800528c <__libc_init_array+0x40>)
 800525e:	4c0c      	ldr	r4, [pc, #48]	@ (8005290 <__libc_init_array+0x44>)
 8005260:	f002 f868 	bl	8007334 <_init>
 8005264:	1b64      	subs	r4, r4, r5
 8005266:	10a4      	asrs	r4, r4, #2
 8005268:	2600      	movs	r6, #0
 800526a:	42a6      	cmp	r6, r4
 800526c:	d105      	bne.n	800527a <__libc_init_array+0x2e>
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	f855 3b04 	ldr.w	r3, [r5], #4
 8005274:	4798      	blx	r3
 8005276:	3601      	adds	r6, #1
 8005278:	e7ee      	b.n	8005258 <__libc_init_array+0xc>
 800527a:	f855 3b04 	ldr.w	r3, [r5], #4
 800527e:	4798      	blx	r3
 8005280:	3601      	adds	r6, #1
 8005282:	e7f2      	b.n	800526a <__libc_init_array+0x1e>
 8005284:	0800771c 	.word	0x0800771c
 8005288:	0800771c 	.word	0x0800771c
 800528c:	0800771c 	.word	0x0800771c
 8005290:	08007720 	.word	0x08007720

08005294 <__retarget_lock_init_recursive>:
 8005294:	4770      	bx	lr

08005296 <__retarget_lock_acquire_recursive>:
 8005296:	4770      	bx	lr

08005298 <__retarget_lock_release_recursive>:
 8005298:	4770      	bx	lr

0800529a <memcpy>:
 800529a:	440a      	add	r2, r1
 800529c:	4291      	cmp	r1, r2
 800529e:	f100 33ff 	add.w	r3, r0, #4294967295
 80052a2:	d100      	bne.n	80052a6 <memcpy+0xc>
 80052a4:	4770      	bx	lr
 80052a6:	b510      	push	{r4, lr}
 80052a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052b0:	4291      	cmp	r1, r2
 80052b2:	d1f9      	bne.n	80052a8 <memcpy+0xe>
 80052b4:	bd10      	pop	{r4, pc}

080052b6 <quorem>:
 80052b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	6903      	ldr	r3, [r0, #16]
 80052bc:	690c      	ldr	r4, [r1, #16]
 80052be:	42a3      	cmp	r3, r4
 80052c0:	4607      	mov	r7, r0
 80052c2:	db7e      	blt.n	80053c2 <quorem+0x10c>
 80052c4:	3c01      	subs	r4, #1
 80052c6:	f101 0814 	add.w	r8, r1, #20
 80052ca:	00a3      	lsls	r3, r4, #2
 80052cc:	f100 0514 	add.w	r5, r0, #20
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052e0:	3301      	adds	r3, #1
 80052e2:	429a      	cmp	r2, r3
 80052e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052ec:	d32e      	bcc.n	800534c <quorem+0x96>
 80052ee:	f04f 0a00 	mov.w	sl, #0
 80052f2:	46c4      	mov	ip, r8
 80052f4:	46ae      	mov	lr, r5
 80052f6:	46d3      	mov	fp, sl
 80052f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052fc:	b298      	uxth	r0, r3
 80052fe:	fb06 a000 	mla	r0, r6, r0, sl
 8005302:	0c02      	lsrs	r2, r0, #16
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	fb06 2303 	mla	r3, r6, r3, r2
 800530a:	f8de 2000 	ldr.w	r2, [lr]
 800530e:	b280      	uxth	r0, r0
 8005310:	b292      	uxth	r2, r2
 8005312:	1a12      	subs	r2, r2, r0
 8005314:	445a      	add	r2, fp
 8005316:	f8de 0000 	ldr.w	r0, [lr]
 800531a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800531e:	b29b      	uxth	r3, r3
 8005320:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005324:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005328:	b292      	uxth	r2, r2
 800532a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800532e:	45e1      	cmp	r9, ip
 8005330:	f84e 2b04 	str.w	r2, [lr], #4
 8005334:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005338:	d2de      	bcs.n	80052f8 <quorem+0x42>
 800533a:	9b00      	ldr	r3, [sp, #0]
 800533c:	58eb      	ldr	r3, [r5, r3]
 800533e:	b92b      	cbnz	r3, 800534c <quorem+0x96>
 8005340:	9b01      	ldr	r3, [sp, #4]
 8005342:	3b04      	subs	r3, #4
 8005344:	429d      	cmp	r5, r3
 8005346:	461a      	mov	r2, r3
 8005348:	d32f      	bcc.n	80053aa <quorem+0xf4>
 800534a:	613c      	str	r4, [r7, #16]
 800534c:	4638      	mov	r0, r7
 800534e:	f001 f97d 	bl	800664c <__mcmp>
 8005352:	2800      	cmp	r0, #0
 8005354:	db25      	blt.n	80053a2 <quorem+0xec>
 8005356:	4629      	mov	r1, r5
 8005358:	2000      	movs	r0, #0
 800535a:	f858 2b04 	ldr.w	r2, [r8], #4
 800535e:	f8d1 c000 	ldr.w	ip, [r1]
 8005362:	fa1f fe82 	uxth.w	lr, r2
 8005366:	fa1f f38c 	uxth.w	r3, ip
 800536a:	eba3 030e 	sub.w	r3, r3, lr
 800536e:	4403      	add	r3, r0
 8005370:	0c12      	lsrs	r2, r2, #16
 8005372:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005376:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800537a:	b29b      	uxth	r3, r3
 800537c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005380:	45c1      	cmp	r9, r8
 8005382:	f841 3b04 	str.w	r3, [r1], #4
 8005386:	ea4f 4022 	mov.w	r0, r2, asr #16
 800538a:	d2e6      	bcs.n	800535a <quorem+0xa4>
 800538c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005390:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005394:	b922      	cbnz	r2, 80053a0 <quorem+0xea>
 8005396:	3b04      	subs	r3, #4
 8005398:	429d      	cmp	r5, r3
 800539a:	461a      	mov	r2, r3
 800539c:	d30b      	bcc.n	80053b6 <quorem+0x100>
 800539e:	613c      	str	r4, [r7, #16]
 80053a0:	3601      	adds	r6, #1
 80053a2:	4630      	mov	r0, r6
 80053a4:	b003      	add	sp, #12
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	3b04      	subs	r3, #4
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d1cb      	bne.n	800534a <quorem+0x94>
 80053b2:	3c01      	subs	r4, #1
 80053b4:	e7c6      	b.n	8005344 <quorem+0x8e>
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	3b04      	subs	r3, #4
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	d1ef      	bne.n	800539e <quorem+0xe8>
 80053be:	3c01      	subs	r4, #1
 80053c0:	e7ea      	b.n	8005398 <quorem+0xe2>
 80053c2:	2000      	movs	r0, #0
 80053c4:	e7ee      	b.n	80053a4 <quorem+0xee>
	...

080053c8 <_dtoa_r>:
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	69c7      	ldr	r7, [r0, #28]
 80053ce:	b097      	sub	sp, #92	@ 0x5c
 80053d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80053d4:	ec55 4b10 	vmov	r4, r5, d0
 80053d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80053da:	9107      	str	r1, [sp, #28]
 80053dc:	4681      	mov	r9, r0
 80053de:	920c      	str	r2, [sp, #48]	@ 0x30
 80053e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80053e2:	b97f      	cbnz	r7, 8005404 <_dtoa_r+0x3c>
 80053e4:	2010      	movs	r0, #16
 80053e6:	f000 fe09 	bl	8005ffc <malloc>
 80053ea:	4602      	mov	r2, r0
 80053ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80053f0:	b920      	cbnz	r0, 80053fc <_dtoa_r+0x34>
 80053f2:	4ba9      	ldr	r3, [pc, #676]	@ (8005698 <_dtoa_r+0x2d0>)
 80053f4:	21ef      	movs	r1, #239	@ 0xef
 80053f6:	48a9      	ldr	r0, [pc, #676]	@ (800569c <_dtoa_r+0x2d4>)
 80053f8:	f001 fc5e 	bl	8006cb8 <__assert_func>
 80053fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005400:	6007      	str	r7, [r0, #0]
 8005402:	60c7      	str	r7, [r0, #12]
 8005404:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	b159      	cbz	r1, 8005424 <_dtoa_r+0x5c>
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	604a      	str	r2, [r1, #4]
 8005410:	2301      	movs	r3, #1
 8005412:	4093      	lsls	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
 8005416:	4648      	mov	r0, r9
 8005418:	f000 fee6 	bl	80061e8 <_Bfree>
 800541c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	1e2b      	subs	r3, r5, #0
 8005426:	bfb9      	ittee	lt
 8005428:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800542c:	9305      	strlt	r3, [sp, #20]
 800542e:	2300      	movge	r3, #0
 8005430:	6033      	strge	r3, [r6, #0]
 8005432:	9f05      	ldr	r7, [sp, #20]
 8005434:	4b9a      	ldr	r3, [pc, #616]	@ (80056a0 <_dtoa_r+0x2d8>)
 8005436:	bfbc      	itt	lt
 8005438:	2201      	movlt	r2, #1
 800543a:	6032      	strlt	r2, [r6, #0]
 800543c:	43bb      	bics	r3, r7
 800543e:	d112      	bne.n	8005466 <_dtoa_r+0x9e>
 8005440:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005442:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800544c:	4323      	orrs	r3, r4
 800544e:	f000 855a 	beq.w	8005f06 <_dtoa_r+0xb3e>
 8005452:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005454:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80056b4 <_dtoa_r+0x2ec>
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 855c 	beq.w	8005f16 <_dtoa_r+0xb4e>
 800545e:	f10a 0303 	add.w	r3, sl, #3
 8005462:	f000 bd56 	b.w	8005f12 <_dtoa_r+0xb4a>
 8005466:	ed9d 7b04 	vldr	d7, [sp, #16]
 800546a:	2200      	movs	r2, #0
 800546c:	ec51 0b17 	vmov	r0, r1, d7
 8005470:	2300      	movs	r3, #0
 8005472:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005476:	f7fb fb37 	bl	8000ae8 <__aeabi_dcmpeq>
 800547a:	4680      	mov	r8, r0
 800547c:	b158      	cbz	r0, 8005496 <_dtoa_r+0xce>
 800547e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005480:	2301      	movs	r3, #1
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005486:	b113      	cbz	r3, 800548e <_dtoa_r+0xc6>
 8005488:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800548a:	4b86      	ldr	r3, [pc, #536]	@ (80056a4 <_dtoa_r+0x2dc>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80056b8 <_dtoa_r+0x2f0>
 8005492:	f000 bd40 	b.w	8005f16 <_dtoa_r+0xb4e>
 8005496:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800549a:	aa14      	add	r2, sp, #80	@ 0x50
 800549c:	a915      	add	r1, sp, #84	@ 0x54
 800549e:	4648      	mov	r0, r9
 80054a0:	f001 f984 	bl	80067ac <__d2b>
 80054a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054a8:	9002      	str	r0, [sp, #8]
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	d078      	beq.n	80055a0 <_dtoa_r+0x1d8>
 80054ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80054b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054c8:	4619      	mov	r1, r3
 80054ca:	2200      	movs	r2, #0
 80054cc:	4b76      	ldr	r3, [pc, #472]	@ (80056a8 <_dtoa_r+0x2e0>)
 80054ce:	f7fa feeb 	bl	80002a8 <__aeabi_dsub>
 80054d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005680 <_dtoa_r+0x2b8>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fb f89e 	bl	8000618 <__aeabi_dmul>
 80054dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005688 <_dtoa_r+0x2c0>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fa fee3 	bl	80002ac <__adddf3>
 80054e6:	4604      	mov	r4, r0
 80054e8:	4630      	mov	r0, r6
 80054ea:	460d      	mov	r5, r1
 80054ec:	f7fb f82a 	bl	8000544 <__aeabi_i2d>
 80054f0:	a367      	add	r3, pc, #412	@ (adr r3, 8005690 <_dtoa_r+0x2c8>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fb f88f 	bl	8000618 <__aeabi_dmul>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fa fed3 	bl	80002ac <__adddf3>
 8005506:	4604      	mov	r4, r0
 8005508:	460d      	mov	r5, r1
 800550a:	f7fb fb35 	bl	8000b78 <__aeabi_d2iz>
 800550e:	2200      	movs	r2, #0
 8005510:	4607      	mov	r7, r0
 8005512:	2300      	movs	r3, #0
 8005514:	4620      	mov	r0, r4
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb faf0 	bl	8000afc <__aeabi_dcmplt>
 800551c:	b140      	cbz	r0, 8005530 <_dtoa_r+0x168>
 800551e:	4638      	mov	r0, r7
 8005520:	f7fb f810 	bl	8000544 <__aeabi_i2d>
 8005524:	4622      	mov	r2, r4
 8005526:	462b      	mov	r3, r5
 8005528:	f7fb fade 	bl	8000ae8 <__aeabi_dcmpeq>
 800552c:	b900      	cbnz	r0, 8005530 <_dtoa_r+0x168>
 800552e:	3f01      	subs	r7, #1
 8005530:	2f16      	cmp	r7, #22
 8005532:	d852      	bhi.n	80055da <_dtoa_r+0x212>
 8005534:	4b5d      	ldr	r3, [pc, #372]	@ (80056ac <_dtoa_r+0x2e4>)
 8005536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005542:	f7fb fadb 	bl	8000afc <__aeabi_dcmplt>
 8005546:	2800      	cmp	r0, #0
 8005548:	d049      	beq.n	80055de <_dtoa_r+0x216>
 800554a:	3f01      	subs	r7, #1
 800554c:	2300      	movs	r3, #0
 800554e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005550:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005552:	1b9b      	subs	r3, r3, r6
 8005554:	1e5a      	subs	r2, r3, #1
 8005556:	bf45      	ittet	mi
 8005558:	f1c3 0301 	rsbmi	r3, r3, #1
 800555c:	9300      	strmi	r3, [sp, #0]
 800555e:	2300      	movpl	r3, #0
 8005560:	2300      	movmi	r3, #0
 8005562:	9206      	str	r2, [sp, #24]
 8005564:	bf54      	ite	pl
 8005566:	9300      	strpl	r3, [sp, #0]
 8005568:	9306      	strmi	r3, [sp, #24]
 800556a:	2f00      	cmp	r7, #0
 800556c:	db39      	blt.n	80055e2 <_dtoa_r+0x21a>
 800556e:	9b06      	ldr	r3, [sp, #24]
 8005570:	970d      	str	r7, [sp, #52]	@ 0x34
 8005572:	443b      	add	r3, r7
 8005574:	9306      	str	r3, [sp, #24]
 8005576:	2300      	movs	r3, #0
 8005578:	9308      	str	r3, [sp, #32]
 800557a:	9b07      	ldr	r3, [sp, #28]
 800557c:	2b09      	cmp	r3, #9
 800557e:	d863      	bhi.n	8005648 <_dtoa_r+0x280>
 8005580:	2b05      	cmp	r3, #5
 8005582:	bfc4      	itt	gt
 8005584:	3b04      	subgt	r3, #4
 8005586:	9307      	strgt	r3, [sp, #28]
 8005588:	9b07      	ldr	r3, [sp, #28]
 800558a:	f1a3 0302 	sub.w	r3, r3, #2
 800558e:	bfcc      	ite	gt
 8005590:	2400      	movgt	r4, #0
 8005592:	2401      	movle	r4, #1
 8005594:	2b03      	cmp	r3, #3
 8005596:	d863      	bhi.n	8005660 <_dtoa_r+0x298>
 8005598:	e8df f003 	tbb	[pc, r3]
 800559c:	2b375452 	.word	0x2b375452
 80055a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055a4:	441e      	add	r6, r3
 80055a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	bfc1      	itttt	gt
 80055ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055b2:	409f      	lslgt	r7, r3
 80055b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055bc:	bfd6      	itet	le
 80055be:	f1c3 0320 	rsble	r3, r3, #32
 80055c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80055c6:	fa04 f003 	lslle.w	r0, r4, r3
 80055ca:	f7fa ffab 	bl	8000524 <__aeabi_ui2d>
 80055ce:	2201      	movs	r2, #1
 80055d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055d4:	3e01      	subs	r6, #1
 80055d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80055d8:	e776      	b.n	80054c8 <_dtoa_r+0x100>
 80055da:	2301      	movs	r3, #1
 80055dc:	e7b7      	b.n	800554e <_dtoa_r+0x186>
 80055de:	9010      	str	r0, [sp, #64]	@ 0x40
 80055e0:	e7b6      	b.n	8005550 <_dtoa_r+0x188>
 80055e2:	9b00      	ldr	r3, [sp, #0]
 80055e4:	1bdb      	subs	r3, r3, r7
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	427b      	negs	r3, r7
 80055ea:	9308      	str	r3, [sp, #32]
 80055ec:	2300      	movs	r3, #0
 80055ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80055f0:	e7c3      	b.n	800557a <_dtoa_r+0x1b2>
 80055f2:	2301      	movs	r3, #1
 80055f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055f8:	eb07 0b03 	add.w	fp, r7, r3
 80055fc:	f10b 0301 	add.w	r3, fp, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	9303      	str	r3, [sp, #12]
 8005604:	bfb8      	it	lt
 8005606:	2301      	movlt	r3, #1
 8005608:	e006      	b.n	8005618 <_dtoa_r+0x250>
 800560a:	2301      	movs	r3, #1
 800560c:	9309      	str	r3, [sp, #36]	@ 0x24
 800560e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	dd28      	ble.n	8005666 <_dtoa_r+0x29e>
 8005614:	469b      	mov	fp, r3
 8005616:	9303      	str	r3, [sp, #12]
 8005618:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800561c:	2100      	movs	r1, #0
 800561e:	2204      	movs	r2, #4
 8005620:	f102 0514 	add.w	r5, r2, #20
 8005624:	429d      	cmp	r5, r3
 8005626:	d926      	bls.n	8005676 <_dtoa_r+0x2ae>
 8005628:	6041      	str	r1, [r0, #4]
 800562a:	4648      	mov	r0, r9
 800562c:	f000 fd9c 	bl	8006168 <_Balloc>
 8005630:	4682      	mov	sl, r0
 8005632:	2800      	cmp	r0, #0
 8005634:	d142      	bne.n	80056bc <_dtoa_r+0x2f4>
 8005636:	4b1e      	ldr	r3, [pc, #120]	@ (80056b0 <_dtoa_r+0x2e8>)
 8005638:	4602      	mov	r2, r0
 800563a:	f240 11af 	movw	r1, #431	@ 0x1af
 800563e:	e6da      	b.n	80053f6 <_dtoa_r+0x2e>
 8005640:	2300      	movs	r3, #0
 8005642:	e7e3      	b.n	800560c <_dtoa_r+0x244>
 8005644:	2300      	movs	r3, #0
 8005646:	e7d5      	b.n	80055f4 <_dtoa_r+0x22c>
 8005648:	2401      	movs	r4, #1
 800564a:	2300      	movs	r3, #0
 800564c:	9307      	str	r3, [sp, #28]
 800564e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005650:	f04f 3bff 	mov.w	fp, #4294967295
 8005654:	2200      	movs	r2, #0
 8005656:	f8cd b00c 	str.w	fp, [sp, #12]
 800565a:	2312      	movs	r3, #18
 800565c:	920c      	str	r2, [sp, #48]	@ 0x30
 800565e:	e7db      	b.n	8005618 <_dtoa_r+0x250>
 8005660:	2301      	movs	r3, #1
 8005662:	9309      	str	r3, [sp, #36]	@ 0x24
 8005664:	e7f4      	b.n	8005650 <_dtoa_r+0x288>
 8005666:	f04f 0b01 	mov.w	fp, #1
 800566a:	f8cd b00c 	str.w	fp, [sp, #12]
 800566e:	465b      	mov	r3, fp
 8005670:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005674:	e7d0      	b.n	8005618 <_dtoa_r+0x250>
 8005676:	3101      	adds	r1, #1
 8005678:	0052      	lsls	r2, r2, #1
 800567a:	e7d1      	b.n	8005620 <_dtoa_r+0x258>
 800567c:	f3af 8000 	nop.w
 8005680:	636f4361 	.word	0x636f4361
 8005684:	3fd287a7 	.word	0x3fd287a7
 8005688:	8b60c8b3 	.word	0x8b60c8b3
 800568c:	3fc68a28 	.word	0x3fc68a28
 8005690:	509f79fb 	.word	0x509f79fb
 8005694:	3fd34413 	.word	0x3fd34413
 8005698:	080073dd 	.word	0x080073dd
 800569c:	080073f4 	.word	0x080073f4
 80056a0:	7ff00000 	.word	0x7ff00000
 80056a4:	080073ad 	.word	0x080073ad
 80056a8:	3ff80000 	.word	0x3ff80000
 80056ac:	08007548 	.word	0x08007548
 80056b0:	0800744c 	.word	0x0800744c
 80056b4:	080073d9 	.word	0x080073d9
 80056b8:	080073ac 	.word	0x080073ac
 80056bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056c0:	6018      	str	r0, [r3, #0]
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	2b0e      	cmp	r3, #14
 80056c6:	f200 80a1 	bhi.w	800580c <_dtoa_r+0x444>
 80056ca:	2c00      	cmp	r4, #0
 80056cc:	f000 809e 	beq.w	800580c <_dtoa_r+0x444>
 80056d0:	2f00      	cmp	r7, #0
 80056d2:	dd33      	ble.n	800573c <_dtoa_r+0x374>
 80056d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005948 <_dtoa_r+0x580>)
 80056d6:	f007 020f 	and.w	r2, r7, #15
 80056da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056de:	ed93 7b00 	vldr	d7, [r3]
 80056e2:	05f8      	lsls	r0, r7, #23
 80056e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80056e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056ec:	d516      	bpl.n	800571c <_dtoa_r+0x354>
 80056ee:	4b97      	ldr	r3, [pc, #604]	@ (800594c <_dtoa_r+0x584>)
 80056f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f8:	f7fb f8b8 	bl	800086c <__aeabi_ddiv>
 80056fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005700:	f004 040f 	and.w	r4, r4, #15
 8005704:	2603      	movs	r6, #3
 8005706:	4d91      	ldr	r5, [pc, #580]	@ (800594c <_dtoa_r+0x584>)
 8005708:	b954      	cbnz	r4, 8005720 <_dtoa_r+0x358>
 800570a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800570e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005712:	f7fb f8ab 	bl	800086c <__aeabi_ddiv>
 8005716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800571a:	e028      	b.n	800576e <_dtoa_r+0x3a6>
 800571c:	2602      	movs	r6, #2
 800571e:	e7f2      	b.n	8005706 <_dtoa_r+0x33e>
 8005720:	07e1      	lsls	r1, r4, #31
 8005722:	d508      	bpl.n	8005736 <_dtoa_r+0x36e>
 8005724:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005728:	e9d5 2300 	ldrd	r2, r3, [r5]
 800572c:	f7fa ff74 	bl	8000618 <__aeabi_dmul>
 8005730:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005734:	3601      	adds	r6, #1
 8005736:	1064      	asrs	r4, r4, #1
 8005738:	3508      	adds	r5, #8
 800573a:	e7e5      	b.n	8005708 <_dtoa_r+0x340>
 800573c:	f000 80af 	beq.w	800589e <_dtoa_r+0x4d6>
 8005740:	427c      	negs	r4, r7
 8005742:	4b81      	ldr	r3, [pc, #516]	@ (8005948 <_dtoa_r+0x580>)
 8005744:	4d81      	ldr	r5, [pc, #516]	@ (800594c <_dtoa_r+0x584>)
 8005746:	f004 020f 	and.w	r2, r4, #15
 800574a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005756:	f7fa ff5f 	bl	8000618 <__aeabi_dmul>
 800575a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800575e:	1124      	asrs	r4, r4, #4
 8005760:	2300      	movs	r3, #0
 8005762:	2602      	movs	r6, #2
 8005764:	2c00      	cmp	r4, #0
 8005766:	f040 808f 	bne.w	8005888 <_dtoa_r+0x4c0>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1d3      	bne.n	8005716 <_dtoa_r+0x34e>
 800576e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005770:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8094 	beq.w	80058a2 <_dtoa_r+0x4da>
 800577a:	4b75      	ldr	r3, [pc, #468]	@ (8005950 <_dtoa_r+0x588>)
 800577c:	2200      	movs	r2, #0
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fb f9bb 	bl	8000afc <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	f000 808b 	beq.w	80058a2 <_dtoa_r+0x4da>
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8087 	beq.w	80058a2 <_dtoa_r+0x4da>
 8005794:	f1bb 0f00 	cmp.w	fp, #0
 8005798:	dd34      	ble.n	8005804 <_dtoa_r+0x43c>
 800579a:	4620      	mov	r0, r4
 800579c:	4b6d      	ldr	r3, [pc, #436]	@ (8005954 <_dtoa_r+0x58c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa ff39 	bl	8000618 <__aeabi_dmul>
 80057a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80057ae:	3601      	adds	r6, #1
 80057b0:	465c      	mov	r4, fp
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7fa fec6 	bl	8000544 <__aeabi_i2d>
 80057b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057bc:	f7fa ff2c 	bl	8000618 <__aeabi_dmul>
 80057c0:	4b65      	ldr	r3, [pc, #404]	@ (8005958 <_dtoa_r+0x590>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7fa fd72 	bl	80002ac <__adddf3>
 80057c8:	4605      	mov	r5, r0
 80057ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057ce:	2c00      	cmp	r4, #0
 80057d0:	d16a      	bne.n	80058a8 <_dtoa_r+0x4e0>
 80057d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d6:	4b61      	ldr	r3, [pc, #388]	@ (800595c <_dtoa_r+0x594>)
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fa fd65 	bl	80002a8 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057e6:	462a      	mov	r2, r5
 80057e8:	4633      	mov	r3, r6
 80057ea:	f7fb f9a5 	bl	8000b38 <__aeabi_dcmpgt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f040 8298 	bne.w	8005d24 <_dtoa_r+0x95c>
 80057f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f8:	462a      	mov	r2, r5
 80057fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057fe:	f7fb f97d 	bl	8000afc <__aeabi_dcmplt>
 8005802:	bb38      	cbnz	r0, 8005854 <_dtoa_r+0x48c>
 8005804:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005808:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800580c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800580e:	2b00      	cmp	r3, #0
 8005810:	f2c0 8157 	blt.w	8005ac2 <_dtoa_r+0x6fa>
 8005814:	2f0e      	cmp	r7, #14
 8005816:	f300 8154 	bgt.w	8005ac2 <_dtoa_r+0x6fa>
 800581a:	4b4b      	ldr	r3, [pc, #300]	@ (8005948 <_dtoa_r+0x580>)
 800581c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005820:	ed93 7b00 	vldr	d7, [r3]
 8005824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005826:	2b00      	cmp	r3, #0
 8005828:	ed8d 7b00 	vstr	d7, [sp]
 800582c:	f280 80e5 	bge.w	80059fa <_dtoa_r+0x632>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f300 80e1 	bgt.w	80059fa <_dtoa_r+0x632>
 8005838:	d10c      	bne.n	8005854 <_dtoa_r+0x48c>
 800583a:	4b48      	ldr	r3, [pc, #288]	@ (800595c <_dtoa_r+0x594>)
 800583c:	2200      	movs	r2, #0
 800583e:	ec51 0b17 	vmov	r0, r1, d7
 8005842:	f7fa fee9 	bl	8000618 <__aeabi_dmul>
 8005846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800584a:	f7fb f96b 	bl	8000b24 <__aeabi_dcmpge>
 800584e:	2800      	cmp	r0, #0
 8005850:	f000 8266 	beq.w	8005d20 <_dtoa_r+0x958>
 8005854:	2400      	movs	r4, #0
 8005856:	4625      	mov	r5, r4
 8005858:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800585a:	4656      	mov	r6, sl
 800585c:	ea6f 0803 	mvn.w	r8, r3
 8005860:	2700      	movs	r7, #0
 8005862:	4621      	mov	r1, r4
 8005864:	4648      	mov	r0, r9
 8005866:	f000 fcbf 	bl	80061e8 <_Bfree>
 800586a:	2d00      	cmp	r5, #0
 800586c:	f000 80bd 	beq.w	80059ea <_dtoa_r+0x622>
 8005870:	b12f      	cbz	r7, 800587e <_dtoa_r+0x4b6>
 8005872:	42af      	cmp	r7, r5
 8005874:	d003      	beq.n	800587e <_dtoa_r+0x4b6>
 8005876:	4639      	mov	r1, r7
 8005878:	4648      	mov	r0, r9
 800587a:	f000 fcb5 	bl	80061e8 <_Bfree>
 800587e:	4629      	mov	r1, r5
 8005880:	4648      	mov	r0, r9
 8005882:	f000 fcb1 	bl	80061e8 <_Bfree>
 8005886:	e0b0      	b.n	80059ea <_dtoa_r+0x622>
 8005888:	07e2      	lsls	r2, r4, #31
 800588a:	d505      	bpl.n	8005898 <_dtoa_r+0x4d0>
 800588c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005890:	f7fa fec2 	bl	8000618 <__aeabi_dmul>
 8005894:	3601      	adds	r6, #1
 8005896:	2301      	movs	r3, #1
 8005898:	1064      	asrs	r4, r4, #1
 800589a:	3508      	adds	r5, #8
 800589c:	e762      	b.n	8005764 <_dtoa_r+0x39c>
 800589e:	2602      	movs	r6, #2
 80058a0:	e765      	b.n	800576e <_dtoa_r+0x3a6>
 80058a2:	9c03      	ldr	r4, [sp, #12]
 80058a4:	46b8      	mov	r8, r7
 80058a6:	e784      	b.n	80057b2 <_dtoa_r+0x3ea>
 80058a8:	4b27      	ldr	r3, [pc, #156]	@ (8005948 <_dtoa_r+0x580>)
 80058aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058b4:	4454      	add	r4, sl
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d054      	beq.n	8005964 <_dtoa_r+0x59c>
 80058ba:	4929      	ldr	r1, [pc, #164]	@ (8005960 <_dtoa_r+0x598>)
 80058bc:	2000      	movs	r0, #0
 80058be:	f7fa ffd5 	bl	800086c <__aeabi_ddiv>
 80058c2:	4633      	mov	r3, r6
 80058c4:	462a      	mov	r2, r5
 80058c6:	f7fa fcef 	bl	80002a8 <__aeabi_dsub>
 80058ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80058ce:	4656      	mov	r6, sl
 80058d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d4:	f7fb f950 	bl	8000b78 <__aeabi_d2iz>
 80058d8:	4605      	mov	r5, r0
 80058da:	f7fa fe33 	bl	8000544 <__aeabi_i2d>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e6:	f7fa fcdf 	bl	80002a8 <__aeabi_dsub>
 80058ea:	3530      	adds	r5, #48	@ 0x30
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058f4:	f806 5b01 	strb.w	r5, [r6], #1
 80058f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80058fc:	f7fb f8fe 	bl	8000afc <__aeabi_dcmplt>
 8005900:	2800      	cmp	r0, #0
 8005902:	d172      	bne.n	80059ea <_dtoa_r+0x622>
 8005904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005908:	4911      	ldr	r1, [pc, #68]	@ (8005950 <_dtoa_r+0x588>)
 800590a:	2000      	movs	r0, #0
 800590c:	f7fa fccc 	bl	80002a8 <__aeabi_dsub>
 8005910:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005914:	f7fb f8f2 	bl	8000afc <__aeabi_dcmplt>
 8005918:	2800      	cmp	r0, #0
 800591a:	f040 80b4 	bne.w	8005a86 <_dtoa_r+0x6be>
 800591e:	42a6      	cmp	r6, r4
 8005920:	f43f af70 	beq.w	8005804 <_dtoa_r+0x43c>
 8005924:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005928:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <_dtoa_r+0x58c>)
 800592a:	2200      	movs	r2, #0
 800592c:	f7fa fe74 	bl	8000618 <__aeabi_dmul>
 8005930:	4b08      	ldr	r3, [pc, #32]	@ (8005954 <_dtoa_r+0x58c>)
 8005932:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005936:	2200      	movs	r2, #0
 8005938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800593c:	f7fa fe6c 	bl	8000618 <__aeabi_dmul>
 8005940:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005944:	e7c4      	b.n	80058d0 <_dtoa_r+0x508>
 8005946:	bf00      	nop
 8005948:	08007548 	.word	0x08007548
 800594c:	08007520 	.word	0x08007520
 8005950:	3ff00000 	.word	0x3ff00000
 8005954:	40240000 	.word	0x40240000
 8005958:	401c0000 	.word	0x401c0000
 800595c:	40140000 	.word	0x40140000
 8005960:	3fe00000 	.word	0x3fe00000
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	f7fa fe56 	bl	8000618 <__aeabi_dmul>
 800596c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005970:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005972:	4656      	mov	r6, sl
 8005974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005978:	f7fb f8fe 	bl	8000b78 <__aeabi_d2iz>
 800597c:	4605      	mov	r5, r0
 800597e:	f7fa fde1 	bl	8000544 <__aeabi_i2d>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800598a:	f7fa fc8d 	bl	80002a8 <__aeabi_dsub>
 800598e:	3530      	adds	r5, #48	@ 0x30
 8005990:	f806 5b01 	strb.w	r5, [r6], #1
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	42a6      	cmp	r6, r4
 800599a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	d124      	bne.n	80059ee <_dtoa_r+0x626>
 80059a4:	4baf      	ldr	r3, [pc, #700]	@ (8005c64 <_dtoa_r+0x89c>)
 80059a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059aa:	f7fa fc7f 	bl	80002ac <__adddf3>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b6:	f7fb f8bf 	bl	8000b38 <__aeabi_dcmpgt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d163      	bne.n	8005a86 <_dtoa_r+0x6be>
 80059be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059c2:	49a8      	ldr	r1, [pc, #672]	@ (8005c64 <_dtoa_r+0x89c>)
 80059c4:	2000      	movs	r0, #0
 80059c6:	f7fa fc6f 	bl	80002a8 <__aeabi_dsub>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d2:	f7fb f893 	bl	8000afc <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	f43f af14 	beq.w	8005804 <_dtoa_r+0x43c>
 80059dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80059de:	1e73      	subs	r3, r6, #1
 80059e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059e6:	2b30      	cmp	r3, #48	@ 0x30
 80059e8:	d0f8      	beq.n	80059dc <_dtoa_r+0x614>
 80059ea:	4647      	mov	r7, r8
 80059ec:	e03b      	b.n	8005a66 <_dtoa_r+0x69e>
 80059ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005c68 <_dtoa_r+0x8a0>)
 80059f0:	f7fa fe12 	bl	8000618 <__aeabi_dmul>
 80059f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059f8:	e7bc      	b.n	8005974 <_dtoa_r+0x5ac>
 80059fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80059fe:	4656      	mov	r6, sl
 8005a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a04:	4620      	mov	r0, r4
 8005a06:	4629      	mov	r1, r5
 8005a08:	f7fa ff30 	bl	800086c <__aeabi_ddiv>
 8005a0c:	f7fb f8b4 	bl	8000b78 <__aeabi_d2iz>
 8005a10:	4680      	mov	r8, r0
 8005a12:	f7fa fd97 	bl	8000544 <__aeabi_i2d>
 8005a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a1a:	f7fa fdfd 	bl	8000618 <__aeabi_dmul>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a2a:	f7fa fc3d 	bl	80002a8 <__aeabi_dsub>
 8005a2e:	f806 4b01 	strb.w	r4, [r6], #1
 8005a32:	9d03      	ldr	r5, [sp, #12]
 8005a34:	eba6 040a 	sub.w	r4, r6, sl
 8005a38:	42a5      	cmp	r5, r4
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	d133      	bne.n	8005aa8 <_dtoa_r+0x6e0>
 8005a40:	f7fa fc34 	bl	80002ac <__adddf3>
 8005a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	f7fb f874 	bl	8000b38 <__aeabi_dcmpgt>
 8005a50:	b9c0      	cbnz	r0, 8005a84 <_dtoa_r+0x6bc>
 8005a52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7fb f845 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a5e:	b110      	cbz	r0, 8005a66 <_dtoa_r+0x69e>
 8005a60:	f018 0f01 	tst.w	r8, #1
 8005a64:	d10e      	bne.n	8005a84 <_dtoa_r+0x6bc>
 8005a66:	9902      	ldr	r1, [sp, #8]
 8005a68:	4648      	mov	r0, r9
 8005a6a:	f000 fbbd 	bl	80061e8 <_Bfree>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	7033      	strb	r3, [r6, #0]
 8005a72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a74:	3701      	adds	r7, #1
 8005a76:	601f      	str	r7, [r3, #0]
 8005a78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 824b 	beq.w	8005f16 <_dtoa_r+0xb4e>
 8005a80:	601e      	str	r6, [r3, #0]
 8005a82:	e248      	b.n	8005f16 <_dtoa_r+0xb4e>
 8005a84:	46b8      	mov	r8, r7
 8005a86:	4633      	mov	r3, r6
 8005a88:	461e      	mov	r6, r3
 8005a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a8e:	2a39      	cmp	r2, #57	@ 0x39
 8005a90:	d106      	bne.n	8005aa0 <_dtoa_r+0x6d8>
 8005a92:	459a      	cmp	sl, r3
 8005a94:	d1f8      	bne.n	8005a88 <_dtoa_r+0x6c0>
 8005a96:	2230      	movs	r2, #48	@ 0x30
 8005a98:	f108 0801 	add.w	r8, r8, #1
 8005a9c:	f88a 2000 	strb.w	r2, [sl]
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e7a0      	b.n	80059ea <_dtoa_r+0x622>
 8005aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c68 <_dtoa_r+0x8a0>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f7fa fdb4 	bl	8000618 <__aeabi_dmul>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	f7fb f816 	bl	8000ae8 <__aeabi_dcmpeq>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d09f      	beq.n	8005a00 <_dtoa_r+0x638>
 8005ac0:	e7d1      	b.n	8005a66 <_dtoa_r+0x69e>
 8005ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	f000 80ea 	beq.w	8005c9e <_dtoa_r+0x8d6>
 8005aca:	9a07      	ldr	r2, [sp, #28]
 8005acc:	2a01      	cmp	r2, #1
 8005ace:	f300 80cd 	bgt.w	8005c6c <_dtoa_r+0x8a4>
 8005ad2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	f000 80c1 	beq.w	8005c5c <_dtoa_r+0x894>
 8005ada:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ade:	9c08      	ldr	r4, [sp, #32]
 8005ae0:	9e00      	ldr	r6, [sp, #0]
 8005ae2:	9a00      	ldr	r2, [sp, #0]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	9200      	str	r2, [sp, #0]
 8005ae8:	9a06      	ldr	r2, [sp, #24]
 8005aea:	2101      	movs	r1, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	4648      	mov	r0, r9
 8005af0:	9206      	str	r2, [sp, #24]
 8005af2:	f000 fc2d 	bl	8006350 <__i2b>
 8005af6:	4605      	mov	r5, r0
 8005af8:	b166      	cbz	r6, 8005b14 <_dtoa_r+0x74c>
 8005afa:	9b06      	ldr	r3, [sp, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	dd09      	ble.n	8005b14 <_dtoa_r+0x74c>
 8005b00:	42b3      	cmp	r3, r6
 8005b02:	9a00      	ldr	r2, [sp, #0]
 8005b04:	bfa8      	it	ge
 8005b06:	4633      	movge	r3, r6
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	9200      	str	r2, [sp, #0]
 8005b0c:	9a06      	ldr	r2, [sp, #24]
 8005b0e:	1af6      	subs	r6, r6, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	9306      	str	r3, [sp, #24]
 8005b14:	9b08      	ldr	r3, [sp, #32]
 8005b16:	b30b      	cbz	r3, 8005b5c <_dtoa_r+0x794>
 8005b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80c6 	beq.w	8005cac <_dtoa_r+0x8e4>
 8005b20:	2c00      	cmp	r4, #0
 8005b22:	f000 80c0 	beq.w	8005ca6 <_dtoa_r+0x8de>
 8005b26:	4629      	mov	r1, r5
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4648      	mov	r0, r9
 8005b2c:	f000 fcc8 	bl	80064c0 <__pow5mult>
 8005b30:	9a02      	ldr	r2, [sp, #8]
 8005b32:	4601      	mov	r1, r0
 8005b34:	4605      	mov	r5, r0
 8005b36:	4648      	mov	r0, r9
 8005b38:	f000 fc20 	bl	800637c <__multiply>
 8005b3c:	9902      	ldr	r1, [sp, #8]
 8005b3e:	4680      	mov	r8, r0
 8005b40:	4648      	mov	r0, r9
 8005b42:	f000 fb51 	bl	80061e8 <_Bfree>
 8005b46:	9b08      	ldr	r3, [sp, #32]
 8005b48:	1b1b      	subs	r3, r3, r4
 8005b4a:	9308      	str	r3, [sp, #32]
 8005b4c:	f000 80b1 	beq.w	8005cb2 <_dtoa_r+0x8ea>
 8005b50:	9a08      	ldr	r2, [sp, #32]
 8005b52:	4641      	mov	r1, r8
 8005b54:	4648      	mov	r0, r9
 8005b56:	f000 fcb3 	bl	80064c0 <__pow5mult>
 8005b5a:	9002      	str	r0, [sp, #8]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4648      	mov	r0, r9
 8005b60:	f000 fbf6 	bl	8006350 <__i2b>
 8005b64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b66:	4604      	mov	r4, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 81d8 	beq.w	8005f1e <_dtoa_r+0xb56>
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4601      	mov	r1, r0
 8005b72:	4648      	mov	r0, r9
 8005b74:	f000 fca4 	bl	80064c0 <__pow5mult>
 8005b78:	9b07      	ldr	r3, [sp, #28]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	f300 809f 	bgt.w	8005cc0 <_dtoa_r+0x8f8>
 8005b82:	9b04      	ldr	r3, [sp, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8097 	bne.w	8005cb8 <_dtoa_r+0x8f0>
 8005b8a:	9b05      	ldr	r3, [sp, #20]
 8005b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8093 	bne.w	8005cbc <_dtoa_r+0x8f4>
 8005b96:	9b05      	ldr	r3, [sp, #20]
 8005b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b9c:	0d1b      	lsrs	r3, r3, #20
 8005b9e:	051b      	lsls	r3, r3, #20
 8005ba0:	b133      	cbz	r3, 8005bb0 <_dtoa_r+0x7e8>
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	9b06      	ldr	r3, [sp, #24]
 8005baa:	3301      	adds	r3, #1
 8005bac:	9306      	str	r3, [sp, #24]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	9308      	str	r3, [sp, #32]
 8005bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 81b8 	beq.w	8005f2a <_dtoa_r+0xb62>
 8005bba:	6923      	ldr	r3, [r4, #16]
 8005bbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bc0:	6918      	ldr	r0, [r3, #16]
 8005bc2:	f000 fb79 	bl	80062b8 <__hi0bits>
 8005bc6:	f1c0 0020 	rsb	r0, r0, #32
 8005bca:	9b06      	ldr	r3, [sp, #24]
 8005bcc:	4418      	add	r0, r3
 8005bce:	f010 001f 	ands.w	r0, r0, #31
 8005bd2:	f000 8082 	beq.w	8005cda <_dtoa_r+0x912>
 8005bd6:	f1c0 0320 	rsb	r3, r0, #32
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	dd73      	ble.n	8005cc6 <_dtoa_r+0x8fe>
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	f1c0 001c 	rsb	r0, r0, #28
 8005be4:	4403      	add	r3, r0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	9b06      	ldr	r3, [sp, #24]
 8005bea:	4403      	add	r3, r0
 8005bec:	4406      	add	r6, r0
 8005bee:	9306      	str	r3, [sp, #24]
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dd05      	ble.n	8005c02 <_dtoa_r+0x83a>
 8005bf6:	9902      	ldr	r1, [sp, #8]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4648      	mov	r0, r9
 8005bfc:	f000 fcba 	bl	8006574 <__lshift>
 8005c00:	9002      	str	r0, [sp, #8]
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dd05      	ble.n	8005c14 <_dtoa_r+0x84c>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4648      	mov	r0, r9
 8005c0e:	f000 fcb1 	bl	8006574 <__lshift>
 8005c12:	4604      	mov	r4, r0
 8005c14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d061      	beq.n	8005cde <_dtoa_r+0x916>
 8005c1a:	9802      	ldr	r0, [sp, #8]
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	f000 fd15 	bl	800664c <__mcmp>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	da5b      	bge.n	8005cde <_dtoa_r+0x916>
 8005c26:	2300      	movs	r3, #0
 8005c28:	9902      	ldr	r1, [sp, #8]
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f000 fafd 	bl	800622c <__multadd>
 8005c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c34:	9002      	str	r0, [sp, #8]
 8005c36:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8177 	beq.w	8005f2e <_dtoa_r+0xb66>
 8005c40:	4629      	mov	r1, r5
 8005c42:	2300      	movs	r3, #0
 8005c44:	220a      	movs	r2, #10
 8005c46:	4648      	mov	r0, r9
 8005c48:	f000 faf0 	bl	800622c <__multadd>
 8005c4c:	f1bb 0f00 	cmp.w	fp, #0
 8005c50:	4605      	mov	r5, r0
 8005c52:	dc6f      	bgt.n	8005d34 <_dtoa_r+0x96c>
 8005c54:	9b07      	ldr	r3, [sp, #28]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	dc49      	bgt.n	8005cee <_dtoa_r+0x926>
 8005c5a:	e06b      	b.n	8005d34 <_dtoa_r+0x96c>
 8005c5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c62:	e73c      	b.n	8005ade <_dtoa_r+0x716>
 8005c64:	3fe00000 	.word	0x3fe00000
 8005c68:	40240000 	.word	0x40240000
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	1e5c      	subs	r4, r3, #1
 8005c70:	9b08      	ldr	r3, [sp, #32]
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	db09      	blt.n	8005c8a <_dtoa_r+0x8c2>
 8005c76:	1b1c      	subs	r4, r3, r4
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f6bf af30 	bge.w	8005ae0 <_dtoa_r+0x718>
 8005c80:	9b00      	ldr	r3, [sp, #0]
 8005c82:	9a03      	ldr	r2, [sp, #12]
 8005c84:	1a9e      	subs	r6, r3, r2
 8005c86:	2300      	movs	r3, #0
 8005c88:	e72b      	b.n	8005ae2 <_dtoa_r+0x71a>
 8005c8a:	9b08      	ldr	r3, [sp, #32]
 8005c8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c8e:	9408      	str	r4, [sp, #32]
 8005c90:	1ae3      	subs	r3, r4, r3
 8005c92:	441a      	add	r2, r3
 8005c94:	9e00      	ldr	r6, [sp, #0]
 8005c96:	9b03      	ldr	r3, [sp, #12]
 8005c98:	920d      	str	r2, [sp, #52]	@ 0x34
 8005c9a:	2400      	movs	r4, #0
 8005c9c:	e721      	b.n	8005ae2 <_dtoa_r+0x71a>
 8005c9e:	9c08      	ldr	r4, [sp, #32]
 8005ca0:	9e00      	ldr	r6, [sp, #0]
 8005ca2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005ca4:	e728      	b.n	8005af8 <_dtoa_r+0x730>
 8005ca6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005caa:	e751      	b.n	8005b50 <_dtoa_r+0x788>
 8005cac:	9a08      	ldr	r2, [sp, #32]
 8005cae:	9902      	ldr	r1, [sp, #8]
 8005cb0:	e750      	b.n	8005b54 <_dtoa_r+0x78c>
 8005cb2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005cb6:	e751      	b.n	8005b5c <_dtoa_r+0x794>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e779      	b.n	8005bb0 <_dtoa_r+0x7e8>
 8005cbc:	9b04      	ldr	r3, [sp, #16]
 8005cbe:	e777      	b.n	8005bb0 <_dtoa_r+0x7e8>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9308      	str	r3, [sp, #32]
 8005cc4:	e779      	b.n	8005bba <_dtoa_r+0x7f2>
 8005cc6:	d093      	beq.n	8005bf0 <_dtoa_r+0x828>
 8005cc8:	9a00      	ldr	r2, [sp, #0]
 8005cca:	331c      	adds	r3, #28
 8005ccc:	441a      	add	r2, r3
 8005cce:	9200      	str	r2, [sp, #0]
 8005cd0:	9a06      	ldr	r2, [sp, #24]
 8005cd2:	441a      	add	r2, r3
 8005cd4:	441e      	add	r6, r3
 8005cd6:	9206      	str	r2, [sp, #24]
 8005cd8:	e78a      	b.n	8005bf0 <_dtoa_r+0x828>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	e7f4      	b.n	8005cc8 <_dtoa_r+0x900>
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	46b8      	mov	r8, r7
 8005ce4:	dc20      	bgt.n	8005d28 <_dtoa_r+0x960>
 8005ce6:	469b      	mov	fp, r3
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	dd1e      	ble.n	8005d2c <_dtoa_r+0x964>
 8005cee:	f1bb 0f00 	cmp.w	fp, #0
 8005cf2:	f47f adb1 	bne.w	8005858 <_dtoa_r+0x490>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	465b      	mov	r3, fp
 8005cfa:	2205      	movs	r2, #5
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	f000 fa95 	bl	800622c <__multadd>
 8005d02:	4601      	mov	r1, r0
 8005d04:	4604      	mov	r4, r0
 8005d06:	9802      	ldr	r0, [sp, #8]
 8005d08:	f000 fca0 	bl	800664c <__mcmp>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f77f ada3 	ble.w	8005858 <_dtoa_r+0x490>
 8005d12:	4656      	mov	r6, sl
 8005d14:	2331      	movs	r3, #49	@ 0x31
 8005d16:	f806 3b01 	strb.w	r3, [r6], #1
 8005d1a:	f108 0801 	add.w	r8, r8, #1
 8005d1e:	e59f      	b.n	8005860 <_dtoa_r+0x498>
 8005d20:	9c03      	ldr	r4, [sp, #12]
 8005d22:	46b8      	mov	r8, r7
 8005d24:	4625      	mov	r5, r4
 8005d26:	e7f4      	b.n	8005d12 <_dtoa_r+0x94a>
 8005d28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8101 	beq.w	8005f36 <_dtoa_r+0xb6e>
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	dd05      	ble.n	8005d44 <_dtoa_r+0x97c>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	4648      	mov	r0, r9
 8005d3e:	f000 fc19 	bl	8006574 <__lshift>
 8005d42:	4605      	mov	r5, r0
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d05c      	beq.n	8005e04 <_dtoa_r+0xa3c>
 8005d4a:	6869      	ldr	r1, [r5, #4]
 8005d4c:	4648      	mov	r0, r9
 8005d4e:	f000 fa0b 	bl	8006168 <_Balloc>
 8005d52:	4606      	mov	r6, r0
 8005d54:	b928      	cbnz	r0, 8005d62 <_dtoa_r+0x99a>
 8005d56:	4b82      	ldr	r3, [pc, #520]	@ (8005f60 <_dtoa_r+0xb98>)
 8005d58:	4602      	mov	r2, r0
 8005d5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d5e:	f7ff bb4a 	b.w	80053f6 <_dtoa_r+0x2e>
 8005d62:	692a      	ldr	r2, [r5, #16]
 8005d64:	3202      	adds	r2, #2
 8005d66:	0092      	lsls	r2, r2, #2
 8005d68:	f105 010c 	add.w	r1, r5, #12
 8005d6c:	300c      	adds	r0, #12
 8005d6e:	f7ff fa94 	bl	800529a <memcpy>
 8005d72:	2201      	movs	r2, #1
 8005d74:	4631      	mov	r1, r6
 8005d76:	4648      	mov	r0, r9
 8005d78:	f000 fbfc 	bl	8006574 <__lshift>
 8005d7c:	f10a 0301 	add.w	r3, sl, #1
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	eb0a 030b 	add.w	r3, sl, fp
 8005d86:	9308      	str	r3, [sp, #32]
 8005d88:	9b04      	ldr	r3, [sp, #16]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	462f      	mov	r7, r5
 8005d90:	9306      	str	r3, [sp, #24]
 8005d92:	4605      	mov	r5, r0
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	9802      	ldr	r0, [sp, #8]
 8005d98:	4621      	mov	r1, r4
 8005d9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d9e:	f7ff fa8a 	bl	80052b6 <quorem>
 8005da2:	4603      	mov	r3, r0
 8005da4:	3330      	adds	r3, #48	@ 0x30
 8005da6:	9003      	str	r0, [sp, #12]
 8005da8:	4639      	mov	r1, r7
 8005daa:	9802      	ldr	r0, [sp, #8]
 8005dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dae:	f000 fc4d 	bl	800664c <__mcmp>
 8005db2:	462a      	mov	r2, r5
 8005db4:	9004      	str	r0, [sp, #16]
 8005db6:	4621      	mov	r1, r4
 8005db8:	4648      	mov	r0, r9
 8005dba:	f000 fc63 	bl	8006684 <__mdiff>
 8005dbe:	68c2      	ldr	r2, [r0, #12]
 8005dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	bb02      	cbnz	r2, 8005e08 <_dtoa_r+0xa40>
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	9802      	ldr	r0, [sp, #8]
 8005dca:	f000 fc3f 	bl	800664c <__mcmp>
 8005dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4648      	mov	r0, r9
 8005dd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dda:	f000 fa05 	bl	80061e8 <_Bfree>
 8005dde:	9b07      	ldr	r3, [sp, #28]
 8005de0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005de2:	9e00      	ldr	r6, [sp, #0]
 8005de4:	ea42 0103 	orr.w	r1, r2, r3
 8005de8:	9b06      	ldr	r3, [sp, #24]
 8005dea:	4319      	orrs	r1, r3
 8005dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dee:	d10d      	bne.n	8005e0c <_dtoa_r+0xa44>
 8005df0:	2b39      	cmp	r3, #57	@ 0x39
 8005df2:	d027      	beq.n	8005e44 <_dtoa_r+0xa7c>
 8005df4:	9a04      	ldr	r2, [sp, #16]
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	dd01      	ble.n	8005dfe <_dtoa_r+0xa36>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	3331      	adds	r3, #49	@ 0x31
 8005dfe:	f88b 3000 	strb.w	r3, [fp]
 8005e02:	e52e      	b.n	8005862 <_dtoa_r+0x49a>
 8005e04:	4628      	mov	r0, r5
 8005e06:	e7b9      	b.n	8005d7c <_dtoa_r+0x9b4>
 8005e08:	2201      	movs	r2, #1
 8005e0a:	e7e2      	b.n	8005dd2 <_dtoa_r+0xa0a>
 8005e0c:	9904      	ldr	r1, [sp, #16]
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	db04      	blt.n	8005e1c <_dtoa_r+0xa54>
 8005e12:	9807      	ldr	r0, [sp, #28]
 8005e14:	4301      	orrs	r1, r0
 8005e16:	9806      	ldr	r0, [sp, #24]
 8005e18:	4301      	orrs	r1, r0
 8005e1a:	d120      	bne.n	8005e5e <_dtoa_r+0xa96>
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	ddee      	ble.n	8005dfe <_dtoa_r+0xa36>
 8005e20:	9902      	ldr	r1, [sp, #8]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	2201      	movs	r2, #1
 8005e26:	4648      	mov	r0, r9
 8005e28:	f000 fba4 	bl	8006574 <__lshift>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	9002      	str	r0, [sp, #8]
 8005e30:	f000 fc0c 	bl	800664c <__mcmp>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	dc02      	bgt.n	8005e40 <_dtoa_r+0xa78>
 8005e3a:	d1e0      	bne.n	8005dfe <_dtoa_r+0xa36>
 8005e3c:	07da      	lsls	r2, r3, #31
 8005e3e:	d5de      	bpl.n	8005dfe <_dtoa_r+0xa36>
 8005e40:	2b39      	cmp	r3, #57	@ 0x39
 8005e42:	d1da      	bne.n	8005dfa <_dtoa_r+0xa32>
 8005e44:	2339      	movs	r3, #57	@ 0x39
 8005e46:	f88b 3000 	strb.w	r3, [fp]
 8005e4a:	4633      	mov	r3, r6
 8005e4c:	461e      	mov	r6, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e54:	2a39      	cmp	r2, #57	@ 0x39
 8005e56:	d04e      	beq.n	8005ef6 <_dtoa_r+0xb2e>
 8005e58:	3201      	adds	r2, #1
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	e501      	b.n	8005862 <_dtoa_r+0x49a>
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	dd03      	ble.n	8005e6a <_dtoa_r+0xaa2>
 8005e62:	2b39      	cmp	r3, #57	@ 0x39
 8005e64:	d0ee      	beq.n	8005e44 <_dtoa_r+0xa7c>
 8005e66:	3301      	adds	r3, #1
 8005e68:	e7c9      	b.n	8005dfe <_dtoa_r+0xa36>
 8005e6a:	9a00      	ldr	r2, [sp, #0]
 8005e6c:	9908      	ldr	r1, [sp, #32]
 8005e6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e72:	428a      	cmp	r2, r1
 8005e74:	d028      	beq.n	8005ec8 <_dtoa_r+0xb00>
 8005e76:	9902      	ldr	r1, [sp, #8]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4648      	mov	r0, r9
 8005e7e:	f000 f9d5 	bl	800622c <__multadd>
 8005e82:	42af      	cmp	r7, r5
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	f04f 020a 	mov.w	r2, #10
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4648      	mov	r0, r9
 8005e92:	d107      	bne.n	8005ea4 <_dtoa_r+0xadc>
 8005e94:	f000 f9ca 	bl	800622c <__multadd>
 8005e98:	4607      	mov	r7, r0
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	9b00      	ldr	r3, [sp, #0]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	e777      	b.n	8005d94 <_dtoa_r+0x9cc>
 8005ea4:	f000 f9c2 	bl	800622c <__multadd>
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4607      	mov	r7, r0
 8005eac:	2300      	movs	r3, #0
 8005eae:	220a      	movs	r2, #10
 8005eb0:	4648      	mov	r0, r9
 8005eb2:	f000 f9bb 	bl	800622c <__multadd>
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	e7f0      	b.n	8005e9c <_dtoa_r+0xad4>
 8005eba:	f1bb 0f00 	cmp.w	fp, #0
 8005ebe:	bfcc      	ite	gt
 8005ec0:	465e      	movgt	r6, fp
 8005ec2:	2601      	movle	r6, #1
 8005ec4:	4456      	add	r6, sl
 8005ec6:	2700      	movs	r7, #0
 8005ec8:	9902      	ldr	r1, [sp, #8]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	4648      	mov	r0, r9
 8005ed0:	f000 fb50 	bl	8006574 <__lshift>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	9002      	str	r0, [sp, #8]
 8005ed8:	f000 fbb8 	bl	800664c <__mcmp>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	dcb4      	bgt.n	8005e4a <_dtoa_r+0xa82>
 8005ee0:	d102      	bne.n	8005ee8 <_dtoa_r+0xb20>
 8005ee2:	9b00      	ldr	r3, [sp, #0]
 8005ee4:	07db      	lsls	r3, r3, #31
 8005ee6:	d4b0      	bmi.n	8005e4a <_dtoa_r+0xa82>
 8005ee8:	4633      	mov	r3, r6
 8005eea:	461e      	mov	r6, r3
 8005eec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ef0:	2a30      	cmp	r2, #48	@ 0x30
 8005ef2:	d0fa      	beq.n	8005eea <_dtoa_r+0xb22>
 8005ef4:	e4b5      	b.n	8005862 <_dtoa_r+0x49a>
 8005ef6:	459a      	cmp	sl, r3
 8005ef8:	d1a8      	bne.n	8005e4c <_dtoa_r+0xa84>
 8005efa:	2331      	movs	r3, #49	@ 0x31
 8005efc:	f108 0801 	add.w	r8, r8, #1
 8005f00:	f88a 3000 	strb.w	r3, [sl]
 8005f04:	e4ad      	b.n	8005862 <_dtoa_r+0x49a>
 8005f06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f64 <_dtoa_r+0xb9c>
 8005f0c:	b11b      	cbz	r3, 8005f16 <_dtoa_r+0xb4e>
 8005f0e:	f10a 0308 	add.w	r3, sl, #8
 8005f12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	4650      	mov	r0, sl
 8005f18:	b017      	add	sp, #92	@ 0x5c
 8005f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1e:	9b07      	ldr	r3, [sp, #28]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f77f ae2e 	ble.w	8005b82 <_dtoa_r+0x7ba>
 8005f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f28:	9308      	str	r3, [sp, #32]
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	e64d      	b.n	8005bca <_dtoa_r+0x802>
 8005f2e:	f1bb 0f00 	cmp.w	fp, #0
 8005f32:	f77f aed9 	ble.w	8005ce8 <_dtoa_r+0x920>
 8005f36:	4656      	mov	r6, sl
 8005f38:	9802      	ldr	r0, [sp, #8]
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	f7ff f9bb 	bl	80052b6 <quorem>
 8005f40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f44:	f806 3b01 	strb.w	r3, [r6], #1
 8005f48:	eba6 020a 	sub.w	r2, r6, sl
 8005f4c:	4593      	cmp	fp, r2
 8005f4e:	ddb4      	ble.n	8005eba <_dtoa_r+0xaf2>
 8005f50:	9902      	ldr	r1, [sp, #8]
 8005f52:	2300      	movs	r3, #0
 8005f54:	220a      	movs	r2, #10
 8005f56:	4648      	mov	r0, r9
 8005f58:	f000 f968 	bl	800622c <__multadd>
 8005f5c:	9002      	str	r0, [sp, #8]
 8005f5e:	e7eb      	b.n	8005f38 <_dtoa_r+0xb70>
 8005f60:	0800744c 	.word	0x0800744c
 8005f64:	080073d0 	.word	0x080073d0

08005f68 <_free_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d041      	beq.n	8005ff4 <_free_r+0x8c>
 8005f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f74:	1f0c      	subs	r4, r1, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	18e4      	addlt	r4, r4, r3
 8005f7c:	f000 f8e8 	bl	8006150 <__malloc_lock>
 8005f80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff8 <_free_r+0x90>)
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	b933      	cbnz	r3, 8005f94 <_free_r+0x2c>
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	6014      	str	r4, [r2, #0]
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f90:	f000 b8e4 	b.w	800615c <__malloc_unlock>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d908      	bls.n	8005faa <_free_r+0x42>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1809      	addeq	r1, r1, r0
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	e7ed      	b.n	8005f86 <_free_r+0x1e>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x4c>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x42>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1850      	adds	r0, r2, r1
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x6c>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	1850      	adds	r0, r2, r1
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1e0      	bne.n	8005f8a <_free_r+0x22>
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	4408      	add	r0, r1
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	e7da      	b.n	8005f8a <_free_r+0x22>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x74>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	e7d6      	b.n	8005f8a <_free_r+0x22>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	6054      	str	r4, [r2, #4]
 8005ff2:	e7ca      	b.n	8005f8a <_free_r+0x22>
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200003b0 	.word	0x200003b0

08005ffc <malloc>:
 8005ffc:	4b02      	ldr	r3, [pc, #8]	@ (8006008 <malloc+0xc>)
 8005ffe:	4601      	mov	r1, r0
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f000 b825 	b.w	8006050 <_malloc_r>
 8006006:	bf00      	nop
 8006008:	20000030 	.word	0x20000030

0800600c <sbrk_aligned>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4e0f      	ldr	r6, [pc, #60]	@ (800604c <sbrk_aligned+0x40>)
 8006010:	460c      	mov	r4, r1
 8006012:	6831      	ldr	r1, [r6, #0]
 8006014:	4605      	mov	r5, r0
 8006016:	b911      	cbnz	r1, 800601e <sbrk_aligned+0x12>
 8006018:	f000 fe3e 	bl	8006c98 <_sbrk_r>
 800601c:	6030      	str	r0, [r6, #0]
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 fe39 	bl	8006c98 <_sbrk_r>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d103      	bne.n	8006032 <sbrk_aligned+0x26>
 800602a:	f04f 34ff 	mov.w	r4, #4294967295
 800602e:	4620      	mov	r0, r4
 8006030:	bd70      	pop	{r4, r5, r6, pc}
 8006032:	1cc4      	adds	r4, r0, #3
 8006034:	f024 0403 	bic.w	r4, r4, #3
 8006038:	42a0      	cmp	r0, r4
 800603a:	d0f8      	beq.n	800602e <sbrk_aligned+0x22>
 800603c:	1a21      	subs	r1, r4, r0
 800603e:	4628      	mov	r0, r5
 8006040:	f000 fe2a 	bl	8006c98 <_sbrk_r>
 8006044:	3001      	adds	r0, #1
 8006046:	d1f2      	bne.n	800602e <sbrk_aligned+0x22>
 8006048:	e7ef      	b.n	800602a <sbrk_aligned+0x1e>
 800604a:	bf00      	nop
 800604c:	200003ac 	.word	0x200003ac

08006050 <_malloc_r>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	1ccd      	adds	r5, r1, #3
 8006056:	f025 0503 	bic.w	r5, r5, #3
 800605a:	3508      	adds	r5, #8
 800605c:	2d0c      	cmp	r5, #12
 800605e:	bf38      	it	cc
 8006060:	250c      	movcc	r5, #12
 8006062:	2d00      	cmp	r5, #0
 8006064:	4606      	mov	r6, r0
 8006066:	db01      	blt.n	800606c <_malloc_r+0x1c>
 8006068:	42a9      	cmp	r1, r5
 800606a:	d904      	bls.n	8006076 <_malloc_r+0x26>
 800606c:	230c      	movs	r3, #12
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	2000      	movs	r0, #0
 8006072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800614c <_malloc_r+0xfc>
 800607a:	f000 f869 	bl	8006150 <__malloc_lock>
 800607e:	f8d8 3000 	ldr.w	r3, [r8]
 8006082:	461c      	mov	r4, r3
 8006084:	bb44      	cbnz	r4, 80060d8 <_malloc_r+0x88>
 8006086:	4629      	mov	r1, r5
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff ffbf 	bl	800600c <sbrk_aligned>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	4604      	mov	r4, r0
 8006092:	d158      	bne.n	8006146 <_malloc_r+0xf6>
 8006094:	f8d8 4000 	ldr.w	r4, [r8]
 8006098:	4627      	mov	r7, r4
 800609a:	2f00      	cmp	r7, #0
 800609c:	d143      	bne.n	8006126 <_malloc_r+0xd6>
 800609e:	2c00      	cmp	r4, #0
 80060a0:	d04b      	beq.n	800613a <_malloc_r+0xea>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	4639      	mov	r1, r7
 80060a6:	4630      	mov	r0, r6
 80060a8:	eb04 0903 	add.w	r9, r4, r3
 80060ac:	f000 fdf4 	bl	8006c98 <_sbrk_r>
 80060b0:	4581      	cmp	r9, r0
 80060b2:	d142      	bne.n	800613a <_malloc_r+0xea>
 80060b4:	6821      	ldr	r1, [r4, #0]
 80060b6:	1a6d      	subs	r5, r5, r1
 80060b8:	4629      	mov	r1, r5
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ffa6 	bl	800600c <sbrk_aligned>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d03a      	beq.n	800613a <_malloc_r+0xea>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	442b      	add	r3, r5
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	f8d8 3000 	ldr.w	r3, [r8]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	bb62      	cbnz	r2, 800612c <_malloc_r+0xdc>
 80060d2:	f8c8 7000 	str.w	r7, [r8]
 80060d6:	e00f      	b.n	80060f8 <_malloc_r+0xa8>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	1b52      	subs	r2, r2, r5
 80060dc:	d420      	bmi.n	8006120 <_malloc_r+0xd0>
 80060de:	2a0b      	cmp	r2, #11
 80060e0:	d917      	bls.n	8006112 <_malloc_r+0xc2>
 80060e2:	1961      	adds	r1, r4, r5
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	6025      	str	r5, [r4, #0]
 80060e8:	bf18      	it	ne
 80060ea:	6059      	strne	r1, [r3, #4]
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	bf08      	it	eq
 80060f0:	f8c8 1000 	streq.w	r1, [r8]
 80060f4:	5162      	str	r2, [r4, r5]
 80060f6:	604b      	str	r3, [r1, #4]
 80060f8:	4630      	mov	r0, r6
 80060fa:	f000 f82f 	bl	800615c <__malloc_unlock>
 80060fe:	f104 000b 	add.w	r0, r4, #11
 8006102:	1d23      	adds	r3, r4, #4
 8006104:	f020 0007 	bic.w	r0, r0, #7
 8006108:	1ac2      	subs	r2, r0, r3
 800610a:	bf1c      	itt	ne
 800610c:	1a1b      	subne	r3, r3, r0
 800610e:	50a3      	strne	r3, [r4, r2]
 8006110:	e7af      	b.n	8006072 <_malloc_r+0x22>
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	42a3      	cmp	r3, r4
 8006116:	bf0c      	ite	eq
 8006118:	f8c8 2000 	streq.w	r2, [r8]
 800611c:	605a      	strne	r2, [r3, #4]
 800611e:	e7eb      	b.n	80060f8 <_malloc_r+0xa8>
 8006120:	4623      	mov	r3, r4
 8006122:	6864      	ldr	r4, [r4, #4]
 8006124:	e7ae      	b.n	8006084 <_malloc_r+0x34>
 8006126:	463c      	mov	r4, r7
 8006128:	687f      	ldr	r7, [r7, #4]
 800612a:	e7b6      	b.n	800609a <_malloc_r+0x4a>
 800612c:	461a      	mov	r2, r3
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	42a3      	cmp	r3, r4
 8006132:	d1fb      	bne.n	800612c <_malloc_r+0xdc>
 8006134:	2300      	movs	r3, #0
 8006136:	6053      	str	r3, [r2, #4]
 8006138:	e7de      	b.n	80060f8 <_malloc_r+0xa8>
 800613a:	230c      	movs	r3, #12
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	4630      	mov	r0, r6
 8006140:	f000 f80c 	bl	800615c <__malloc_unlock>
 8006144:	e794      	b.n	8006070 <_malloc_r+0x20>
 8006146:	6005      	str	r5, [r0, #0]
 8006148:	e7d6      	b.n	80060f8 <_malloc_r+0xa8>
 800614a:	bf00      	nop
 800614c:	200003b0 	.word	0x200003b0

08006150 <__malloc_lock>:
 8006150:	4801      	ldr	r0, [pc, #4]	@ (8006158 <__malloc_lock+0x8>)
 8006152:	f7ff b8a0 	b.w	8005296 <__retarget_lock_acquire_recursive>
 8006156:	bf00      	nop
 8006158:	200003a8 	.word	0x200003a8

0800615c <__malloc_unlock>:
 800615c:	4801      	ldr	r0, [pc, #4]	@ (8006164 <__malloc_unlock+0x8>)
 800615e:	f7ff b89b 	b.w	8005298 <__retarget_lock_release_recursive>
 8006162:	bf00      	nop
 8006164:	200003a8 	.word	0x200003a8

08006168 <_Balloc>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	69c6      	ldr	r6, [r0, #28]
 800616c:	4604      	mov	r4, r0
 800616e:	460d      	mov	r5, r1
 8006170:	b976      	cbnz	r6, 8006190 <_Balloc+0x28>
 8006172:	2010      	movs	r0, #16
 8006174:	f7ff ff42 	bl	8005ffc <malloc>
 8006178:	4602      	mov	r2, r0
 800617a:	61e0      	str	r0, [r4, #28]
 800617c:	b920      	cbnz	r0, 8006188 <_Balloc+0x20>
 800617e:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <_Balloc+0x78>)
 8006180:	4818      	ldr	r0, [pc, #96]	@ (80061e4 <_Balloc+0x7c>)
 8006182:	216b      	movs	r1, #107	@ 0x6b
 8006184:	f000 fd98 	bl	8006cb8 <__assert_func>
 8006188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800618c:	6006      	str	r6, [r0, #0]
 800618e:	60c6      	str	r6, [r0, #12]
 8006190:	69e6      	ldr	r6, [r4, #28]
 8006192:	68f3      	ldr	r3, [r6, #12]
 8006194:	b183      	cbz	r3, 80061b8 <_Balloc+0x50>
 8006196:	69e3      	ldr	r3, [r4, #28]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800619e:	b9b8      	cbnz	r0, 80061d0 <_Balloc+0x68>
 80061a0:	2101      	movs	r1, #1
 80061a2:	fa01 f605 	lsl.w	r6, r1, r5
 80061a6:	1d72      	adds	r2, r6, #5
 80061a8:	0092      	lsls	r2, r2, #2
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 fda2 	bl	8006cf4 <_calloc_r>
 80061b0:	b160      	cbz	r0, 80061cc <_Balloc+0x64>
 80061b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061b6:	e00e      	b.n	80061d6 <_Balloc+0x6e>
 80061b8:	2221      	movs	r2, #33	@ 0x21
 80061ba:	2104      	movs	r1, #4
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 fd99 	bl	8006cf4 <_calloc_r>
 80061c2:	69e3      	ldr	r3, [r4, #28]
 80061c4:	60f0      	str	r0, [r6, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e4      	bne.n	8006196 <_Balloc+0x2e>
 80061cc:	2000      	movs	r0, #0
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	6802      	ldr	r2, [r0, #0]
 80061d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061d6:	2300      	movs	r3, #0
 80061d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061dc:	e7f7      	b.n	80061ce <_Balloc+0x66>
 80061de:	bf00      	nop
 80061e0:	080073dd 	.word	0x080073dd
 80061e4:	0800745d 	.word	0x0800745d

080061e8 <_Bfree>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	69c6      	ldr	r6, [r0, #28]
 80061ec:	4605      	mov	r5, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	b976      	cbnz	r6, 8006210 <_Bfree+0x28>
 80061f2:	2010      	movs	r0, #16
 80061f4:	f7ff ff02 	bl	8005ffc <malloc>
 80061f8:	4602      	mov	r2, r0
 80061fa:	61e8      	str	r0, [r5, #28]
 80061fc:	b920      	cbnz	r0, 8006208 <_Bfree+0x20>
 80061fe:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <_Bfree+0x3c>)
 8006200:	4809      	ldr	r0, [pc, #36]	@ (8006228 <_Bfree+0x40>)
 8006202:	218f      	movs	r1, #143	@ 0x8f
 8006204:	f000 fd58 	bl	8006cb8 <__assert_func>
 8006208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800620c:	6006      	str	r6, [r0, #0]
 800620e:	60c6      	str	r6, [r0, #12]
 8006210:	b13c      	cbz	r4, 8006222 <_Bfree+0x3a>
 8006212:	69eb      	ldr	r3, [r5, #28]
 8006214:	6862      	ldr	r2, [r4, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800621c:	6021      	str	r1, [r4, #0]
 800621e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	080073dd 	.word	0x080073dd
 8006228:	0800745d 	.word	0x0800745d

0800622c <__multadd>:
 800622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006230:	690d      	ldr	r5, [r1, #16]
 8006232:	4607      	mov	r7, r0
 8006234:	460c      	mov	r4, r1
 8006236:	461e      	mov	r6, r3
 8006238:	f101 0c14 	add.w	ip, r1, #20
 800623c:	2000      	movs	r0, #0
 800623e:	f8dc 3000 	ldr.w	r3, [ip]
 8006242:	b299      	uxth	r1, r3
 8006244:	fb02 6101 	mla	r1, r2, r1, r6
 8006248:	0c1e      	lsrs	r6, r3, #16
 800624a:	0c0b      	lsrs	r3, r1, #16
 800624c:	fb02 3306 	mla	r3, r2, r6, r3
 8006250:	b289      	uxth	r1, r1
 8006252:	3001      	adds	r0, #1
 8006254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006258:	4285      	cmp	r5, r0
 800625a:	f84c 1b04 	str.w	r1, [ip], #4
 800625e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006262:	dcec      	bgt.n	800623e <__multadd+0x12>
 8006264:	b30e      	cbz	r6, 80062aa <__multadd+0x7e>
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	42ab      	cmp	r3, r5
 800626a:	dc19      	bgt.n	80062a0 <__multadd+0x74>
 800626c:	6861      	ldr	r1, [r4, #4]
 800626e:	4638      	mov	r0, r7
 8006270:	3101      	adds	r1, #1
 8006272:	f7ff ff79 	bl	8006168 <_Balloc>
 8006276:	4680      	mov	r8, r0
 8006278:	b928      	cbnz	r0, 8006286 <__multadd+0x5a>
 800627a:	4602      	mov	r2, r0
 800627c:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <__multadd+0x84>)
 800627e:	480d      	ldr	r0, [pc, #52]	@ (80062b4 <__multadd+0x88>)
 8006280:	21ba      	movs	r1, #186	@ 0xba
 8006282:	f000 fd19 	bl	8006cb8 <__assert_func>
 8006286:	6922      	ldr	r2, [r4, #16]
 8006288:	3202      	adds	r2, #2
 800628a:	f104 010c 	add.w	r1, r4, #12
 800628e:	0092      	lsls	r2, r2, #2
 8006290:	300c      	adds	r0, #12
 8006292:	f7ff f802 	bl	800529a <memcpy>
 8006296:	4621      	mov	r1, r4
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff ffa5 	bl	80061e8 <_Bfree>
 800629e:	4644      	mov	r4, r8
 80062a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062a4:	3501      	adds	r5, #1
 80062a6:	615e      	str	r6, [r3, #20]
 80062a8:	6125      	str	r5, [r4, #16]
 80062aa:	4620      	mov	r0, r4
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	0800744c 	.word	0x0800744c
 80062b4:	0800745d 	.word	0x0800745d

080062b8 <__hi0bits>:
 80062b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80062bc:	4603      	mov	r3, r0
 80062be:	bf36      	itet	cc
 80062c0:	0403      	lslcc	r3, r0, #16
 80062c2:	2000      	movcs	r0, #0
 80062c4:	2010      	movcc	r0, #16
 80062c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062ca:	bf3c      	itt	cc
 80062cc:	021b      	lslcc	r3, r3, #8
 80062ce:	3008      	addcc	r0, #8
 80062d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062d4:	bf3c      	itt	cc
 80062d6:	011b      	lslcc	r3, r3, #4
 80062d8:	3004      	addcc	r0, #4
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062de:	bf3c      	itt	cc
 80062e0:	009b      	lslcc	r3, r3, #2
 80062e2:	3002      	addcc	r0, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	db05      	blt.n	80062f4 <__hi0bits+0x3c>
 80062e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062ec:	f100 0001 	add.w	r0, r0, #1
 80062f0:	bf08      	it	eq
 80062f2:	2020      	moveq	r0, #32
 80062f4:	4770      	bx	lr

080062f6 <__lo0bits>:
 80062f6:	6803      	ldr	r3, [r0, #0]
 80062f8:	4602      	mov	r2, r0
 80062fa:	f013 0007 	ands.w	r0, r3, #7
 80062fe:	d00b      	beq.n	8006318 <__lo0bits+0x22>
 8006300:	07d9      	lsls	r1, r3, #31
 8006302:	d421      	bmi.n	8006348 <__lo0bits+0x52>
 8006304:	0798      	lsls	r0, r3, #30
 8006306:	bf49      	itett	mi
 8006308:	085b      	lsrmi	r3, r3, #1
 800630a:	089b      	lsrpl	r3, r3, #2
 800630c:	2001      	movmi	r0, #1
 800630e:	6013      	strmi	r3, [r2, #0]
 8006310:	bf5c      	itt	pl
 8006312:	6013      	strpl	r3, [r2, #0]
 8006314:	2002      	movpl	r0, #2
 8006316:	4770      	bx	lr
 8006318:	b299      	uxth	r1, r3
 800631a:	b909      	cbnz	r1, 8006320 <__lo0bits+0x2a>
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	2010      	movs	r0, #16
 8006320:	b2d9      	uxtb	r1, r3
 8006322:	b909      	cbnz	r1, 8006328 <__lo0bits+0x32>
 8006324:	3008      	adds	r0, #8
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	0719      	lsls	r1, r3, #28
 800632a:	bf04      	itt	eq
 800632c:	091b      	lsreq	r3, r3, #4
 800632e:	3004      	addeq	r0, #4
 8006330:	0799      	lsls	r1, r3, #30
 8006332:	bf04      	itt	eq
 8006334:	089b      	lsreq	r3, r3, #2
 8006336:	3002      	addeq	r0, #2
 8006338:	07d9      	lsls	r1, r3, #31
 800633a:	d403      	bmi.n	8006344 <__lo0bits+0x4e>
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	f100 0001 	add.w	r0, r0, #1
 8006342:	d003      	beq.n	800634c <__lo0bits+0x56>
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4770      	bx	lr
 8006348:	2000      	movs	r0, #0
 800634a:	4770      	bx	lr
 800634c:	2020      	movs	r0, #32
 800634e:	4770      	bx	lr

08006350 <__i2b>:
 8006350:	b510      	push	{r4, lr}
 8006352:	460c      	mov	r4, r1
 8006354:	2101      	movs	r1, #1
 8006356:	f7ff ff07 	bl	8006168 <_Balloc>
 800635a:	4602      	mov	r2, r0
 800635c:	b928      	cbnz	r0, 800636a <__i2b+0x1a>
 800635e:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <__i2b+0x24>)
 8006360:	4805      	ldr	r0, [pc, #20]	@ (8006378 <__i2b+0x28>)
 8006362:	f240 1145 	movw	r1, #325	@ 0x145
 8006366:	f000 fca7 	bl	8006cb8 <__assert_func>
 800636a:	2301      	movs	r3, #1
 800636c:	6144      	str	r4, [r0, #20]
 800636e:	6103      	str	r3, [r0, #16]
 8006370:	bd10      	pop	{r4, pc}
 8006372:	bf00      	nop
 8006374:	0800744c 	.word	0x0800744c
 8006378:	0800745d 	.word	0x0800745d

0800637c <__multiply>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	4617      	mov	r7, r2
 8006382:	690a      	ldr	r2, [r1, #16]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	bfa8      	it	ge
 800638a:	463b      	movge	r3, r7
 800638c:	4689      	mov	r9, r1
 800638e:	bfa4      	itt	ge
 8006390:	460f      	movge	r7, r1
 8006392:	4699      	movge	r9, r3
 8006394:	693d      	ldr	r5, [r7, #16]
 8006396:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	eb05 060a 	add.w	r6, r5, sl
 80063a2:	42b3      	cmp	r3, r6
 80063a4:	b085      	sub	sp, #20
 80063a6:	bfb8      	it	lt
 80063a8:	3101      	addlt	r1, #1
 80063aa:	f7ff fedd 	bl	8006168 <_Balloc>
 80063ae:	b930      	cbnz	r0, 80063be <__multiply+0x42>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b41      	ldr	r3, [pc, #260]	@ (80064b8 <__multiply+0x13c>)
 80063b4:	4841      	ldr	r0, [pc, #260]	@ (80064bc <__multiply+0x140>)
 80063b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80063ba:	f000 fc7d 	bl	8006cb8 <__assert_func>
 80063be:	f100 0414 	add.w	r4, r0, #20
 80063c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80063c6:	4623      	mov	r3, r4
 80063c8:	2200      	movs	r2, #0
 80063ca:	4573      	cmp	r3, lr
 80063cc:	d320      	bcc.n	8006410 <__multiply+0x94>
 80063ce:	f107 0814 	add.w	r8, r7, #20
 80063d2:	f109 0114 	add.w	r1, r9, #20
 80063d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80063da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80063de:	9302      	str	r3, [sp, #8]
 80063e0:	1beb      	subs	r3, r5, r7
 80063e2:	3b15      	subs	r3, #21
 80063e4:	f023 0303 	bic.w	r3, r3, #3
 80063e8:	3304      	adds	r3, #4
 80063ea:	3715      	adds	r7, #21
 80063ec:	42bd      	cmp	r5, r7
 80063ee:	bf38      	it	cc
 80063f0:	2304      	movcc	r3, #4
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	9b02      	ldr	r3, [sp, #8]
 80063f6:	9103      	str	r1, [sp, #12]
 80063f8:	428b      	cmp	r3, r1
 80063fa:	d80c      	bhi.n	8006416 <__multiply+0x9a>
 80063fc:	2e00      	cmp	r6, #0
 80063fe:	dd03      	ble.n	8006408 <__multiply+0x8c>
 8006400:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006404:	2b00      	cmp	r3, #0
 8006406:	d055      	beq.n	80064b4 <__multiply+0x138>
 8006408:	6106      	str	r6, [r0, #16]
 800640a:	b005      	add	sp, #20
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	f843 2b04 	str.w	r2, [r3], #4
 8006414:	e7d9      	b.n	80063ca <__multiply+0x4e>
 8006416:	f8b1 a000 	ldrh.w	sl, [r1]
 800641a:	f1ba 0f00 	cmp.w	sl, #0
 800641e:	d01f      	beq.n	8006460 <__multiply+0xe4>
 8006420:	46c4      	mov	ip, r8
 8006422:	46a1      	mov	r9, r4
 8006424:	2700      	movs	r7, #0
 8006426:	f85c 2b04 	ldr.w	r2, [ip], #4
 800642a:	f8d9 3000 	ldr.w	r3, [r9]
 800642e:	fa1f fb82 	uxth.w	fp, r2
 8006432:	b29b      	uxth	r3, r3
 8006434:	fb0a 330b 	mla	r3, sl, fp, r3
 8006438:	443b      	add	r3, r7
 800643a:	f8d9 7000 	ldr.w	r7, [r9]
 800643e:	0c12      	lsrs	r2, r2, #16
 8006440:	0c3f      	lsrs	r7, r7, #16
 8006442:	fb0a 7202 	mla	r2, sl, r2, r7
 8006446:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800644a:	b29b      	uxth	r3, r3
 800644c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006450:	4565      	cmp	r5, ip
 8006452:	f849 3b04 	str.w	r3, [r9], #4
 8006456:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800645a:	d8e4      	bhi.n	8006426 <__multiply+0xaa>
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	50e7      	str	r7, [r4, r3]
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006466:	3104      	adds	r1, #4
 8006468:	f1b9 0f00 	cmp.w	r9, #0
 800646c:	d020      	beq.n	80064b0 <__multiply+0x134>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	4647      	mov	r7, r8
 8006472:	46a4      	mov	ip, r4
 8006474:	f04f 0a00 	mov.w	sl, #0
 8006478:	f8b7 b000 	ldrh.w	fp, [r7]
 800647c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006480:	fb09 220b 	mla	r2, r9, fp, r2
 8006484:	4452      	add	r2, sl
 8006486:	b29b      	uxth	r3, r3
 8006488:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800648c:	f84c 3b04 	str.w	r3, [ip], #4
 8006490:	f857 3b04 	ldr.w	r3, [r7], #4
 8006494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006498:	f8bc 3000 	ldrh.w	r3, [ip]
 800649c:	fb09 330a 	mla	r3, r9, sl, r3
 80064a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80064a4:	42bd      	cmp	r5, r7
 80064a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064aa:	d8e5      	bhi.n	8006478 <__multiply+0xfc>
 80064ac:	9a01      	ldr	r2, [sp, #4]
 80064ae:	50a3      	str	r3, [r4, r2]
 80064b0:	3404      	adds	r4, #4
 80064b2:	e79f      	b.n	80063f4 <__multiply+0x78>
 80064b4:	3e01      	subs	r6, #1
 80064b6:	e7a1      	b.n	80063fc <__multiply+0x80>
 80064b8:	0800744c 	.word	0x0800744c
 80064bc:	0800745d 	.word	0x0800745d

080064c0 <__pow5mult>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4615      	mov	r5, r2
 80064c6:	f012 0203 	ands.w	r2, r2, #3
 80064ca:	4607      	mov	r7, r0
 80064cc:	460e      	mov	r6, r1
 80064ce:	d007      	beq.n	80064e0 <__pow5mult+0x20>
 80064d0:	4c25      	ldr	r4, [pc, #148]	@ (8006568 <__pow5mult+0xa8>)
 80064d2:	3a01      	subs	r2, #1
 80064d4:	2300      	movs	r3, #0
 80064d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064da:	f7ff fea7 	bl	800622c <__multadd>
 80064de:	4606      	mov	r6, r0
 80064e0:	10ad      	asrs	r5, r5, #2
 80064e2:	d03d      	beq.n	8006560 <__pow5mult+0xa0>
 80064e4:	69fc      	ldr	r4, [r7, #28]
 80064e6:	b97c      	cbnz	r4, 8006508 <__pow5mult+0x48>
 80064e8:	2010      	movs	r0, #16
 80064ea:	f7ff fd87 	bl	8005ffc <malloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	61f8      	str	r0, [r7, #28]
 80064f2:	b928      	cbnz	r0, 8006500 <__pow5mult+0x40>
 80064f4:	4b1d      	ldr	r3, [pc, #116]	@ (800656c <__pow5mult+0xac>)
 80064f6:	481e      	ldr	r0, [pc, #120]	@ (8006570 <__pow5mult+0xb0>)
 80064f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80064fc:	f000 fbdc 	bl	8006cb8 <__assert_func>
 8006500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006504:	6004      	str	r4, [r0, #0]
 8006506:	60c4      	str	r4, [r0, #12]
 8006508:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800650c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006510:	b94c      	cbnz	r4, 8006526 <__pow5mult+0x66>
 8006512:	f240 2171 	movw	r1, #625	@ 0x271
 8006516:	4638      	mov	r0, r7
 8006518:	f7ff ff1a 	bl	8006350 <__i2b>
 800651c:	2300      	movs	r3, #0
 800651e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006522:	4604      	mov	r4, r0
 8006524:	6003      	str	r3, [r0, #0]
 8006526:	f04f 0900 	mov.w	r9, #0
 800652a:	07eb      	lsls	r3, r5, #31
 800652c:	d50a      	bpl.n	8006544 <__pow5mult+0x84>
 800652e:	4631      	mov	r1, r6
 8006530:	4622      	mov	r2, r4
 8006532:	4638      	mov	r0, r7
 8006534:	f7ff ff22 	bl	800637c <__multiply>
 8006538:	4631      	mov	r1, r6
 800653a:	4680      	mov	r8, r0
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff fe53 	bl	80061e8 <_Bfree>
 8006542:	4646      	mov	r6, r8
 8006544:	106d      	asrs	r5, r5, #1
 8006546:	d00b      	beq.n	8006560 <__pow5mult+0xa0>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	b938      	cbnz	r0, 800655c <__pow5mult+0x9c>
 800654c:	4622      	mov	r2, r4
 800654e:	4621      	mov	r1, r4
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff ff13 	bl	800637c <__multiply>
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	f8c0 9000 	str.w	r9, [r0]
 800655c:	4604      	mov	r4, r0
 800655e:	e7e4      	b.n	800652a <__pow5mult+0x6a>
 8006560:	4630      	mov	r0, r6
 8006562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006566:	bf00      	nop
 8006568:	08007510 	.word	0x08007510
 800656c:	080073dd 	.word	0x080073dd
 8006570:	0800745d 	.word	0x0800745d

08006574 <__lshift>:
 8006574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	6849      	ldr	r1, [r1, #4]
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	4607      	mov	r7, r0
 8006586:	4691      	mov	r9, r2
 8006588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800658c:	f108 0601 	add.w	r6, r8, #1
 8006590:	42b3      	cmp	r3, r6
 8006592:	db0b      	blt.n	80065ac <__lshift+0x38>
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff fde7 	bl	8006168 <_Balloc>
 800659a:	4605      	mov	r5, r0
 800659c:	b948      	cbnz	r0, 80065b2 <__lshift+0x3e>
 800659e:	4602      	mov	r2, r0
 80065a0:	4b28      	ldr	r3, [pc, #160]	@ (8006644 <__lshift+0xd0>)
 80065a2:	4829      	ldr	r0, [pc, #164]	@ (8006648 <__lshift+0xd4>)
 80065a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80065a8:	f000 fb86 	bl	8006cb8 <__assert_func>
 80065ac:	3101      	adds	r1, #1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	e7ee      	b.n	8006590 <__lshift+0x1c>
 80065b2:	2300      	movs	r3, #0
 80065b4:	f100 0114 	add.w	r1, r0, #20
 80065b8:	f100 0210 	add.w	r2, r0, #16
 80065bc:	4618      	mov	r0, r3
 80065be:	4553      	cmp	r3, sl
 80065c0:	db33      	blt.n	800662a <__lshift+0xb6>
 80065c2:	6920      	ldr	r0, [r4, #16]
 80065c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065c8:	f104 0314 	add.w	r3, r4, #20
 80065cc:	f019 091f 	ands.w	r9, r9, #31
 80065d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065d8:	d02b      	beq.n	8006632 <__lshift+0xbe>
 80065da:	f1c9 0e20 	rsb	lr, r9, #32
 80065de:	468a      	mov	sl, r1
 80065e0:	2200      	movs	r2, #0
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	fa00 f009 	lsl.w	r0, r0, r9
 80065e8:	4310      	orrs	r0, r2
 80065ea:	f84a 0b04 	str.w	r0, [sl], #4
 80065ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f2:	459c      	cmp	ip, r3
 80065f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80065f8:	d8f3      	bhi.n	80065e2 <__lshift+0x6e>
 80065fa:	ebac 0304 	sub.w	r3, ip, r4
 80065fe:	3b15      	subs	r3, #21
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	3304      	adds	r3, #4
 8006606:	f104 0015 	add.w	r0, r4, #21
 800660a:	4560      	cmp	r0, ip
 800660c:	bf88      	it	hi
 800660e:	2304      	movhi	r3, #4
 8006610:	50ca      	str	r2, [r1, r3]
 8006612:	b10a      	cbz	r2, 8006618 <__lshift+0xa4>
 8006614:	f108 0602 	add.w	r6, r8, #2
 8006618:	3e01      	subs	r6, #1
 800661a:	4638      	mov	r0, r7
 800661c:	612e      	str	r6, [r5, #16]
 800661e:	4621      	mov	r1, r4
 8006620:	f7ff fde2 	bl	80061e8 <_Bfree>
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662a:	f842 0f04 	str.w	r0, [r2, #4]!
 800662e:	3301      	adds	r3, #1
 8006630:	e7c5      	b.n	80065be <__lshift+0x4a>
 8006632:	3904      	subs	r1, #4
 8006634:	f853 2b04 	ldr.w	r2, [r3], #4
 8006638:	f841 2f04 	str.w	r2, [r1, #4]!
 800663c:	459c      	cmp	ip, r3
 800663e:	d8f9      	bhi.n	8006634 <__lshift+0xc0>
 8006640:	e7ea      	b.n	8006618 <__lshift+0xa4>
 8006642:	bf00      	nop
 8006644:	0800744c 	.word	0x0800744c
 8006648:	0800745d 	.word	0x0800745d

0800664c <__mcmp>:
 800664c:	690a      	ldr	r2, [r1, #16]
 800664e:	4603      	mov	r3, r0
 8006650:	6900      	ldr	r0, [r0, #16]
 8006652:	1a80      	subs	r0, r0, r2
 8006654:	b530      	push	{r4, r5, lr}
 8006656:	d10e      	bne.n	8006676 <__mcmp+0x2a>
 8006658:	3314      	adds	r3, #20
 800665a:	3114      	adds	r1, #20
 800665c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006660:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006664:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006668:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800666c:	4295      	cmp	r5, r2
 800666e:	d003      	beq.n	8006678 <__mcmp+0x2c>
 8006670:	d205      	bcs.n	800667e <__mcmp+0x32>
 8006672:	f04f 30ff 	mov.w	r0, #4294967295
 8006676:	bd30      	pop	{r4, r5, pc}
 8006678:	42a3      	cmp	r3, r4
 800667a:	d3f3      	bcc.n	8006664 <__mcmp+0x18>
 800667c:	e7fb      	b.n	8006676 <__mcmp+0x2a>
 800667e:	2001      	movs	r0, #1
 8006680:	e7f9      	b.n	8006676 <__mcmp+0x2a>
	...

08006684 <__mdiff>:
 8006684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4689      	mov	r9, r1
 800668a:	4606      	mov	r6, r0
 800668c:	4611      	mov	r1, r2
 800668e:	4648      	mov	r0, r9
 8006690:	4614      	mov	r4, r2
 8006692:	f7ff ffdb 	bl	800664c <__mcmp>
 8006696:	1e05      	subs	r5, r0, #0
 8006698:	d112      	bne.n	80066c0 <__mdiff+0x3c>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fd63 	bl	8006168 <_Balloc>
 80066a2:	4602      	mov	r2, r0
 80066a4:	b928      	cbnz	r0, 80066b2 <__mdiff+0x2e>
 80066a6:	4b3f      	ldr	r3, [pc, #252]	@ (80067a4 <__mdiff+0x120>)
 80066a8:	f240 2137 	movw	r1, #567	@ 0x237
 80066ac:	483e      	ldr	r0, [pc, #248]	@ (80067a8 <__mdiff+0x124>)
 80066ae:	f000 fb03 	bl	8006cb8 <__assert_func>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066b8:	4610      	mov	r0, r2
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	bfbc      	itt	lt
 80066c2:	464b      	movlt	r3, r9
 80066c4:	46a1      	movlt	r9, r4
 80066c6:	4630      	mov	r0, r6
 80066c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80066cc:	bfba      	itte	lt
 80066ce:	461c      	movlt	r4, r3
 80066d0:	2501      	movlt	r5, #1
 80066d2:	2500      	movge	r5, #0
 80066d4:	f7ff fd48 	bl	8006168 <_Balloc>
 80066d8:	4602      	mov	r2, r0
 80066da:	b918      	cbnz	r0, 80066e4 <__mdiff+0x60>
 80066dc:	4b31      	ldr	r3, [pc, #196]	@ (80067a4 <__mdiff+0x120>)
 80066de:	f240 2145 	movw	r1, #581	@ 0x245
 80066e2:	e7e3      	b.n	80066ac <__mdiff+0x28>
 80066e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066e8:	6926      	ldr	r6, [r4, #16]
 80066ea:	60c5      	str	r5, [r0, #12]
 80066ec:	f109 0310 	add.w	r3, r9, #16
 80066f0:	f109 0514 	add.w	r5, r9, #20
 80066f4:	f104 0e14 	add.w	lr, r4, #20
 80066f8:	f100 0b14 	add.w	fp, r0, #20
 80066fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006700:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	46d9      	mov	r9, fp
 8006708:	f04f 0c00 	mov.w	ip, #0
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006712:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	fa1f f38a 	uxth.w	r3, sl
 800671c:	4619      	mov	r1, r3
 800671e:	b283      	uxth	r3, r0
 8006720:	1acb      	subs	r3, r1, r3
 8006722:	0c00      	lsrs	r0, r0, #16
 8006724:	4463      	add	r3, ip
 8006726:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800672a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800672e:	b29b      	uxth	r3, r3
 8006730:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006734:	4576      	cmp	r6, lr
 8006736:	f849 3b04 	str.w	r3, [r9], #4
 800673a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800673e:	d8e5      	bhi.n	800670c <__mdiff+0x88>
 8006740:	1b33      	subs	r3, r6, r4
 8006742:	3b15      	subs	r3, #21
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	3415      	adds	r4, #21
 800674a:	3304      	adds	r3, #4
 800674c:	42a6      	cmp	r6, r4
 800674e:	bf38      	it	cc
 8006750:	2304      	movcc	r3, #4
 8006752:	441d      	add	r5, r3
 8006754:	445b      	add	r3, fp
 8006756:	461e      	mov	r6, r3
 8006758:	462c      	mov	r4, r5
 800675a:	4544      	cmp	r4, r8
 800675c:	d30e      	bcc.n	800677c <__mdiff+0xf8>
 800675e:	f108 0103 	add.w	r1, r8, #3
 8006762:	1b49      	subs	r1, r1, r5
 8006764:	f021 0103 	bic.w	r1, r1, #3
 8006768:	3d03      	subs	r5, #3
 800676a:	45a8      	cmp	r8, r5
 800676c:	bf38      	it	cc
 800676e:	2100      	movcc	r1, #0
 8006770:	440b      	add	r3, r1
 8006772:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006776:	b191      	cbz	r1, 800679e <__mdiff+0x11a>
 8006778:	6117      	str	r7, [r2, #16]
 800677a:	e79d      	b.n	80066b8 <__mdiff+0x34>
 800677c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006780:	46e6      	mov	lr, ip
 8006782:	0c08      	lsrs	r0, r1, #16
 8006784:	fa1c fc81 	uxtah	ip, ip, r1
 8006788:	4471      	add	r1, lr
 800678a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800678e:	b289      	uxth	r1, r1
 8006790:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006794:	f846 1b04 	str.w	r1, [r6], #4
 8006798:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800679c:	e7dd      	b.n	800675a <__mdiff+0xd6>
 800679e:	3f01      	subs	r7, #1
 80067a0:	e7e7      	b.n	8006772 <__mdiff+0xee>
 80067a2:	bf00      	nop
 80067a4:	0800744c 	.word	0x0800744c
 80067a8:	0800745d 	.word	0x0800745d

080067ac <__d2b>:
 80067ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067b0:	460f      	mov	r7, r1
 80067b2:	2101      	movs	r1, #1
 80067b4:	ec59 8b10 	vmov	r8, r9, d0
 80067b8:	4616      	mov	r6, r2
 80067ba:	f7ff fcd5 	bl	8006168 <_Balloc>
 80067be:	4604      	mov	r4, r0
 80067c0:	b930      	cbnz	r0, 80067d0 <__d2b+0x24>
 80067c2:	4602      	mov	r2, r0
 80067c4:	4b23      	ldr	r3, [pc, #140]	@ (8006854 <__d2b+0xa8>)
 80067c6:	4824      	ldr	r0, [pc, #144]	@ (8006858 <__d2b+0xac>)
 80067c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80067cc:	f000 fa74 	bl	8006cb8 <__assert_func>
 80067d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067d8:	b10d      	cbz	r5, 80067de <__d2b+0x32>
 80067da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	f1b8 0300 	subs.w	r3, r8, #0
 80067e4:	d023      	beq.n	800682e <__d2b+0x82>
 80067e6:	4668      	mov	r0, sp
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	f7ff fd84 	bl	80062f6 <__lo0bits>
 80067ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067f2:	b1d0      	cbz	r0, 800682a <__d2b+0x7e>
 80067f4:	f1c0 0320 	rsb	r3, r0, #32
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	430b      	orrs	r3, r1
 80067fe:	40c2      	lsrs	r2, r0
 8006800:	6163      	str	r3, [r4, #20]
 8006802:	9201      	str	r2, [sp, #4]
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	61a3      	str	r3, [r4, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf0c      	ite	eq
 800680c:	2201      	moveq	r2, #1
 800680e:	2202      	movne	r2, #2
 8006810:	6122      	str	r2, [r4, #16]
 8006812:	b1a5      	cbz	r5, 800683e <__d2b+0x92>
 8006814:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006818:	4405      	add	r5, r0
 800681a:	603d      	str	r5, [r7, #0]
 800681c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006820:	6030      	str	r0, [r6, #0]
 8006822:	4620      	mov	r0, r4
 8006824:	b003      	add	sp, #12
 8006826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800682a:	6161      	str	r1, [r4, #20]
 800682c:	e7ea      	b.n	8006804 <__d2b+0x58>
 800682e:	a801      	add	r0, sp, #4
 8006830:	f7ff fd61 	bl	80062f6 <__lo0bits>
 8006834:	9b01      	ldr	r3, [sp, #4]
 8006836:	6163      	str	r3, [r4, #20]
 8006838:	3020      	adds	r0, #32
 800683a:	2201      	movs	r2, #1
 800683c:	e7e8      	b.n	8006810 <__d2b+0x64>
 800683e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006842:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006846:	6038      	str	r0, [r7, #0]
 8006848:	6918      	ldr	r0, [r3, #16]
 800684a:	f7ff fd35 	bl	80062b8 <__hi0bits>
 800684e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006852:	e7e5      	b.n	8006820 <__d2b+0x74>
 8006854:	0800744c 	.word	0x0800744c
 8006858:	0800745d 	.word	0x0800745d

0800685c <__ssputs_r>:
 800685c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006860:	688e      	ldr	r6, [r1, #8]
 8006862:	461f      	mov	r7, r3
 8006864:	42be      	cmp	r6, r7
 8006866:	680b      	ldr	r3, [r1, #0]
 8006868:	4682      	mov	sl, r0
 800686a:	460c      	mov	r4, r1
 800686c:	4690      	mov	r8, r2
 800686e:	d82d      	bhi.n	80068cc <__ssputs_r+0x70>
 8006870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006878:	d026      	beq.n	80068c8 <__ssputs_r+0x6c>
 800687a:	6965      	ldr	r5, [r4, #20]
 800687c:	6909      	ldr	r1, [r1, #16]
 800687e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006882:	eba3 0901 	sub.w	r9, r3, r1
 8006886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800688a:	1c7b      	adds	r3, r7, #1
 800688c:	444b      	add	r3, r9
 800688e:	106d      	asrs	r5, r5, #1
 8006890:	429d      	cmp	r5, r3
 8006892:	bf38      	it	cc
 8006894:	461d      	movcc	r5, r3
 8006896:	0553      	lsls	r3, r2, #21
 8006898:	d527      	bpl.n	80068ea <__ssputs_r+0x8e>
 800689a:	4629      	mov	r1, r5
 800689c:	f7ff fbd8 	bl	8006050 <_malloc_r>
 80068a0:	4606      	mov	r6, r0
 80068a2:	b360      	cbz	r0, 80068fe <__ssputs_r+0xa2>
 80068a4:	6921      	ldr	r1, [r4, #16]
 80068a6:	464a      	mov	r2, r9
 80068a8:	f7fe fcf7 	bl	800529a <memcpy>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	6126      	str	r6, [r4, #16]
 80068ba:	6165      	str	r5, [r4, #20]
 80068bc:	444e      	add	r6, r9
 80068be:	eba5 0509 	sub.w	r5, r5, r9
 80068c2:	6026      	str	r6, [r4, #0]
 80068c4:	60a5      	str	r5, [r4, #8]
 80068c6:	463e      	mov	r6, r7
 80068c8:	42be      	cmp	r6, r7
 80068ca:	d900      	bls.n	80068ce <__ssputs_r+0x72>
 80068cc:	463e      	mov	r6, r7
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	4632      	mov	r2, r6
 80068d2:	4641      	mov	r1, r8
 80068d4:	f000 f9c6 	bl	8006c64 <memmove>
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	1b9b      	subs	r3, r3, r6
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	4433      	add	r3, r6
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	2000      	movs	r0, #0
 80068e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ea:	462a      	mov	r2, r5
 80068ec:	f000 fa28 	bl	8006d40 <_realloc_r>
 80068f0:	4606      	mov	r6, r0
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d1e0      	bne.n	80068b8 <__ssputs_r+0x5c>
 80068f6:	6921      	ldr	r1, [r4, #16]
 80068f8:	4650      	mov	r0, sl
 80068fa:	f7ff fb35 	bl	8005f68 <_free_r>
 80068fe:	230c      	movs	r3, #12
 8006900:	f8ca 3000 	str.w	r3, [sl]
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	e7e9      	b.n	80068e6 <__ssputs_r+0x8a>
	...

08006914 <_svfiprintf_r>:
 8006914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006918:	4698      	mov	r8, r3
 800691a:	898b      	ldrh	r3, [r1, #12]
 800691c:	061b      	lsls	r3, r3, #24
 800691e:	b09d      	sub	sp, #116	@ 0x74
 8006920:	4607      	mov	r7, r0
 8006922:	460d      	mov	r5, r1
 8006924:	4614      	mov	r4, r2
 8006926:	d510      	bpl.n	800694a <_svfiprintf_r+0x36>
 8006928:	690b      	ldr	r3, [r1, #16]
 800692a:	b973      	cbnz	r3, 800694a <_svfiprintf_r+0x36>
 800692c:	2140      	movs	r1, #64	@ 0x40
 800692e:	f7ff fb8f 	bl	8006050 <_malloc_r>
 8006932:	6028      	str	r0, [r5, #0]
 8006934:	6128      	str	r0, [r5, #16]
 8006936:	b930      	cbnz	r0, 8006946 <_svfiprintf_r+0x32>
 8006938:	230c      	movs	r3, #12
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	b01d      	add	sp, #116	@ 0x74
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	2340      	movs	r3, #64	@ 0x40
 8006948:	616b      	str	r3, [r5, #20]
 800694a:	2300      	movs	r3, #0
 800694c:	9309      	str	r3, [sp, #36]	@ 0x24
 800694e:	2320      	movs	r3, #32
 8006950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006954:	f8cd 800c 	str.w	r8, [sp, #12]
 8006958:	2330      	movs	r3, #48	@ 0x30
 800695a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006af8 <_svfiprintf_r+0x1e4>
 800695e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006962:	f04f 0901 	mov.w	r9, #1
 8006966:	4623      	mov	r3, r4
 8006968:	469a      	mov	sl, r3
 800696a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800696e:	b10a      	cbz	r2, 8006974 <_svfiprintf_r+0x60>
 8006970:	2a25      	cmp	r2, #37	@ 0x25
 8006972:	d1f9      	bne.n	8006968 <_svfiprintf_r+0x54>
 8006974:	ebba 0b04 	subs.w	fp, sl, r4
 8006978:	d00b      	beq.n	8006992 <_svfiprintf_r+0x7e>
 800697a:	465b      	mov	r3, fp
 800697c:	4622      	mov	r2, r4
 800697e:	4629      	mov	r1, r5
 8006980:	4638      	mov	r0, r7
 8006982:	f7ff ff6b 	bl	800685c <__ssputs_r>
 8006986:	3001      	adds	r0, #1
 8006988:	f000 80a7 	beq.w	8006ada <_svfiprintf_r+0x1c6>
 800698c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800698e:	445a      	add	r2, fp
 8006990:	9209      	str	r2, [sp, #36]	@ 0x24
 8006992:	f89a 3000 	ldrb.w	r3, [sl]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 809f 	beq.w	8006ada <_svfiprintf_r+0x1c6>
 800699c:	2300      	movs	r3, #0
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a6:	f10a 0a01 	add.w	sl, sl, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	9307      	str	r3, [sp, #28]
 80069ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80069b4:	4654      	mov	r4, sl
 80069b6:	2205      	movs	r2, #5
 80069b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069bc:	484e      	ldr	r0, [pc, #312]	@ (8006af8 <_svfiprintf_r+0x1e4>)
 80069be:	f7f9 fc17 	bl	80001f0 <memchr>
 80069c2:	9a04      	ldr	r2, [sp, #16]
 80069c4:	b9d8      	cbnz	r0, 80069fe <_svfiprintf_r+0xea>
 80069c6:	06d0      	lsls	r0, r2, #27
 80069c8:	bf44      	itt	mi
 80069ca:	2320      	movmi	r3, #32
 80069cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069d0:	0711      	lsls	r1, r2, #28
 80069d2:	bf44      	itt	mi
 80069d4:	232b      	movmi	r3, #43	@ 0x2b
 80069d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069da:	f89a 3000 	ldrb.w	r3, [sl]
 80069de:	2b2a      	cmp	r3, #42	@ 0x2a
 80069e0:	d015      	beq.n	8006a0e <_svfiprintf_r+0xfa>
 80069e2:	9a07      	ldr	r2, [sp, #28]
 80069e4:	4654      	mov	r4, sl
 80069e6:	2000      	movs	r0, #0
 80069e8:	f04f 0c0a 	mov.w	ip, #10
 80069ec:	4621      	mov	r1, r4
 80069ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f2:	3b30      	subs	r3, #48	@ 0x30
 80069f4:	2b09      	cmp	r3, #9
 80069f6:	d94b      	bls.n	8006a90 <_svfiprintf_r+0x17c>
 80069f8:	b1b0      	cbz	r0, 8006a28 <_svfiprintf_r+0x114>
 80069fa:	9207      	str	r2, [sp, #28]
 80069fc:	e014      	b.n	8006a28 <_svfiprintf_r+0x114>
 80069fe:	eba0 0308 	sub.w	r3, r0, r8
 8006a02:	fa09 f303 	lsl.w	r3, r9, r3
 8006a06:	4313      	orrs	r3, r2
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	46a2      	mov	sl, r4
 8006a0c:	e7d2      	b.n	80069b4 <_svfiprintf_r+0xa0>
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	1d19      	adds	r1, r3, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	9103      	str	r1, [sp, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bfbb      	ittet	lt
 8006a1a:	425b      	neglt	r3, r3
 8006a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a20:	9307      	strge	r3, [sp, #28]
 8006a22:	9307      	strlt	r3, [sp, #28]
 8006a24:	bfb8      	it	lt
 8006a26:	9204      	strlt	r2, [sp, #16]
 8006a28:	7823      	ldrb	r3, [r4, #0]
 8006a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a2c:	d10a      	bne.n	8006a44 <_svfiprintf_r+0x130>
 8006a2e:	7863      	ldrb	r3, [r4, #1]
 8006a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a32:	d132      	bne.n	8006a9a <_svfiprintf_r+0x186>
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	1d1a      	adds	r2, r3, #4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	9203      	str	r2, [sp, #12]
 8006a3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a40:	3402      	adds	r4, #2
 8006a42:	9305      	str	r3, [sp, #20]
 8006a44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b08 <_svfiprintf_r+0x1f4>
 8006a48:	7821      	ldrb	r1, [r4, #0]
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	f7f9 fbcf 	bl	80001f0 <memchr>
 8006a52:	b138      	cbz	r0, 8006a64 <_svfiprintf_r+0x150>
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	eba0 000a 	sub.w	r0, r0, sl
 8006a5a:	2240      	movs	r2, #64	@ 0x40
 8006a5c:	4082      	lsls	r2, r0
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	3401      	adds	r4, #1
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a68:	4824      	ldr	r0, [pc, #144]	@ (8006afc <_svfiprintf_r+0x1e8>)
 8006a6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a6e:	2206      	movs	r2, #6
 8006a70:	f7f9 fbbe 	bl	80001f0 <memchr>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d036      	beq.n	8006ae6 <_svfiprintf_r+0x1d2>
 8006a78:	4b21      	ldr	r3, [pc, #132]	@ (8006b00 <_svfiprintf_r+0x1ec>)
 8006a7a:	bb1b      	cbnz	r3, 8006ac4 <_svfiprintf_r+0x1b0>
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	3307      	adds	r3, #7
 8006a80:	f023 0307 	bic.w	r3, r3, #7
 8006a84:	3308      	adds	r3, #8
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8a:	4433      	add	r3, r6
 8006a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a8e:	e76a      	b.n	8006966 <_svfiprintf_r+0x52>
 8006a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a94:	460c      	mov	r4, r1
 8006a96:	2001      	movs	r0, #1
 8006a98:	e7a8      	b.n	80069ec <_svfiprintf_r+0xd8>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	3401      	adds	r4, #1
 8006a9e:	9305      	str	r3, [sp, #20]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	f04f 0c0a 	mov.w	ip, #10
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aac:	3a30      	subs	r2, #48	@ 0x30
 8006aae:	2a09      	cmp	r2, #9
 8006ab0:	d903      	bls.n	8006aba <_svfiprintf_r+0x1a6>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0c6      	beq.n	8006a44 <_svfiprintf_r+0x130>
 8006ab6:	9105      	str	r1, [sp, #20]
 8006ab8:	e7c4      	b.n	8006a44 <_svfiprintf_r+0x130>
 8006aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006abe:	4604      	mov	r4, r0
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e7f0      	b.n	8006aa6 <_svfiprintf_r+0x192>
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4b0e      	ldr	r3, [pc, #56]	@ (8006b04 <_svfiprintf_r+0x1f0>)
 8006acc:	a904      	add	r1, sp, #16
 8006ace:	4638      	mov	r0, r7
 8006ad0:	f7fd fe72 	bl	80047b8 <_printf_float>
 8006ad4:	1c42      	adds	r2, r0, #1
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	d1d6      	bne.n	8006a88 <_svfiprintf_r+0x174>
 8006ada:	89ab      	ldrh	r3, [r5, #12]
 8006adc:	065b      	lsls	r3, r3, #25
 8006ade:	f53f af2d 	bmi.w	800693c <_svfiprintf_r+0x28>
 8006ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ae4:	e72c      	b.n	8006940 <_svfiprintf_r+0x2c>
 8006ae6:	ab03      	add	r3, sp, #12
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	462a      	mov	r2, r5
 8006aec:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <_svfiprintf_r+0x1f0>)
 8006aee:	a904      	add	r1, sp, #16
 8006af0:	4638      	mov	r0, r7
 8006af2:	f7fe f8f9 	bl	8004ce8 <_printf_i>
 8006af6:	e7ed      	b.n	8006ad4 <_svfiprintf_r+0x1c0>
 8006af8:	080074b6 	.word	0x080074b6
 8006afc:	080074c0 	.word	0x080074c0
 8006b00:	080047b9 	.word	0x080047b9
 8006b04:	0800685d 	.word	0x0800685d
 8006b08:	080074bc 	.word	0x080074bc

08006b0c <__sflush_r>:
 8006b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	0716      	lsls	r6, r2, #28
 8006b16:	4605      	mov	r5, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	d454      	bmi.n	8006bc6 <__sflush_r+0xba>
 8006b1c:	684b      	ldr	r3, [r1, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dc02      	bgt.n	8006b28 <__sflush_r+0x1c>
 8006b22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dd48      	ble.n	8006bba <__sflush_r+0xae>
 8006b28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	d045      	beq.n	8006bba <__sflush_r+0xae>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b34:	682f      	ldr	r7, [r5, #0]
 8006b36:	6a21      	ldr	r1, [r4, #32]
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	d030      	beq.n	8006b9e <__sflush_r+0x92>
 8006b3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	0759      	lsls	r1, r3, #29
 8006b42:	d505      	bpl.n	8006b50 <__sflush_r+0x44>
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b4a:	b10b      	cbz	r3, 8006b50 <__sflush_r+0x44>
 8006b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	2300      	movs	r3, #0
 8006b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b54:	6a21      	ldr	r1, [r4, #32]
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b0      	blx	r6
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	d106      	bne.n	8006b6e <__sflush_r+0x62>
 8006b60:	6829      	ldr	r1, [r5, #0]
 8006b62:	291d      	cmp	r1, #29
 8006b64:	d82b      	bhi.n	8006bbe <__sflush_r+0xb2>
 8006b66:	4a2a      	ldr	r2, [pc, #168]	@ (8006c10 <__sflush_r+0x104>)
 8006b68:	40ca      	lsrs	r2, r1
 8006b6a:	07d6      	lsls	r6, r2, #31
 8006b6c:	d527      	bpl.n	8006bbe <__sflush_r+0xb2>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	6062      	str	r2, [r4, #4]
 8006b72:	04d9      	lsls	r1, r3, #19
 8006b74:	6922      	ldr	r2, [r4, #16]
 8006b76:	6022      	str	r2, [r4, #0]
 8006b78:	d504      	bpl.n	8006b84 <__sflush_r+0x78>
 8006b7a:	1c42      	adds	r2, r0, #1
 8006b7c:	d101      	bne.n	8006b82 <__sflush_r+0x76>
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	b903      	cbnz	r3, 8006b84 <__sflush_r+0x78>
 8006b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b86:	602f      	str	r7, [r5, #0]
 8006b88:	b1b9      	cbz	r1, 8006bba <__sflush_r+0xae>
 8006b8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	d002      	beq.n	8006b98 <__sflush_r+0x8c>
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff f9e8 	bl	8005f68 <_free_r>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b9c:	e00d      	b.n	8006bba <__sflush_r+0xae>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b0      	blx	r6
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	1c50      	adds	r0, r2, #1
 8006ba8:	d1c9      	bne.n	8006b3e <__sflush_r+0x32>
 8006baa:	682b      	ldr	r3, [r5, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0c6      	beq.n	8006b3e <__sflush_r+0x32>
 8006bb0:	2b1d      	cmp	r3, #29
 8006bb2:	d001      	beq.n	8006bb8 <__sflush_r+0xac>
 8006bb4:	2b16      	cmp	r3, #22
 8006bb6:	d11e      	bne.n	8006bf6 <__sflush_r+0xea>
 8006bb8:	602f      	str	r7, [r5, #0]
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e022      	b.n	8006c04 <__sflush_r+0xf8>
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	e01b      	b.n	8006bfe <__sflush_r+0xf2>
 8006bc6:	690f      	ldr	r7, [r1, #16]
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	d0f6      	beq.n	8006bba <__sflush_r+0xae>
 8006bcc:	0793      	lsls	r3, r2, #30
 8006bce:	680e      	ldr	r6, [r1, #0]
 8006bd0:	bf08      	it	eq
 8006bd2:	694b      	ldreq	r3, [r1, #20]
 8006bd4:	600f      	str	r7, [r1, #0]
 8006bd6:	bf18      	it	ne
 8006bd8:	2300      	movne	r3, #0
 8006bda:	eba6 0807 	sub.w	r8, r6, r7
 8006bde:	608b      	str	r3, [r1, #8]
 8006be0:	f1b8 0f00 	cmp.w	r8, #0
 8006be4:	dde9      	ble.n	8006bba <__sflush_r+0xae>
 8006be6:	6a21      	ldr	r1, [r4, #32]
 8006be8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bea:	4643      	mov	r3, r8
 8006bec:	463a      	mov	r2, r7
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b0      	blx	r6
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	dc08      	bgt.n	8006c08 <__sflush_r+0xfc>
 8006bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c08:	4407      	add	r7, r0
 8006c0a:	eba8 0800 	sub.w	r8, r8, r0
 8006c0e:	e7e7      	b.n	8006be0 <__sflush_r+0xd4>
 8006c10:	20400001 	.word	0x20400001

08006c14 <_fflush_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	690b      	ldr	r3, [r1, #16]
 8006c18:	4605      	mov	r5, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	b913      	cbnz	r3, 8006c24 <_fflush_r+0x10>
 8006c1e:	2500      	movs	r5, #0
 8006c20:	4628      	mov	r0, r5
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	b118      	cbz	r0, 8006c2e <_fflush_r+0x1a>
 8006c26:	6a03      	ldr	r3, [r0, #32]
 8006c28:	b90b      	cbnz	r3, 8006c2e <_fflush_r+0x1a>
 8006c2a:	f7fe fa07 	bl	800503c <__sinit>
 8006c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f3      	beq.n	8006c1e <_fflush_r+0xa>
 8006c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c38:	07d0      	lsls	r0, r2, #31
 8006c3a:	d404      	bmi.n	8006c46 <_fflush_r+0x32>
 8006c3c:	0599      	lsls	r1, r3, #22
 8006c3e:	d402      	bmi.n	8006c46 <_fflush_r+0x32>
 8006c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c42:	f7fe fb28 	bl	8005296 <__retarget_lock_acquire_recursive>
 8006c46:	4628      	mov	r0, r5
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f7ff ff5f 	bl	8006b0c <__sflush_r>
 8006c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c50:	07da      	lsls	r2, r3, #31
 8006c52:	4605      	mov	r5, r0
 8006c54:	d4e4      	bmi.n	8006c20 <_fflush_r+0xc>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	059b      	lsls	r3, r3, #22
 8006c5a:	d4e1      	bmi.n	8006c20 <_fflush_r+0xc>
 8006c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c5e:	f7fe fb1b 	bl	8005298 <__retarget_lock_release_recursive>
 8006c62:	e7dd      	b.n	8006c20 <_fflush_r+0xc>

08006c64 <memmove>:
 8006c64:	4288      	cmp	r0, r1
 8006c66:	b510      	push	{r4, lr}
 8006c68:	eb01 0402 	add.w	r4, r1, r2
 8006c6c:	d902      	bls.n	8006c74 <memmove+0x10>
 8006c6e:	4284      	cmp	r4, r0
 8006c70:	4623      	mov	r3, r4
 8006c72:	d807      	bhi.n	8006c84 <memmove+0x20>
 8006c74:	1e43      	subs	r3, r0, #1
 8006c76:	42a1      	cmp	r1, r4
 8006c78:	d008      	beq.n	8006c8c <memmove+0x28>
 8006c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c82:	e7f8      	b.n	8006c76 <memmove+0x12>
 8006c84:	4402      	add	r2, r0
 8006c86:	4601      	mov	r1, r0
 8006c88:	428a      	cmp	r2, r1
 8006c8a:	d100      	bne.n	8006c8e <memmove+0x2a>
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c96:	e7f7      	b.n	8006c88 <memmove+0x24>

08006c98 <_sbrk_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d06      	ldr	r5, [pc, #24]	@ (8006cb4 <_sbrk_r+0x1c>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	f7fb ffa6 	bl	8002bf4 <_sbrk>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_sbrk_r+0x1a>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_sbrk_r+0x1a>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	200003a4 	.word	0x200003a4

08006cb8 <__assert_func>:
 8006cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cba:	4614      	mov	r4, r2
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <__assert_func+0x2c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	68d8      	ldr	r0, [r3, #12]
 8006cc6:	b14c      	cbz	r4, 8006cdc <__assert_func+0x24>
 8006cc8:	4b07      	ldr	r3, [pc, #28]	@ (8006ce8 <__assert_func+0x30>)
 8006cca:	9100      	str	r1, [sp, #0]
 8006ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cd0:	4906      	ldr	r1, [pc, #24]	@ (8006cec <__assert_func+0x34>)
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	f000 f870 	bl	8006db8 <fiprintf>
 8006cd8:	f000 f880 	bl	8006ddc <abort>
 8006cdc:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <__assert_func+0x38>)
 8006cde:	461c      	mov	r4, r3
 8006ce0:	e7f3      	b.n	8006cca <__assert_func+0x12>
 8006ce2:	bf00      	nop
 8006ce4:	20000030 	.word	0x20000030
 8006ce8:	080074d1 	.word	0x080074d1
 8006cec:	080074de 	.word	0x080074de
 8006cf0:	0800750c 	.word	0x0800750c

08006cf4 <_calloc_r>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	fba1 5402 	umull	r5, r4, r1, r2
 8006cfa:	b934      	cbnz	r4, 8006d0a <_calloc_r+0x16>
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	f7ff f9a7 	bl	8006050 <_malloc_r>
 8006d02:	4606      	mov	r6, r0
 8006d04:	b928      	cbnz	r0, 8006d12 <_calloc_r+0x1e>
 8006d06:	4630      	mov	r0, r6
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
 8006d0a:	220c      	movs	r2, #12
 8006d0c:	6002      	str	r2, [r0, #0]
 8006d0e:	2600      	movs	r6, #0
 8006d10:	e7f9      	b.n	8006d06 <_calloc_r+0x12>
 8006d12:	462a      	mov	r2, r5
 8006d14:	4621      	mov	r1, r4
 8006d16:	f7fe fa40 	bl	800519a <memset>
 8006d1a:	e7f4      	b.n	8006d06 <_calloc_r+0x12>

08006d1c <__ascii_mbtowc>:
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	b901      	cbnz	r1, 8006d22 <__ascii_mbtowc+0x6>
 8006d20:	a901      	add	r1, sp, #4
 8006d22:	b142      	cbz	r2, 8006d36 <__ascii_mbtowc+0x1a>
 8006d24:	b14b      	cbz	r3, 8006d3a <__ascii_mbtowc+0x1e>
 8006d26:	7813      	ldrb	r3, [r2, #0]
 8006d28:	600b      	str	r3, [r1, #0]
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	1e10      	subs	r0, r2, #0
 8006d2e:	bf18      	it	ne
 8006d30:	2001      	movne	r0, #1
 8006d32:	b002      	add	sp, #8
 8006d34:	4770      	bx	lr
 8006d36:	4610      	mov	r0, r2
 8006d38:	e7fb      	b.n	8006d32 <__ascii_mbtowc+0x16>
 8006d3a:	f06f 0001 	mvn.w	r0, #1
 8006d3e:	e7f8      	b.n	8006d32 <__ascii_mbtowc+0x16>

08006d40 <_realloc_r>:
 8006d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d44:	4607      	mov	r7, r0
 8006d46:	4614      	mov	r4, r2
 8006d48:	460d      	mov	r5, r1
 8006d4a:	b921      	cbnz	r1, 8006d56 <_realloc_r+0x16>
 8006d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d50:	4611      	mov	r1, r2
 8006d52:	f7ff b97d 	b.w	8006050 <_malloc_r>
 8006d56:	b92a      	cbnz	r2, 8006d64 <_realloc_r+0x24>
 8006d58:	f7ff f906 	bl	8005f68 <_free_r>
 8006d5c:	4625      	mov	r5, r4
 8006d5e:	4628      	mov	r0, r5
 8006d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d64:	f000 f841 	bl	8006dea <_malloc_usable_size_r>
 8006d68:	4284      	cmp	r4, r0
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	d802      	bhi.n	8006d74 <_realloc_r+0x34>
 8006d6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d72:	d8f4      	bhi.n	8006d5e <_realloc_r+0x1e>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff f96a 	bl	8006050 <_malloc_r>
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	b908      	cbnz	r0, 8006d84 <_realloc_r+0x44>
 8006d80:	4645      	mov	r5, r8
 8006d82:	e7ec      	b.n	8006d5e <_realloc_r+0x1e>
 8006d84:	42b4      	cmp	r4, r6
 8006d86:	4622      	mov	r2, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	bf28      	it	cs
 8006d8c:	4632      	movcs	r2, r6
 8006d8e:	f7fe fa84 	bl	800529a <memcpy>
 8006d92:	4629      	mov	r1, r5
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff f8e7 	bl	8005f68 <_free_r>
 8006d9a:	e7f1      	b.n	8006d80 <_realloc_r+0x40>

08006d9c <__ascii_wctomb>:
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4608      	mov	r0, r1
 8006da0:	b141      	cbz	r1, 8006db4 <__ascii_wctomb+0x18>
 8006da2:	2aff      	cmp	r2, #255	@ 0xff
 8006da4:	d904      	bls.n	8006db0 <__ascii_wctomb+0x14>
 8006da6:	228a      	movs	r2, #138	@ 0x8a
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	4770      	bx	lr
 8006db0:	700a      	strb	r2, [r1, #0]
 8006db2:	2001      	movs	r0, #1
 8006db4:	4770      	bx	lr
	...

08006db8 <fiprintf>:
 8006db8:	b40e      	push	{r1, r2, r3}
 8006dba:	b503      	push	{r0, r1, lr}
 8006dbc:	4601      	mov	r1, r0
 8006dbe:	ab03      	add	r3, sp, #12
 8006dc0:	4805      	ldr	r0, [pc, #20]	@ (8006dd8 <fiprintf+0x20>)
 8006dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc6:	6800      	ldr	r0, [r0, #0]
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	f000 f83f 	bl	8006e4c <_vfiprintf_r>
 8006dce:	b002      	add	sp, #8
 8006dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd4:	b003      	add	sp, #12
 8006dd6:	4770      	bx	lr
 8006dd8:	20000030 	.word	0x20000030

08006ddc <abort>:
 8006ddc:	b508      	push	{r3, lr}
 8006dde:	2006      	movs	r0, #6
 8006de0:	f000 fa08 	bl	80071f4 <raise>
 8006de4:	2001      	movs	r0, #1
 8006de6:	f7fb fe8c 	bl	8002b02 <_exit>

08006dea <_malloc_usable_size_r>:
 8006dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dee:	1f18      	subs	r0, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bfbc      	itt	lt
 8006df4:	580b      	ldrlt	r3, [r1, r0]
 8006df6:	18c0      	addlt	r0, r0, r3
 8006df8:	4770      	bx	lr

08006dfa <__sfputc_r>:
 8006dfa:	6893      	ldr	r3, [r2, #8]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	b410      	push	{r4}
 8006e02:	6093      	str	r3, [r2, #8]
 8006e04:	da08      	bge.n	8006e18 <__sfputc_r+0x1e>
 8006e06:	6994      	ldr	r4, [r2, #24]
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	db01      	blt.n	8006e10 <__sfputc_r+0x16>
 8006e0c:	290a      	cmp	r1, #10
 8006e0e:	d103      	bne.n	8006e18 <__sfputc_r+0x1e>
 8006e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e14:	f000 b932 	b.w	800707c <__swbuf_r>
 8006e18:	6813      	ldr	r3, [r2, #0]
 8006e1a:	1c58      	adds	r0, r3, #1
 8006e1c:	6010      	str	r0, [r2, #0]
 8006e1e:	7019      	strb	r1, [r3, #0]
 8006e20:	4608      	mov	r0, r1
 8006e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <__sfputs_r>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	4614      	mov	r4, r2
 8006e30:	18d5      	adds	r5, r2, r3
 8006e32:	42ac      	cmp	r4, r5
 8006e34:	d101      	bne.n	8006e3a <__sfputs_r+0x12>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e007      	b.n	8006e4a <__sfputs_r+0x22>
 8006e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e3e:	463a      	mov	r2, r7
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff ffda 	bl	8006dfa <__sfputc_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d1f3      	bne.n	8006e32 <__sfputs_r+0xa>
 8006e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e4c <_vfiprintf_r>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	460d      	mov	r5, r1
 8006e52:	b09d      	sub	sp, #116	@ 0x74
 8006e54:	4614      	mov	r4, r2
 8006e56:	4698      	mov	r8, r3
 8006e58:	4606      	mov	r6, r0
 8006e5a:	b118      	cbz	r0, 8006e64 <_vfiprintf_r+0x18>
 8006e5c:	6a03      	ldr	r3, [r0, #32]
 8006e5e:	b90b      	cbnz	r3, 8006e64 <_vfiprintf_r+0x18>
 8006e60:	f7fe f8ec 	bl	800503c <__sinit>
 8006e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e66:	07d9      	lsls	r1, r3, #31
 8006e68:	d405      	bmi.n	8006e76 <_vfiprintf_r+0x2a>
 8006e6a:	89ab      	ldrh	r3, [r5, #12]
 8006e6c:	059a      	lsls	r2, r3, #22
 8006e6e:	d402      	bmi.n	8006e76 <_vfiprintf_r+0x2a>
 8006e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e72:	f7fe fa10 	bl	8005296 <__retarget_lock_acquire_recursive>
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	071b      	lsls	r3, r3, #28
 8006e7a:	d501      	bpl.n	8006e80 <_vfiprintf_r+0x34>
 8006e7c:	692b      	ldr	r3, [r5, #16]
 8006e7e:	b99b      	cbnz	r3, 8006ea8 <_vfiprintf_r+0x5c>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 f938 	bl	80070f8 <__swsetup_r>
 8006e88:	b170      	cbz	r0, 8006ea8 <_vfiprintf_r+0x5c>
 8006e8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e8c:	07dc      	lsls	r4, r3, #31
 8006e8e:	d504      	bpl.n	8006e9a <_vfiprintf_r+0x4e>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	b01d      	add	sp, #116	@ 0x74
 8006e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	0598      	lsls	r0, r3, #22
 8006e9e:	d4f7      	bmi.n	8006e90 <_vfiprintf_r+0x44>
 8006ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ea2:	f7fe f9f9 	bl	8005298 <__retarget_lock_release_recursive>
 8006ea6:	e7f3      	b.n	8006e90 <_vfiprintf_r+0x44>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eac:	2320      	movs	r3, #32
 8006eae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb6:	2330      	movs	r3, #48	@ 0x30
 8006eb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007068 <_vfiprintf_r+0x21c>
 8006ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ec0:	f04f 0901 	mov.w	r9, #1
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	469a      	mov	sl, r3
 8006ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ecc:	b10a      	cbz	r2, 8006ed2 <_vfiprintf_r+0x86>
 8006ece:	2a25      	cmp	r2, #37	@ 0x25
 8006ed0:	d1f9      	bne.n	8006ec6 <_vfiprintf_r+0x7a>
 8006ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed6:	d00b      	beq.n	8006ef0 <_vfiprintf_r+0xa4>
 8006ed8:	465b      	mov	r3, fp
 8006eda:	4622      	mov	r2, r4
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7ff ffa2 	bl	8006e28 <__sfputs_r>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f000 80a7 	beq.w	8007038 <_vfiprintf_r+0x1ec>
 8006eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eec:	445a      	add	r2, fp
 8006eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 809f 	beq.w	8007038 <_vfiprintf_r+0x1ec>
 8006efa:	2300      	movs	r3, #0
 8006efc:	f04f 32ff 	mov.w	r2, #4294967295
 8006f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f04:	f10a 0a01 	add.w	sl, sl, #1
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	9307      	str	r3, [sp, #28]
 8006f0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f10:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f12:	4654      	mov	r4, sl
 8006f14:	2205      	movs	r2, #5
 8006f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1a:	4853      	ldr	r0, [pc, #332]	@ (8007068 <_vfiprintf_r+0x21c>)
 8006f1c:	f7f9 f968 	bl	80001f0 <memchr>
 8006f20:	9a04      	ldr	r2, [sp, #16]
 8006f22:	b9d8      	cbnz	r0, 8006f5c <_vfiprintf_r+0x110>
 8006f24:	06d1      	lsls	r1, r2, #27
 8006f26:	bf44      	itt	mi
 8006f28:	2320      	movmi	r3, #32
 8006f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f2e:	0713      	lsls	r3, r2, #28
 8006f30:	bf44      	itt	mi
 8006f32:	232b      	movmi	r3, #43	@ 0x2b
 8006f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f38:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f3e:	d015      	beq.n	8006f6c <_vfiprintf_r+0x120>
 8006f40:	9a07      	ldr	r2, [sp, #28]
 8006f42:	4654      	mov	r4, sl
 8006f44:	2000      	movs	r0, #0
 8006f46:	f04f 0c0a 	mov.w	ip, #10
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f50:	3b30      	subs	r3, #48	@ 0x30
 8006f52:	2b09      	cmp	r3, #9
 8006f54:	d94b      	bls.n	8006fee <_vfiprintf_r+0x1a2>
 8006f56:	b1b0      	cbz	r0, 8006f86 <_vfiprintf_r+0x13a>
 8006f58:	9207      	str	r2, [sp, #28]
 8006f5a:	e014      	b.n	8006f86 <_vfiprintf_r+0x13a>
 8006f5c:	eba0 0308 	sub.w	r3, r0, r8
 8006f60:	fa09 f303 	lsl.w	r3, r9, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	46a2      	mov	sl, r4
 8006f6a:	e7d2      	b.n	8006f12 <_vfiprintf_r+0xc6>
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	1d19      	adds	r1, r3, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	9103      	str	r1, [sp, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bfbb      	ittet	lt
 8006f78:	425b      	neglt	r3, r3
 8006f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f7e:	9307      	strge	r3, [sp, #28]
 8006f80:	9307      	strlt	r3, [sp, #28]
 8006f82:	bfb8      	it	lt
 8006f84:	9204      	strlt	r2, [sp, #16]
 8006f86:	7823      	ldrb	r3, [r4, #0]
 8006f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f8a:	d10a      	bne.n	8006fa2 <_vfiprintf_r+0x156>
 8006f8c:	7863      	ldrb	r3, [r4, #1]
 8006f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f90:	d132      	bne.n	8006ff8 <_vfiprintf_r+0x1ac>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	1d1a      	adds	r2, r3, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	9203      	str	r2, [sp, #12]
 8006f9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f9e:	3402      	adds	r4, #2
 8006fa0:	9305      	str	r3, [sp, #20]
 8006fa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007078 <_vfiprintf_r+0x22c>
 8006fa6:	7821      	ldrb	r1, [r4, #0]
 8006fa8:	2203      	movs	r2, #3
 8006faa:	4650      	mov	r0, sl
 8006fac:	f7f9 f920 	bl	80001f0 <memchr>
 8006fb0:	b138      	cbz	r0, 8006fc2 <_vfiprintf_r+0x176>
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	eba0 000a 	sub.w	r0, r0, sl
 8006fb8:	2240      	movs	r2, #64	@ 0x40
 8006fba:	4082      	lsls	r2, r0
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc6:	4829      	ldr	r0, [pc, #164]	@ (800706c <_vfiprintf_r+0x220>)
 8006fc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fcc:	2206      	movs	r2, #6
 8006fce:	f7f9 f90f 	bl	80001f0 <memchr>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d03f      	beq.n	8007056 <_vfiprintf_r+0x20a>
 8006fd6:	4b26      	ldr	r3, [pc, #152]	@ (8007070 <_vfiprintf_r+0x224>)
 8006fd8:	bb1b      	cbnz	r3, 8007022 <_vfiprintf_r+0x1d6>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	3307      	adds	r3, #7
 8006fde:	f023 0307 	bic.w	r3, r3, #7
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	9303      	str	r3, [sp, #12]
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	443b      	add	r3, r7
 8006fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fec:	e76a      	b.n	8006ec4 <_vfiprintf_r+0x78>
 8006fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	e7a8      	b.n	8006f4a <_vfiprintf_r+0xfe>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	3401      	adds	r4, #1
 8006ffc:	9305      	str	r3, [sp, #20]
 8006ffe:	4619      	mov	r1, r3
 8007000:	f04f 0c0a 	mov.w	ip, #10
 8007004:	4620      	mov	r0, r4
 8007006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700a:	3a30      	subs	r2, #48	@ 0x30
 800700c:	2a09      	cmp	r2, #9
 800700e:	d903      	bls.n	8007018 <_vfiprintf_r+0x1cc>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0c6      	beq.n	8006fa2 <_vfiprintf_r+0x156>
 8007014:	9105      	str	r1, [sp, #20]
 8007016:	e7c4      	b.n	8006fa2 <_vfiprintf_r+0x156>
 8007018:	fb0c 2101 	mla	r1, ip, r1, r2
 800701c:	4604      	mov	r4, r0
 800701e:	2301      	movs	r3, #1
 8007020:	e7f0      	b.n	8007004 <_vfiprintf_r+0x1b8>
 8007022:	ab03      	add	r3, sp, #12
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	462a      	mov	r2, r5
 8007028:	4b12      	ldr	r3, [pc, #72]	@ (8007074 <_vfiprintf_r+0x228>)
 800702a:	a904      	add	r1, sp, #16
 800702c:	4630      	mov	r0, r6
 800702e:	f7fd fbc3 	bl	80047b8 <_printf_float>
 8007032:	4607      	mov	r7, r0
 8007034:	1c78      	adds	r0, r7, #1
 8007036:	d1d6      	bne.n	8006fe6 <_vfiprintf_r+0x19a>
 8007038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800703a:	07d9      	lsls	r1, r3, #31
 800703c:	d405      	bmi.n	800704a <_vfiprintf_r+0x1fe>
 800703e:	89ab      	ldrh	r3, [r5, #12]
 8007040:	059a      	lsls	r2, r3, #22
 8007042:	d402      	bmi.n	800704a <_vfiprintf_r+0x1fe>
 8007044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007046:	f7fe f927 	bl	8005298 <__retarget_lock_release_recursive>
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	065b      	lsls	r3, r3, #25
 800704e:	f53f af1f 	bmi.w	8006e90 <_vfiprintf_r+0x44>
 8007052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007054:	e71e      	b.n	8006e94 <_vfiprintf_r+0x48>
 8007056:	ab03      	add	r3, sp, #12
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	462a      	mov	r2, r5
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <_vfiprintf_r+0x228>)
 800705e:	a904      	add	r1, sp, #16
 8007060:	4630      	mov	r0, r6
 8007062:	f7fd fe41 	bl	8004ce8 <_printf_i>
 8007066:	e7e4      	b.n	8007032 <_vfiprintf_r+0x1e6>
 8007068:	080074b6 	.word	0x080074b6
 800706c:	080074c0 	.word	0x080074c0
 8007070:	080047b9 	.word	0x080047b9
 8007074:	08006e29 	.word	0x08006e29
 8007078:	080074bc 	.word	0x080074bc

0800707c <__swbuf_r>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	460e      	mov	r6, r1
 8007080:	4614      	mov	r4, r2
 8007082:	4605      	mov	r5, r0
 8007084:	b118      	cbz	r0, 800708e <__swbuf_r+0x12>
 8007086:	6a03      	ldr	r3, [r0, #32]
 8007088:	b90b      	cbnz	r3, 800708e <__swbuf_r+0x12>
 800708a:	f7fd ffd7 	bl	800503c <__sinit>
 800708e:	69a3      	ldr	r3, [r4, #24]
 8007090:	60a3      	str	r3, [r4, #8]
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	071a      	lsls	r2, r3, #28
 8007096:	d501      	bpl.n	800709c <__swbuf_r+0x20>
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	b943      	cbnz	r3, 80070ae <__swbuf_r+0x32>
 800709c:	4621      	mov	r1, r4
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 f82a 	bl	80070f8 <__swsetup_r>
 80070a4:	b118      	cbz	r0, 80070ae <__swbuf_r+0x32>
 80070a6:	f04f 37ff 	mov.w	r7, #4294967295
 80070aa:	4638      	mov	r0, r7
 80070ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	6922      	ldr	r2, [r4, #16]
 80070b2:	1a98      	subs	r0, r3, r2
 80070b4:	6963      	ldr	r3, [r4, #20]
 80070b6:	b2f6      	uxtb	r6, r6
 80070b8:	4283      	cmp	r3, r0
 80070ba:	4637      	mov	r7, r6
 80070bc:	dc05      	bgt.n	80070ca <__swbuf_r+0x4e>
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f7ff fda7 	bl	8006c14 <_fflush_r>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d1ed      	bne.n	80070a6 <__swbuf_r+0x2a>
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	60a3      	str	r3, [r4, #8]
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	6022      	str	r2, [r4, #0]
 80070d6:	701e      	strb	r6, [r3, #0]
 80070d8:	6962      	ldr	r2, [r4, #20]
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	429a      	cmp	r2, r3
 80070de:	d004      	beq.n	80070ea <__swbuf_r+0x6e>
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	d5e1      	bpl.n	80070aa <__swbuf_r+0x2e>
 80070e6:	2e0a      	cmp	r6, #10
 80070e8:	d1df      	bne.n	80070aa <__swbuf_r+0x2e>
 80070ea:	4621      	mov	r1, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	f7ff fd91 	bl	8006c14 <_fflush_r>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d0d9      	beq.n	80070aa <__swbuf_r+0x2e>
 80070f6:	e7d6      	b.n	80070a6 <__swbuf_r+0x2a>

080070f8 <__swsetup_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4b29      	ldr	r3, [pc, #164]	@ (80071a0 <__swsetup_r+0xa8>)
 80070fc:	4605      	mov	r5, r0
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	460c      	mov	r4, r1
 8007102:	b118      	cbz	r0, 800710c <__swsetup_r+0x14>
 8007104:	6a03      	ldr	r3, [r0, #32]
 8007106:	b90b      	cbnz	r3, 800710c <__swsetup_r+0x14>
 8007108:	f7fd ff98 	bl	800503c <__sinit>
 800710c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007110:	0719      	lsls	r1, r3, #28
 8007112:	d422      	bmi.n	800715a <__swsetup_r+0x62>
 8007114:	06da      	lsls	r2, r3, #27
 8007116:	d407      	bmi.n	8007128 <__swsetup_r+0x30>
 8007118:	2209      	movs	r2, #9
 800711a:	602a      	str	r2, [r5, #0]
 800711c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	e033      	b.n	8007190 <__swsetup_r+0x98>
 8007128:	0758      	lsls	r0, r3, #29
 800712a:	d512      	bpl.n	8007152 <__swsetup_r+0x5a>
 800712c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800712e:	b141      	cbz	r1, 8007142 <__swsetup_r+0x4a>
 8007130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007134:	4299      	cmp	r1, r3
 8007136:	d002      	beq.n	800713e <__swsetup_r+0x46>
 8007138:	4628      	mov	r0, r5
 800713a:	f7fe ff15 	bl	8005f68 <_free_r>
 800713e:	2300      	movs	r3, #0
 8007140:	6363      	str	r3, [r4, #52]	@ 0x34
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	2300      	movs	r3, #0
 800714c:	6063      	str	r3, [r4, #4]
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f043 0308 	orr.w	r3, r3, #8
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	b94b      	cbnz	r3, 8007172 <__swsetup_r+0x7a>
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007168:	d003      	beq.n	8007172 <__swsetup_r+0x7a>
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 f883 	bl	8007278 <__smakebuf_r>
 8007172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007176:	f013 0201 	ands.w	r2, r3, #1
 800717a:	d00a      	beq.n	8007192 <__swsetup_r+0x9a>
 800717c:	2200      	movs	r2, #0
 800717e:	60a2      	str	r2, [r4, #8]
 8007180:	6962      	ldr	r2, [r4, #20]
 8007182:	4252      	negs	r2, r2
 8007184:	61a2      	str	r2, [r4, #24]
 8007186:	6922      	ldr	r2, [r4, #16]
 8007188:	b942      	cbnz	r2, 800719c <__swsetup_r+0xa4>
 800718a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800718e:	d1c5      	bne.n	800711c <__swsetup_r+0x24>
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	0799      	lsls	r1, r3, #30
 8007194:	bf58      	it	pl
 8007196:	6962      	ldrpl	r2, [r4, #20]
 8007198:	60a2      	str	r2, [r4, #8]
 800719a:	e7f4      	b.n	8007186 <__swsetup_r+0x8e>
 800719c:	2000      	movs	r0, #0
 800719e:	e7f7      	b.n	8007190 <__swsetup_r+0x98>
 80071a0:	20000030 	.word	0x20000030

080071a4 <_raise_r>:
 80071a4:	291f      	cmp	r1, #31
 80071a6:	b538      	push	{r3, r4, r5, lr}
 80071a8:	4605      	mov	r5, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	d904      	bls.n	80071b8 <_raise_r+0x14>
 80071ae:	2316      	movs	r3, #22
 80071b0:	6003      	str	r3, [r0, #0]
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071ba:	b112      	cbz	r2, 80071c2 <_raise_r+0x1e>
 80071bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071c0:	b94b      	cbnz	r3, 80071d6 <_raise_r+0x32>
 80071c2:	4628      	mov	r0, r5
 80071c4:	f000 f830 	bl	8007228 <_getpid_r>
 80071c8:	4622      	mov	r2, r4
 80071ca:	4601      	mov	r1, r0
 80071cc:	4628      	mov	r0, r5
 80071ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071d2:	f000 b817 	b.w	8007204 <_kill_r>
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d00a      	beq.n	80071f0 <_raise_r+0x4c>
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	d103      	bne.n	80071e6 <_raise_r+0x42>
 80071de:	2316      	movs	r3, #22
 80071e0:	6003      	str	r3, [r0, #0]
 80071e2:	2001      	movs	r0, #1
 80071e4:	e7e7      	b.n	80071b6 <_raise_r+0x12>
 80071e6:	2100      	movs	r1, #0
 80071e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071ec:	4620      	mov	r0, r4
 80071ee:	4798      	blx	r3
 80071f0:	2000      	movs	r0, #0
 80071f2:	e7e0      	b.n	80071b6 <_raise_r+0x12>

080071f4 <raise>:
 80071f4:	4b02      	ldr	r3, [pc, #8]	@ (8007200 <raise+0xc>)
 80071f6:	4601      	mov	r1, r0
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f7ff bfd3 	b.w	80071a4 <_raise_r>
 80071fe:	bf00      	nop
 8007200:	20000030 	.word	0x20000030

08007204 <_kill_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d07      	ldr	r5, [pc, #28]	@ (8007224 <_kill_r+0x20>)
 8007208:	2300      	movs	r3, #0
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	f7fb fc66 	bl	8002ae2 <_kill>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d102      	bne.n	8007220 <_kill_r+0x1c>
 800721a:	682b      	ldr	r3, [r5, #0]
 800721c:	b103      	cbz	r3, 8007220 <_kill_r+0x1c>
 800721e:	6023      	str	r3, [r4, #0]
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	bf00      	nop
 8007224:	200003a4 	.word	0x200003a4

08007228 <_getpid_r>:
 8007228:	f7fb bc53 	b.w	8002ad2 <_getpid>

0800722c <__swhatbuf_r>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	460c      	mov	r4, r1
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	2900      	cmp	r1, #0
 8007236:	b096      	sub	sp, #88	@ 0x58
 8007238:	4615      	mov	r5, r2
 800723a:	461e      	mov	r6, r3
 800723c:	da0d      	bge.n	800725a <__swhatbuf_r+0x2e>
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007244:	f04f 0100 	mov.w	r1, #0
 8007248:	bf14      	ite	ne
 800724a:	2340      	movne	r3, #64	@ 0x40
 800724c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007250:	2000      	movs	r0, #0
 8007252:	6031      	str	r1, [r6, #0]
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	b016      	add	sp, #88	@ 0x58
 8007258:	bd70      	pop	{r4, r5, r6, pc}
 800725a:	466a      	mov	r2, sp
 800725c:	f000 f848 	bl	80072f0 <_fstat_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	dbec      	blt.n	800723e <__swhatbuf_r+0x12>
 8007264:	9901      	ldr	r1, [sp, #4]
 8007266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800726a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800726e:	4259      	negs	r1, r3
 8007270:	4159      	adcs	r1, r3
 8007272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007276:	e7eb      	b.n	8007250 <__swhatbuf_r+0x24>

08007278 <__smakebuf_r>:
 8007278:	898b      	ldrh	r3, [r1, #12]
 800727a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727c:	079d      	lsls	r5, r3, #30
 800727e:	4606      	mov	r6, r0
 8007280:	460c      	mov	r4, r1
 8007282:	d507      	bpl.n	8007294 <__smakebuf_r+0x1c>
 8007284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	2301      	movs	r3, #1
 800728e:	6163      	str	r3, [r4, #20]
 8007290:	b003      	add	sp, #12
 8007292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007294:	ab01      	add	r3, sp, #4
 8007296:	466a      	mov	r2, sp
 8007298:	f7ff ffc8 	bl	800722c <__swhatbuf_r>
 800729c:	9f00      	ldr	r7, [sp, #0]
 800729e:	4605      	mov	r5, r0
 80072a0:	4639      	mov	r1, r7
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7fe fed4 	bl	8006050 <_malloc_r>
 80072a8:	b948      	cbnz	r0, 80072be <__smakebuf_r+0x46>
 80072aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ae:	059a      	lsls	r2, r3, #22
 80072b0:	d4ee      	bmi.n	8007290 <__smakebuf_r+0x18>
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	f043 0302 	orr.w	r3, r3, #2
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	e7e2      	b.n	8007284 <__smakebuf_r+0xc>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	6020      	str	r0, [r4, #0]
 80072c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072ce:	b15b      	cbz	r3, 80072e8 <__smakebuf_r+0x70>
 80072d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f81d 	bl	8007314 <_isatty_r>
 80072da:	b128      	cbz	r0, 80072e8 <__smakebuf_r+0x70>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	81a3      	strh	r3, [r4, #12]
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	431d      	orrs	r5, r3
 80072ec:	81a5      	strh	r5, [r4, #12]
 80072ee:	e7cf      	b.n	8007290 <__smakebuf_r+0x18>

080072f0 <_fstat_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4d07      	ldr	r5, [pc, #28]	@ (8007310 <_fstat_r+0x20>)
 80072f4:	2300      	movs	r3, #0
 80072f6:	4604      	mov	r4, r0
 80072f8:	4608      	mov	r0, r1
 80072fa:	4611      	mov	r1, r2
 80072fc:	602b      	str	r3, [r5, #0]
 80072fe:	f7fb fc50 	bl	8002ba2 <_fstat>
 8007302:	1c43      	adds	r3, r0, #1
 8007304:	d102      	bne.n	800730c <_fstat_r+0x1c>
 8007306:	682b      	ldr	r3, [r5, #0]
 8007308:	b103      	cbz	r3, 800730c <_fstat_r+0x1c>
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	bd38      	pop	{r3, r4, r5, pc}
 800730e:	bf00      	nop
 8007310:	200003a4 	.word	0x200003a4

08007314 <_isatty_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4d06      	ldr	r5, [pc, #24]	@ (8007330 <_isatty_r+0x1c>)
 8007318:	2300      	movs	r3, #0
 800731a:	4604      	mov	r4, r0
 800731c:	4608      	mov	r0, r1
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	f7fb fc4f 	bl	8002bc2 <_isatty>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_isatty_r+0x1a>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_isatty_r+0x1a>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	200003a4 	.word	0x200003a4

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
