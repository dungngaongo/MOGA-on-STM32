
SchafferN.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fec  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  080081a0  080081a0  000091a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008610  08008610  0000a1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008610  08008610  00009610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008618  08008618  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008618  08008618  00009618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800861c  0800861c  0000961c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08008620  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1ec  2**0
                  CONTENTS
 10 .bss          000001b8  200001ec  200001ec  0000a1ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  0000a1ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093c3  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a1d  00000000  00000000  000135df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00015000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  000157e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dbf  00000000  00000000  00015de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f24  00000000  00000000  00039ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d487c  00000000  00000000  00043acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118347  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000339c  00000000  00000000  0011838c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0011b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008184 	.word	0x08008184

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08008184 	.word	0x08008184

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <rand01>:
float crossover_prob = 0.6;
float mutation_prob = 0.05;
int rate_local_search = 30;
float step_size = 0.02;

float rand01() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    return (float)rand() / RAND_MAX;
 8000f98:	f003 faf8 	bl	800458c <rand>
 8000f9c:	ee07 0a90 	vmov	s15, r0
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000fb8 <rand01+0x24>
 8000fa8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fac:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	4f000000 	.word	0x4f000000

08000fbc <rand_range>:

float rand_range(float min, float max) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	ed2d 8b02 	vpush	{d8}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fca:	edc7 0a00 	vstr	s1, [r7]
    return min + (max - min) * rand01();
 8000fce:	ed97 7a00 	vldr	s14, [r7]
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000fda:	f7ff ffdb 	bl	8000f94 <rand01>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
 8000fe2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	ecbd 8b02 	vpop	{d8}
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <random_population>:

void random_population(Population *pop) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < POP_SIZE; i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e02a      	b.n	8001060 <random_population+0x64>
        for (int j = 0; j < NV; j++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	e021      	b.n	8001054 <random_population+0x58>
            pop->solutions[i].x[j] = rand_range(lb[j], ub[j]);
 8001010:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <random_population+0x7c>)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	4a17      	ldr	r2, [pc, #92]	@ (800107c <random_population+0x80>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	eef0 0a47 	vmov.f32	s1, s14
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	f7ff ffc4 	bl	8000fbc <rand_range>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < NV; j++) {
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3301      	adds	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	ddda      	ble.n	8001010 <random_population+0x14>
    for (int i = 0; i < POP_SIZE; i++) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b63      	cmp	r3, #99	@ 0x63
 8001064:	ddd1      	ble.n	800100a <random_population+0xe>
        }
    }
    pop->size = POP_SIZE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2264      	movs	r2, #100	@ 0x64
 800106a:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000000 	.word	0x20000000
 800107c:	20000004 	.word	0x20000004

08001080 <evaluate>:

void evaluate(Solution *sol) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    float x = sol->x[0];
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]

    if (x <= 1) {
 800108e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d807      	bhi.n	80010b0 <evaluate+0x30>
        sol->fitness[0] = -x;
 80010a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a4:	eef1 7a67 	vneg.f32	s15, s15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a01 	vstr	s15, [r3, #4]
 80010ae:	e040      	b.n	8001132 <evaluate+0xb2>
    } else if (x > 1 && x <= 3) {
 80010b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	dd12      	ble.n	80010e8 <evaluate+0x68>
 80010c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80010ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	d809      	bhi.n	80010e8 <evaluate+0x68>
        sol->fitness[0] = x - 2;
 80010d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80010dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edc3 7a01 	vstr	s15, [r3, #4]
 80010e6:	e024      	b.n	8001132 <evaluate+0xb2>
    } else if (x > 3 && x <= 4) {
 80010e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ec:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80010f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	dd12      	ble.n	8001120 <evaluate+0xa0>
 80010fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	d809      	bhi.n	8001120 <evaluate+0xa0>
        sol->fitness[0] = 4 - x;
 800110c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001110:	edd7 7a03 	vldr	s15, [r7, #12]
 8001114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edc3 7a01 	vstr	s15, [r3, #4]
 800111e:	e008      	b.n	8001132 <evaluate+0xb2>
    } else {
        sol->fitness[0] = x - 4;
 8001120:	edd7 7a03 	vldr	s15, [r7, #12]
 8001124:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001128:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a01 	vstr	s15, [r3, #4]
    }

    sol->fitness[1] = pow(x - 5, 2);
 8001132:	edd7 7a03 	vldr	s15, [r7, #12]
 8001136:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800113a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800113e:	ee17 0a90 	vmov	r0, s15
 8001142:	f7ff fa11 	bl	8000568 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001170 <evaluate+0xf0>
 800114e:	ec43 2b10 	vmov	d0, r2, r3
 8001152:	f006 f8b9 	bl	80072c8 <pow>
 8001156:	ec53 2b10 	vmov	r2, r3, d0
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd33 	bl	8000bc8 <__aeabi_d2f>
 8001162:	4602      	mov	r2, r0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	609a      	str	r2, [r3, #8]
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	00000000 	.word	0x00000000
 8001174:	40000000 	.word	0x40000000

08001178 <crossover>:

void crossover(Population *pop, Population *offspring) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size / 2; i++) {
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e0b4      	b.n	80012fa <crossover+0x182>
        if (rand01() < crossover_prob) {
 8001190:	f7ff ff00 	bl	8000f94 <rand01>
 8001194:	eeb0 7a40 	vmov.f32	s14, s0
 8001198:	4b60      	ldr	r3, [pc, #384]	@ (800131c <crossover+0x1a4>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	f140 80a5 	bpl.w	80012f4 <crossover+0x17c>
            int r1 = rand() % pop->size;
 80011aa:	f003 f9ef 	bl	800458c <rand>
 80011ae:	4602      	mov	r2, r0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80011b6:	fb92 f1f3 	sdiv	r1, r2, r3
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	60bb      	str	r3, [r7, #8]
            int r2 = rand() % pop->size;
 80011c2:	f003 f9e3 	bl	800458c <rand>
 80011c6:	4602      	mov	r2, r0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80011ce:	fb92 f1f3 	sdiv	r1, r2, r3
 80011d2:	fb01 f303 	mul.w	r3, r1, r3
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	613b      	str	r3, [r7, #16]
            while (r1 == r2) {
 80011da:	e00b      	b.n	80011f4 <crossover+0x7c>
                r2 = rand() % pop->size;
 80011dc:	f003 f9d6 	bl	800458c <rand>
 80011e0:	4602      	mov	r2, r0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80011e8:	fb92 f1f3 	sdiv	r1, r2, r3
 80011ec:	fb01 f303 	mul.w	r3, r1, r3
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	613b      	str	r3, [r7, #16]
            while (r1 == r2) {
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d0ef      	beq.n	80011dc <crossover+0x64>
            }

            for (int j = 0; j < NV; j++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e055      	b.n	80012ae <crossover+0x136>
                offspring->solutions[offspring->size].x[j] =
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee37 7a27 	vadd.f32	s14, s14, s15
                offspring->solutions[offspring->size].x[j] =
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 8001238:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800123c:	eec7 7a26 	vdiv.f32	s15, s14, s13
                offspring->solutions[offspring->size].x[j] =
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	edc3 7a00 	vstr	s15, [r3]
                offspring->solutions[offspring->size + 1].x[j] =
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	ed93 7a00 	vldr	s14, [r3]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee37 7a27 	vadd.f32	s14, s14, s15
                offspring->solutions[offspring->size + 1].x[j] =
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 800128a:	1c5a      	adds	r2, r3, #1
                    (pop->solutions[r1].x[j] + pop->solutions[r2].x[j]) / 2.0;
 800128c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
                offspring->solutions[offspring->size + 1].x[j] =
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < NV; j++) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	dda6      	ble.n	8001202 <crossover+0x8a>
            }

            evaluate(&offspring->solutions[offspring->size]);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff feda 	bl	8001080 <evaluate>
            evaluate(&offspring->solutions[offspring->size + 1]);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fecd 	bl	8001080 <evaluate>

            offspring->size += 2;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80012ec:	1c9a      	adds	r2, r3, #2
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size / 2; i++) {
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001300:	0fda      	lsrs	r2, r3, #31
 8001302:	4413      	add	r3, r2
 8001304:	105b      	asrs	r3, r3, #1
 8001306:	461a      	mov	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4293      	cmp	r3, r2
 800130c:	f6ff af40 	blt.w	8001190 <crossover+0x18>
        }
    }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <mutation>:

void mutation(Population *pop, Population *offspring) {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    offspring->size = 0;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e04e      	b.n	80013d6 <mutation+0xb6>
        if (rand01() < mutation_prob) {
 8001338:	f7ff fe2c 	bl	8000f94 <rand01>
 800133c:	eeb0 7a40 	vmov.f32	s14, s0
 8001340:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <mutation+0xcc>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d53f      	bpl.n	80013d0 <mutation+0xb0>
            offspring->solutions[offspring->size] = pop->solutions[i];
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001356:	6839      	ldr	r1, [r7, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	18c8      	adds	r0, r1, r3
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	18ca      	adds	r2, r1, r3
 8001370:	4603      	mov	r3, r0
 8001372:	ca07      	ldmia	r2, {r0, r1, r2}
 8001374:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            offspring->solutions[offspring->size].x[0] = rand_range(lb[0], ub[0]);
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <mutation+0xd0>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <mutation+0xd4>)
 8001380:	ed93 7a00 	vldr	s14, [r3]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f8d3 4e10 	ldr.w	r4, [r3, #3600]	@ 0xe10
 800138a:	eef0 0a47 	vmov.f32	s1, s14
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	f7ff fe13 	bl	8000fbc <rand_range>
 8001396:	eef0 7a40 	vmov.f32	s15, s0
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4623      	mov	r3, r4
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4423      	add	r3, r4
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	edc3 7a00 	vstr	s15, [r3]
            evaluate(&offspring->solutions[offspring->size]);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe5f 	bl	8001080 <evaluate>
            offspring->size++;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < pop->size; i++) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbaa      	blt.n	8001338 <mutation+0x18>
        }
    }
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <local_search>:

void local_search(Population *pop, Population *offspring) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    offspring->size = rate_local_search;
 8001402:	4b4c      	ldr	r3, [pc, #304]	@ (8001534 <local_search+0x13c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
    for (int i = 0; i < rate_local_search; i++) {
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e084      	b.n	800151c <local_search+0x124>
        int r1 = rand() % pop->size;
 8001412:	f003 f8bb 	bl	800458c <rand>
 8001416:	4602      	mov	r2, r0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 800141e:	fb92 f1f3 	sdiv	r1, r2, r3
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	60bb      	str	r3, [r7, #8]
        offspring->solutions[i] = pop->solutions[r1];
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	18c8      	adds	r0, r1, r3
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	18ca      	adds	r2, r1, r3
 8001446:	4603      	mov	r3, r0
 8001448:	ca07      	ldmia	r2, {r0, r1, r2}
 800144a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        offspring->solutions[i].x[0] += rand_range(-step_size, step_size);
 800144e:	4b3a      	ldr	r3, [pc, #232]	@ (8001538 <local_search+0x140>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	eef1 7a67 	vneg.f32	s15, s15
 8001458:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <local_search+0x140>)
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	eef0 0a47 	vmov.f32	s1, s14
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	f7ff fda9 	bl	8000fbc <rand_range>
 800146a:	eeb0 7a40 	vmov.f32	s14, s0
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	edc3 7a00 	vstr	s15, [r3]

        if (offspring->solutions[i].x[0] < lb[0]) offspring->solutions[i].x[0] = lb[0];
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <local_search+0x144>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d509      	bpl.n	80014cc <local_search+0xd4>
 80014b8:	4b20      	ldr	r3, [pc, #128]	@ (800153c <local_search+0x144>)
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4403      	add	r3, r0
 80014ca:	6019      	str	r1, [r3, #0]
        if (offspring->solutions[i].x[0] > ub[0]) offspring->solutions[i].x[0] = ub[0];
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <local_search+0x148>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	dd09      	ble.n	8001502 <local_search+0x10a>
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <local_search+0x148>)
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	6838      	ldr	r0, [r7, #0]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4403      	add	r3, r0
 8001500:	6019      	str	r1, [r3, #0]

        evaluate(&offspring->solutions[i]);
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fdb5 	bl	8001080 <evaluate>
    for (int i = 0; i < rate_local_search; i++) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <local_search+0x13c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	429a      	cmp	r2, r3
 8001524:	f6ff af75 	blt.w	8001412 <local_search+0x1a>
    }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000010 	.word	0x20000010
 8001538:	20000014 	.word	0x20000014
 800153c:	20000000 	.word	0x20000000
 8001540:	20000004 	.word	0x20000004

08001544 <dominates>:

bool dominates(Solution *sol1, Solution *sol2) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
    bool better = false;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	e02c      	b.n	80015b2 <dominates+0x6e>
        if (sol1->fitness[i] > sol2->fitness[i]) {
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3304      	adds	r3, #4
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd01      	ble.n	8001582 <dominates+0x3e>
            return false;
 800157e:	2300      	movs	r3, #0
 8001580:	e01b      	b.n	80015ba <dominates+0x76>
        }
        if (sol1->fitness[i] < sol2->fitness[i]) {
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	3304      	adds	r3, #4
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3304      	adds	r3, #4
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d501      	bpl.n	80015ac <dominates+0x68>
            better = true;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 2; i++) {
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	ddcf      	ble.n	8001558 <dominates+0x14>
        }
    }
    return better;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <find_pareto_front>:

void find_pareto_front(Solution *solutions, int size, int *front_indices, int *front_size) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b088      	sub	sp, #32
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
    *front_size = 0;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e03c      	b.n	800165a <find_pareto_front+0x94>
        bool is_dominated = false;
 80015e0:	2300      	movs	r3, #0
 80015e2:	76fb      	strb	r3, [r7, #27]
        for (int j = 0; j < size; j++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e020      	b.n	800162c <find_pareto_front+0x66>
            if (i == j) continue;
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d018      	beq.n	8001624 <find_pareto_front+0x5e>
            if (dominates(&solutions[j], &solutions[i])) {
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1898      	adds	r0, r3, r2
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff ff96 	bl	8001544 <dominates>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <find_pareto_front+0x60>
                is_dominated = true;
 800161e:	2301      	movs	r3, #1
 8001620:	76fb      	strb	r3, [r7, #27]
                break;
 8001622:	e007      	b.n	8001634 <find_pareto_front+0x6e>
            if (i == j) continue;
 8001624:	bf00      	nop
        for (int j = 0; j < size; j++) {
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbda      	blt.n	80015ea <find_pareto_front+0x24>
            }
        }
        if (!is_dominated) {
 8001634:	7efb      	ldrb	r3, [r7, #27]
 8001636:	f083 0301 	eor.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <find_pareto_front+0x8e>
            front_indices[(*front_size)++] = i;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1c59      	adds	r1, r3, #1
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	6011      	str	r1, [r2, #0]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbbe      	blt.n	80015e0 <find_pareto_front+0x1a>
        }
    }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <crowding_distance>:

void crowding_distance(Solution *front, int front_size, float *distances) {
 800166c:	b480      	push	{r7}
 800166e:	f2ad 4dec 	subw	sp, sp, #1260	@ 0x4ec
 8001672:	af00      	add	r7, sp, #0
 8001674:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001678:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800167c:	6018      	str	r0, [r3, #0]
 800167e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001682:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001686:	6019      	str	r1, [r3, #0]
 8001688:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800168c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001690:	601a      	str	r2, [r3, #0]
    if (front_size == 0) return;
 8001692:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001696:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 81be 	beq.w	8001a1e <crowding_distance+0x3b2>

    for (int i = 0; i < front_size; i++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80016a8:	e010      	b.n	80016cc <crowding_distance+0x60>
        distances[i] = 0.0;
 80016aa:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 80016b4:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < front_size; i++) {
 80016c2:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80016c6:	3301      	adds	r3, #1
 80016c8:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 80016cc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80016d0:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80016d4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	@ 0x4e4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbe5      	blt.n	80016aa <crowding_distance+0x3e>
    }

    for (int obj = 0; obj < 2; obj++) {
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80016e4:	e195      	b.n	8001a12 <crowding_distance+0x3a6>
        int indices[POP_SIZE * 3];
        for (int i = 0; i < front_size; i++) indices[i] = i;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 80016ec:	e00e      	b.n	800170c <crowding_distance+0xa0>
 80016ee:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80016f2:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80016f6:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 80016fa:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	@ 0x4dc
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001702:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8001706:	3301      	adds	r3, #1
 8001708:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 800170c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001710:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001714:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbe7      	blt.n	80016ee <crowding_distance+0x82>

        for (int i = 0; i < front_size - 1; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8001724:	e077      	b.n	8001816 <crowding_distance+0x1aa>
            for (int j = i + 1; j < front_size; j++) {
 8001726:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800172a:	3301      	adds	r3, #1
 800172c:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8001730:	e063      	b.n	80017fa <crowding_distance+0x18e>
                if (front[indices[i]].fitness[obj] > front[indices[j]].fitness[obj]) {
 8001732:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001736:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800173a:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	461a      	mov	r2, r3
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	461a      	mov	r2, r3
 800174e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001752:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	441a      	add	r2, r3
 800175a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3304      	adds	r3, #4
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800176c:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001770:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	461a      	mov	r2, r3
 8001784:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001788:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	441a      	add	r2, r3
 8001790:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	dd23      	ble.n	80017f0 <crowding_distance+0x184>
                    int temp = indices[i];
 80017a8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80017ac:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80017b0:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
                    indices[i] = indices[j];
 80017bc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80017c0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80017c4:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 80017c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017cc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80017d0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80017d4:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    indices[j] = temp;
 80017dc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80017e0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80017e4:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 80017e8:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = i + 1; j < front_size; j++) {
 80017f0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80017f4:	3301      	adds	r3, #1
 80017f6:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80017fa:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80017fe:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001802:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	db92      	blt.n	8001732 <crowding_distance+0xc6>
        for (int i = 0; i < front_size - 1; i++) {
 800180c:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 8001810:	3301      	adds	r3, #1
 8001812:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8001816:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800181a:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
 8001826:	429a      	cmp	r2, r3
 8001828:	f6ff af7d 	blt.w	8001726 <crowding_distance+0xba>
                }
            }
        }

        distances[indices[0]] = DBL_MAX;
 800182c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001830:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 800183c:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	4413      	add	r3, r2
 8001844:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001848:	601a      	str	r2, [r3, #0]
        distances[indices[front_size - 1]] = DBL_MAX;
 800184a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800184e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800185a:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800185e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001868:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4413      	add	r3, r2
 8001870:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001874:	601a      	str	r2, [r3, #0]

        float fmin = front[indices[0]].fitness[obj];
 8001876:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800187a:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	461a      	mov	r2, r3
 800188c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001890:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	441a      	add	r2, r3
 8001898:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3304      	adds	r3, #4
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f207 42cc 	addw	r2, r7, #1228	@ 0x4cc
 80018a8:	6013      	str	r3, [r2, #0]
        float fmax = front[indices[front_size - 1]].fitness[obj];
 80018aa:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018ae:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018ba:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	461a      	mov	r2, r3
 80018ce:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80018d2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	441a      	add	r2, r3
 80018da:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3304      	adds	r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f507 6299 	add.w	r2, r7, #1224	@ 0x4c8
 80018ea:	6013      	str	r3, [r2, #0]
        float range = fmax - fmin;
 80018ec:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	f207 43cc 	addw	r3, r7, #1228	@ 0x4cc
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001900:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8001904:	edc3 7a00 	vstr	s15, [r3]

        if (range > 0) {
 8001908:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	dd76      	ble.n	8001a08 <crowding_distance+0x39c>
            for (int i = 1; i < front_size - 1; i++) {
 800191a:	2301      	movs	r3, #1
 800191c:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8001920:	e068      	b.n	80019f4 <crowding_distance+0x388>
                distances[indices[i]] +=
 8001922:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001926:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800192a:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8001938:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4413      	add	r3, r2
 8001940:	ed93 7a00 	vldr	s14, [r3]
                    (front[indices[i + 1]].fitness[obj] - front[indices[i - 1]].fitness[obj]) / range;
 8001944:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800194e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001956:	461a      	mov	r2, r3
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	461a      	mov	r2, r3
 8001962:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001966:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	441a      	add	r2, r3
 800196e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	3304      	adds	r3, #4
 8001978:	edd3 6a00 	vldr	s13, [r3]
 800197c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001986:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198e:	461a      	mov	r2, r3
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	461a      	mov	r2, r3
 800199a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800199e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	441a      	add	r2, r3
 80019a6:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3304      	adds	r3, #4
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80019b8:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 80019bc:	edd3 6a00 	vldr	s13, [r3]
 80019c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
                distances[indices[i]] +=
 80019c4:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019c8:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80019cc:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 80019d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 80019da:	f2a2 42e4 	subw	r2, r2, #1252	@ 0x4e4
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e6:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 1; i < front_size - 1; i++) {
 80019ea:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80019ee:	3301      	adds	r3, #1
 80019f0:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 80019f4:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80019f8:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8001a04:	429a      	cmp	r2, r3
 8001a06:	db8c      	blt.n	8001922 <crowding_distance+0x2b6>
    for (int obj = 0; obj < 2; obj++) {
 8001a08:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8001a12:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f77f ae65 	ble.w	80016e6 <crowding_distance+0x7a>
 8001a1c:	e000      	b.n	8001a20 <crowding_distance+0x3b4>
    if (front_size == 0) return;
 8001a1e:	bf00      	nop
            }
        }
    }
}
 8001a20:	f207 47ec 	addw	r7, r7, #1260	@ 0x4ec
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <select_by_crowding>:

void select_by_crowding(Solution *solutions, int size, int num_to_select, Solution *selected) {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	f2ad 4dd4 	subw	sp, sp, #1236	@ 0x4d4
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	f507 649a 	add.w	r4, r7, #1232	@ 0x4d0
 8001a38:	f2a4 44c4 	subw	r4, r4, #1220	@ 0x4c4
 8001a3c:	6020      	str	r0, [r4, #0]
 8001a3e:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 8001a42:	f5a0 6099 	sub.w	r0, r0, #1224	@ 0x4c8
 8001a46:	6001      	str	r1, [r0, #0]
 8001a48:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8001a4c:	f2a1 41cc 	subw	r1, r1, #1228	@ 0x4cc
 8001a50:	600a      	str	r2, [r1, #0]
 8001a52:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8001a56:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001a5a:	6013      	str	r3, [r2, #0]
    float distances[POP_SIZE * 3];
    crowding_distance(solutions, size, distances);
 8001a5c:	f107 0214 	add.w	r2, r7, #20
 8001a60:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a64:	f5a3 6199 	sub.w	r1, r3, #1224	@ 0x4c8
 8001a68:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a6c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001a70:	6809      	ldr	r1, [r1, #0]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	f7ff fdfa 	bl	800166c <crowding_distance>

    for (int i = 0; i < num_to_select; i++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001a7e:	e05e      	b.n	8001b3e <select_by_crowding+0x112>
        int best = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001a86:	2301      	movs	r3, #1
 8001a88:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001a8c:	e021      	b.n	8001ad2 <select_by_crowding+0xa6>
            if (distances[j] > distances[best]) {
 8001a8e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001a92:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001a96:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	ed93 7a00 	vldr	s14, [r3]
 8001aa2:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001aa6:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001aaa:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	dd03      	ble.n	8001ac8 <select_by_crowding+0x9c>
                best = j;
 8001ac0:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001ac4:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
        for (int j = 1; j < size; j++) {
 8001ac8:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001acc:	3301      	adds	r3, #1
 8001ace:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001ad2:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001ad6:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8001ada:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbd4      	blt.n	8001a8e <select_by_crowding+0x62>
            }
        }
        selected[i] = solutions[best];
 8001ae4:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	461a      	mov	r2, r3
 8001af2:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001af6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	1899      	adds	r1, r3, r2
 8001afe:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001b10:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	460a      	mov	r2, r1
 8001b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        distances[best] = -1.0;
 8001b20:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001b24:	f2a3 42bc 	subw	r2, r3, #1212	@ 0x4bc
 8001b28:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <select_by_crowding+0x130>)
 8001b32:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < num_to_select; i++) {
 8001b34:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001b3e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001b42:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8001b46:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	db97      	blt.n	8001a80 <select_by_crowding+0x54>
    }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	f207 47d4 	addw	r7, r7, #1236	@ 0x4d4
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	bf800000 	.word	0xbf800000

08001b60 <selection>:

void selection(Population *pop, Population *selected) {
 8001b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b64:	b0b3      	sub	sp, #204	@ 0xcc
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6778      	str	r0, [r7, #116]	@ 0x74
 8001b6a:	6739      	str	r1, [r7, #112]	@ 0x70
 8001b6c:	466b      	mov	r3, sp
 8001b6e:	607b      	str	r3, [r7, #4]
    int remaining_indices[pop->size];
 8001b70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b72:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 8001b76:	1e4b      	subs	r3, r1, #1
 8001b78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	2300      	movs	r3, #0
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	016b      	lsls	r3, r5, #5
 8001b8e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001b92:	0162      	lsls	r2, r4, #5
 8001b94:	460a      	mov	r2, r1
 8001b96:	2300      	movs	r3, #0
 8001b98:	4690      	mov	r8, r2
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001ba8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001bac:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	3307      	adds	r3, #7
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	ebad 0d03 	sub.w	sp, sp, r3
 8001bbe:	466b      	mov	r3, sp
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    int remaining_size = pop->size;
 8001bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bcc:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    for (int i = 0; i < pop->size; i++) remaining_indices[i] = i;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001bda:	e00c      	b.n	8001bf6 <selection+0x96>
 8001bdc:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001be0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001be4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001be8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bf8:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c00:	4293      	cmp	r3, r2
 8001c02:	dbeb      	blt.n	8001bdc <selection+0x7c>

    selected->size = 0;
 8001c04:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c2 3e10 	str.w	r3, [r2, #3600]	@ 0xe10

    while (selected->size < POP_SIZE) {
 8001c0c:	e1d6      	b.n	8001fbc <selection+0x45c>
 8001c0e:	466b      	mov	r3, sp
 8001c10:	461e      	mov	r6, r3
        int front_indices[remaining_size];
 8001c12:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001c16:	1e4b      	subs	r3, r1, #1
 8001c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	2300      	movs	r3, #0
 8001c20:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001c22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001c30:	4628      	mov	r0, r5
 8001c32:	0143      	lsls	r3, r0, #5
 8001c34:	4620      	mov	r0, r4
 8001c36:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	0142      	lsls	r2, r0, #5
 8001c3e:	460a      	mov	r2, r1
 8001c40:	2300      	movs	r3, #0
 8001c42:	663a      	str	r2, [r7, #96]	@ 0x60
 8001c44:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c52:	4628      	mov	r0, r5
 8001c54:	0143      	lsls	r3, r0, #5
 8001c56:	4620      	mov	r0, r4
 8001c58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	0142      	lsls	r2, r0, #5
 8001c60:	460b      	mov	r3, r1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	3307      	adds	r3, #7
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c6e:	466b      	mov	r3, sp
 8001c70:	3303      	adds	r3, #3
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        int front_size;
        find_pareto_front(pop->solutions, remaining_size, front_indices, &front_size);
 8001c7a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001c7c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001c80:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c84:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001c88:	f7ff fc9d 	bl	80015c6 <find_pareto_front>

        if (selected->size + front_size > POP_SIZE) {
 8001c8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c8e:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001c92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c94:	4413      	add	r3, r2
 8001c96:	2b64      	cmp	r3, #100	@ 0x64
 8001c98:	f340 8114 	ble.w	8001ec4 <selection+0x364>
 8001c9c:	466b      	mov	r3, sp
 8001c9e:	461d      	mov	r5, r3
            int needed = POP_SIZE - selected->size;
 8001ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ca2:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001ca6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            Solution temp_front[front_size];
 8001cae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001cb0:	1e4b      	subs	r3, r1, #1
 8001cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	2300      	movs	r3, #0
 8001cba:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cbe:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	1890      	adds	r0, r2, r2
 8001cc8:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001cca:	415b      	adcs	r3, r3
 8001ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001cd2:	4640      	mov	r0, r8
 8001cd4:	eb12 0a00 	adds.w	sl, r2, r0
 8001cd8:	4648      	mov	r0, r9
 8001cda:	eb43 0b00 	adc.w	fp, r3, r0
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001cea:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001cee:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001cf2:	460a      	mov	r2, r1
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	653a      	str	r2, [r7, #80]	@ 0x50
 8001cf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001cfe:	4642      	mov	r2, r8
 8001d00:	464b      	mov	r3, r9
 8001d02:	1890      	adds	r0, r2, r2
 8001d04:	6338      	str	r0, [r7, #48]	@ 0x30
 8001d06:	415b      	adcs	r3, r3
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d0e:	4640      	mov	r0, r8
 8001d10:	1810      	adds	r0, r2, r0
 8001d12:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001d14:	4648      	mov	r0, r9
 8001d16:	eb43 0000 	adc.w	r0, r3, r0
 8001d1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001d28:	4648      	mov	r0, r9
 8001d2a:	0143      	lsls	r3, r0, #5
 8001d2c:	4640      	mov	r0, r8
 8001d2e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d32:	4640      	mov	r0, r8
 8001d34:	0142      	lsls	r2, r0, #5
 8001d36:	460a      	mov	r2, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3307      	adds	r3, #7
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	ebad 0d03 	sub.w	sp, sp, r3
 8001d4a:	466b      	mov	r3, sp
 8001d4c:	3303      	adds	r3, #3
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            for (int i = 0; i < front_size; i++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d5c:	e01e      	b.n	8001d9c <selection+0x23c>
                temp_front[i] = pop->solutions[front_indices[i]];
 8001d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d6a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001d6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4419      	add	r1, r3
 8001d7c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d7e:	4603      	mov	r3, r0
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4403      	add	r3, r0
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	460c      	mov	r4, r1
 8001d8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (int i = 0; i < front_size; i++) {
 8001d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d96:	3301      	adds	r3, #1
 8001d98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001da2:	4293      	cmp	r3, r2
 8001da4:	dbdb      	blt.n	8001d5e <selection+0x1fe>
            }

            Solution selected_from_front[needed];
 8001da6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001daa:	1e4b      	subs	r3, r1, #1
 8001dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001db0:	460a      	mov	r2, r1
 8001db2:	2300      	movs	r3, #0
 8001db4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	1890      	adds	r0, r2, r2
 8001dc2:	6238      	str	r0, [r7, #32]
 8001dc4:	415b      	adcs	r3, r3
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dcc:	4640      	mov	r0, r8
 8001dce:	1810      	adds	r0, r2, r0
 8001dd0:	61b8      	str	r0, [r7, #24]
 8001dd2:	4648      	mov	r0, r9
 8001dd4:	eb43 0000 	adc.w	r0, r3, r0
 8001dd8:	61f8      	str	r0, [r7, #28]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001de6:	4648      	mov	r0, r9
 8001de8:	0143      	lsls	r3, r0, #5
 8001dea:	4640      	mov	r0, r8
 8001dec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001df0:	4640      	mov	r0, r8
 8001df2:	0142      	lsls	r2, r0, #5
 8001df4:	460a      	mov	r2, r1
 8001df6:	2300      	movs	r3, #0
 8001df8:	643a      	str	r2, [r7, #64]	@ 0x40
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e00:	4642      	mov	r2, r8
 8001e02:	464b      	mov	r3, r9
 8001e04:	1890      	adds	r0, r2, r2
 8001e06:	6138      	str	r0, [r7, #16]
 8001e08:	415b      	adcs	r3, r3
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e10:	4640      	mov	r0, r8
 8001e12:	1810      	adds	r0, r2, r0
 8001e14:	60b8      	str	r0, [r7, #8]
 8001e16:	4648      	mov	r0, r9
 8001e18:	eb43 0000 	adc.w	r0, r3, r0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001e2a:	4648      	mov	r0, r9
 8001e2c:	0143      	lsls	r3, r0, #5
 8001e2e:	4640      	mov	r0, r8
 8001e30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e34:	4640      	mov	r0, r8
 8001e36:	0142      	lsls	r2, r0, #5
 8001e38:	460a      	mov	r2, r1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3307      	adds	r3, #7
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	ebad 0d03 	sub.w	sp, sp, r3
 8001e4c:	466b      	mov	r3, sp
 8001e4e:	3303      	adds	r3, #3
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            select_by_crowding(temp_front, front_size, needed, selected_from_front);
 8001e58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e5e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001e62:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001e66:	f7ff fde1 	bl	8001a2c <select_by_crowding>

            for (int i = 0; i < needed; i++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e70:	e01e      	b.n	8001eb0 <selection+0x350>
                selected->solutions[selected->size++] = selected_from_front[i];
 8001e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e74:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8001e78:	1c51      	adds	r1, r2, #1
 8001e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e7c:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 8001e80:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	18c8      	adds	r0, r1, r3
 8001e8c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001e90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	18ca      	adds	r2, r1, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ea2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            for (int i = 0; i < needed; i++) {
 8001ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001eb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbda      	blt.n	8001e72 <selection+0x312>
            }
            break;
 8001ebc:	bf00      	nop
 8001ebe:	46ad      	mov	sp, r5
 8001ec0:	46b5      	mov	sp, r6
 8001ec2:	e081      	b.n	8001fc8 <selection+0x468>
        } else {
            for (int i = 0; i < front_size; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001eca:	e022      	b.n	8001f12 <selection+0x3b2>
                selected->solutions[selected->size++] = pop->solutions[front_indices[i]];
 8001ecc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ed4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ed8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001eda:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 8001ede:	1c4a      	adds	r2, r1, #1
 8001ee0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ee2:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
 8001ee6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001ee8:	460b      	mov	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	18d1      	adds	r1, r2, r3
 8001ef2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4403      	add	r3, r0
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	460c      	mov	r4, r1
 8001f00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (int i = 0; i < front_size; i++) {
 8001f08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f12:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	dbd7      	blt.n	8001ecc <selection+0x36c>
            }

            int new_remaining_size = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            for (int i = 0; i < remaining_size; i++) {
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f28:	e03d      	b.n	8001fa6 <selection+0x446>
                bool in_front = false;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                for (int j = 0; j < front_size; j++) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001f36:	e016      	b.n	8001f66 <selection+0x406>
                    if (remaining_indices[i] == front_indices[j]) {
 8001f38:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f44:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d103      	bne.n	8001f5c <selection+0x3fc>
                        in_front = true;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                        break;
 8001f5a:	e009      	b.n	8001f70 <selection+0x410>
                for (int j = 0; j < front_size; j++) {
 8001f5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f60:	3301      	adds	r3, #1
 8001f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001f66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	dbe3      	blt.n	8001f38 <selection+0x3d8>
                    }
                }
                if (!in_front) {
 8001f70:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001f74:	f083 0301 	eor.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00e      	beq.n	8001f9c <selection+0x43c>
                    remaining_indices[new_remaining_size++] = remaining_indices[i];
 8001f7e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001f82:	1c4b      	adds	r3, r1, #1
 8001f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f88:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            for (int i = 0; i < remaining_size; i++) {
 8001f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001fa6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	dbbb      	blt.n	8001f2a <selection+0x3ca>
                }
            }
            remaining_size = new_remaining_size;
 8001fb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001fba:	46b5      	mov	sp, r6
    while (selected->size < POP_SIZE) {
 8001fbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fbe:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8001fc2:	2b63      	cmp	r3, #99	@ 0x63
 8001fc4:	f77f ae23 	ble.w	8001c0e <selection+0xae>
 8001fc8:	f8d7 d004 	ldr.w	sp, [r7, #4]
        }
    }
}
 8001fcc:	bf00      	nop
 8001fce:	37cc      	adds	r7, #204	@ 0xcc
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001fd6 <update_archive>:

void update_archive(Population *pop, Archive *archive) {
 8001fd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fda:	f2ad 7d2c 	subw	sp, sp, #1836	@ 0x72c
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8001fe4:	f2a3 7324 	subw	r3, r3, #1828	@ 0x724
 8001fe8:	6018      	str	r0, [r3, #0]
 8001fea:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8001fee:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 8001ff2:	6019      	str	r1, [r3, #0]
 8001ff4:	466b      	mov	r3, sp
 8001ff6:	461e      	mov	r6, r3
    int front_indices[pop->size];
 8001ff8:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8001ffc:	f2a3 7324 	subw	r3, r3, #1828	@ 0x724
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 8002006:	1e4b      	subs	r3, r1, #1
 8002008:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c
 800200c:	460a      	mov	r2, r1
 800200e:	2300      	movs	r3, #0
 8002010:	4690      	mov	r8, r2
 8002012:	4699      	mov	r9, r3
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002020:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002024:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002028:	460a      	mov	r2, r1
 800202a:	2300      	movs	r3, #0
 800202c:	4614      	mov	r4, r2
 800202e:	461d      	mov	r5, r3
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	016b      	lsls	r3, r5, #5
 800203a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800203e:	0162      	lsls	r2, r4, #5
 8002040:	460b      	mov	r3, r1
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	3307      	adds	r3, #7
 8002046:	08db      	lsrs	r3, r3, #3
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	ebad 0d03 	sub.w	sp, sp, r3
 800204e:	466b      	mov	r3, sp
 8002050:	3303      	adds	r3, #3
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f8c7 3718 	str.w	r3, [r7, #1816]	@ 0x718
    int front_size;
    find_pareto_front(pop->solutions, pop->size, front_indices, &front_size);
 800205a:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 800205e:	f2a3 7324 	subw	r3, r3, #1828	@ 0x724
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8002068:	f2a3 7324 	subw	r3, r3, #1828	@ 0x724
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d3 1e10 	ldr.w	r1, [r3, #3600]	@ 0xe10
 8002072:	f207 7314 	addw	r3, r7, #1812	@ 0x714
 8002076:	f8d7 2718 	ldr.w	r2, [r7, #1816]	@ 0x718
 800207a:	f7ff faa4 	bl	80015c6 <find_pareto_front>

    for (int i = 0; i < front_size; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 8002084:	e03a      	b.n	80020fc <update_archive+0x126>
        if (archive->size < MAX_ARCHIVE) {
 8002086:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 800208a:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8002094:	2b95      	cmp	r3, #149	@ 0x95
 8002096:	dc2c      	bgt.n	80020f2 <update_archive+0x11c>
            archive->solutions[archive->size++] = pop->solutions[front_indices[i]];
 8002098:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 800209c:	f8d7 2724 	ldr.w	r2, [r7, #1828]	@ 0x724
 80020a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020a4:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 80020a8:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80020b2:	1c50      	adds	r0, r2, #1
 80020b4:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 80020b8:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8c3 0708 	str.w	r0, [r3, #1800]	@ 0x708
 80020c2:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 80020c6:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4418      	add	r0, r3
 80020d6:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 80020da:	f2a3 7324 	subw	r3, r3, #1828	@ 0x724
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	460b      	mov	r3, r1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	440b      	add	r3, r1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (int i = 0; i < front_size; i++) {
 80020f2:	f8d7 3724 	ldr.w	r3, [r7, #1828]	@ 0x724
 80020f6:	3301      	adds	r3, #1
 80020f8:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 80020fc:	f8d7 3714 	ldr.w	r3, [r7, #1812]	@ 0x714
 8002100:	f8d7 2724 	ldr.w	r2, [r7, #1828]	@ 0x724
 8002104:	429a      	cmp	r2, r3
 8002106:	dbbe      	blt.n	8002086 <update_archive+0xb0>
        }
    }

    if (archive->size > MAX_ARCHIVE) {
 8002108:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 800210c:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8002116:	2b96      	cmp	r3, #150	@ 0x96
 8002118:	dd40      	ble.n	800219c <update_archive+0x1c6>
        Solution temp[MAX_ARCHIVE];
        select_by_crowding(archive->solutions, archive->size, MAX_ARCHIVE, temp);
 800211a:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 800211e:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8002128:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8d3 1708 	ldr.w	r1, [r3, #1800]	@ 0x708
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2296      	movs	r2, #150	@ 0x96
 8002138:	f7ff fc78 	bl	8001a2c <select_by_crowding>
        for (int i = 0; i < MAX_ARCHIVE; i++) {
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3720 	str.w	r3, [r7, #1824]	@ 0x720
 8002142:	e01f      	b.n	8002184 <update_archive+0x1ae>
            archive->solutions[i] = temp[i];
 8002144:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8002148:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	f8d7 2720 	ldr.w	r2, [r7, #1824]	@ 0x720
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	18c8      	adds	r0, r1, r3
 800215c:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8002160:	f2a3 711c 	subw	r1, r3, #1820	@ 0x71c
 8002164:	f8d7 2720 	ldr.w	r2, [r7, #1824]	@ 0x720
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	18ca      	adds	r2, r1, r3
 8002172:	4603      	mov	r3, r0
 8002174:	ca07      	ldmia	r2, {r0, r1, r2}
 8002176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (int i = 0; i < MAX_ARCHIVE; i++) {
 800217a:	f8d7 3720 	ldr.w	r3, [r7, #1824]	@ 0x720
 800217e:	3301      	adds	r3, #1
 8002180:	f8c7 3720 	str.w	r3, [r7, #1824]	@ 0x720
 8002184:	f8d7 3720 	ldr.w	r3, [r7, #1824]	@ 0x720
 8002188:	2b95      	cmp	r3, #149	@ 0x95
 800218a:	dddb      	ble.n	8002144 <update_archive+0x16e>
        }
        archive->size = MAX_ARCHIVE;
 800218c:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8002190:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2296      	movs	r2, #150	@ 0x96
 8002198:	f8c3 2708 	str.w	r2, [r3, #1800]	@ 0x708
 800219c:	46b5      	mov	sp, r6
    }
}
 800219e:	bf00      	nop
 80021a0:	f207 772c 	addw	r7, r7, #1836	@ 0x72c
 80021a4:	46bd      	mov	sp, r7
 80021a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080021ac <send_archive>:

void send_archive(UART_HandleTypeDef *huart, Archive *archive) {
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	b098      	sub	sp, #96	@ 0x60
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
    char msg[64];
    for (int i = 0; i < archive->size; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021ba:	e036      	b.n	800222a <send_archive+0x7e>
        snprintf(msg, sizeof(msg), "archive,%f,%f\r\n",
                 archive->solutions[i].fitness[0],
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3304      	adds	r3, #4
 80021cc:	681b      	ldr	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "archive,%f,%f\r\n",
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9ca 	bl	8000568 <__aeabi_f2d>
 80021d4:	4604      	mov	r4, r0
 80021d6:	460d      	mov	r5, r1
                 archive->solutions[i].fitness[1]);
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	681b      	ldr	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "archive,%f,%f\r\n",
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f9bc 	bl	8000568 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	f107 000c 	add.w	r0, r7, #12
 80021f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021fc:	e9cd 4500 	strd	r4, r5, [sp]
 8002200:	4a0f      	ldr	r2, [pc, #60]	@ (8002240 <send_archive+0x94>)
 8002202:	2140      	movs	r1, #64	@ 0x40
 8002204:	f002 ff18 	bl	8005038 <sniprintf>
        HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f83f 	bl	8000290 <strlen>
 8002212:	4603      	mov	r3, r0
 8002214:	b29a      	uxth	r2, r3
 8002216:	f107 010c 	add.w	r1, r7, #12
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f001 fdca 	bl	8003db8 <HAL_UART_Transmit>
    for (int i = 0; i < archive->size; i++) {
 8002224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002226:	3301      	adds	r3, #1
 8002228:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8002230:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002232:	429a      	cmp	r2, r3
 8002234:	dbc2      	blt.n	80021bc <send_archive+0x10>
    }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	3750      	adds	r7, #80	@ 0x50
 800223c:	46bd      	mov	sp, r7
 800223e:	bdb0      	pop	{r4, r5, r7, pc}
 8002240:	080081a0 	.word	0x080081a0

08002244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	f5ad 4db8 	sub.w	sp, sp, #23552	@ 0x5c00
 800224a:	b094      	sub	sp, #80	@ 0x50
 800224c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224e:	f000 fd1f 	bl	8002c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002252:	f000 fa89 	bl	8002768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002256:	f000 fb21 	bl	800289c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800225a:	f000 faf5 	bl	8002848 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char msgg[] = "UART test\r\n";
 800225e:	4abf      	ldr	r2, [pc, #764]	@ (800255c <main+0x318>)
 8002260:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002264:	f103 0308 	add.w	r3, r3, #8
 8002268:	ca07      	ldmia	r2, {r0, r1, r2}
 800226a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t*)msgg, strlen(msgg), HAL_MAX_DELAY);
 800226e:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002272:	f103 0308 	add.w	r3, r3, #8
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f80a 	bl	8000290 <strlen>
 800227c:	4603      	mov	r3, r0
 800227e:	b29a      	uxth	r2, r3
 8002280:	f507 41b8 	add.w	r1, r7, #23552	@ 0x5c00
 8002284:	f101 0108 	add.w	r1, r1, #8
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	48b4      	ldr	r0, [pc, #720]	@ (8002560 <main+0x31c>)
 800228e:	f001 fd93 	bl	8003db8 <HAL_UART_Transmit>


  Population pop, offspring_cross, offspring_mut, offspring_ls, combined, selected;
  Archive archive = {0};
 8002292:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8002296:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 800229a:	4618      	mov	r0, r3
 800229c:	f240 730c 	movw	r3, #1804	@ 0x70c
 80022a0:	461a      	mov	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	f002 ff41 	bl	800512a <memset>

  srand(HAL_GetTick());
 80022a8:	f000 fd58 	bl	8002d5c <HAL_GetTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 f93e 	bl	8004530 <srand>

  // Initialize population
  random_population(&pop);
 80022b4:	f507 439b 	add.w	r3, r7, #19840	@ 0x4d80
 80022b8:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fe9d 	bl	8000ffc <random_population>
  for (int i = 0; i < pop.size; i++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 80022c8:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01b      	b.n	8002308 <main+0xc4>
	  evaluate(&pop.solutions[i]);
 80022d0:	f507 419b 	add.w	r1, r7, #19840	@ 0x4d80
 80022d4:	f101 0174 	add.w	r1, r1, #116	@ 0x74
 80022d8:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80022dc:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fec7 	bl	8001080 <evaluate>
  for (int i = 0; i < pop.size; i++) {
 80022f2:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80022f6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002302:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 800230c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002310:	f6a3 634c 	subw	r3, r3, #3660	@ 0xe4c
 8002314:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8002318:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 800231c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	dbd4      	blt.n	80022d0 <main+0x8c>
  }

  uint32_t start_time = HAL_GetTick();
 8002326:	f000 fd19 	bl	8002d5c <HAL_GetTick>
 800232a:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 800232e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002332:	6018      	str	r0, [r3, #0]

  // Main loop
  for (int iter = 0; iter < MAX_ITER; iter++) {
 8002334:	2300      	movs	r3, #0
 8002336:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 800233a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e185      	b.n	800264e <main+0x40a>
	  // Generate offspring
	  crossover(&pop, &offspring_cross);
 8002342:	f507 527f 	add.w	r2, r7, #16320	@ 0x3fc0
 8002346:	f102 0220 	add.w	r2, r2, #32
 800234a:	f507 439b 	add.w	r3, r7, #19840	@ 0x4d80
 800234e:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe ff0f 	bl	8001178 <crossover>
	  mutation(&pop, &offspring_mut);
 800235a:	f507 5348 	add.w	r3, r7, #12800	@ 0x3200
 800235e:	3b34      	subs	r3, #52	@ 0x34
 8002360:	f507 429b 	add.w	r2, r7, #19840	@ 0x4d80
 8002364:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f7fe ffd8 	bl	8001320 <mutation>
	  local_search(&pop, &offspring_ls);
 8002370:	f507 530f 	add.w	r3, r7, #9152	@ 0x23c0
 8002374:	3b08      	subs	r3, #8
 8002376:	f507 429b 	add.w	r2, r7, #19840	@ 0x4d80
 800237a:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f7ff f839 	bl	80013f8 <local_search>

	  // Combine populations
	  combined.size = 0;
 8002386:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800238a:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800238e:	2200      	movs	r2, #0
 8002390:	f8c3 2e10 	str.w	r2, [r3, #3600]	@ 0xe10
	  for (int i = 0; i < pop.size; i++) {
 8002394:	2300      	movs	r3, #0
 8002396:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 800239a:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e034      	b.n	800240c <main+0x1c8>
		  combined.solutions[combined.size++] = pop.solutions[i];
 80023a2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 80023a6:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 80023aa:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 80023ae:	1c51      	adds	r1, r2, #1
 80023b0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 80023b4:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 80023b8:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 80023bc:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 80023c0:	f2a3 619c 	subw	r1, r3, #1692	@ 0x69c
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	18c8      	adds	r0, r1, r3
 80023ce:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80023d2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80023d6:	f6a3 614c 	subw	r1, r3, #3660	@ 0xe4c
 80023da:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80023de:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	18ca      	adds	r2, r1, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < pop.size; i++) {
 80023f6:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80023fa:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002406:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002410:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002414:	f6a3 634c 	subw	r3, r3, #3660	@ 0xe4c
 8002418:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 800241c:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002420:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	dbbb      	blt.n	80023a2 <main+0x15e>
	  }
	  for (int i = 0; i < offspring_cross.size; i++) {
 800242a:	2300      	movs	r3, #0
 800242c:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002430:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e034      	b.n	80024a2 <main+0x25e>
		  combined.solutions[combined.size++] = offspring_cross.solutions[i];
 8002438:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800243c:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 8002440:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8002444:	1c51      	adds	r1, r2, #1
 8002446:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800244a:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800244e:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 8002452:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 8002456:	f2a3 619c 	subw	r1, r3, #1692	@ 0x69c
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	18c8      	adds	r0, r1, r3
 8002464:	f507 4398 	add.w	r3, r7, #19456	@ 0x4c00
 8002468:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800246c:	f5a3 6146 	sub.w	r1, r3, #3168	@ 0xc60
 8002470:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002474:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	18ca      	adds	r2, r1, r3
 8002484:	4603      	mov	r3, r0
 8002486:	ca07      	ldmia	r2, {r0, r1, r2}
 8002488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < offspring_cross.size; i++) {
 800248c:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002490:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 800249c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	f507 4398 	add.w	r3, r7, #19456	@ 0x4c00
 80024a6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80024aa:	f5a3 6346 	sub.w	r3, r3, #3168	@ 0xc60
 80024ae:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80024b2:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 80024b6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbbb      	blt.n	8002438 <main+0x1f4>
	  }
	  for (int i = 0; i < offspring_mut.size; i++) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 80024c6:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e032      	b.n	8002534 <main+0x2f0>
		  combined.solutions[combined.size++] = offspring_mut.solutions[i];
 80024ce:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 80024d2:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 80024d6:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 80024da:	1c51      	adds	r1, r2, #1
 80024dc:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 80024e0:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 80024e4:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 80024e8:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 80024ec:	f2a3 619c 	subw	r1, r3, #1692	@ 0x69c
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	18c8      	adds	r0, r1, r3
 80024fa:	f507 5371 	add.w	r3, r7, #15424	@ 0x3c40
 80024fe:	f6a3 2174 	subw	r1, r3, #2676	@ 0xa74
 8002502:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002506:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	18ca      	adds	r2, r1, r3
 8002516:	4603      	mov	r3, r0
 8002518:	ca07      	ldmia	r2, {r0, r1, r2}
 800251a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < offspring_mut.size; i++) {
 800251e:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002522:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 800252e:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	f507 5371 	add.w	r3, r7, #15424	@ 0x3c40
 8002538:	f6a3 2374 	subw	r3, r3, #2676	@ 0xa74
 800253c:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 8002540:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002544:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbbf      	blt.n	80024ce <main+0x28a>
	  }
	  for (int i = 0; i < offspring_ls.size; i++) {
 800254e:	2300      	movs	r3, #0
 8002550:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002554:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e03a      	b.n	80025d2 <main+0x38e>
 800255c:	080081dc 	.word	0x080081dc
 8002560:	20000208 	.word	0x20000208
 8002564:	447a0000 	.word	0x447a0000
 8002568:	3d872b02 	.word	0x3d872b02
		  combined.solutions[combined.size++] = offspring_ls.solutions[i];
 800256c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 8002570:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 8002574:	f8d3 2e10 	ldr.w	r2, [r3, #3600]	@ 0xe10
 8002578:	1c51      	adds	r1, r2, #1
 800257a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800257e:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 8002582:	f8c3 1e10 	str.w	r1, [r3, #3600]	@ 0xe10
 8002586:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800258a:	f2a3 619c 	subw	r1, r3, #1692	@ 0x69c
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	18c8      	adds	r0, r1, r3
 8002598:	f507 5331 	add.w	r3, r7, #11328	@ 0x2c40
 800259c:	f6a3 0188 	subw	r1, r3, #2184	@ 0x888
 80025a0:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80025a4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	18ca      	adds	r2, r1, r3
 80025b4:	4603      	mov	r3, r0
 80025b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  for (int i = 0; i < offspring_ls.size; i++) {
 80025bc:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80025c0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 80025cc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	f507 5331 	add.w	r3, r7, #11328	@ 0x2c40
 80025d6:	f6a3 0388 	subw	r3, r3, #2184	@ 0x888
 80025da:	f8d3 3e10 	ldr.w	r3, [r3, #3600]	@ 0xe10
 80025de:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 80025e2:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbbf      	blt.n	800256c <main+0x328>
	  }

	  selection(&combined, &selected);
 80025ec:	f507 62f8 	add.w	r2, r7, #1984	@ 0x7c0
 80025f0:	3a30      	subs	r2, #48	@ 0x30
 80025f2:	f507 53ae 	add.w	r3, r7, #5568	@ 0x15c0
 80025f6:	3b1c      	subs	r3, #28
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fab0 	bl	8001b60 <selection>
	  pop = selected;
 8002600:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002604:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002608:	f6a3 624c 	subw	r2, r3, #3660	@ 0xe4c
 800260c:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8002610:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f640 6314 	movw	r3, #3604	@ 0xe14
 800261c:	461a      	mov	r2, r3
 800261e:	f002 fe04 	bl	800522a <memcpy>
	  update_archive(&pop, &archive);
 8002622:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002626:	3b3c      	subs	r3, #60	@ 0x3c
 8002628:	f507 429b 	add.w	r2, r7, #19840	@ 0x4d80
 800262c:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7ff fccf 	bl	8001fd6 <update_archive>
  for (int iter = 0; iter < MAX_ITER; iter++) {
 8002638:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 800263c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002648:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002652:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2bc7      	cmp	r3, #199	@ 0xc7
 800265a:	f77f ae72 	ble.w	8002342 <main+0xfe>
  }

  uint32_t end_time = HAL_GetTick();
 800265e:	f000 fb7d 	bl	8002d5c <HAL_GetTick>
 8002662:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002666:	f103 0320 	add.w	r3, r3, #32
 800266a:	6018      	str	r0, [r3, #0]
  uint32_t elapsed_ms = end_time - start_time;
 800266c:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002670:	f103 0320 	add.w	r3, r3, #32
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 800267a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f507 42b8 	add.w	r2, r7, #23552	@ 0x5c00
 8002686:	f102 021c 	add.w	r2, r2, #28
 800268a:	6013      	str	r3, [r2, #0]

  float time_sec = elapsed_ms / 1000.0f;
 800268c:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002690:	f103 031c 	add.w	r3, r3, #28
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269e:	ed5f 6a4f 	vldr	s13, [pc, #-316]	@ 8002564 <main+0x320>
 80026a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a6:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80026aa:	f103 0318 	add.w	r3, r3, #24
 80026ae:	edc3 7a00 	vstr	s15, [r3]
  float energy_joules = VOLTAGE * CURRENT * time_sec;
 80026b2:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80026b6:	f103 0318 	add.w	r3, r3, #24
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ed1f 7a56 	vldr	s14, [pc, #-344]	@ 8002568 <main+0x324>
 80026c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c6:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80026ca:	f103 0314 	add.w	r3, r3, #20
 80026ce:	edc3 7a00 	vstr	s15, [r3]

  send_archive(&huart1, &archive);
 80026d2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80026d6:	3b3c      	subs	r3, #60	@ 0x3c
 80026d8:	4619      	mov	r1, r3
 80026da:	4820      	ldr	r0, [pc, #128]	@ (800275c <main+0x518>)
 80026dc:	f7ff fd66 	bl	80021ac <send_archive>

  char msg[128];
  snprintf(msg, sizeof(msg), "Done! Time: %lums (%.2fs), Energy: %.4fJ\r\n", elapsed_ms, time_sec, energy_joules);
 80026e0:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80026e4:	f103 0318 	add.w	r3, r3, #24
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	f7fd ff3d 	bl	8000568 <__aeabi_f2d>
 80026ee:	4604      	mov	r4, r0
 80026f0:	460d      	mov	r5, r1
 80026f2:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 80026f6:	f103 0314 	add.w	r3, r3, #20
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	f7fd ff34 	bl	8000568 <__aeabi_f2d>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002708:	383c      	subs	r0, #60	@ 0x3c
 800270a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800270e:	e9cd 4500 	strd	r4, r5, [sp]
 8002712:	f507 43b8 	add.w	r3, r7, #23552	@ 0x5c00
 8002716:	f103 031c 	add.w	r3, r3, #28
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a10      	ldr	r2, [pc, #64]	@ (8002760 <main+0x51c>)
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	f002 fc8a 	bl	8005038 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002724:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002728:	3b3c      	subs	r3, #60	@ 0x3c
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fdb0 	bl	8000290 <strlen>
 8002730:	4603      	mov	r3, r0
 8002732:	b29a      	uxth	r2, r3
 8002734:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8002738:	393c      	subs	r1, #60	@ 0x3c
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	4807      	ldr	r0, [pc, #28]	@ (800275c <main+0x518>)
 8002740:	f001 fb3a 	bl	8003db8 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002748:	4806      	ldr	r0, [pc, #24]	@ (8002764 <main+0x520>)
 800274a:	f000 fde2 	bl	8003312 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800274e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002752:	f000 fb0f 	bl	8002d74 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002756:	bf00      	nop
 8002758:	e7f4      	b.n	8002744 <main+0x500>
 800275a:	bf00      	nop
 800275c:	20000208 	.word	0x20000208
 8002760:	080081b0 	.word	0x080081b0
 8002764:	40021800 	.word	0x40021800

08002768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b094      	sub	sp, #80	@ 0x50
 800276c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800276e:	f107 0320 	add.w	r3, r7, #32
 8002772:	2230      	movs	r2, #48	@ 0x30
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fcd7 	bl	800512a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <SystemClock_Config+0xd8>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	4a2a      	ldr	r2, [pc, #168]	@ (8002840 <SystemClock_Config+0xd8>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279a:	6413      	str	r3, [r2, #64]	@ 0x40
 800279c:	4b28      	ldr	r3, [pc, #160]	@ (8002840 <SystemClock_Config+0xd8>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a8:	2300      	movs	r3, #0
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <SystemClock_Config+0xdc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a24      	ldr	r2, [pc, #144]	@ (8002844 <SystemClock_Config+0xdc>)
 80027b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <SystemClock_Config+0xdc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ce:	2302      	movs	r3, #2
 80027d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027d8:	2304      	movs	r3, #4
 80027da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027dc:	23b4      	movs	r3, #180	@ 0xb4
 80027de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027e0:	2302      	movs	r3, #2
 80027e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027e4:	2304      	movs	r3, #4
 80027e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fdfb 	bl	80033e8 <HAL_RCC_OscConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027f8:	f000 f8a2 	bl	8002940 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027fc:	f000 fda4 	bl	8003348 <HAL_PWREx_EnableOverDrive>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002806:	f000 f89b 	bl	8002940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800280a:	230f      	movs	r3, #15
 800280c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800280e:	2302      	movs	r3, #2
 8002810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002816:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800281a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800281c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	2105      	movs	r1, #5
 8002828:	4618      	mov	r0, r3
 800282a:	f001 f855 	bl	80038d8 <HAL_RCC_ClockConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002834:	f000 f884 	bl	8002940 <Error_Handler>
  }
}
 8002838:	bf00      	nop
 800283a:	3750      	adds	r7, #80	@ 0x50
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000

08002848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 800284e:	4a12      	ldr	r2, [pc, #72]	@ (8002898 <MX_USART1_UART_Init+0x50>)
 8002850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 8002854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800287e:	4805      	ldr	r0, [pc, #20]	@ (8002894 <MX_USART1_UART_Init+0x4c>)
 8002880:	f001 fa4a 	bl	8003d18 <HAL_UART_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800288a:	f000 f859 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000208 	.word	0x20000208
 8002898:	40011000 	.word	0x40011000

0800289c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028de:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <MX_GPIO_Init+0x9c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800290c:	480b      	ldr	r0, [pc, #44]	@ (800293c <MX_GPIO_Init+0xa0>)
 800290e:	f000 fce7 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4619      	mov	r1, r3
 800292a:	4804      	ldr	r0, [pc, #16]	@ (800293c <MX_GPIO_Init+0xa0>)
 800292c:	f000 fb2c 	bl	8002f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002930:	bf00      	nop
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	40021800 	.word	0x40021800

08002940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002944:	b672      	cpsid	i
}
 8002946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <Error_Handler+0x8>

0800294c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <HAL_MspInit+0x4c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	4a0f      	ldr	r2, [pc, #60]	@ (8002998 <HAL_MspInit+0x4c>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002960:	6453      	str	r3, [r2, #68]	@ 0x44
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <HAL_MspInit+0x4c>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_MspInit+0x4c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4a08      	ldr	r2, [pc, #32]	@ (8002998 <HAL_MspInit+0x4c>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_MspInit+0x4c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800

0800299c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	@ 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <HAL_UART_MspInit+0x84>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12c      	bne.n	8002a18 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <HAL_UART_MspInit+0x88>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a17      	ldr	r2, [pc, #92]	@ (8002a24 <HAL_UART_MspInit+0x88>)
 80029c8:	f043 0310 	orr.w	r3, r3, #16
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_UART_MspInit+0x88>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <HAL_UART_MspInit+0x88>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <HAL_UART_MspInit+0x88>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <HAL_UART_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a08:	2307      	movs	r3, #7
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4619      	mov	r1, r3
 8002a12:	4805      	ldr	r0, [pc, #20]	@ (8002a28 <HAL_UART_MspInit+0x8c>)
 8002a14:	f000 fab8 	bl	8002f88 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a18:	bf00      	nop
 8002a1a:	3728      	adds	r7, #40	@ 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40011000 	.word	0x40011000
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <NMI_Handler+0x4>

08002a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <MemManage_Handler+0x4>

08002a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a82:	f000 f957 	bl	8002d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  return 1;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_kill>:

int _kill(int pid, int sig)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa4:	f002 fb94 	bl	80051d0 <__errno>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2216      	movs	r2, #22
 8002aac:	601a      	str	r2, [r3, #0]
  return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_exit>:

void _exit (int status)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffe7 	bl	8002a9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <_exit+0x12>

08002ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e00a      	b.n	8002af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae2:	f3af 8000 	nop.w
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	b2ca      	uxtb	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf0      	blt.n	8002ae2 <_read+0x12>
  }

  return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e009      	b.n	8002b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	60ba      	str	r2, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbf1      	blt.n	8002b1c <_write+0x12>
  }
  return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_close>:

int _close(int file)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <_isatty>:

int _isatty(int file)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <_sbrk+0x5c>)
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <_sbrk+0x60>)
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <_sbrk+0x64>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <_sbrk+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bdc:	f002 faf8 	bl	80051d0 <__errno>
 8002be0:	4603      	mov	r3, r0
 8002be2:	220c      	movs	r2, #12
 8002be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e009      	b.n	8002c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <_sbrk+0x64>)
 8002bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20030000 	.word	0x20030000
 8002c0c:	00000400 	.word	0x00000400
 8002c10:	20000250 	.word	0x20000250
 8002c14:	200003a8 	.word	0x200003a8

08002c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <SystemInit+0x20>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <SystemInit+0x20>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c40:	f7ff ffea 	bl	8002c18 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c44:	480c      	ldr	r0, [pc, #48]	@ (8002c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c46:	490d      	ldr	r1, [pc, #52]	@ (8002c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c48:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c4c:	e002      	b.n	8002c54 <LoopCopyDataInit>

08002c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c52:	3304      	adds	r3, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c58:	d3f9      	bcc.n	8002c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c60:	e001      	b.n	8002c66 <LoopFillZerobss>

08002c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c64:	3204      	adds	r2, #4

08002c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c68:	d3fb      	bcc.n	8002c62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c6a:	f002 fab7 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6e:	f7ff fae9 	bl	8002244 <main>
  bx  lr    
 8002c72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002c80:	08008620 	.word	0x08008620
  ldr r2, =_sbss
 8002c84:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002c88:	200003a4 	.word	0x200003a4

08002c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <ADC_IRQHandler>
	...

08002c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <HAL_Init+0x40>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_Init+0x40>)
 8002ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <HAL_Init+0x40>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f000 f931 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cbe:	200f      	movs	r0, #15
 8002cc0:	f000 f808 	bl	8002cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc4:	f7ff fe42 	bl	800294c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <HAL_InitTick+0x54>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <HAL_InitTick+0x58>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f93b 	bl	8002f6e <HAL_SYSTICK_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00e      	b.n	8002d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	d80a      	bhi.n	8002d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f000 f911 	bl	8002f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d14:	4a06      	ldr	r2, [pc, #24]	@ (8002d30 <HAL_InitTick+0x5c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000018 	.word	0x20000018
 8002d2c:	20000020 	.word	0x20000020
 8002d30:	2000001c 	.word	0x2000001c

08002d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_IncTick+0x20>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_IncTick+0x24>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <HAL_IncTick+0x24>)
 8002d46:	6013      	str	r3, [r2, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000020 	.word	0x20000020
 8002d58:	20000254 	.word	0x20000254

08002d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d60:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <HAL_GetTick+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000254 	.word	0x20000254

08002d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff ffee 	bl	8002d5c <HAL_GetTick>
 8002d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d005      	beq.n	8002d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <HAL_Delay+0x44>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d9a:	bf00      	nop
 8002d9c:	f7ff ffde 	bl	8002d5c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d8f7      	bhi.n	8002d9c <HAL_Delay+0x28>
  {
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000020 	.word	0x20000020

08002dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dee:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	60d3      	str	r3, [r2, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <__NVIC_GetPriorityGrouping+0x18>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 0307 	and.w	r3, r3, #7
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	@ (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	@ (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	@ 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eec:	d301      	bcc.n	8002ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <SysTick_Config+0x40>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efa:	210f      	movs	r1, #15
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f7ff ff8e 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <SysTick_Config+0x40>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <SysTick_Config+0x40>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff47 	bl	8002dbc <__NVIC_SetPriorityGrouping>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f48:	f7ff ff5c 	bl	8002e04 <__NVIC_GetPriorityGrouping>
 8002f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f7ff ff8e 	bl	8002e74 <NVIC_EncodePriority>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff5d 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffb0 	bl	8002edc <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e177      	b.n	8003294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	f040 8166 	bne.w	800328e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d005      	beq.n	8002fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d130      	bne.n	800303c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 0201 	and.w	r2, r3, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b03      	cmp	r3, #3
 8003046:	d017      	beq.n	8003078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d123      	bne.n	80030cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80c0 	beq.w	800328e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b66      	ldr	r3, [pc, #408]	@ (80032ac <HAL_GPIO_Init+0x324>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	4a65      	ldr	r2, [pc, #404]	@ (80032ac <HAL_GPIO_Init+0x324>)
 8003118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800311c:	6453      	str	r3, [r2, #68]	@ 0x44
 800311e:	4b63      	ldr	r3, [pc, #396]	@ (80032ac <HAL_GPIO_Init+0x324>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312a:	4a61      	ldr	r2, [pc, #388]	@ (80032b0 <HAL_GPIO_Init+0x328>)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a58      	ldr	r2, [pc, #352]	@ (80032b4 <HAL_GPIO_Init+0x32c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d037      	beq.n	80031c6 <HAL_GPIO_Init+0x23e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a57      	ldr	r2, [pc, #348]	@ (80032b8 <HAL_GPIO_Init+0x330>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d031      	beq.n	80031c2 <HAL_GPIO_Init+0x23a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_GPIO_Init+0x334>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02b      	beq.n	80031be <HAL_GPIO_Init+0x236>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a55      	ldr	r2, [pc, #340]	@ (80032c0 <HAL_GPIO_Init+0x338>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d025      	beq.n	80031ba <HAL_GPIO_Init+0x232>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a54      	ldr	r2, [pc, #336]	@ (80032c4 <HAL_GPIO_Init+0x33c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01f      	beq.n	80031b6 <HAL_GPIO_Init+0x22e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a53      	ldr	r2, [pc, #332]	@ (80032c8 <HAL_GPIO_Init+0x340>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d019      	beq.n	80031b2 <HAL_GPIO_Init+0x22a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a52      	ldr	r2, [pc, #328]	@ (80032cc <HAL_GPIO_Init+0x344>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x226>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a51      	ldr	r2, [pc, #324]	@ (80032d0 <HAL_GPIO_Init+0x348>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x222>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a50      	ldr	r2, [pc, #320]	@ (80032d4 <HAL_GPIO_Init+0x34c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x21e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4f      	ldr	r2, [pc, #316]	@ (80032d8 <HAL_GPIO_Init+0x350>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x21a>
 800319e:	2309      	movs	r3, #9
 80031a0:	e012      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031a2:	230a      	movs	r3, #10
 80031a4:	e010      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031a6:	2308      	movs	r3, #8
 80031a8:	e00e      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031aa:	2307      	movs	r3, #7
 80031ac:	e00c      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031ae:	2306      	movs	r3, #6
 80031b0:	e00a      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031b2:	2305      	movs	r3, #5
 80031b4:	e008      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031c6:	2300      	movs	r3, #0
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d8:	4935      	ldr	r1, [pc, #212]	@ (80032b0 <HAL_GPIO_Init+0x328>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031e6:	4b3d      	ldr	r3, [pc, #244]	@ (80032dc <HAL_GPIO_Init+0x354>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320a:	4a34      	ldr	r2, [pc, #208]	@ (80032dc <HAL_GPIO_Init+0x354>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003210:	4b32      	ldr	r3, [pc, #200]	@ (80032dc <HAL_GPIO_Init+0x354>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003234:	4a29      	ldr	r2, [pc, #164]	@ (80032dc <HAL_GPIO_Init+0x354>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323a:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_GPIO_Init+0x354>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800325e:	4a1f      	ldr	r2, [pc, #124]	@ (80032dc <HAL_GPIO_Init+0x354>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003264:	4b1d      	ldr	r3, [pc, #116]	@ (80032dc <HAL_GPIO_Init+0x354>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003288:	4a14      	ldr	r2, [pc, #80]	@ (80032dc <HAL_GPIO_Init+0x354>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	f67f ae84 	bls.w	8002fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	@ 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40013800 	.word	0x40013800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40021400 	.word	0x40021400
 80032cc:	40021800 	.word	0x40021800
 80032d0:	40021c00 	.word	0x40021c00
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40022400 	.word	0x40022400
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	619a      	str	r2, [r3, #24]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	041a      	lsls	r2, r3, #16
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	43d9      	mvns	r1, r3
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	400b      	ands	r3, r1
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800336e:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x94>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003374:	f7ff fcf2 	bl	8002d5c <HAL_GetTick>
 8003378:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800337a:	e009      	b.n	8003390 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800337c:	f7ff fcee 	bl	8002d5c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800338a:	d901      	bls.n	8003390 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e01f      	b.n	80033d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800339c:	d1ee      	bne.n	800337c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800339e:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a4:	f7ff fcda 	bl	8002d5c <HAL_GetTick>
 80033a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033aa:	e009      	b.n	80033c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ac:	f7ff fcd6 	bl	8002d5c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033ba:	d901      	bls.n	80033c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e007      	b.n	80033d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c0:	4b07      	ldr	r3, [pc, #28]	@ (80033e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033cc:	d1ee      	bne.n	80033ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	420e0040 	.word	0x420e0040
 80033e0:	40007000 	.word	0x40007000
 80033e4:	420e0044 	.word	0x420e0044

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e267      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003406:	4b88      	ldr	r3, [pc, #544]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d00c      	beq.n	800342c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003412:	4b85      	ldr	r3, [pc, #532]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800341a:	2b08      	cmp	r3, #8
 800341c:	d112      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b82      	ldr	r3, [pc, #520]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800342a:	d10b      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	4b7e      	ldr	r3, [pc, #504]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e242      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344c:	d106      	bne.n	800345c <HAL_RCC_OscConfig+0x74>
 800344e:	4b76      	ldr	r3, [pc, #472]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01d      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b70      	ldr	r3, [pc, #448]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6f      	ldr	r2, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b6d      	ldr	r3, [pc, #436]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6c      	ldr	r2, [pc, #432]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 8003480:	4b69      	ldr	r3, [pc, #420]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a68      	ldr	r2, [pc, #416]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b66      	ldr	r3, [pc, #408]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a65      	ldr	r2, [pc, #404]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7ff fc5c 	bl	8002d5c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a8:	f7ff fc58 	bl	8002d5c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	@ 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e207      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff fc48 	bl	8002d5c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7ff fc44 	bl	8002d5c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	@ 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1f3      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	4b51      	ldr	r3, [pc, #324]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d063      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350a:	4b47      	ldr	r3, [pc, #284]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003512:	2b08      	cmp	r3, #8
 8003514:	d11c      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b44      	ldr	r3, [pc, #272]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e1c7      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4937      	ldr	r1, [pc, #220]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	e03a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003558:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_RCC_OscConfig+0x244>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7ff fbfd 	bl	8002d5c <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003566:	f7ff fbf9 	bl	8002d5c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1a8      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	4b2b      	ldr	r3, [pc, #172]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003584:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4925      	ldr	r1, [pc, #148]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCC_OscConfig+0x244>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7ff fbdc 	bl	8002d5c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a8:	f7ff fbd8 	bl	8002d5c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e187      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d036      	beq.n	8003640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <HAL_RCC_OscConfig+0x248>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7ff fbbc 	bl	8002d5c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7ff fbb8 	bl	8002d5c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e167      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x200>
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_RCC_OscConfig+0x248>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7ff fba5 	bl	8002d5c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00e      	b.n	8003634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7ff fba1 	bl	8002d5c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d907      	bls.n	8003634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e150      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003628:	40023800 	.word	0x40023800
 800362c:	42470000 	.word	0x42470000
 8003630:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	4b88      	ldr	r3, [pc, #544]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ea      	bne.n	8003616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8097 	beq.w	800377c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b81      	ldr	r3, [pc, #516]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b7d      	ldr	r3, [pc, #500]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4a7c      	ldr	r2, [pc, #496]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	@ 0x40
 800366e:	4b7a      	ldr	r3, [pc, #488]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b77      	ldr	r3, [pc, #476]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d118      	bne.n	80036bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368a:	4b74      	ldr	r3, [pc, #464]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a73      	ldr	r2, [pc, #460]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7ff fb61 	bl	8002d5c <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7ff fb5d 	bl	8002d5c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e10c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b6a      	ldr	r3, [pc, #424]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2ea>
 80036c4:	4b64      	ldr	r3, [pc, #400]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	4a63      	ldr	r2, [pc, #396]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d0:	e01c      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x30c>
 80036da:	4b5f      	ldr	r3, [pc, #380]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	4a5e      	ldr	r2, [pc, #376]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036f4:	4b58      	ldr	r3, [pc, #352]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	4a57      	ldr	r2, [pc, #348]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003700:	4b55      	ldr	r3, [pc, #340]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a54      	ldr	r2, [pc, #336]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7ff fb22 	bl	8002d5c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7ff fb1e 	bl	8002d5c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0cb      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	4b49      	ldr	r3, [pc, #292]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ee      	beq.n	800371c <HAL_RCC_OscConfig+0x334>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7ff fb0c 	bl	8002d5c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7ff fb08 	bl	8002d5c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0b5      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	4b3e      	ldr	r3, [pc, #248]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ee      	bne.n	8003748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4b39      	ldr	r3, [pc, #228]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	4a38      	ldr	r2, [pc, #224]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a1 	beq.w	80038c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003786:	4b34      	ldr	r3, [pc, #208]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d05c      	beq.n	800384c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d141      	bne.n	800381e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7ff fadc 	bl	8002d5c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7ff fad8 	bl	8002d5c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e087      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b27      	ldr	r3, [pc, #156]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	491b      	ldr	r1, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7ff fab1 	bl	8002d5c <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fe:	f7ff faad 	bl	8002d5c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e05c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x416>
 800381c:	e054      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7ff fa9a 	bl	8002d5c <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7ff fa96 	bl	8002d5c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e045      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x444>
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e038      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
 8003860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <HAL_RCC_OscConfig+0x4ec>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d028      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d121      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800389a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	d111      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cc      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b68      	ldr	r3, [pc, #416]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90c      	bls.n	8003914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d119      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e067      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b37      	ldr	r3, [pc, #220]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4934      	ldr	r1, [pc, #208]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7ff f9c8 	bl	8002d5c <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7ff f9c4 	bl	8002d5c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20c      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f821 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490a      	ldr	r1, [pc, #40]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff f928 	bl	8002cd4 <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	080081e8 	.word	0x080081e8
 8003a9c:	20000018 	.word	0x20000018
 8003aa0:	2000001c 	.word	0x2000001c

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b094      	sub	sp, #80	@ 0x50
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abc:	4b79      	ldr	r3, [pc, #484]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f200 80e1 	bhi.w	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad6:	e0db      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b73      	ldr	r3, [pc, #460]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003adc:	e0db      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ade:	4b73      	ldr	r3, [pc, #460]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x208>)
 8003ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aee:	4b6d      	ldr	r3, [pc, #436]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	2200      	movs	r2, #0
 8003b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	0159      	lsls	r1, r3, #5
 8003b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b28:	0150      	lsls	r0, r2, #5
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4621      	mov	r1, r4
 8003b30:	1a51      	subs	r1, r2, r1
 8003b32:	6139      	str	r1, [r7, #16]
 8003b34:	4629      	mov	r1, r5
 8003b36:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b52:	4651      	mov	r1, sl
 8003b54:	018a      	lsls	r2, r1, #6
 8003b56:	4651      	mov	r1, sl
 8003b58:	ebb2 0801 	subs.w	r8, r2, r1
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b76:	4690      	mov	r8, r2
 8003b78:	4699      	mov	r9, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	eb18 0303 	adds.w	r3, r8, r3
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	462b      	mov	r3, r5
 8003b84:	eb49 0303 	adc.w	r3, r9, r3
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b96:	4629      	mov	r1, r5
 8003b98:	024b      	lsls	r3, r1, #9
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	024a      	lsls	r2, r1, #9
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bb4:	f7fd f858 	bl	8000c68 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc0:	e058      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b38      	ldr	r3, [pc, #224]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	4611      	mov	r1, r2
 8003bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bd2:	623b      	str	r3, [r7, #32]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	f04f 0000 	mov.w	r0, #0
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	0159      	lsls	r1, r3, #5
 8003bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bee:	0150      	lsls	r0, r2, #5
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c14:	ebb2 040a 	subs.w	r4, r2, sl
 8003c18:	eb63 050b 	sbc.w	r5, r3, fp
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	00eb      	lsls	r3, r5, #3
 8003c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2a:	00e2      	lsls	r2, r4, #3
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	18e3      	adds	r3, r4, r3
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	464b      	mov	r3, r9
 8003c38:	eb45 0303 	adc.w	r3, r5, r3
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	028b      	lsls	r3, r1, #10
 8003c4e:	4621      	mov	r1, r4
 8003c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c54:	4621      	mov	r1, r4
 8003c56:	028a      	lsls	r2, r1, #10
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	61fa      	str	r2, [r7, #28]
 8003c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c68:	f7fc fffe 	bl	8000c68 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3750      	adds	r7, #80	@ 0x50
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000018 	.word	0x20000018

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ccc:	f7ff fff0 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	@ (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	080081f8 	.word	0x080081f8

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf4:	f7ff ffdc 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0b5b      	lsrs	r3, r3, #13
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	@ (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	080081f8 	.word	0x080081f8

08003d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e042      	b.n	8003db0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fe2c 	bl	800299c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	@ 0x24
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f973 	bl	8004048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	@ 0x28
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d175      	bne.n	8003ec4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Transmit+0x2c>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e06e      	b.n	8003ec6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2221      	movs	r2, #33	@ 0x21
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df6:	f7fe ffb1 	bl	8002d5c <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e10:	d108      	bne.n	8003e24 <HAL_UART_Transmit+0x6c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e003      	b.n	8003e2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e2c:	e02e      	b.n	8003e8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f848 	bl	8003ece <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e03a      	b.n	8003ec6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e007      	b.n	8003e7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1cb      	bne.n	8003e2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	@ 0x40
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f814 	bl	8003ece <UART_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e006      	b.n	8003ec6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ede:	e03b      	b.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d037      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee8:	f7fe ff38 	bl	8002d5c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	6a3a      	ldr	r2, [r7, #32]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d302      	bcc.n	8003efe <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e03a      	b.n	8003f78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d023      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b80      	cmp	r3, #128	@ 0x80
 8003f14:	d020      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d01d      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d116      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f81d 	bl	8003f80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e00f      	b.n	8003f78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d0b4      	beq.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b095      	sub	sp, #84	@ 0x54
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fa8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d119      	bne.n	800402c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	60bb      	str	r3, [r7, #8]
   return(result);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f023 0310 	bic.w	r3, r3, #16
 800400e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004018:	61ba      	str	r2, [r7, #24]
 800401a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800403a:	bf00      	nop
 800403c:	3754      	adds	r7, #84	@ 0x54
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b0c0      	sub	sp, #256	@ 0x100
 800404e:	af00      	add	r7, sp, #0
 8004050:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	68d9      	ldr	r1, [r3, #12]
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	ea40 0301 	orr.w	r3, r0, r1
 8004070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	431a      	orrs	r2, r3
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040a0:	f021 010c 	bic.w	r1, r1, #12
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040ae:	430b      	orrs	r3, r1
 80040b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	6999      	ldr	r1, [r3, #24]
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	ea40 0301 	orr.w	r3, r0, r1
 80040ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004314 <UART_SetConfig+0x2cc>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d005      	beq.n	80040e8 <UART_SetConfig+0xa0>
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004318 <UART_SetConfig+0x2d0>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d104      	bne.n	80040f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7ff fe02 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 80040ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040f0:	e003      	b.n	80040fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040f2:	f7ff fde9 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 80040f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004104:	f040 810c 	bne.w	8004320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004112:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	1891      	adds	r1, r2, r2
 8004120:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004122:	415b      	adcs	r3, r3
 8004124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800412a:	4621      	mov	r1, r4
 800412c:	eb12 0801 	adds.w	r8, r2, r1
 8004130:	4629      	mov	r1, r5
 8004132:	eb43 0901 	adc.w	r9, r3, r1
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414a:	4690      	mov	r8, r2
 800414c:	4699      	mov	r9, r3
 800414e:	4623      	mov	r3, r4
 8004150:	eb18 0303 	adds.w	r3, r8, r3
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004158:	462b      	mov	r3, r5
 800415a:	eb49 0303 	adc.w	r3, r9, r3
 800415e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800416e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004176:	460b      	mov	r3, r1
 8004178:	18db      	adds	r3, r3, r3
 800417a:	653b      	str	r3, [r7, #80]	@ 0x50
 800417c:	4613      	mov	r3, r2
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	657b      	str	r3, [r7, #84]	@ 0x54
 8004184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800418c:	f7fc fd6c 	bl	8000c68 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4b61      	ldr	r3, [pc, #388]	@ (800431c <UART_SetConfig+0x2d4>)
 8004196:	fba3 2302 	umull	r2, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	011c      	lsls	r4, r3, #4
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041b8:	415b      	adcs	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041c0:	4641      	mov	r1, r8
 80041c2:	eb12 0a01 	adds.w	sl, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb43 0b01 	adc.w	fp, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e0:	4692      	mov	sl, r2
 80041e2:	469b      	mov	fp, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	eb1a 0303 	adds.w	r3, sl, r3
 80041ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb4b 0303 	adc.w	r3, fp, r3
 80041f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004204:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800420c:	460b      	mov	r3, r1
 800420e:	18db      	adds	r3, r3, r3
 8004210:	643b      	str	r3, [r7, #64]	@ 0x40
 8004212:	4613      	mov	r3, r2
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	647b      	str	r3, [r7, #68]	@ 0x44
 800421a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800421e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004222:	f7fc fd21 	bl	8000c68 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4611      	mov	r1, r2
 800422c:	4b3b      	ldr	r3, [pc, #236]	@ (800431c <UART_SetConfig+0x2d4>)
 800422e:	fba3 2301 	umull	r2, r3, r3, r1
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2264      	movs	r2, #100	@ 0x64
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	1acb      	subs	r3, r1, r3
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004242:	4b36      	ldr	r3, [pc, #216]	@ (800431c <UART_SetConfig+0x2d4>)
 8004244:	fba3 2302 	umull	r2, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004250:	441c      	add	r4, r3
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800425c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800426c:	415b      	adcs	r3, r3
 800426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6339      	str	r1, [r7, #48]	@ 0x30
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a8:	464b      	mov	r3, r9
 80042aa:	460a      	mov	r2, r1
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042c8:	460b      	mov	r3, r1
 80042ca:	18db      	adds	r3, r3, r3
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ce:	4613      	mov	r3, r2
 80042d0:	eb42 0303 	adc.w	r3, r2, r3
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042de:	f7fc fcc3 	bl	8000c68 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <UART_SetConfig+0x2d4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	@ 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	3332      	adds	r3, #50	@ 0x32
 80042fa:	4a08      	ldr	r2, [pc, #32]	@ (800431c <UART_SetConfig+0x2d4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 0207 	and.w	r2, r3, #7
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4422      	add	r2, r4
 800430e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004310:	e106      	b.n	8004520 <UART_SetConfig+0x4d8>
 8004312:	bf00      	nop
 8004314:	40011000 	.word	0x40011000
 8004318:	40011400 	.word	0x40011400
 800431c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800432a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800432e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	1891      	adds	r1, r2, r2
 8004338:	6239      	str	r1, [r7, #32]
 800433a:	415b      	adcs	r3, r3
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
 800433e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004342:	4641      	mov	r1, r8
 8004344:	1854      	adds	r4, r2, r1
 8004346:	4649      	mov	r1, r9
 8004348:	eb43 0501 	adc.w	r5, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	00eb      	lsls	r3, r5, #3
 8004356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435a:	00e2      	lsls	r2, r4, #3
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	4643      	mov	r3, r8
 8004362:	18e3      	adds	r3, r4, r3
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004368:	464b      	mov	r3, r9
 800436a:	eb45 0303 	adc.w	r3, r5, r3
 800436e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800437e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800438e:	4629      	mov	r1, r5
 8004390:	008b      	lsls	r3, r1, #2
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004398:	4621      	mov	r1, r4
 800439a:	008a      	lsls	r2, r1, #2
 800439c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043a0:	f7fc fc62 	bl	8000c68 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4b60      	ldr	r3, [pc, #384]	@ (800452c <UART_SetConfig+0x4e4>)
 80043aa:	fba3 2302 	umull	r2, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	011c      	lsls	r4, r3, #4
 80043b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	61b9      	str	r1, [r7, #24]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6139      	str	r1, [r7, #16]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004408:	464b      	mov	r3, r9
 800440a:	460a      	mov	r2, r1
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800441e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800442c:	4649      	mov	r1, r9
 800442e:	008b      	lsls	r3, r1, #2
 8004430:	4641      	mov	r1, r8
 8004432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004436:	4641      	mov	r1, r8
 8004438:	008a      	lsls	r2, r1, #2
 800443a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800443e:	f7fc fc13 	bl	8000c68 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b38      	ldr	r3, [pc, #224]	@ (800452c <UART_SetConfig+0x4e4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	@ 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	3332      	adds	r3, #50	@ 0x32
 800445c:	4a33      	ldr	r2, [pc, #204]	@ (800452c <UART_SetConfig+0x4e4>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004468:	441c      	add	r4, r3
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	673b      	str	r3, [r7, #112]	@ 0x70
 8004472:	677a      	str	r2, [r7, #116]	@ 0x74
 8004474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	1891      	adds	r1, r2, r2
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	415b      	adcs	r3, r3
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004488:	4641      	mov	r1, r8
 800448a:	1851      	adds	r1, r2, r1
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	4649      	mov	r1, r9
 8004490:	414b      	adcs	r3, r1
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044a0:	4659      	mov	r1, fp
 80044a2:	00cb      	lsls	r3, r1, #3
 80044a4:	4651      	mov	r1, sl
 80044a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044aa:	4651      	mov	r1, sl
 80044ac:	00ca      	lsls	r2, r1, #3
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	4642      	mov	r2, r8
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ba:	464b      	mov	r3, r9
 80044bc:	460a      	mov	r2, r1
 80044be:	eb42 0303 	adc.w	r3, r2, r3
 80044c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044ee:	f7fc fbbb 	bl	8000c68 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <UART_SetConfig+0x4e4>)
 80044f8:	fba3 1302 	umull	r1, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	2164      	movs	r1, #100	@ 0x64
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	3332      	adds	r3, #50	@ 0x32
 800450a:	4a08      	ldr	r2, [pc, #32]	@ (800452c <UART_SetConfig+0x4e4>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4422      	add	r2, r4
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004526:	46bd      	mov	sp, r7
 8004528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <srand>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <srand+0x44>)
 8004534:	681d      	ldr	r5, [r3, #0]
 8004536:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004538:	4604      	mov	r4, r0
 800453a:	b9b3      	cbnz	r3, 800456a <srand+0x3a>
 800453c:	2018      	movs	r0, #24
 800453e:	f001 fd45 	bl	8005fcc <malloc>
 8004542:	4602      	mov	r2, r0
 8004544:	6328      	str	r0, [r5, #48]	@ 0x30
 8004546:	b920      	cbnz	r0, 8004552 <srand+0x22>
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <srand+0x48>)
 800454a:	480c      	ldr	r0, [pc, #48]	@ (800457c <srand+0x4c>)
 800454c:	2146      	movs	r1, #70	@ 0x46
 800454e:	f000 fe7b 	bl	8005248 <__assert_func>
 8004552:	490b      	ldr	r1, [pc, #44]	@ (8004580 <srand+0x50>)
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <srand+0x54>)
 8004556:	e9c0 1300 	strd	r1, r3, [r0]
 800455a:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <srand+0x58>)
 800455c:	6083      	str	r3, [r0, #8]
 800455e:	230b      	movs	r3, #11
 8004560:	8183      	strh	r3, [r0, #12]
 8004562:	2100      	movs	r1, #0
 8004564:	2001      	movs	r0, #1
 8004566:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800456a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800456c:	2200      	movs	r2, #0
 800456e:	611c      	str	r4, [r3, #16]
 8004570:	615a      	str	r2, [r3, #20]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	20000030 	.word	0x20000030
 8004578:	08008200 	.word	0x08008200
 800457c:	08008217 	.word	0x08008217
 8004580:	abcd330e 	.word	0xabcd330e
 8004584:	e66d1234 	.word	0xe66d1234
 8004588:	0005deec 	.word	0x0005deec

0800458c <rand>:
 800458c:	4b16      	ldr	r3, [pc, #88]	@ (80045e8 <rand+0x5c>)
 800458e:	b510      	push	{r4, lr}
 8004590:	681c      	ldr	r4, [r3, #0]
 8004592:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004594:	b9b3      	cbnz	r3, 80045c4 <rand+0x38>
 8004596:	2018      	movs	r0, #24
 8004598:	f001 fd18 	bl	8005fcc <malloc>
 800459c:	4602      	mov	r2, r0
 800459e:	6320      	str	r0, [r4, #48]	@ 0x30
 80045a0:	b920      	cbnz	r0, 80045ac <rand+0x20>
 80045a2:	4b12      	ldr	r3, [pc, #72]	@ (80045ec <rand+0x60>)
 80045a4:	4812      	ldr	r0, [pc, #72]	@ (80045f0 <rand+0x64>)
 80045a6:	2152      	movs	r1, #82	@ 0x52
 80045a8:	f000 fe4e 	bl	8005248 <__assert_func>
 80045ac:	4911      	ldr	r1, [pc, #68]	@ (80045f4 <rand+0x68>)
 80045ae:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <rand+0x6c>)
 80045b0:	e9c0 1300 	strd	r1, r3, [r0]
 80045b4:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <rand+0x70>)
 80045b6:	6083      	str	r3, [r0, #8]
 80045b8:	230b      	movs	r3, #11
 80045ba:	8183      	strh	r3, [r0, #12]
 80045bc:	2100      	movs	r1, #0
 80045be:	2001      	movs	r0, #1
 80045c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80045c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80045c6:	480e      	ldr	r0, [pc, #56]	@ (8004600 <rand+0x74>)
 80045c8:	690b      	ldr	r3, [r1, #16]
 80045ca:	694c      	ldr	r4, [r1, #20]
 80045cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004604 <rand+0x78>)
 80045ce:	4358      	muls	r0, r3
 80045d0:	fb02 0004 	mla	r0, r2, r4, r0
 80045d4:	fba3 3202 	umull	r3, r2, r3, r2
 80045d8:	3301      	adds	r3, #1
 80045da:	eb40 0002 	adc.w	r0, r0, r2
 80045de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80045e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	20000030 	.word	0x20000030
 80045ec:	08008200 	.word	0x08008200
 80045f0:	08008217 	.word	0x08008217
 80045f4:	abcd330e 	.word	0xabcd330e
 80045f8:	e66d1234 	.word	0xe66d1234
 80045fc:	0005deec 	.word	0x0005deec
 8004600:	5851f42d 	.word	0x5851f42d
 8004604:	4c957f2d 	.word	0x4c957f2d

08004608 <__cvt>:
 8004608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	ec57 6b10 	vmov	r6, r7, d0
 8004610:	2f00      	cmp	r7, #0
 8004612:	460c      	mov	r4, r1
 8004614:	4619      	mov	r1, r3
 8004616:	463b      	mov	r3, r7
 8004618:	bfbb      	ittet	lt
 800461a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800461e:	461f      	movlt	r7, r3
 8004620:	2300      	movge	r3, #0
 8004622:	232d      	movlt	r3, #45	@ 0x2d
 8004624:	700b      	strb	r3, [r1, #0]
 8004626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004628:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800462c:	4691      	mov	r9, r2
 800462e:	f023 0820 	bic.w	r8, r3, #32
 8004632:	bfbc      	itt	lt
 8004634:	4632      	movlt	r2, r6
 8004636:	4616      	movlt	r6, r2
 8004638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800463c:	d005      	beq.n	800464a <__cvt+0x42>
 800463e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004642:	d100      	bne.n	8004646 <__cvt+0x3e>
 8004644:	3401      	adds	r4, #1
 8004646:	2102      	movs	r1, #2
 8004648:	e000      	b.n	800464c <__cvt+0x44>
 800464a:	2103      	movs	r1, #3
 800464c:	ab03      	add	r3, sp, #12
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	ab02      	add	r3, sp, #8
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	ec47 6b10 	vmov	d0, r6, r7
 8004658:	4653      	mov	r3, sl
 800465a:	4622      	mov	r2, r4
 800465c:	f000 fe9c 	bl	8005398 <_dtoa_r>
 8004660:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004664:	4605      	mov	r5, r0
 8004666:	d119      	bne.n	800469c <__cvt+0x94>
 8004668:	f019 0f01 	tst.w	r9, #1
 800466c:	d00e      	beq.n	800468c <__cvt+0x84>
 800466e:	eb00 0904 	add.w	r9, r0, r4
 8004672:	2200      	movs	r2, #0
 8004674:	2300      	movs	r3, #0
 8004676:	4630      	mov	r0, r6
 8004678:	4639      	mov	r1, r7
 800467a:	f7fc fa35 	bl	8000ae8 <__aeabi_dcmpeq>
 800467e:	b108      	cbz	r0, 8004684 <__cvt+0x7c>
 8004680:	f8cd 900c 	str.w	r9, [sp, #12]
 8004684:	2230      	movs	r2, #48	@ 0x30
 8004686:	9b03      	ldr	r3, [sp, #12]
 8004688:	454b      	cmp	r3, r9
 800468a:	d31e      	bcc.n	80046ca <__cvt+0xc2>
 800468c:	9b03      	ldr	r3, [sp, #12]
 800468e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004690:	1b5b      	subs	r3, r3, r5
 8004692:	4628      	mov	r0, r5
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	b004      	add	sp, #16
 8004698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046a0:	eb00 0904 	add.w	r9, r0, r4
 80046a4:	d1e5      	bne.n	8004672 <__cvt+0x6a>
 80046a6:	7803      	ldrb	r3, [r0, #0]
 80046a8:	2b30      	cmp	r3, #48	@ 0x30
 80046aa:	d10a      	bne.n	80046c2 <__cvt+0xba>
 80046ac:	2200      	movs	r2, #0
 80046ae:	2300      	movs	r3, #0
 80046b0:	4630      	mov	r0, r6
 80046b2:	4639      	mov	r1, r7
 80046b4:	f7fc fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 80046b8:	b918      	cbnz	r0, 80046c2 <__cvt+0xba>
 80046ba:	f1c4 0401 	rsb	r4, r4, #1
 80046be:	f8ca 4000 	str.w	r4, [sl]
 80046c2:	f8da 3000 	ldr.w	r3, [sl]
 80046c6:	4499      	add	r9, r3
 80046c8:	e7d3      	b.n	8004672 <__cvt+0x6a>
 80046ca:	1c59      	adds	r1, r3, #1
 80046cc:	9103      	str	r1, [sp, #12]
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	e7d9      	b.n	8004686 <__cvt+0x7e>

080046d2 <__exponent>:
 80046d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d4:	2900      	cmp	r1, #0
 80046d6:	bfba      	itte	lt
 80046d8:	4249      	neglt	r1, r1
 80046da:	232d      	movlt	r3, #45	@ 0x2d
 80046dc:	232b      	movge	r3, #43	@ 0x2b
 80046de:	2909      	cmp	r1, #9
 80046e0:	7002      	strb	r2, [r0, #0]
 80046e2:	7043      	strb	r3, [r0, #1]
 80046e4:	dd29      	ble.n	800473a <__exponent+0x68>
 80046e6:	f10d 0307 	add.w	r3, sp, #7
 80046ea:	461d      	mov	r5, r3
 80046ec:	270a      	movs	r7, #10
 80046ee:	461a      	mov	r2, r3
 80046f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80046f4:	fb07 1416 	mls	r4, r7, r6, r1
 80046f8:	3430      	adds	r4, #48	@ 0x30
 80046fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80046fe:	460c      	mov	r4, r1
 8004700:	2c63      	cmp	r4, #99	@ 0x63
 8004702:	f103 33ff 	add.w	r3, r3, #4294967295
 8004706:	4631      	mov	r1, r6
 8004708:	dcf1      	bgt.n	80046ee <__exponent+0x1c>
 800470a:	3130      	adds	r1, #48	@ 0x30
 800470c:	1e94      	subs	r4, r2, #2
 800470e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004712:	1c41      	adds	r1, r0, #1
 8004714:	4623      	mov	r3, r4
 8004716:	42ab      	cmp	r3, r5
 8004718:	d30a      	bcc.n	8004730 <__exponent+0x5e>
 800471a:	f10d 0309 	add.w	r3, sp, #9
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	42ac      	cmp	r4, r5
 8004722:	bf88      	it	hi
 8004724:	2300      	movhi	r3, #0
 8004726:	3302      	adds	r3, #2
 8004728:	4403      	add	r3, r0
 800472a:	1a18      	subs	r0, r3, r0
 800472c:	b003      	add	sp, #12
 800472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004730:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004734:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004738:	e7ed      	b.n	8004716 <__exponent+0x44>
 800473a:	2330      	movs	r3, #48	@ 0x30
 800473c:	3130      	adds	r1, #48	@ 0x30
 800473e:	7083      	strb	r3, [r0, #2]
 8004740:	70c1      	strb	r1, [r0, #3]
 8004742:	1d03      	adds	r3, r0, #4
 8004744:	e7f1      	b.n	800472a <__exponent+0x58>
	...

08004748 <_printf_float>:
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	b08d      	sub	sp, #52	@ 0x34
 800474e:	460c      	mov	r4, r1
 8004750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004754:	4616      	mov	r6, r2
 8004756:	461f      	mov	r7, r3
 8004758:	4605      	mov	r5, r0
 800475a:	f000 fcef 	bl	800513c <_localeconv_r>
 800475e:	6803      	ldr	r3, [r0, #0]
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fb fd94 	bl	8000290 <strlen>
 8004768:	2300      	movs	r3, #0
 800476a:	930a      	str	r3, [sp, #40]	@ 0x28
 800476c:	f8d8 3000 	ldr.w	r3, [r8]
 8004770:	9005      	str	r0, [sp, #20]
 8004772:	3307      	adds	r3, #7
 8004774:	f023 0307 	bic.w	r3, r3, #7
 8004778:	f103 0208 	add.w	r2, r3, #8
 800477c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004780:	f8d4 b000 	ldr.w	fp, [r4]
 8004784:	f8c8 2000 	str.w	r2, [r8]
 8004788:	e9d3 8900 	ldrd	r8, r9, [r3]
 800478c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004790:	9307      	str	r3, [sp, #28]
 8004792:	f8cd 8018 	str.w	r8, [sp, #24]
 8004796:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800479a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800479e:	4b9c      	ldr	r3, [pc, #624]	@ (8004a10 <_printf_float+0x2c8>)
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	f7fc f9d2 	bl	8000b4c <__aeabi_dcmpun>
 80047a8:	bb70      	cbnz	r0, 8004808 <_printf_float+0xc0>
 80047aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ae:	4b98      	ldr	r3, [pc, #608]	@ (8004a10 <_printf_float+0x2c8>)
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295
 80047b4:	f7fc f9ac 	bl	8000b10 <__aeabi_dcmple>
 80047b8:	bb30      	cbnz	r0, 8004808 <_printf_float+0xc0>
 80047ba:	2200      	movs	r2, #0
 80047bc:	2300      	movs	r3, #0
 80047be:	4640      	mov	r0, r8
 80047c0:	4649      	mov	r1, r9
 80047c2:	f7fc f99b 	bl	8000afc <__aeabi_dcmplt>
 80047c6:	b110      	cbz	r0, 80047ce <_printf_float+0x86>
 80047c8:	232d      	movs	r3, #45	@ 0x2d
 80047ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ce:	4a91      	ldr	r2, [pc, #580]	@ (8004a14 <_printf_float+0x2cc>)
 80047d0:	4b91      	ldr	r3, [pc, #580]	@ (8004a18 <_printf_float+0x2d0>)
 80047d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80047d6:	bf8c      	ite	hi
 80047d8:	4690      	movhi	r8, r2
 80047da:	4698      	movls	r8, r3
 80047dc:	2303      	movs	r3, #3
 80047de:	6123      	str	r3, [r4, #16]
 80047e0:	f02b 0304 	bic.w	r3, fp, #4
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	f04f 0900 	mov.w	r9, #0
 80047ea:	9700      	str	r7, [sp, #0]
 80047ec:	4633      	mov	r3, r6
 80047ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80047f0:	4621      	mov	r1, r4
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f9d2 	bl	8004b9c <_printf_common>
 80047f8:	3001      	adds	r0, #1
 80047fa:	f040 808d 	bne.w	8004918 <_printf_float+0x1d0>
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	b00d      	add	sp, #52	@ 0x34
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	4640      	mov	r0, r8
 800480e:	4649      	mov	r1, r9
 8004810:	f7fc f99c 	bl	8000b4c <__aeabi_dcmpun>
 8004814:	b140      	cbz	r0, 8004828 <_printf_float+0xe0>
 8004816:	464b      	mov	r3, r9
 8004818:	2b00      	cmp	r3, #0
 800481a:	bfbc      	itt	lt
 800481c:	232d      	movlt	r3, #45	@ 0x2d
 800481e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004822:	4a7e      	ldr	r2, [pc, #504]	@ (8004a1c <_printf_float+0x2d4>)
 8004824:	4b7e      	ldr	r3, [pc, #504]	@ (8004a20 <_printf_float+0x2d8>)
 8004826:	e7d4      	b.n	80047d2 <_printf_float+0x8a>
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800482e:	9206      	str	r2, [sp, #24]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	d13b      	bne.n	80048ac <_printf_float+0x164>
 8004834:	2306      	movs	r3, #6
 8004836:	6063      	str	r3, [r4, #4]
 8004838:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800483c:	2300      	movs	r3, #0
 800483e:	6022      	str	r2, [r4, #0]
 8004840:	9303      	str	r3, [sp, #12]
 8004842:	ab0a      	add	r3, sp, #40	@ 0x28
 8004844:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004848:	ab09      	add	r3, sp, #36	@ 0x24
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	6861      	ldr	r1, [r4, #4]
 800484e:	ec49 8b10 	vmov	d0, r8, r9
 8004852:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004856:	4628      	mov	r0, r5
 8004858:	f7ff fed6 	bl	8004608 <__cvt>
 800485c:	9b06      	ldr	r3, [sp, #24]
 800485e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004860:	2b47      	cmp	r3, #71	@ 0x47
 8004862:	4680      	mov	r8, r0
 8004864:	d129      	bne.n	80048ba <_printf_float+0x172>
 8004866:	1cc8      	adds	r0, r1, #3
 8004868:	db02      	blt.n	8004870 <_printf_float+0x128>
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	4299      	cmp	r1, r3
 800486e:	dd41      	ble.n	80048f4 <_printf_float+0x1ac>
 8004870:	f1aa 0a02 	sub.w	sl, sl, #2
 8004874:	fa5f fa8a 	uxtb.w	sl, sl
 8004878:	3901      	subs	r1, #1
 800487a:	4652      	mov	r2, sl
 800487c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004880:	9109      	str	r1, [sp, #36]	@ 0x24
 8004882:	f7ff ff26 	bl	80046d2 <__exponent>
 8004886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004888:	1813      	adds	r3, r2, r0
 800488a:	2a01      	cmp	r2, #1
 800488c:	4681      	mov	r9, r0
 800488e:	6123      	str	r3, [r4, #16]
 8004890:	dc02      	bgt.n	8004898 <_printf_float+0x150>
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	07d2      	lsls	r2, r2, #31
 8004896:	d501      	bpl.n	800489c <_printf_float+0x154>
 8004898:	3301      	adds	r3, #1
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0a2      	beq.n	80047ea <_printf_float+0xa2>
 80048a4:	232d      	movs	r3, #45	@ 0x2d
 80048a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048aa:	e79e      	b.n	80047ea <_printf_float+0xa2>
 80048ac:	9a06      	ldr	r2, [sp, #24]
 80048ae:	2a47      	cmp	r2, #71	@ 0x47
 80048b0:	d1c2      	bne.n	8004838 <_printf_float+0xf0>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1c0      	bne.n	8004838 <_printf_float+0xf0>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e7bd      	b.n	8004836 <_printf_float+0xee>
 80048ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048be:	d9db      	bls.n	8004878 <_printf_float+0x130>
 80048c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80048c4:	d118      	bne.n	80048f8 <_printf_float+0x1b0>
 80048c6:	2900      	cmp	r1, #0
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	dd0b      	ble.n	80048e4 <_printf_float+0x19c>
 80048cc:	6121      	str	r1, [r4, #16]
 80048ce:	b913      	cbnz	r3, 80048d6 <_printf_float+0x18e>
 80048d0:	6822      	ldr	r2, [r4, #0]
 80048d2:	07d0      	lsls	r0, r2, #31
 80048d4:	d502      	bpl.n	80048dc <_printf_float+0x194>
 80048d6:	3301      	adds	r3, #1
 80048d8:	440b      	add	r3, r1
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80048de:	f04f 0900 	mov.w	r9, #0
 80048e2:	e7db      	b.n	800489c <_printf_float+0x154>
 80048e4:	b913      	cbnz	r3, 80048ec <_printf_float+0x1a4>
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	07d2      	lsls	r2, r2, #31
 80048ea:	d501      	bpl.n	80048f0 <_printf_float+0x1a8>
 80048ec:	3302      	adds	r3, #2
 80048ee:	e7f4      	b.n	80048da <_printf_float+0x192>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e7f2      	b.n	80048da <_printf_float+0x192>
 80048f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80048f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048fa:	4299      	cmp	r1, r3
 80048fc:	db05      	blt.n	800490a <_printf_float+0x1c2>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	6121      	str	r1, [r4, #16]
 8004902:	07d8      	lsls	r0, r3, #31
 8004904:	d5ea      	bpl.n	80048dc <_printf_float+0x194>
 8004906:	1c4b      	adds	r3, r1, #1
 8004908:	e7e7      	b.n	80048da <_printf_float+0x192>
 800490a:	2900      	cmp	r1, #0
 800490c:	bfd4      	ite	le
 800490e:	f1c1 0202 	rsble	r2, r1, #2
 8004912:	2201      	movgt	r2, #1
 8004914:	4413      	add	r3, r2
 8004916:	e7e0      	b.n	80048da <_printf_float+0x192>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	055a      	lsls	r2, r3, #21
 800491c:	d407      	bmi.n	800492e <_printf_float+0x1e6>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	4642      	mov	r2, r8
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47b8      	blx	r7
 8004928:	3001      	adds	r0, #1
 800492a:	d12b      	bne.n	8004984 <_printf_float+0x23c>
 800492c:	e767      	b.n	80047fe <_printf_float+0xb6>
 800492e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004932:	f240 80dd 	bls.w	8004af0 <_printf_float+0x3a8>
 8004936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800493a:	2200      	movs	r2, #0
 800493c:	2300      	movs	r3, #0
 800493e:	f7fc f8d3 	bl	8000ae8 <__aeabi_dcmpeq>
 8004942:	2800      	cmp	r0, #0
 8004944:	d033      	beq.n	80049ae <_printf_float+0x266>
 8004946:	4a37      	ldr	r2, [pc, #220]	@ (8004a24 <_printf_float+0x2dc>)
 8004948:	2301      	movs	r3, #1
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	47b8      	blx	r7
 8004950:	3001      	adds	r0, #1
 8004952:	f43f af54 	beq.w	80047fe <_printf_float+0xb6>
 8004956:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800495a:	4543      	cmp	r3, r8
 800495c:	db02      	blt.n	8004964 <_printf_float+0x21c>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	07d8      	lsls	r0, r3, #31
 8004962:	d50f      	bpl.n	8004984 <_printf_float+0x23c>
 8004964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f af45 	beq.w	80047fe <_printf_float+0xb6>
 8004974:	f04f 0900 	mov.w	r9, #0
 8004978:	f108 38ff 	add.w	r8, r8, #4294967295
 800497c:	f104 0a1a 	add.w	sl, r4, #26
 8004980:	45c8      	cmp	r8, r9
 8004982:	dc09      	bgt.n	8004998 <_printf_float+0x250>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	079b      	lsls	r3, r3, #30
 8004988:	f100 8103 	bmi.w	8004b92 <_printf_float+0x44a>
 800498c:	68e0      	ldr	r0, [r4, #12]
 800498e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004990:	4298      	cmp	r0, r3
 8004992:	bfb8      	it	lt
 8004994:	4618      	movlt	r0, r3
 8004996:	e734      	b.n	8004802 <_printf_float+0xba>
 8004998:	2301      	movs	r3, #1
 800499a:	4652      	mov	r2, sl
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f af2b 	beq.w	80047fe <_printf_float+0xb6>
 80049a8:	f109 0901 	add.w	r9, r9, #1
 80049ac:	e7e8      	b.n	8004980 <_printf_float+0x238>
 80049ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dc39      	bgt.n	8004a28 <_printf_float+0x2e0>
 80049b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a24 <_printf_float+0x2dc>)
 80049b6:	2301      	movs	r3, #1
 80049b8:	4631      	mov	r1, r6
 80049ba:	4628      	mov	r0, r5
 80049bc:	47b8      	blx	r7
 80049be:	3001      	adds	r0, #1
 80049c0:	f43f af1d 	beq.w	80047fe <_printf_float+0xb6>
 80049c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80049c8:	ea59 0303 	orrs.w	r3, r9, r3
 80049cc:	d102      	bne.n	80049d4 <_printf_float+0x28c>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	07d9      	lsls	r1, r3, #31
 80049d2:	d5d7      	bpl.n	8004984 <_printf_float+0x23c>
 80049d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	f43f af0d 	beq.w	80047fe <_printf_float+0xb6>
 80049e4:	f04f 0a00 	mov.w	sl, #0
 80049e8:	f104 0b1a 	add.w	fp, r4, #26
 80049ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ee:	425b      	negs	r3, r3
 80049f0:	4553      	cmp	r3, sl
 80049f2:	dc01      	bgt.n	80049f8 <_printf_float+0x2b0>
 80049f4:	464b      	mov	r3, r9
 80049f6:	e793      	b.n	8004920 <_printf_float+0x1d8>
 80049f8:	2301      	movs	r3, #1
 80049fa:	465a      	mov	r2, fp
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
 8004a00:	47b8      	blx	r7
 8004a02:	3001      	adds	r0, #1
 8004a04:	f43f aefb 	beq.w	80047fe <_printf_float+0xb6>
 8004a08:	f10a 0a01 	add.w	sl, sl, #1
 8004a0c:	e7ee      	b.n	80049ec <_printf_float+0x2a4>
 8004a0e:	bf00      	nop
 8004a10:	7fefffff 	.word	0x7fefffff
 8004a14:	08008273 	.word	0x08008273
 8004a18:	0800826f 	.word	0x0800826f
 8004a1c:	0800827b 	.word	0x0800827b
 8004a20:	08008277 	.word	0x08008277
 8004a24:	0800827f 	.word	0x0800827f
 8004a28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a2e:	4553      	cmp	r3, sl
 8004a30:	bfa8      	it	ge
 8004a32:	4653      	movge	r3, sl
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	4699      	mov	r9, r3
 8004a38:	dc36      	bgt.n	8004aa8 <_printf_float+0x360>
 8004a3a:	f04f 0b00 	mov.w	fp, #0
 8004a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a42:	f104 021a 	add.w	r2, r4, #26
 8004a46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a48:	9306      	str	r3, [sp, #24]
 8004a4a:	eba3 0309 	sub.w	r3, r3, r9
 8004a4e:	455b      	cmp	r3, fp
 8004a50:	dc31      	bgt.n	8004ab6 <_printf_float+0x36e>
 8004a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a54:	459a      	cmp	sl, r3
 8004a56:	dc3a      	bgt.n	8004ace <_printf_float+0x386>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	07da      	lsls	r2, r3, #31
 8004a5c:	d437      	bmi.n	8004ace <_printf_float+0x386>
 8004a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a60:	ebaa 0903 	sub.w	r9, sl, r3
 8004a64:	9b06      	ldr	r3, [sp, #24]
 8004a66:	ebaa 0303 	sub.w	r3, sl, r3
 8004a6a:	4599      	cmp	r9, r3
 8004a6c:	bfa8      	it	ge
 8004a6e:	4699      	movge	r9, r3
 8004a70:	f1b9 0f00 	cmp.w	r9, #0
 8004a74:	dc33      	bgt.n	8004ade <_printf_float+0x396>
 8004a76:	f04f 0800 	mov.w	r8, #0
 8004a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a7e:	f104 0b1a 	add.w	fp, r4, #26
 8004a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a84:	ebaa 0303 	sub.w	r3, sl, r3
 8004a88:	eba3 0309 	sub.w	r3, r3, r9
 8004a8c:	4543      	cmp	r3, r8
 8004a8e:	f77f af79 	ble.w	8004984 <_printf_float+0x23c>
 8004a92:	2301      	movs	r3, #1
 8004a94:	465a      	mov	r2, fp
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f aeae 	beq.w	80047fe <_printf_float+0xb6>
 8004aa2:	f108 0801 	add.w	r8, r8, #1
 8004aa6:	e7ec      	b.n	8004a82 <_printf_float+0x33a>
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b8      	blx	r7
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d1c2      	bne.n	8004a3a <_printf_float+0x2f2>
 8004ab4:	e6a3      	b.n	80047fe <_printf_float+0xb6>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	9206      	str	r2, [sp, #24]
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f ae9c 	beq.w	80047fe <_printf_float+0xb6>
 8004ac6:	9a06      	ldr	r2, [sp, #24]
 8004ac8:	f10b 0b01 	add.w	fp, fp, #1
 8004acc:	e7bb      	b.n	8004a46 <_printf_float+0x2fe>
 8004ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b8      	blx	r7
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d1c0      	bne.n	8004a5e <_printf_float+0x316>
 8004adc:	e68f      	b.n	80047fe <_printf_float+0xb6>
 8004ade:	9a06      	ldr	r2, [sp, #24]
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	4442      	add	r2, r8
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b8      	blx	r7
 8004aea:	3001      	adds	r0, #1
 8004aec:	d1c3      	bne.n	8004a76 <_printf_float+0x32e>
 8004aee:	e686      	b.n	80047fe <_printf_float+0xb6>
 8004af0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004af4:	f1ba 0f01 	cmp.w	sl, #1
 8004af8:	dc01      	bgt.n	8004afe <_printf_float+0x3b6>
 8004afa:	07db      	lsls	r3, r3, #31
 8004afc:	d536      	bpl.n	8004b6c <_printf_float+0x424>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4642      	mov	r2, r8
 8004b02:	4631      	mov	r1, r6
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b8      	blx	r7
 8004b08:	3001      	adds	r0, #1
 8004b0a:	f43f ae78 	beq.w	80047fe <_printf_float+0xb6>
 8004b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f43f ae70 	beq.w	80047fe <_printf_float+0xb6>
 8004b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b22:	2200      	movs	r2, #0
 8004b24:	2300      	movs	r3, #0
 8004b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b2a:	f7fb ffdd 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b2e:	b9c0      	cbnz	r0, 8004b62 <_printf_float+0x41a>
 8004b30:	4653      	mov	r3, sl
 8004b32:	f108 0201 	add.w	r2, r8, #1
 8004b36:	4631      	mov	r1, r6
 8004b38:	4628      	mov	r0, r5
 8004b3a:	47b8      	blx	r7
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d10c      	bne.n	8004b5a <_printf_float+0x412>
 8004b40:	e65d      	b.n	80047fe <_printf_float+0xb6>
 8004b42:	2301      	movs	r3, #1
 8004b44:	465a      	mov	r2, fp
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	f43f ae56 	beq.w	80047fe <_printf_float+0xb6>
 8004b52:	f108 0801 	add.w	r8, r8, #1
 8004b56:	45d0      	cmp	r8, sl
 8004b58:	dbf3      	blt.n	8004b42 <_printf_float+0x3fa>
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b60:	e6df      	b.n	8004922 <_printf_float+0x1da>
 8004b62:	f04f 0800 	mov.w	r8, #0
 8004b66:	f104 0b1a 	add.w	fp, r4, #26
 8004b6a:	e7f4      	b.n	8004b56 <_printf_float+0x40e>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4642      	mov	r2, r8
 8004b70:	e7e1      	b.n	8004b36 <_printf_float+0x3ee>
 8004b72:	2301      	movs	r3, #1
 8004b74:	464a      	mov	r2, r9
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f ae3e 	beq.w	80047fe <_printf_float+0xb6>
 8004b82:	f108 0801 	add.w	r8, r8, #1
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b8a:	1a5b      	subs	r3, r3, r1
 8004b8c:	4543      	cmp	r3, r8
 8004b8e:	dcf0      	bgt.n	8004b72 <_printf_float+0x42a>
 8004b90:	e6fc      	b.n	800498c <_printf_float+0x244>
 8004b92:	f04f 0800 	mov.w	r8, #0
 8004b96:	f104 0919 	add.w	r9, r4, #25
 8004b9a:	e7f4      	b.n	8004b86 <_printf_float+0x43e>

08004b9c <_printf_common>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	688a      	ldr	r2, [r1, #8]
 8004ba6:	690b      	ldr	r3, [r1, #16]
 8004ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bac:	4293      	cmp	r3, r2
 8004bae:	bfb8      	it	lt
 8004bb0:	4613      	movlt	r3, r2
 8004bb2:	6033      	str	r3, [r6, #0]
 8004bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bb8:	4607      	mov	r7, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	b10a      	cbz	r2, 8004bc2 <_printf_common+0x26>
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	6033      	str	r3, [r6, #0]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	0699      	lsls	r1, r3, #26
 8004bc6:	bf42      	ittt	mi
 8004bc8:	6833      	ldrmi	r3, [r6, #0]
 8004bca:	3302      	addmi	r3, #2
 8004bcc:	6033      	strmi	r3, [r6, #0]
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	f015 0506 	ands.w	r5, r5, #6
 8004bd4:	d106      	bne.n	8004be4 <_printf_common+0x48>
 8004bd6:	f104 0a19 	add.w	sl, r4, #25
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	6832      	ldr	r2, [r6, #0]
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	42ab      	cmp	r3, r5
 8004be2:	dc26      	bgt.n	8004c32 <_printf_common+0x96>
 8004be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	3b00      	subs	r3, #0
 8004bec:	bf18      	it	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	0692      	lsls	r2, r2, #26
 8004bf2:	d42b      	bmi.n	8004c4c <_printf_common+0xb0>
 8004bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c8      	blx	r9
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d01e      	beq.n	8004c40 <_printf_common+0xa4>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	6922      	ldr	r2, [r4, #16]
 8004c06:	f003 0306 	and.w	r3, r3, #6
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	bf02      	ittt	eq
 8004c0e:	68e5      	ldreq	r5, [r4, #12]
 8004c10:	6833      	ldreq	r3, [r6, #0]
 8004c12:	1aed      	subeq	r5, r5, r3
 8004c14:	68a3      	ldr	r3, [r4, #8]
 8004c16:	bf0c      	ite	eq
 8004c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c1c:	2500      	movne	r5, #0
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	bfc4      	itt	gt
 8004c22:	1a9b      	subgt	r3, r3, r2
 8004c24:	18ed      	addgt	r5, r5, r3
 8004c26:	2600      	movs	r6, #0
 8004c28:	341a      	adds	r4, #26
 8004c2a:	42b5      	cmp	r5, r6
 8004c2c:	d11a      	bne.n	8004c64 <_printf_common+0xc8>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e008      	b.n	8004c44 <_printf_common+0xa8>
 8004c32:	2301      	movs	r3, #1
 8004c34:	4652      	mov	r2, sl
 8004c36:	4641      	mov	r1, r8
 8004c38:	4638      	mov	r0, r7
 8004c3a:	47c8      	blx	r9
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d103      	bne.n	8004c48 <_printf_common+0xac>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c48:	3501      	adds	r5, #1
 8004c4a:	e7c6      	b.n	8004bda <_printf_common+0x3e>
 8004c4c:	18e1      	adds	r1, r4, r3
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	2030      	movs	r0, #48	@ 0x30
 8004c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c56:	4422      	add	r2, r4
 8004c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c60:	3302      	adds	r3, #2
 8004c62:	e7c7      	b.n	8004bf4 <_printf_common+0x58>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4622      	mov	r2, r4
 8004c68:	4641      	mov	r1, r8
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	47c8      	blx	r9
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d0e6      	beq.n	8004c40 <_printf_common+0xa4>
 8004c72:	3601      	adds	r6, #1
 8004c74:	e7d9      	b.n	8004c2a <_printf_common+0x8e>
	...

08004c78 <_printf_i>:
 8004c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	7e0f      	ldrb	r7, [r1, #24]
 8004c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c80:	2f78      	cmp	r7, #120	@ 0x78
 8004c82:	4691      	mov	r9, r2
 8004c84:	4680      	mov	r8, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	469a      	mov	sl, r3
 8004c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c8e:	d807      	bhi.n	8004ca0 <_printf_i+0x28>
 8004c90:	2f62      	cmp	r7, #98	@ 0x62
 8004c92:	d80a      	bhi.n	8004caa <_printf_i+0x32>
 8004c94:	2f00      	cmp	r7, #0
 8004c96:	f000 80d1 	beq.w	8004e3c <_printf_i+0x1c4>
 8004c9a:	2f58      	cmp	r7, #88	@ 0x58
 8004c9c:	f000 80b8 	beq.w	8004e10 <_printf_i+0x198>
 8004ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ca8:	e03a      	b.n	8004d20 <_printf_i+0xa8>
 8004caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cae:	2b15      	cmp	r3, #21
 8004cb0:	d8f6      	bhi.n	8004ca0 <_printf_i+0x28>
 8004cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8004cb8 <_printf_i+0x40>)
 8004cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb8:	08004d11 	.word	0x08004d11
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004ca1 	.word	0x08004ca1
 8004cc4:	08004ca1 	.word	0x08004ca1
 8004cc8:	08004ca1 	.word	0x08004ca1
 8004ccc:	08004ca1 	.word	0x08004ca1
 8004cd0:	08004d25 	.word	0x08004d25
 8004cd4:	08004ca1 	.word	0x08004ca1
 8004cd8:	08004ca1 	.word	0x08004ca1
 8004cdc:	08004ca1 	.word	0x08004ca1
 8004ce0:	08004ca1 	.word	0x08004ca1
 8004ce4:	08004e23 	.word	0x08004e23
 8004ce8:	08004d4f 	.word	0x08004d4f
 8004cec:	08004ddd 	.word	0x08004ddd
 8004cf0:	08004ca1 	.word	0x08004ca1
 8004cf4:	08004ca1 	.word	0x08004ca1
 8004cf8:	08004e45 	.word	0x08004e45
 8004cfc:	08004ca1 	.word	0x08004ca1
 8004d00:	08004d4f 	.word	0x08004d4f
 8004d04:	08004ca1 	.word	0x08004ca1
 8004d08:	08004ca1 	.word	0x08004ca1
 8004d0c:	08004de5 	.word	0x08004de5
 8004d10:	6833      	ldr	r3, [r6, #0]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6032      	str	r2, [r6, #0]
 8004d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d20:	2301      	movs	r3, #1
 8004d22:	e09c      	b.n	8004e5e <_printf_i+0x1e6>
 8004d24:	6833      	ldr	r3, [r6, #0]
 8004d26:	6820      	ldr	r0, [r4, #0]
 8004d28:	1d19      	adds	r1, r3, #4
 8004d2a:	6031      	str	r1, [r6, #0]
 8004d2c:	0606      	lsls	r6, r0, #24
 8004d2e:	d501      	bpl.n	8004d34 <_printf_i+0xbc>
 8004d30:	681d      	ldr	r5, [r3, #0]
 8004d32:	e003      	b.n	8004d3c <_printf_i+0xc4>
 8004d34:	0645      	lsls	r5, r0, #25
 8004d36:	d5fb      	bpl.n	8004d30 <_printf_i+0xb8>
 8004d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d3c:	2d00      	cmp	r5, #0
 8004d3e:	da03      	bge.n	8004d48 <_printf_i+0xd0>
 8004d40:	232d      	movs	r3, #45	@ 0x2d
 8004d42:	426d      	negs	r5, r5
 8004d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d48:	4858      	ldr	r0, [pc, #352]	@ (8004eac <_printf_i+0x234>)
 8004d4a:	230a      	movs	r3, #10
 8004d4c:	e011      	b.n	8004d72 <_printf_i+0xfa>
 8004d4e:	6821      	ldr	r1, [r4, #0]
 8004d50:	6833      	ldr	r3, [r6, #0]
 8004d52:	0608      	lsls	r0, r1, #24
 8004d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d58:	d402      	bmi.n	8004d60 <_printf_i+0xe8>
 8004d5a:	0649      	lsls	r1, r1, #25
 8004d5c:	bf48      	it	mi
 8004d5e:	b2ad      	uxthmi	r5, r5
 8004d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d62:	4852      	ldr	r0, [pc, #328]	@ (8004eac <_printf_i+0x234>)
 8004d64:	6033      	str	r3, [r6, #0]
 8004d66:	bf14      	ite	ne
 8004d68:	230a      	movne	r3, #10
 8004d6a:	2308      	moveq	r3, #8
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d72:	6866      	ldr	r6, [r4, #4]
 8004d74:	60a6      	str	r6, [r4, #8]
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	db05      	blt.n	8004d86 <_printf_i+0x10e>
 8004d7a:	6821      	ldr	r1, [r4, #0]
 8004d7c:	432e      	orrs	r6, r5
 8004d7e:	f021 0104 	bic.w	r1, r1, #4
 8004d82:	6021      	str	r1, [r4, #0]
 8004d84:	d04b      	beq.n	8004e1e <_printf_i+0x1a6>
 8004d86:	4616      	mov	r6, r2
 8004d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8004d90:	5dc7      	ldrb	r7, [r0, r7]
 8004d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d96:	462f      	mov	r7, r5
 8004d98:	42bb      	cmp	r3, r7
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	d9f4      	bls.n	8004d88 <_printf_i+0x110>
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d10b      	bne.n	8004dba <_printf_i+0x142>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	07df      	lsls	r7, r3, #31
 8004da6:	d508      	bpl.n	8004dba <_printf_i+0x142>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	6861      	ldr	r1, [r4, #4]
 8004dac:	4299      	cmp	r1, r3
 8004dae:	bfde      	ittt	le
 8004db0:	2330      	movle	r3, #48	@ 0x30
 8004db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004db6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dba:	1b92      	subs	r2, r2, r6
 8004dbc:	6122      	str	r2, [r4, #16]
 8004dbe:	f8cd a000 	str.w	sl, [sp]
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	aa03      	add	r2, sp, #12
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4640      	mov	r0, r8
 8004dca:	f7ff fee7 	bl	8004b9c <_printf_common>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d14a      	bne.n	8004e68 <_printf_i+0x1f0>
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd6:	b004      	add	sp, #16
 8004dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	f043 0320 	orr.w	r3, r3, #32
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	4832      	ldr	r0, [pc, #200]	@ (8004eb0 <_printf_i+0x238>)
 8004de6:	2778      	movs	r7, #120	@ 0x78
 8004de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	6831      	ldr	r1, [r6, #0]
 8004df0:	061f      	lsls	r7, r3, #24
 8004df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004df6:	d402      	bmi.n	8004dfe <_printf_i+0x186>
 8004df8:	065f      	lsls	r7, r3, #25
 8004dfa:	bf48      	it	mi
 8004dfc:	b2ad      	uxthmi	r5, r5
 8004dfe:	6031      	str	r1, [r6, #0]
 8004e00:	07d9      	lsls	r1, r3, #31
 8004e02:	bf44      	itt	mi
 8004e04:	f043 0320 	orrmi.w	r3, r3, #32
 8004e08:	6023      	strmi	r3, [r4, #0]
 8004e0a:	b11d      	cbz	r5, 8004e14 <_printf_i+0x19c>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	e7ad      	b.n	8004d6c <_printf_i+0xf4>
 8004e10:	4826      	ldr	r0, [pc, #152]	@ (8004eac <_printf_i+0x234>)
 8004e12:	e7e9      	b.n	8004de8 <_printf_i+0x170>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	e7f6      	b.n	8004e0c <_printf_i+0x194>
 8004e1e:	4616      	mov	r6, r2
 8004e20:	e7bd      	b.n	8004d9e <_printf_i+0x126>
 8004e22:	6833      	ldr	r3, [r6, #0]
 8004e24:	6825      	ldr	r5, [r4, #0]
 8004e26:	6961      	ldr	r1, [r4, #20]
 8004e28:	1d18      	adds	r0, r3, #4
 8004e2a:	6030      	str	r0, [r6, #0]
 8004e2c:	062e      	lsls	r6, r5, #24
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	d501      	bpl.n	8004e36 <_printf_i+0x1be>
 8004e32:	6019      	str	r1, [r3, #0]
 8004e34:	e002      	b.n	8004e3c <_printf_i+0x1c4>
 8004e36:	0668      	lsls	r0, r5, #25
 8004e38:	d5fb      	bpl.n	8004e32 <_printf_i+0x1ba>
 8004e3a:	8019      	strh	r1, [r3, #0]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	4616      	mov	r6, r2
 8004e42:	e7bc      	b.n	8004dbe <_printf_i+0x146>
 8004e44:	6833      	ldr	r3, [r6, #0]
 8004e46:	1d1a      	adds	r2, r3, #4
 8004e48:	6032      	str	r2, [r6, #0]
 8004e4a:	681e      	ldr	r6, [r3, #0]
 8004e4c:	6862      	ldr	r2, [r4, #4]
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7fb f9cd 	bl	80001f0 <memchr>
 8004e56:	b108      	cbz	r0, 8004e5c <_printf_i+0x1e4>
 8004e58:	1b80      	subs	r0, r0, r6
 8004e5a:	6060      	str	r0, [r4, #4]
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	6123      	str	r3, [r4, #16]
 8004e60:	2300      	movs	r3, #0
 8004e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e66:	e7aa      	b.n	8004dbe <_printf_i+0x146>
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	4632      	mov	r2, r6
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	4640      	mov	r0, r8
 8004e70:	47d0      	blx	sl
 8004e72:	3001      	adds	r0, #1
 8004e74:	d0ad      	beq.n	8004dd2 <_printf_i+0x15a>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	079b      	lsls	r3, r3, #30
 8004e7a:	d413      	bmi.n	8004ea4 <_printf_i+0x22c>
 8004e7c:	68e0      	ldr	r0, [r4, #12]
 8004e7e:	9b03      	ldr	r3, [sp, #12]
 8004e80:	4298      	cmp	r0, r3
 8004e82:	bfb8      	it	lt
 8004e84:	4618      	movlt	r0, r3
 8004e86:	e7a6      	b.n	8004dd6 <_printf_i+0x15e>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	4640      	mov	r0, r8
 8004e90:	47d0      	blx	sl
 8004e92:	3001      	adds	r0, #1
 8004e94:	d09d      	beq.n	8004dd2 <_printf_i+0x15a>
 8004e96:	3501      	adds	r5, #1
 8004e98:	68e3      	ldr	r3, [r4, #12]
 8004e9a:	9903      	ldr	r1, [sp, #12]
 8004e9c:	1a5b      	subs	r3, r3, r1
 8004e9e:	42ab      	cmp	r3, r5
 8004ea0:	dcf2      	bgt.n	8004e88 <_printf_i+0x210>
 8004ea2:	e7eb      	b.n	8004e7c <_printf_i+0x204>
 8004ea4:	2500      	movs	r5, #0
 8004ea6:	f104 0619 	add.w	r6, r4, #25
 8004eaa:	e7f5      	b.n	8004e98 <_printf_i+0x220>
 8004eac:	08008281 	.word	0x08008281
 8004eb0:	08008292 	.word	0x08008292

08004eb4 <std>:
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	4604      	mov	r4, r0
 8004eba:	e9c0 3300 	strd	r3, r3, [r0]
 8004ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ec2:	6083      	str	r3, [r0, #8]
 8004ec4:	8181      	strh	r1, [r0, #12]
 8004ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ec8:	81c2      	strh	r2, [r0, #14]
 8004eca:	6183      	str	r3, [r0, #24]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	2208      	movs	r2, #8
 8004ed0:	305c      	adds	r0, #92	@ 0x5c
 8004ed2:	f000 f92a 	bl	800512a <memset>
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <std+0x58>)
 8004ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004eda:	4b0d      	ldr	r3, [pc, #52]	@ (8004f10 <std+0x5c>)
 8004edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ede:	4b0d      	ldr	r3, [pc, #52]	@ (8004f14 <std+0x60>)
 8004ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f18 <std+0x64>)
 8004ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <std+0x68>)
 8004ee8:	6224      	str	r4, [r4, #32]
 8004eea:	429c      	cmp	r4, r3
 8004eec:	d006      	beq.n	8004efc <std+0x48>
 8004eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ef2:	4294      	cmp	r4, r2
 8004ef4:	d002      	beq.n	8004efc <std+0x48>
 8004ef6:	33d0      	adds	r3, #208	@ 0xd0
 8004ef8:	429c      	cmp	r4, r3
 8004efa:	d105      	bne.n	8004f08 <std+0x54>
 8004efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f04:	f000 b98e 	b.w	8005224 <__retarget_lock_init_recursive>
 8004f08:	bd10      	pop	{r4, pc}
 8004f0a:	bf00      	nop
 8004f0c:	080050a5 	.word	0x080050a5
 8004f10:	080050c7 	.word	0x080050c7
 8004f14:	080050ff 	.word	0x080050ff
 8004f18:	08005123 	.word	0x08005123
 8004f1c:	20000258 	.word	0x20000258

08004f20 <stdio_exit_handler>:
 8004f20:	4a02      	ldr	r2, [pc, #8]	@ (8004f2c <stdio_exit_handler+0xc>)
 8004f22:	4903      	ldr	r1, [pc, #12]	@ (8004f30 <stdio_exit_handler+0x10>)
 8004f24:	4803      	ldr	r0, [pc, #12]	@ (8004f34 <stdio_exit_handler+0x14>)
 8004f26:	f000 b869 	b.w	8004ffc <_fwalk_sglue>
 8004f2a:	bf00      	nop
 8004f2c:	20000024 	.word	0x20000024
 8004f30:	08006be5 	.word	0x08006be5
 8004f34:	20000034 	.word	0x20000034

08004f38 <cleanup_stdio>:
 8004f38:	6841      	ldr	r1, [r0, #4]
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f6c <cleanup_stdio+0x34>)
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	4604      	mov	r4, r0
 8004f42:	d001      	beq.n	8004f48 <cleanup_stdio+0x10>
 8004f44:	f001 fe4e 	bl	8006be4 <_fflush_r>
 8004f48:	68a1      	ldr	r1, [r4, #8]
 8004f4a:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <cleanup_stdio+0x38>)
 8004f4c:	4299      	cmp	r1, r3
 8004f4e:	d002      	beq.n	8004f56 <cleanup_stdio+0x1e>
 8004f50:	4620      	mov	r0, r4
 8004f52:	f001 fe47 	bl	8006be4 <_fflush_r>
 8004f56:	68e1      	ldr	r1, [r4, #12]
 8004f58:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <cleanup_stdio+0x3c>)
 8004f5a:	4299      	cmp	r1, r3
 8004f5c:	d004      	beq.n	8004f68 <cleanup_stdio+0x30>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f64:	f001 be3e 	b.w	8006be4 <_fflush_r>
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000258 	.word	0x20000258
 8004f70:	200002c0 	.word	0x200002c0
 8004f74:	20000328 	.word	0x20000328

08004f78 <global_stdio_init.part.0>:
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <global_stdio_init.part.0+0x30>)
 8004f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8004fac <global_stdio_init.part.0+0x34>)
 8004f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb0 <global_stdio_init.part.0+0x38>)
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	4620      	mov	r0, r4
 8004f84:	2200      	movs	r2, #0
 8004f86:	2104      	movs	r1, #4
 8004f88:	f7ff ff94 	bl	8004eb4 <std>
 8004f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f90:	2201      	movs	r2, #1
 8004f92:	2109      	movs	r1, #9
 8004f94:	f7ff ff8e 	bl	8004eb4 <std>
 8004f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa2:	2112      	movs	r1, #18
 8004fa4:	f7ff bf86 	b.w	8004eb4 <std>
 8004fa8:	20000390 	.word	0x20000390
 8004fac:	20000258 	.word	0x20000258
 8004fb0:	08004f21 	.word	0x08004f21

08004fb4 <__sfp_lock_acquire>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	@ (8004fbc <__sfp_lock_acquire+0x8>)
 8004fb6:	f000 b936 	b.w	8005226 <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20000399 	.word	0x20000399

08004fc0 <__sfp_lock_release>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	@ (8004fc8 <__sfp_lock_release+0x8>)
 8004fc2:	f000 b931 	b.w	8005228 <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000399 	.word	0x20000399

08004fcc <__sinit>:
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	4604      	mov	r4, r0
 8004fd0:	f7ff fff0 	bl	8004fb4 <__sfp_lock_acquire>
 8004fd4:	6a23      	ldr	r3, [r4, #32]
 8004fd6:	b11b      	cbz	r3, 8004fe0 <__sinit+0x14>
 8004fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fdc:	f7ff bff0 	b.w	8004fc0 <__sfp_lock_release>
 8004fe0:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <__sinit+0x28>)
 8004fe2:	6223      	str	r3, [r4, #32]
 8004fe4:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <__sinit+0x2c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f5      	bne.n	8004fd8 <__sinit+0xc>
 8004fec:	f7ff ffc4 	bl	8004f78 <global_stdio_init.part.0>
 8004ff0:	e7f2      	b.n	8004fd8 <__sinit+0xc>
 8004ff2:	bf00      	nop
 8004ff4:	08004f39 	.word	0x08004f39
 8004ff8:	20000390 	.word	0x20000390

08004ffc <_fwalk_sglue>:
 8004ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005000:	4607      	mov	r7, r0
 8005002:	4688      	mov	r8, r1
 8005004:	4614      	mov	r4, r2
 8005006:	2600      	movs	r6, #0
 8005008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800500c:	f1b9 0901 	subs.w	r9, r9, #1
 8005010:	d505      	bpl.n	800501e <_fwalk_sglue+0x22>
 8005012:	6824      	ldr	r4, [r4, #0]
 8005014:	2c00      	cmp	r4, #0
 8005016:	d1f7      	bne.n	8005008 <_fwalk_sglue+0xc>
 8005018:	4630      	mov	r0, r6
 800501a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800501e:	89ab      	ldrh	r3, [r5, #12]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d907      	bls.n	8005034 <_fwalk_sglue+0x38>
 8005024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005028:	3301      	adds	r3, #1
 800502a:	d003      	beq.n	8005034 <_fwalk_sglue+0x38>
 800502c:	4629      	mov	r1, r5
 800502e:	4638      	mov	r0, r7
 8005030:	47c0      	blx	r8
 8005032:	4306      	orrs	r6, r0
 8005034:	3568      	adds	r5, #104	@ 0x68
 8005036:	e7e9      	b.n	800500c <_fwalk_sglue+0x10>

08005038 <sniprintf>:
 8005038:	b40c      	push	{r2, r3}
 800503a:	b530      	push	{r4, r5, lr}
 800503c:	4b18      	ldr	r3, [pc, #96]	@ (80050a0 <sniprintf+0x68>)
 800503e:	1e0c      	subs	r4, r1, #0
 8005040:	681d      	ldr	r5, [r3, #0]
 8005042:	b09d      	sub	sp, #116	@ 0x74
 8005044:	da08      	bge.n	8005058 <sniprintf+0x20>
 8005046:	238b      	movs	r3, #139	@ 0x8b
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	b01d      	add	sp, #116	@ 0x74
 8005050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005054:	b002      	add	sp, #8
 8005056:	4770      	bx	lr
 8005058:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800505c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005066:	bf14      	ite	ne
 8005068:	f104 33ff 	addne.w	r3, r4, #4294967295
 800506c:	4623      	moveq	r3, r4
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	9307      	str	r3, [sp, #28]
 8005072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005076:	9002      	str	r0, [sp, #8]
 8005078:	9006      	str	r0, [sp, #24]
 800507a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800507e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005080:	ab21      	add	r3, sp, #132	@ 0x84
 8005082:	a902      	add	r1, sp, #8
 8005084:	4628      	mov	r0, r5
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	f001 fc2c 	bl	80068e4 <_svfiprintf_r>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	bfbc      	itt	lt
 8005090:	238b      	movlt	r3, #139	@ 0x8b
 8005092:	602b      	strlt	r3, [r5, #0]
 8005094:	2c00      	cmp	r4, #0
 8005096:	d0da      	beq.n	800504e <sniprintf+0x16>
 8005098:	9b02      	ldr	r3, [sp, #8]
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e7d6      	b.n	800504e <sniprintf+0x16>
 80050a0:	20000030 	.word	0x20000030

080050a4 <__sread>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	460c      	mov	r4, r1
 80050a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ac:	f000 f86c 	bl	8005188 <_read_r>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	bfab      	itete	ge
 80050b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050b6:	89a3      	ldrhlt	r3, [r4, #12]
 80050b8:	181b      	addge	r3, r3, r0
 80050ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050be:	bfac      	ite	ge
 80050c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050c2:	81a3      	strhlt	r3, [r4, #12]
 80050c4:	bd10      	pop	{r4, pc}

080050c6 <__swrite>:
 80050c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ca:	461f      	mov	r7, r3
 80050cc:	898b      	ldrh	r3, [r1, #12]
 80050ce:	05db      	lsls	r3, r3, #23
 80050d0:	4605      	mov	r5, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	4616      	mov	r6, r2
 80050d6:	d505      	bpl.n	80050e4 <__swrite+0x1e>
 80050d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050dc:	2302      	movs	r3, #2
 80050de:	2200      	movs	r2, #0
 80050e0:	f000 f840 	bl	8005164 <_lseek_r>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	4632      	mov	r2, r6
 80050f2:	463b      	mov	r3, r7
 80050f4:	4628      	mov	r0, r5
 80050f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050fa:	f000 b857 	b.w	80051ac <_write_r>

080050fe <__sseek>:
 80050fe:	b510      	push	{r4, lr}
 8005100:	460c      	mov	r4, r1
 8005102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005106:	f000 f82d 	bl	8005164 <_lseek_r>
 800510a:	1c43      	adds	r3, r0, #1
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	bf15      	itete	ne
 8005110:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005112:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005116:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800511a:	81a3      	strheq	r3, [r4, #12]
 800511c:	bf18      	it	ne
 800511e:	81a3      	strhne	r3, [r4, #12]
 8005120:	bd10      	pop	{r4, pc}

08005122 <__sclose>:
 8005122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005126:	f000 b80d 	b.w	8005144 <_close_r>

0800512a <memset>:
 800512a:	4402      	add	r2, r0
 800512c:	4603      	mov	r3, r0
 800512e:	4293      	cmp	r3, r2
 8005130:	d100      	bne.n	8005134 <memset+0xa>
 8005132:	4770      	bx	lr
 8005134:	f803 1b01 	strb.w	r1, [r3], #1
 8005138:	e7f9      	b.n	800512e <memset+0x4>
	...

0800513c <_localeconv_r>:
 800513c:	4800      	ldr	r0, [pc, #0]	@ (8005140 <_localeconv_r+0x4>)
 800513e:	4770      	bx	lr
 8005140:	20000170 	.word	0x20000170

08005144 <_close_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d06      	ldr	r5, [pc, #24]	@ (8005160 <_close_r+0x1c>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fd fcf7 	bl	8002b42 <_close>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_close_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_close_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	20000394 	.word	0x20000394

08005164 <_lseek_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d07      	ldr	r5, [pc, #28]	@ (8005184 <_lseek_r+0x20>)
 8005168:	4604      	mov	r4, r0
 800516a:	4608      	mov	r0, r1
 800516c:	4611      	mov	r1, r2
 800516e:	2200      	movs	r2, #0
 8005170:	602a      	str	r2, [r5, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f7fd fd0c 	bl	8002b90 <_lseek>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_lseek_r+0x1e>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_lseek_r+0x1e>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20000394 	.word	0x20000394

08005188 <_read_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d07      	ldr	r5, [pc, #28]	@ (80051a8 <_read_r+0x20>)
 800518c:	4604      	mov	r4, r0
 800518e:	4608      	mov	r0, r1
 8005190:	4611      	mov	r1, r2
 8005192:	2200      	movs	r2, #0
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	f7fd fc9a 	bl	8002ad0 <_read>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_read_r+0x1e>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_read_r+0x1e>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000394 	.word	0x20000394

080051ac <_write_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d07      	ldr	r5, [pc, #28]	@ (80051cc <_write_r+0x20>)
 80051b0:	4604      	mov	r4, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fd fca5 	bl	8002b0a <_write>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_write_r+0x1e>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_write_r+0x1e>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000394 	.word	0x20000394

080051d0 <__errno>:
 80051d0:	4b01      	ldr	r3, [pc, #4]	@ (80051d8 <__errno+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000030 	.word	0x20000030

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	@ (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	@ (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005220 <__libc_init_array+0x44>)
 80051f0:	f002 ffc8 	bl	8008184 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	08008618 	.word	0x08008618
 8005218:	08008618 	.word	0x08008618
 800521c:	08008618 	.word	0x08008618
 8005220:	0800861c 	.word	0x0800861c

08005224 <__retarget_lock_init_recursive>:
 8005224:	4770      	bx	lr

08005226 <__retarget_lock_acquire_recursive>:
 8005226:	4770      	bx	lr

08005228 <__retarget_lock_release_recursive>:
 8005228:	4770      	bx	lr

0800522a <memcpy>:
 800522a:	440a      	add	r2, r1
 800522c:	4291      	cmp	r1, r2
 800522e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005232:	d100      	bne.n	8005236 <memcpy+0xc>
 8005234:	4770      	bx	lr
 8005236:	b510      	push	{r4, lr}
 8005238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800523c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005240:	4291      	cmp	r1, r2
 8005242:	d1f9      	bne.n	8005238 <memcpy+0xe>
 8005244:	bd10      	pop	{r4, pc}
	...

08005248 <__assert_func>:
 8005248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800524a:	4614      	mov	r4, r2
 800524c:	461a      	mov	r2, r3
 800524e:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <__assert_func+0x2c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4605      	mov	r5, r0
 8005254:	68d8      	ldr	r0, [r3, #12]
 8005256:	b14c      	cbz	r4, 800526c <__assert_func+0x24>
 8005258:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <__assert_func+0x30>)
 800525a:	9100      	str	r1, [sp, #0]
 800525c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005260:	4906      	ldr	r1, [pc, #24]	@ (800527c <__assert_func+0x34>)
 8005262:	462b      	mov	r3, r5
 8005264:	f001 fce6 	bl	8006c34 <fiprintf>
 8005268:	f001 fd20 	bl	8006cac <abort>
 800526c:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <__assert_func+0x38>)
 800526e:	461c      	mov	r4, r3
 8005270:	e7f3      	b.n	800525a <__assert_func+0x12>
 8005272:	bf00      	nop
 8005274:	20000030 	.word	0x20000030
 8005278:	080082a3 	.word	0x080082a3
 800527c:	080082b0 	.word	0x080082b0
 8005280:	080082de 	.word	0x080082de

08005284 <quorem>:
 8005284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	6903      	ldr	r3, [r0, #16]
 800528a:	690c      	ldr	r4, [r1, #16]
 800528c:	42a3      	cmp	r3, r4
 800528e:	4607      	mov	r7, r0
 8005290:	db7e      	blt.n	8005390 <quorem+0x10c>
 8005292:	3c01      	subs	r4, #1
 8005294:	f101 0814 	add.w	r8, r1, #20
 8005298:	00a3      	lsls	r3, r4, #2
 800529a:	f100 0514 	add.w	r5, r0, #20
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ae:	3301      	adds	r3, #1
 80052b0:	429a      	cmp	r2, r3
 80052b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80052ba:	d32e      	bcc.n	800531a <quorem+0x96>
 80052bc:	f04f 0a00 	mov.w	sl, #0
 80052c0:	46c4      	mov	ip, r8
 80052c2:	46ae      	mov	lr, r5
 80052c4:	46d3      	mov	fp, sl
 80052c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052ca:	b298      	uxth	r0, r3
 80052cc:	fb06 a000 	mla	r0, r6, r0, sl
 80052d0:	0c02      	lsrs	r2, r0, #16
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	fb06 2303 	mla	r3, r6, r3, r2
 80052d8:	f8de 2000 	ldr.w	r2, [lr]
 80052dc:	b280      	uxth	r0, r0
 80052de:	b292      	uxth	r2, r2
 80052e0:	1a12      	subs	r2, r2, r0
 80052e2:	445a      	add	r2, fp
 80052e4:	f8de 0000 	ldr.w	r0, [lr]
 80052e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80052f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80052f6:	b292      	uxth	r2, r2
 80052f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052fc:	45e1      	cmp	r9, ip
 80052fe:	f84e 2b04 	str.w	r2, [lr], #4
 8005302:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005306:	d2de      	bcs.n	80052c6 <quorem+0x42>
 8005308:	9b00      	ldr	r3, [sp, #0]
 800530a:	58eb      	ldr	r3, [r5, r3]
 800530c:	b92b      	cbnz	r3, 800531a <quorem+0x96>
 800530e:	9b01      	ldr	r3, [sp, #4]
 8005310:	3b04      	subs	r3, #4
 8005312:	429d      	cmp	r5, r3
 8005314:	461a      	mov	r2, r3
 8005316:	d32f      	bcc.n	8005378 <quorem+0xf4>
 8005318:	613c      	str	r4, [r7, #16]
 800531a:	4638      	mov	r0, r7
 800531c:	f001 f97e 	bl	800661c <__mcmp>
 8005320:	2800      	cmp	r0, #0
 8005322:	db25      	blt.n	8005370 <quorem+0xec>
 8005324:	4629      	mov	r1, r5
 8005326:	2000      	movs	r0, #0
 8005328:	f858 2b04 	ldr.w	r2, [r8], #4
 800532c:	f8d1 c000 	ldr.w	ip, [r1]
 8005330:	fa1f fe82 	uxth.w	lr, r2
 8005334:	fa1f f38c 	uxth.w	r3, ip
 8005338:	eba3 030e 	sub.w	r3, r3, lr
 800533c:	4403      	add	r3, r0
 800533e:	0c12      	lsrs	r2, r2, #16
 8005340:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005344:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800534e:	45c1      	cmp	r9, r8
 8005350:	f841 3b04 	str.w	r3, [r1], #4
 8005354:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005358:	d2e6      	bcs.n	8005328 <quorem+0xa4>
 800535a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800535e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005362:	b922      	cbnz	r2, 800536e <quorem+0xea>
 8005364:	3b04      	subs	r3, #4
 8005366:	429d      	cmp	r5, r3
 8005368:	461a      	mov	r2, r3
 800536a:	d30b      	bcc.n	8005384 <quorem+0x100>
 800536c:	613c      	str	r4, [r7, #16]
 800536e:	3601      	adds	r6, #1
 8005370:	4630      	mov	r0, r6
 8005372:	b003      	add	sp, #12
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	3b04      	subs	r3, #4
 800537c:	2a00      	cmp	r2, #0
 800537e:	d1cb      	bne.n	8005318 <quorem+0x94>
 8005380:	3c01      	subs	r4, #1
 8005382:	e7c6      	b.n	8005312 <quorem+0x8e>
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	3b04      	subs	r3, #4
 8005388:	2a00      	cmp	r2, #0
 800538a:	d1ef      	bne.n	800536c <quorem+0xe8>
 800538c:	3c01      	subs	r4, #1
 800538e:	e7ea      	b.n	8005366 <quorem+0xe2>
 8005390:	2000      	movs	r0, #0
 8005392:	e7ee      	b.n	8005372 <quorem+0xee>
 8005394:	0000      	movs	r0, r0
	...

08005398 <_dtoa_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	69c7      	ldr	r7, [r0, #28]
 800539e:	b097      	sub	sp, #92	@ 0x5c
 80053a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80053a4:	ec55 4b10 	vmov	r4, r5, d0
 80053a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80053aa:	9107      	str	r1, [sp, #28]
 80053ac:	4681      	mov	r9, r0
 80053ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80053b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80053b2:	b97f      	cbnz	r7, 80053d4 <_dtoa_r+0x3c>
 80053b4:	2010      	movs	r0, #16
 80053b6:	f000 fe09 	bl	8005fcc <malloc>
 80053ba:	4602      	mov	r2, r0
 80053bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80053c0:	b920      	cbnz	r0, 80053cc <_dtoa_r+0x34>
 80053c2:	4ba9      	ldr	r3, [pc, #676]	@ (8005668 <_dtoa_r+0x2d0>)
 80053c4:	21ef      	movs	r1, #239	@ 0xef
 80053c6:	48a9      	ldr	r0, [pc, #676]	@ (800566c <_dtoa_r+0x2d4>)
 80053c8:	f7ff ff3e 	bl	8005248 <__assert_func>
 80053cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053d0:	6007      	str	r7, [r0, #0]
 80053d2:	60c7      	str	r7, [r0, #12]
 80053d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	b159      	cbz	r1, 80053f4 <_dtoa_r+0x5c>
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	604a      	str	r2, [r1, #4]
 80053e0:	2301      	movs	r3, #1
 80053e2:	4093      	lsls	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
 80053e6:	4648      	mov	r0, r9
 80053e8:	f000 fee6 	bl	80061b8 <_Bfree>
 80053ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	1e2b      	subs	r3, r5, #0
 80053f6:	bfb9      	ittee	lt
 80053f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80053fc:	9305      	strlt	r3, [sp, #20]
 80053fe:	2300      	movge	r3, #0
 8005400:	6033      	strge	r3, [r6, #0]
 8005402:	9f05      	ldr	r7, [sp, #20]
 8005404:	4b9a      	ldr	r3, [pc, #616]	@ (8005670 <_dtoa_r+0x2d8>)
 8005406:	bfbc      	itt	lt
 8005408:	2201      	movlt	r2, #1
 800540a:	6032      	strlt	r2, [r6, #0]
 800540c:	43bb      	bics	r3, r7
 800540e:	d112      	bne.n	8005436 <_dtoa_r+0x9e>
 8005410:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005412:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800541c:	4323      	orrs	r3, r4
 800541e:	f000 855a 	beq.w	8005ed6 <_dtoa_r+0xb3e>
 8005422:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005424:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005684 <_dtoa_r+0x2ec>
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 855c 	beq.w	8005ee6 <_dtoa_r+0xb4e>
 800542e:	f10a 0303 	add.w	r3, sl, #3
 8005432:	f000 bd56 	b.w	8005ee2 <_dtoa_r+0xb4a>
 8005436:	ed9d 7b04 	vldr	d7, [sp, #16]
 800543a:	2200      	movs	r2, #0
 800543c:	ec51 0b17 	vmov	r0, r1, d7
 8005440:	2300      	movs	r3, #0
 8005442:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005446:	f7fb fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800544a:	4680      	mov	r8, r0
 800544c:	b158      	cbz	r0, 8005466 <_dtoa_r+0xce>
 800544e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005450:	2301      	movs	r3, #1
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005456:	b113      	cbz	r3, 800545e <_dtoa_r+0xc6>
 8005458:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800545a:	4b86      	ldr	r3, [pc, #536]	@ (8005674 <_dtoa_r+0x2dc>)
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005688 <_dtoa_r+0x2f0>
 8005462:	f000 bd40 	b.w	8005ee6 <_dtoa_r+0xb4e>
 8005466:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800546a:	aa14      	add	r2, sp, #80	@ 0x50
 800546c:	a915      	add	r1, sp, #84	@ 0x54
 800546e:	4648      	mov	r0, r9
 8005470:	f001 f984 	bl	800677c <__d2b>
 8005474:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005478:	9002      	str	r0, [sp, #8]
 800547a:	2e00      	cmp	r6, #0
 800547c:	d078      	beq.n	8005570 <_dtoa_r+0x1d8>
 800547e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005480:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800548c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005490:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005494:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005498:	4619      	mov	r1, r3
 800549a:	2200      	movs	r2, #0
 800549c:	4b76      	ldr	r3, [pc, #472]	@ (8005678 <_dtoa_r+0x2e0>)
 800549e:	f7fa ff03 	bl	80002a8 <__aeabi_dsub>
 80054a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005650 <_dtoa_r+0x2b8>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f7fb f8b6 	bl	8000618 <__aeabi_dmul>
 80054ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8005658 <_dtoa_r+0x2c0>)
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f7fa fefb 	bl	80002ac <__adddf3>
 80054b6:	4604      	mov	r4, r0
 80054b8:	4630      	mov	r0, r6
 80054ba:	460d      	mov	r5, r1
 80054bc:	f7fb f842 	bl	8000544 <__aeabi_i2d>
 80054c0:	a367      	add	r3, pc, #412	@ (adr r3, 8005660 <_dtoa_r+0x2c8>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fb f8a7 	bl	8000618 <__aeabi_dmul>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fa feeb 	bl	80002ac <__adddf3>
 80054d6:	4604      	mov	r4, r0
 80054d8:	460d      	mov	r5, r1
 80054da:	f7fb fb4d 	bl	8000b78 <__aeabi_d2iz>
 80054de:	2200      	movs	r2, #0
 80054e0:	4607      	mov	r7, r0
 80054e2:	2300      	movs	r3, #0
 80054e4:	4620      	mov	r0, r4
 80054e6:	4629      	mov	r1, r5
 80054e8:	f7fb fb08 	bl	8000afc <__aeabi_dcmplt>
 80054ec:	b140      	cbz	r0, 8005500 <_dtoa_r+0x168>
 80054ee:	4638      	mov	r0, r7
 80054f0:	f7fb f828 	bl	8000544 <__aeabi_i2d>
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	f7fb faf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80054fc:	b900      	cbnz	r0, 8005500 <_dtoa_r+0x168>
 80054fe:	3f01      	subs	r7, #1
 8005500:	2f16      	cmp	r7, #22
 8005502:	d852      	bhi.n	80055aa <_dtoa_r+0x212>
 8005504:	4b5d      	ldr	r3, [pc, #372]	@ (800567c <_dtoa_r+0x2e4>)
 8005506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005512:	f7fb faf3 	bl	8000afc <__aeabi_dcmplt>
 8005516:	2800      	cmp	r0, #0
 8005518:	d049      	beq.n	80055ae <_dtoa_r+0x216>
 800551a:	3f01      	subs	r7, #1
 800551c:	2300      	movs	r3, #0
 800551e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005520:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005522:	1b9b      	subs	r3, r3, r6
 8005524:	1e5a      	subs	r2, r3, #1
 8005526:	bf45      	ittet	mi
 8005528:	f1c3 0301 	rsbmi	r3, r3, #1
 800552c:	9300      	strmi	r3, [sp, #0]
 800552e:	2300      	movpl	r3, #0
 8005530:	2300      	movmi	r3, #0
 8005532:	9206      	str	r2, [sp, #24]
 8005534:	bf54      	ite	pl
 8005536:	9300      	strpl	r3, [sp, #0]
 8005538:	9306      	strmi	r3, [sp, #24]
 800553a:	2f00      	cmp	r7, #0
 800553c:	db39      	blt.n	80055b2 <_dtoa_r+0x21a>
 800553e:	9b06      	ldr	r3, [sp, #24]
 8005540:	970d      	str	r7, [sp, #52]	@ 0x34
 8005542:	443b      	add	r3, r7
 8005544:	9306      	str	r3, [sp, #24]
 8005546:	2300      	movs	r3, #0
 8005548:	9308      	str	r3, [sp, #32]
 800554a:	9b07      	ldr	r3, [sp, #28]
 800554c:	2b09      	cmp	r3, #9
 800554e:	d863      	bhi.n	8005618 <_dtoa_r+0x280>
 8005550:	2b05      	cmp	r3, #5
 8005552:	bfc4      	itt	gt
 8005554:	3b04      	subgt	r3, #4
 8005556:	9307      	strgt	r3, [sp, #28]
 8005558:	9b07      	ldr	r3, [sp, #28]
 800555a:	f1a3 0302 	sub.w	r3, r3, #2
 800555e:	bfcc      	ite	gt
 8005560:	2400      	movgt	r4, #0
 8005562:	2401      	movle	r4, #1
 8005564:	2b03      	cmp	r3, #3
 8005566:	d863      	bhi.n	8005630 <_dtoa_r+0x298>
 8005568:	e8df f003 	tbb	[pc, r3]
 800556c:	2b375452 	.word	0x2b375452
 8005570:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005574:	441e      	add	r6, r3
 8005576:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800557a:	2b20      	cmp	r3, #32
 800557c:	bfc1      	itttt	gt
 800557e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005582:	409f      	lslgt	r7, r3
 8005584:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005588:	fa24 f303 	lsrgt.w	r3, r4, r3
 800558c:	bfd6      	itet	le
 800558e:	f1c3 0320 	rsble	r3, r3, #32
 8005592:	ea47 0003 	orrgt.w	r0, r7, r3
 8005596:	fa04 f003 	lslle.w	r0, r4, r3
 800559a:	f7fa ffc3 	bl	8000524 <__aeabi_ui2d>
 800559e:	2201      	movs	r2, #1
 80055a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055a4:	3e01      	subs	r6, #1
 80055a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80055a8:	e776      	b.n	8005498 <_dtoa_r+0x100>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e7b7      	b.n	800551e <_dtoa_r+0x186>
 80055ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80055b0:	e7b6      	b.n	8005520 <_dtoa_r+0x188>
 80055b2:	9b00      	ldr	r3, [sp, #0]
 80055b4:	1bdb      	subs	r3, r3, r7
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	427b      	negs	r3, r7
 80055ba:	9308      	str	r3, [sp, #32]
 80055bc:	2300      	movs	r3, #0
 80055be:	930d      	str	r3, [sp, #52]	@ 0x34
 80055c0:	e7c3      	b.n	800554a <_dtoa_r+0x1b2>
 80055c2:	2301      	movs	r3, #1
 80055c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055c8:	eb07 0b03 	add.w	fp, r7, r3
 80055cc:	f10b 0301 	add.w	r3, fp, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	9303      	str	r3, [sp, #12]
 80055d4:	bfb8      	it	lt
 80055d6:	2301      	movlt	r3, #1
 80055d8:	e006      	b.n	80055e8 <_dtoa_r+0x250>
 80055da:	2301      	movs	r3, #1
 80055dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80055de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dd28      	ble.n	8005636 <_dtoa_r+0x29e>
 80055e4:	469b      	mov	fp, r3
 80055e6:	9303      	str	r3, [sp, #12]
 80055e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80055ec:	2100      	movs	r1, #0
 80055ee:	2204      	movs	r2, #4
 80055f0:	f102 0514 	add.w	r5, r2, #20
 80055f4:	429d      	cmp	r5, r3
 80055f6:	d926      	bls.n	8005646 <_dtoa_r+0x2ae>
 80055f8:	6041      	str	r1, [r0, #4]
 80055fa:	4648      	mov	r0, r9
 80055fc:	f000 fd9c 	bl	8006138 <_Balloc>
 8005600:	4682      	mov	sl, r0
 8005602:	2800      	cmp	r0, #0
 8005604:	d142      	bne.n	800568c <_dtoa_r+0x2f4>
 8005606:	4b1e      	ldr	r3, [pc, #120]	@ (8005680 <_dtoa_r+0x2e8>)
 8005608:	4602      	mov	r2, r0
 800560a:	f240 11af 	movw	r1, #431	@ 0x1af
 800560e:	e6da      	b.n	80053c6 <_dtoa_r+0x2e>
 8005610:	2300      	movs	r3, #0
 8005612:	e7e3      	b.n	80055dc <_dtoa_r+0x244>
 8005614:	2300      	movs	r3, #0
 8005616:	e7d5      	b.n	80055c4 <_dtoa_r+0x22c>
 8005618:	2401      	movs	r4, #1
 800561a:	2300      	movs	r3, #0
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005620:	f04f 3bff 	mov.w	fp, #4294967295
 8005624:	2200      	movs	r2, #0
 8005626:	f8cd b00c 	str.w	fp, [sp, #12]
 800562a:	2312      	movs	r3, #18
 800562c:	920c      	str	r2, [sp, #48]	@ 0x30
 800562e:	e7db      	b.n	80055e8 <_dtoa_r+0x250>
 8005630:	2301      	movs	r3, #1
 8005632:	9309      	str	r3, [sp, #36]	@ 0x24
 8005634:	e7f4      	b.n	8005620 <_dtoa_r+0x288>
 8005636:	f04f 0b01 	mov.w	fp, #1
 800563a:	f8cd b00c 	str.w	fp, [sp, #12]
 800563e:	465b      	mov	r3, fp
 8005640:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005644:	e7d0      	b.n	80055e8 <_dtoa_r+0x250>
 8005646:	3101      	adds	r1, #1
 8005648:	0052      	lsls	r2, r2, #1
 800564a:	e7d1      	b.n	80055f0 <_dtoa_r+0x258>
 800564c:	f3af 8000 	nop.w
 8005650:	636f4361 	.word	0x636f4361
 8005654:	3fd287a7 	.word	0x3fd287a7
 8005658:	8b60c8b3 	.word	0x8b60c8b3
 800565c:	3fc68a28 	.word	0x3fc68a28
 8005660:	509f79fb 	.word	0x509f79fb
 8005664:	3fd34413 	.word	0x3fd34413
 8005668:	08008200 	.word	0x08008200
 800566c:	080082ec 	.word	0x080082ec
 8005670:	7ff00000 	.word	0x7ff00000
 8005674:	08008280 	.word	0x08008280
 8005678:	3ff80000 	.word	0x3ff80000
 800567c:	08008400 	.word	0x08008400
 8005680:	08008344 	.word	0x08008344
 8005684:	080082e8 	.word	0x080082e8
 8005688:	0800827f 	.word	0x0800827f
 800568c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005690:	6018      	str	r0, [r3, #0]
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	2b0e      	cmp	r3, #14
 8005696:	f200 80a1 	bhi.w	80057dc <_dtoa_r+0x444>
 800569a:	2c00      	cmp	r4, #0
 800569c:	f000 809e 	beq.w	80057dc <_dtoa_r+0x444>
 80056a0:	2f00      	cmp	r7, #0
 80056a2:	dd33      	ble.n	800570c <_dtoa_r+0x374>
 80056a4:	4b9c      	ldr	r3, [pc, #624]	@ (8005918 <_dtoa_r+0x580>)
 80056a6:	f007 020f 	and.w	r2, r7, #15
 80056aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ae:	ed93 7b00 	vldr	d7, [r3]
 80056b2:	05f8      	lsls	r0, r7, #23
 80056b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80056b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056bc:	d516      	bpl.n	80056ec <_dtoa_r+0x354>
 80056be:	4b97      	ldr	r3, [pc, #604]	@ (800591c <_dtoa_r+0x584>)
 80056c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056c8:	f7fb f8d0 	bl	800086c <__aeabi_ddiv>
 80056cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d0:	f004 040f 	and.w	r4, r4, #15
 80056d4:	2603      	movs	r6, #3
 80056d6:	4d91      	ldr	r5, [pc, #580]	@ (800591c <_dtoa_r+0x584>)
 80056d8:	b954      	cbnz	r4, 80056f0 <_dtoa_r+0x358>
 80056da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80056de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056e2:	f7fb f8c3 	bl	800086c <__aeabi_ddiv>
 80056e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ea:	e028      	b.n	800573e <_dtoa_r+0x3a6>
 80056ec:	2602      	movs	r6, #2
 80056ee:	e7f2      	b.n	80056d6 <_dtoa_r+0x33e>
 80056f0:	07e1      	lsls	r1, r4, #31
 80056f2:	d508      	bpl.n	8005706 <_dtoa_r+0x36e>
 80056f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80056f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056fc:	f7fa ff8c 	bl	8000618 <__aeabi_dmul>
 8005700:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005704:	3601      	adds	r6, #1
 8005706:	1064      	asrs	r4, r4, #1
 8005708:	3508      	adds	r5, #8
 800570a:	e7e5      	b.n	80056d8 <_dtoa_r+0x340>
 800570c:	f000 80af 	beq.w	800586e <_dtoa_r+0x4d6>
 8005710:	427c      	negs	r4, r7
 8005712:	4b81      	ldr	r3, [pc, #516]	@ (8005918 <_dtoa_r+0x580>)
 8005714:	4d81      	ldr	r5, [pc, #516]	@ (800591c <_dtoa_r+0x584>)
 8005716:	f004 020f 	and.w	r2, r4, #15
 800571a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005726:	f7fa ff77 	bl	8000618 <__aeabi_dmul>
 800572a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800572e:	1124      	asrs	r4, r4, #4
 8005730:	2300      	movs	r3, #0
 8005732:	2602      	movs	r6, #2
 8005734:	2c00      	cmp	r4, #0
 8005736:	f040 808f 	bne.w	8005858 <_dtoa_r+0x4c0>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1d3      	bne.n	80056e6 <_dtoa_r+0x34e>
 800573e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005740:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8094 	beq.w	8005872 <_dtoa_r+0x4da>
 800574a:	4b75      	ldr	r3, [pc, #468]	@ (8005920 <_dtoa_r+0x588>)
 800574c:	2200      	movs	r2, #0
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fb f9d3 	bl	8000afc <__aeabi_dcmplt>
 8005756:	2800      	cmp	r0, #0
 8005758:	f000 808b 	beq.w	8005872 <_dtoa_r+0x4da>
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8087 	beq.w	8005872 <_dtoa_r+0x4da>
 8005764:	f1bb 0f00 	cmp.w	fp, #0
 8005768:	dd34      	ble.n	80057d4 <_dtoa_r+0x43c>
 800576a:	4620      	mov	r0, r4
 800576c:	4b6d      	ldr	r3, [pc, #436]	@ (8005924 <_dtoa_r+0x58c>)
 800576e:	2200      	movs	r2, #0
 8005770:	4629      	mov	r1, r5
 8005772:	f7fa ff51 	bl	8000618 <__aeabi_dmul>
 8005776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800577a:	f107 38ff 	add.w	r8, r7, #4294967295
 800577e:	3601      	adds	r6, #1
 8005780:	465c      	mov	r4, fp
 8005782:	4630      	mov	r0, r6
 8005784:	f7fa fede 	bl	8000544 <__aeabi_i2d>
 8005788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800578c:	f7fa ff44 	bl	8000618 <__aeabi_dmul>
 8005790:	4b65      	ldr	r3, [pc, #404]	@ (8005928 <_dtoa_r+0x590>)
 8005792:	2200      	movs	r2, #0
 8005794:	f7fa fd8a 	bl	80002ac <__adddf3>
 8005798:	4605      	mov	r5, r0
 800579a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800579e:	2c00      	cmp	r4, #0
 80057a0:	d16a      	bne.n	8005878 <_dtoa_r+0x4e0>
 80057a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057a6:	4b61      	ldr	r3, [pc, #388]	@ (800592c <_dtoa_r+0x594>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	f7fa fd7d 	bl	80002a8 <__aeabi_dsub>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057b6:	462a      	mov	r2, r5
 80057b8:	4633      	mov	r3, r6
 80057ba:	f7fb f9bd 	bl	8000b38 <__aeabi_dcmpgt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f040 8298 	bne.w	8005cf4 <_dtoa_r+0x95c>
 80057c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c8:	462a      	mov	r2, r5
 80057ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057ce:	f7fb f995 	bl	8000afc <__aeabi_dcmplt>
 80057d2:	bb38      	cbnz	r0, 8005824 <_dtoa_r+0x48c>
 80057d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80057d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f2c0 8157 	blt.w	8005a92 <_dtoa_r+0x6fa>
 80057e4:	2f0e      	cmp	r7, #14
 80057e6:	f300 8154 	bgt.w	8005a92 <_dtoa_r+0x6fa>
 80057ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005918 <_dtoa_r+0x580>)
 80057ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057f0:	ed93 7b00 	vldr	d7, [r3]
 80057f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	ed8d 7b00 	vstr	d7, [sp]
 80057fc:	f280 80e5 	bge.w	80059ca <_dtoa_r+0x632>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f300 80e1 	bgt.w	80059ca <_dtoa_r+0x632>
 8005808:	d10c      	bne.n	8005824 <_dtoa_r+0x48c>
 800580a:	4b48      	ldr	r3, [pc, #288]	@ (800592c <_dtoa_r+0x594>)
 800580c:	2200      	movs	r2, #0
 800580e:	ec51 0b17 	vmov	r0, r1, d7
 8005812:	f7fa ff01 	bl	8000618 <__aeabi_dmul>
 8005816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800581a:	f7fb f983 	bl	8000b24 <__aeabi_dcmpge>
 800581e:	2800      	cmp	r0, #0
 8005820:	f000 8266 	beq.w	8005cf0 <_dtoa_r+0x958>
 8005824:	2400      	movs	r4, #0
 8005826:	4625      	mov	r5, r4
 8005828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800582a:	4656      	mov	r6, sl
 800582c:	ea6f 0803 	mvn.w	r8, r3
 8005830:	2700      	movs	r7, #0
 8005832:	4621      	mov	r1, r4
 8005834:	4648      	mov	r0, r9
 8005836:	f000 fcbf 	bl	80061b8 <_Bfree>
 800583a:	2d00      	cmp	r5, #0
 800583c:	f000 80bd 	beq.w	80059ba <_dtoa_r+0x622>
 8005840:	b12f      	cbz	r7, 800584e <_dtoa_r+0x4b6>
 8005842:	42af      	cmp	r7, r5
 8005844:	d003      	beq.n	800584e <_dtoa_r+0x4b6>
 8005846:	4639      	mov	r1, r7
 8005848:	4648      	mov	r0, r9
 800584a:	f000 fcb5 	bl	80061b8 <_Bfree>
 800584e:	4629      	mov	r1, r5
 8005850:	4648      	mov	r0, r9
 8005852:	f000 fcb1 	bl	80061b8 <_Bfree>
 8005856:	e0b0      	b.n	80059ba <_dtoa_r+0x622>
 8005858:	07e2      	lsls	r2, r4, #31
 800585a:	d505      	bpl.n	8005868 <_dtoa_r+0x4d0>
 800585c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005860:	f7fa feda 	bl	8000618 <__aeabi_dmul>
 8005864:	3601      	adds	r6, #1
 8005866:	2301      	movs	r3, #1
 8005868:	1064      	asrs	r4, r4, #1
 800586a:	3508      	adds	r5, #8
 800586c:	e762      	b.n	8005734 <_dtoa_r+0x39c>
 800586e:	2602      	movs	r6, #2
 8005870:	e765      	b.n	800573e <_dtoa_r+0x3a6>
 8005872:	9c03      	ldr	r4, [sp, #12]
 8005874:	46b8      	mov	r8, r7
 8005876:	e784      	b.n	8005782 <_dtoa_r+0x3ea>
 8005878:	4b27      	ldr	r3, [pc, #156]	@ (8005918 <_dtoa_r+0x580>)
 800587a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800587c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005880:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005884:	4454      	add	r4, sl
 8005886:	2900      	cmp	r1, #0
 8005888:	d054      	beq.n	8005934 <_dtoa_r+0x59c>
 800588a:	4929      	ldr	r1, [pc, #164]	@ (8005930 <_dtoa_r+0x598>)
 800588c:	2000      	movs	r0, #0
 800588e:	f7fa ffed 	bl	800086c <__aeabi_ddiv>
 8005892:	4633      	mov	r3, r6
 8005894:	462a      	mov	r2, r5
 8005896:	f7fa fd07 	bl	80002a8 <__aeabi_dsub>
 800589a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800589e:	4656      	mov	r6, sl
 80058a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058a4:	f7fb f968 	bl	8000b78 <__aeabi_d2iz>
 80058a8:	4605      	mov	r5, r0
 80058aa:	f7fa fe4b 	bl	8000544 <__aeabi_i2d>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058b6:	f7fa fcf7 	bl	80002a8 <__aeabi_dsub>
 80058ba:	3530      	adds	r5, #48	@ 0x30
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058c4:	f806 5b01 	strb.w	r5, [r6], #1
 80058c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80058cc:	f7fb f916 	bl	8000afc <__aeabi_dcmplt>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d172      	bne.n	80059ba <_dtoa_r+0x622>
 80058d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d8:	4911      	ldr	r1, [pc, #68]	@ (8005920 <_dtoa_r+0x588>)
 80058da:	2000      	movs	r0, #0
 80058dc:	f7fa fce4 	bl	80002a8 <__aeabi_dsub>
 80058e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80058e4:	f7fb f90a 	bl	8000afc <__aeabi_dcmplt>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	f040 80b4 	bne.w	8005a56 <_dtoa_r+0x6be>
 80058ee:	42a6      	cmp	r6, r4
 80058f0:	f43f af70 	beq.w	80057d4 <_dtoa_r+0x43c>
 80058f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80058f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <_dtoa_r+0x58c>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	f7fa fe8c 	bl	8000618 <__aeabi_dmul>
 8005900:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <_dtoa_r+0x58c>)
 8005902:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005906:	2200      	movs	r2, #0
 8005908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800590c:	f7fa fe84 	bl	8000618 <__aeabi_dmul>
 8005910:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005914:	e7c4      	b.n	80058a0 <_dtoa_r+0x508>
 8005916:	bf00      	nop
 8005918:	08008400 	.word	0x08008400
 800591c:	080083d8 	.word	0x080083d8
 8005920:	3ff00000 	.word	0x3ff00000
 8005924:	40240000 	.word	0x40240000
 8005928:	401c0000 	.word	0x401c0000
 800592c:	40140000 	.word	0x40140000
 8005930:	3fe00000 	.word	0x3fe00000
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	f7fa fe6e 	bl	8000618 <__aeabi_dmul>
 800593c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005940:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005942:	4656      	mov	r6, sl
 8005944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005948:	f7fb f916 	bl	8000b78 <__aeabi_d2iz>
 800594c:	4605      	mov	r5, r0
 800594e:	f7fa fdf9 	bl	8000544 <__aeabi_i2d>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800595a:	f7fa fca5 	bl	80002a8 <__aeabi_dsub>
 800595e:	3530      	adds	r5, #48	@ 0x30
 8005960:	f806 5b01 	strb.w	r5, [r6], #1
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	42a6      	cmp	r6, r4
 800596a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	d124      	bne.n	80059be <_dtoa_r+0x626>
 8005974:	4baf      	ldr	r3, [pc, #700]	@ (8005c34 <_dtoa_r+0x89c>)
 8005976:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800597a:	f7fa fc97 	bl	80002ac <__adddf3>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005986:	f7fb f8d7 	bl	8000b38 <__aeabi_dcmpgt>
 800598a:	2800      	cmp	r0, #0
 800598c:	d163      	bne.n	8005a56 <_dtoa_r+0x6be>
 800598e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005992:	49a8      	ldr	r1, [pc, #672]	@ (8005c34 <_dtoa_r+0x89c>)
 8005994:	2000      	movs	r0, #0
 8005996:	f7fa fc87 	bl	80002a8 <__aeabi_dsub>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059a2:	f7fb f8ab 	bl	8000afc <__aeabi_dcmplt>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f43f af14 	beq.w	80057d4 <_dtoa_r+0x43c>
 80059ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80059ae:	1e73      	subs	r3, r6, #1
 80059b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059b6:	2b30      	cmp	r3, #48	@ 0x30
 80059b8:	d0f8      	beq.n	80059ac <_dtoa_r+0x614>
 80059ba:	4647      	mov	r7, r8
 80059bc:	e03b      	b.n	8005a36 <_dtoa_r+0x69e>
 80059be:	4b9e      	ldr	r3, [pc, #632]	@ (8005c38 <_dtoa_r+0x8a0>)
 80059c0:	f7fa fe2a 	bl	8000618 <__aeabi_dmul>
 80059c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c8:	e7bc      	b.n	8005944 <_dtoa_r+0x5ac>
 80059ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80059ce:	4656      	mov	r6, sl
 80059d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059d4:	4620      	mov	r0, r4
 80059d6:	4629      	mov	r1, r5
 80059d8:	f7fa ff48 	bl	800086c <__aeabi_ddiv>
 80059dc:	f7fb f8cc 	bl	8000b78 <__aeabi_d2iz>
 80059e0:	4680      	mov	r8, r0
 80059e2:	f7fa fdaf 	bl	8000544 <__aeabi_i2d>
 80059e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ea:	f7fa fe15 	bl	8000618 <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4620      	mov	r0, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80059fa:	f7fa fc55 	bl	80002a8 <__aeabi_dsub>
 80059fe:	f806 4b01 	strb.w	r4, [r6], #1
 8005a02:	9d03      	ldr	r5, [sp, #12]
 8005a04:	eba6 040a 	sub.w	r4, r6, sl
 8005a08:	42a5      	cmp	r5, r4
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	d133      	bne.n	8005a78 <_dtoa_r+0x6e0>
 8005a10:	f7fa fc4c 	bl	80002ac <__adddf3>
 8005a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	f7fb f88c 	bl	8000b38 <__aeabi_dcmpgt>
 8005a20:	b9c0      	cbnz	r0, 8005a54 <_dtoa_r+0x6bc>
 8005a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fb f85d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a2e:	b110      	cbz	r0, 8005a36 <_dtoa_r+0x69e>
 8005a30:	f018 0f01 	tst.w	r8, #1
 8005a34:	d10e      	bne.n	8005a54 <_dtoa_r+0x6bc>
 8005a36:	9902      	ldr	r1, [sp, #8]
 8005a38:	4648      	mov	r0, r9
 8005a3a:	f000 fbbd 	bl	80061b8 <_Bfree>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	7033      	strb	r3, [r6, #0]
 8005a42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a44:	3701      	adds	r7, #1
 8005a46:	601f      	str	r7, [r3, #0]
 8005a48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 824b 	beq.w	8005ee6 <_dtoa_r+0xb4e>
 8005a50:	601e      	str	r6, [r3, #0]
 8005a52:	e248      	b.n	8005ee6 <_dtoa_r+0xb4e>
 8005a54:	46b8      	mov	r8, r7
 8005a56:	4633      	mov	r3, r6
 8005a58:	461e      	mov	r6, r3
 8005a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a5e:	2a39      	cmp	r2, #57	@ 0x39
 8005a60:	d106      	bne.n	8005a70 <_dtoa_r+0x6d8>
 8005a62:	459a      	cmp	sl, r3
 8005a64:	d1f8      	bne.n	8005a58 <_dtoa_r+0x6c0>
 8005a66:	2230      	movs	r2, #48	@ 0x30
 8005a68:	f108 0801 	add.w	r8, r8, #1
 8005a6c:	f88a 2000 	strb.w	r2, [sl]
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	3201      	adds	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e7a0      	b.n	80059ba <_dtoa_r+0x622>
 8005a78:	4b6f      	ldr	r3, [pc, #444]	@ (8005c38 <_dtoa_r+0x8a0>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fdcc 	bl	8000618 <__aeabi_dmul>
 8005a80:	2200      	movs	r2, #0
 8005a82:	2300      	movs	r3, #0
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	f7fb f82e 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d09f      	beq.n	80059d0 <_dtoa_r+0x638>
 8005a90:	e7d1      	b.n	8005a36 <_dtoa_r+0x69e>
 8005a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a94:	2a00      	cmp	r2, #0
 8005a96:	f000 80ea 	beq.w	8005c6e <_dtoa_r+0x8d6>
 8005a9a:	9a07      	ldr	r2, [sp, #28]
 8005a9c:	2a01      	cmp	r2, #1
 8005a9e:	f300 80cd 	bgt.w	8005c3c <_dtoa_r+0x8a4>
 8005aa2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	f000 80c1 	beq.w	8005c2c <_dtoa_r+0x894>
 8005aaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005aae:	9c08      	ldr	r4, [sp, #32]
 8005ab0:	9e00      	ldr	r6, [sp, #0]
 8005ab2:	9a00      	ldr	r2, [sp, #0]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	9200      	str	r2, [sp, #0]
 8005ab8:	9a06      	ldr	r2, [sp, #24]
 8005aba:	2101      	movs	r1, #1
 8005abc:	441a      	add	r2, r3
 8005abe:	4648      	mov	r0, r9
 8005ac0:	9206      	str	r2, [sp, #24]
 8005ac2:	f000 fc2d 	bl	8006320 <__i2b>
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	b166      	cbz	r6, 8005ae4 <_dtoa_r+0x74c>
 8005aca:	9b06      	ldr	r3, [sp, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	dd09      	ble.n	8005ae4 <_dtoa_r+0x74c>
 8005ad0:	42b3      	cmp	r3, r6
 8005ad2:	9a00      	ldr	r2, [sp, #0]
 8005ad4:	bfa8      	it	ge
 8005ad6:	4633      	movge	r3, r6
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	9200      	str	r2, [sp, #0]
 8005adc:	9a06      	ldr	r2, [sp, #24]
 8005ade:	1af6      	subs	r6, r6, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	9306      	str	r3, [sp, #24]
 8005ae4:	9b08      	ldr	r3, [sp, #32]
 8005ae6:	b30b      	cbz	r3, 8005b2c <_dtoa_r+0x794>
 8005ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80c6 	beq.w	8005c7c <_dtoa_r+0x8e4>
 8005af0:	2c00      	cmp	r4, #0
 8005af2:	f000 80c0 	beq.w	8005c76 <_dtoa_r+0x8de>
 8005af6:	4629      	mov	r1, r5
 8005af8:	4622      	mov	r2, r4
 8005afa:	4648      	mov	r0, r9
 8005afc:	f000 fcc8 	bl	8006490 <__pow5mult>
 8005b00:	9a02      	ldr	r2, [sp, #8]
 8005b02:	4601      	mov	r1, r0
 8005b04:	4605      	mov	r5, r0
 8005b06:	4648      	mov	r0, r9
 8005b08:	f000 fc20 	bl	800634c <__multiply>
 8005b0c:	9902      	ldr	r1, [sp, #8]
 8005b0e:	4680      	mov	r8, r0
 8005b10:	4648      	mov	r0, r9
 8005b12:	f000 fb51 	bl	80061b8 <_Bfree>
 8005b16:	9b08      	ldr	r3, [sp, #32]
 8005b18:	1b1b      	subs	r3, r3, r4
 8005b1a:	9308      	str	r3, [sp, #32]
 8005b1c:	f000 80b1 	beq.w	8005c82 <_dtoa_r+0x8ea>
 8005b20:	9a08      	ldr	r2, [sp, #32]
 8005b22:	4641      	mov	r1, r8
 8005b24:	4648      	mov	r0, r9
 8005b26:	f000 fcb3 	bl	8006490 <__pow5mult>
 8005b2a:	9002      	str	r0, [sp, #8]
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4648      	mov	r0, r9
 8005b30:	f000 fbf6 	bl	8006320 <__i2b>
 8005b34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b36:	4604      	mov	r4, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 81d8 	beq.w	8005eee <_dtoa_r+0xb56>
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4601      	mov	r1, r0
 8005b42:	4648      	mov	r0, r9
 8005b44:	f000 fca4 	bl	8006490 <__pow5mult>
 8005b48:	9b07      	ldr	r3, [sp, #28]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	f300 809f 	bgt.w	8005c90 <_dtoa_r+0x8f8>
 8005b52:	9b04      	ldr	r3, [sp, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 8097 	bne.w	8005c88 <_dtoa_r+0x8f0>
 8005b5a:	9b05      	ldr	r3, [sp, #20]
 8005b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f040 8093 	bne.w	8005c8c <_dtoa_r+0x8f4>
 8005b66:	9b05      	ldr	r3, [sp, #20]
 8005b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b6c:	0d1b      	lsrs	r3, r3, #20
 8005b6e:	051b      	lsls	r3, r3, #20
 8005b70:	b133      	cbz	r3, 8005b80 <_dtoa_r+0x7e8>
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	9b06      	ldr	r3, [sp, #24]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	9306      	str	r3, [sp, #24]
 8005b7e:	2301      	movs	r3, #1
 8005b80:	9308      	str	r3, [sp, #32]
 8005b82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 81b8 	beq.w	8005efa <_dtoa_r+0xb62>
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b90:	6918      	ldr	r0, [r3, #16]
 8005b92:	f000 fb79 	bl	8006288 <__hi0bits>
 8005b96:	f1c0 0020 	rsb	r0, r0, #32
 8005b9a:	9b06      	ldr	r3, [sp, #24]
 8005b9c:	4418      	add	r0, r3
 8005b9e:	f010 001f 	ands.w	r0, r0, #31
 8005ba2:	f000 8082 	beq.w	8005caa <_dtoa_r+0x912>
 8005ba6:	f1c0 0320 	rsb	r3, r0, #32
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	dd73      	ble.n	8005c96 <_dtoa_r+0x8fe>
 8005bae:	9b00      	ldr	r3, [sp, #0]
 8005bb0:	f1c0 001c 	rsb	r0, r0, #28
 8005bb4:	4403      	add	r3, r0
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	4403      	add	r3, r0
 8005bbc:	4406      	add	r6, r0
 8005bbe:	9306      	str	r3, [sp, #24]
 8005bc0:	9b00      	ldr	r3, [sp, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	dd05      	ble.n	8005bd2 <_dtoa_r+0x83a>
 8005bc6:	9902      	ldr	r1, [sp, #8]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4648      	mov	r0, r9
 8005bcc:	f000 fcba 	bl	8006544 <__lshift>
 8005bd0:	9002      	str	r0, [sp, #8]
 8005bd2:	9b06      	ldr	r3, [sp, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dd05      	ble.n	8005be4 <_dtoa_r+0x84c>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4648      	mov	r0, r9
 8005bde:	f000 fcb1 	bl	8006544 <__lshift>
 8005be2:	4604      	mov	r4, r0
 8005be4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d061      	beq.n	8005cae <_dtoa_r+0x916>
 8005bea:	9802      	ldr	r0, [sp, #8]
 8005bec:	4621      	mov	r1, r4
 8005bee:	f000 fd15 	bl	800661c <__mcmp>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	da5b      	bge.n	8005cae <_dtoa_r+0x916>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9902      	ldr	r1, [sp, #8]
 8005bfa:	220a      	movs	r2, #10
 8005bfc:	4648      	mov	r0, r9
 8005bfe:	f000 fafd 	bl	80061fc <__multadd>
 8005c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c04:	9002      	str	r0, [sp, #8]
 8005c06:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8177 	beq.w	8005efe <_dtoa_r+0xb66>
 8005c10:	4629      	mov	r1, r5
 8005c12:	2300      	movs	r3, #0
 8005c14:	220a      	movs	r2, #10
 8005c16:	4648      	mov	r0, r9
 8005c18:	f000 faf0 	bl	80061fc <__multadd>
 8005c1c:	f1bb 0f00 	cmp.w	fp, #0
 8005c20:	4605      	mov	r5, r0
 8005c22:	dc6f      	bgt.n	8005d04 <_dtoa_r+0x96c>
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	dc49      	bgt.n	8005cbe <_dtoa_r+0x926>
 8005c2a:	e06b      	b.n	8005d04 <_dtoa_r+0x96c>
 8005c2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c32:	e73c      	b.n	8005aae <_dtoa_r+0x716>
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	40240000 	.word	0x40240000
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1e5c      	subs	r4, r3, #1
 8005c40:	9b08      	ldr	r3, [sp, #32]
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	db09      	blt.n	8005c5a <_dtoa_r+0x8c2>
 8005c46:	1b1c      	subs	r4, r3, r4
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f6bf af30 	bge.w	8005ab0 <_dtoa_r+0x718>
 8005c50:	9b00      	ldr	r3, [sp, #0]
 8005c52:	9a03      	ldr	r2, [sp, #12]
 8005c54:	1a9e      	subs	r6, r3, r2
 8005c56:	2300      	movs	r3, #0
 8005c58:	e72b      	b.n	8005ab2 <_dtoa_r+0x71a>
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c5e:	9408      	str	r4, [sp, #32]
 8005c60:	1ae3      	subs	r3, r4, r3
 8005c62:	441a      	add	r2, r3
 8005c64:	9e00      	ldr	r6, [sp, #0]
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	920d      	str	r2, [sp, #52]	@ 0x34
 8005c6a:	2400      	movs	r4, #0
 8005c6c:	e721      	b.n	8005ab2 <_dtoa_r+0x71a>
 8005c6e:	9c08      	ldr	r4, [sp, #32]
 8005c70:	9e00      	ldr	r6, [sp, #0]
 8005c72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005c74:	e728      	b.n	8005ac8 <_dtoa_r+0x730>
 8005c76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005c7a:	e751      	b.n	8005b20 <_dtoa_r+0x788>
 8005c7c:	9a08      	ldr	r2, [sp, #32]
 8005c7e:	9902      	ldr	r1, [sp, #8]
 8005c80:	e750      	b.n	8005b24 <_dtoa_r+0x78c>
 8005c82:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c86:	e751      	b.n	8005b2c <_dtoa_r+0x794>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e779      	b.n	8005b80 <_dtoa_r+0x7e8>
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	e777      	b.n	8005b80 <_dtoa_r+0x7e8>
 8005c90:	2300      	movs	r3, #0
 8005c92:	9308      	str	r3, [sp, #32]
 8005c94:	e779      	b.n	8005b8a <_dtoa_r+0x7f2>
 8005c96:	d093      	beq.n	8005bc0 <_dtoa_r+0x828>
 8005c98:	9a00      	ldr	r2, [sp, #0]
 8005c9a:	331c      	adds	r3, #28
 8005c9c:	441a      	add	r2, r3
 8005c9e:	9200      	str	r2, [sp, #0]
 8005ca0:	9a06      	ldr	r2, [sp, #24]
 8005ca2:	441a      	add	r2, r3
 8005ca4:	441e      	add	r6, r3
 8005ca6:	9206      	str	r2, [sp, #24]
 8005ca8:	e78a      	b.n	8005bc0 <_dtoa_r+0x828>
 8005caa:	4603      	mov	r3, r0
 8005cac:	e7f4      	b.n	8005c98 <_dtoa_r+0x900>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	46b8      	mov	r8, r7
 8005cb4:	dc20      	bgt.n	8005cf8 <_dtoa_r+0x960>
 8005cb6:	469b      	mov	fp, r3
 8005cb8:	9b07      	ldr	r3, [sp, #28]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	dd1e      	ble.n	8005cfc <_dtoa_r+0x964>
 8005cbe:	f1bb 0f00 	cmp.w	fp, #0
 8005cc2:	f47f adb1 	bne.w	8005828 <_dtoa_r+0x490>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	465b      	mov	r3, fp
 8005cca:	2205      	movs	r2, #5
 8005ccc:	4648      	mov	r0, r9
 8005cce:	f000 fa95 	bl	80061fc <__multadd>
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	9802      	ldr	r0, [sp, #8]
 8005cd8:	f000 fca0 	bl	800661c <__mcmp>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f77f ada3 	ble.w	8005828 <_dtoa_r+0x490>
 8005ce2:	4656      	mov	r6, sl
 8005ce4:	2331      	movs	r3, #49	@ 0x31
 8005ce6:	f806 3b01 	strb.w	r3, [r6], #1
 8005cea:	f108 0801 	add.w	r8, r8, #1
 8005cee:	e59f      	b.n	8005830 <_dtoa_r+0x498>
 8005cf0:	9c03      	ldr	r4, [sp, #12]
 8005cf2:	46b8      	mov	r8, r7
 8005cf4:	4625      	mov	r5, r4
 8005cf6:	e7f4      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005cf8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 8101 	beq.w	8005f06 <_dtoa_r+0xb6e>
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	dd05      	ble.n	8005d14 <_dtoa_r+0x97c>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	4648      	mov	r0, r9
 8005d0e:	f000 fc19 	bl	8006544 <__lshift>
 8005d12:	4605      	mov	r5, r0
 8005d14:	9b08      	ldr	r3, [sp, #32]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d05c      	beq.n	8005dd4 <_dtoa_r+0xa3c>
 8005d1a:	6869      	ldr	r1, [r5, #4]
 8005d1c:	4648      	mov	r0, r9
 8005d1e:	f000 fa0b 	bl	8006138 <_Balloc>
 8005d22:	4606      	mov	r6, r0
 8005d24:	b928      	cbnz	r0, 8005d32 <_dtoa_r+0x99a>
 8005d26:	4b82      	ldr	r3, [pc, #520]	@ (8005f30 <_dtoa_r+0xb98>)
 8005d28:	4602      	mov	r2, r0
 8005d2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d2e:	f7ff bb4a 	b.w	80053c6 <_dtoa_r+0x2e>
 8005d32:	692a      	ldr	r2, [r5, #16]
 8005d34:	3202      	adds	r2, #2
 8005d36:	0092      	lsls	r2, r2, #2
 8005d38:	f105 010c 	add.w	r1, r5, #12
 8005d3c:	300c      	adds	r0, #12
 8005d3e:	f7ff fa74 	bl	800522a <memcpy>
 8005d42:	2201      	movs	r2, #1
 8005d44:	4631      	mov	r1, r6
 8005d46:	4648      	mov	r0, r9
 8005d48:	f000 fbfc 	bl	8006544 <__lshift>
 8005d4c:	f10a 0301 	add.w	r3, sl, #1
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	eb0a 030b 	add.w	r3, sl, fp
 8005d56:	9308      	str	r3, [sp, #32]
 8005d58:	9b04      	ldr	r3, [sp, #16]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	462f      	mov	r7, r5
 8005d60:	9306      	str	r3, [sp, #24]
 8005d62:	4605      	mov	r5, r0
 8005d64:	9b00      	ldr	r3, [sp, #0]
 8005d66:	9802      	ldr	r0, [sp, #8]
 8005d68:	4621      	mov	r1, r4
 8005d6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d6e:	f7ff fa89 	bl	8005284 <quorem>
 8005d72:	4603      	mov	r3, r0
 8005d74:	3330      	adds	r3, #48	@ 0x30
 8005d76:	9003      	str	r0, [sp, #12]
 8005d78:	4639      	mov	r1, r7
 8005d7a:	9802      	ldr	r0, [sp, #8]
 8005d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d7e:	f000 fc4d 	bl	800661c <__mcmp>
 8005d82:	462a      	mov	r2, r5
 8005d84:	9004      	str	r0, [sp, #16]
 8005d86:	4621      	mov	r1, r4
 8005d88:	4648      	mov	r0, r9
 8005d8a:	f000 fc63 	bl	8006654 <__mdiff>
 8005d8e:	68c2      	ldr	r2, [r0, #12]
 8005d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d92:	4606      	mov	r6, r0
 8005d94:	bb02      	cbnz	r2, 8005dd8 <_dtoa_r+0xa40>
 8005d96:	4601      	mov	r1, r0
 8005d98:	9802      	ldr	r0, [sp, #8]
 8005d9a:	f000 fc3f 	bl	800661c <__mcmp>
 8005d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da0:	4602      	mov	r2, r0
 8005da2:	4631      	mov	r1, r6
 8005da4:	4648      	mov	r0, r9
 8005da6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005daa:	f000 fa05 	bl	80061b8 <_Bfree>
 8005dae:	9b07      	ldr	r3, [sp, #28]
 8005db0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005db2:	9e00      	ldr	r6, [sp, #0]
 8005db4:	ea42 0103 	orr.w	r1, r2, r3
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	4319      	orrs	r1, r3
 8005dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbe:	d10d      	bne.n	8005ddc <_dtoa_r+0xa44>
 8005dc0:	2b39      	cmp	r3, #57	@ 0x39
 8005dc2:	d027      	beq.n	8005e14 <_dtoa_r+0xa7c>
 8005dc4:	9a04      	ldr	r2, [sp, #16]
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	dd01      	ble.n	8005dce <_dtoa_r+0xa36>
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	3331      	adds	r3, #49	@ 0x31
 8005dce:	f88b 3000 	strb.w	r3, [fp]
 8005dd2:	e52e      	b.n	8005832 <_dtoa_r+0x49a>
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e7b9      	b.n	8005d4c <_dtoa_r+0x9b4>
 8005dd8:	2201      	movs	r2, #1
 8005dda:	e7e2      	b.n	8005da2 <_dtoa_r+0xa0a>
 8005ddc:	9904      	ldr	r1, [sp, #16]
 8005dde:	2900      	cmp	r1, #0
 8005de0:	db04      	blt.n	8005dec <_dtoa_r+0xa54>
 8005de2:	9807      	ldr	r0, [sp, #28]
 8005de4:	4301      	orrs	r1, r0
 8005de6:	9806      	ldr	r0, [sp, #24]
 8005de8:	4301      	orrs	r1, r0
 8005dea:	d120      	bne.n	8005e2e <_dtoa_r+0xa96>
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	ddee      	ble.n	8005dce <_dtoa_r+0xa36>
 8005df0:	9902      	ldr	r1, [sp, #8]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	4648      	mov	r0, r9
 8005df8:	f000 fba4 	bl	8006544 <__lshift>
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	9002      	str	r0, [sp, #8]
 8005e00:	f000 fc0c 	bl	800661c <__mcmp>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	9b00      	ldr	r3, [sp, #0]
 8005e08:	dc02      	bgt.n	8005e10 <_dtoa_r+0xa78>
 8005e0a:	d1e0      	bne.n	8005dce <_dtoa_r+0xa36>
 8005e0c:	07da      	lsls	r2, r3, #31
 8005e0e:	d5de      	bpl.n	8005dce <_dtoa_r+0xa36>
 8005e10:	2b39      	cmp	r3, #57	@ 0x39
 8005e12:	d1da      	bne.n	8005dca <_dtoa_r+0xa32>
 8005e14:	2339      	movs	r3, #57	@ 0x39
 8005e16:	f88b 3000 	strb.w	r3, [fp]
 8005e1a:	4633      	mov	r3, r6
 8005e1c:	461e      	mov	r6, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e24:	2a39      	cmp	r2, #57	@ 0x39
 8005e26:	d04e      	beq.n	8005ec6 <_dtoa_r+0xb2e>
 8005e28:	3201      	adds	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e501      	b.n	8005832 <_dtoa_r+0x49a>
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	dd03      	ble.n	8005e3a <_dtoa_r+0xaa2>
 8005e32:	2b39      	cmp	r3, #57	@ 0x39
 8005e34:	d0ee      	beq.n	8005e14 <_dtoa_r+0xa7c>
 8005e36:	3301      	adds	r3, #1
 8005e38:	e7c9      	b.n	8005dce <_dtoa_r+0xa36>
 8005e3a:	9a00      	ldr	r2, [sp, #0]
 8005e3c:	9908      	ldr	r1, [sp, #32]
 8005e3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e42:	428a      	cmp	r2, r1
 8005e44:	d028      	beq.n	8005e98 <_dtoa_r+0xb00>
 8005e46:	9902      	ldr	r1, [sp, #8]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	220a      	movs	r2, #10
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	f000 f9d5 	bl	80061fc <__multadd>
 8005e52:	42af      	cmp	r7, r5
 8005e54:	9002      	str	r0, [sp, #8]
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	f04f 020a 	mov.w	r2, #10
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4648      	mov	r0, r9
 8005e62:	d107      	bne.n	8005e74 <_dtoa_r+0xadc>
 8005e64:	f000 f9ca 	bl	80061fc <__multadd>
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	9b00      	ldr	r3, [sp, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	e777      	b.n	8005d64 <_dtoa_r+0x9cc>
 8005e74:	f000 f9c2 	bl	80061fc <__multadd>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	220a      	movs	r2, #10
 8005e80:	4648      	mov	r0, r9
 8005e82:	f000 f9bb 	bl	80061fc <__multadd>
 8005e86:	4605      	mov	r5, r0
 8005e88:	e7f0      	b.n	8005e6c <_dtoa_r+0xad4>
 8005e8a:	f1bb 0f00 	cmp.w	fp, #0
 8005e8e:	bfcc      	ite	gt
 8005e90:	465e      	movgt	r6, fp
 8005e92:	2601      	movle	r6, #1
 8005e94:	4456      	add	r6, sl
 8005e96:	2700      	movs	r7, #0
 8005e98:	9902      	ldr	r1, [sp, #8]
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4648      	mov	r0, r9
 8005ea0:	f000 fb50 	bl	8006544 <__lshift>
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	9002      	str	r0, [sp, #8]
 8005ea8:	f000 fbb8 	bl	800661c <__mcmp>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dcb4      	bgt.n	8005e1a <_dtoa_r+0xa82>
 8005eb0:	d102      	bne.n	8005eb8 <_dtoa_r+0xb20>
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	07db      	lsls	r3, r3, #31
 8005eb6:	d4b0      	bmi.n	8005e1a <_dtoa_r+0xa82>
 8005eb8:	4633      	mov	r3, r6
 8005eba:	461e      	mov	r6, r3
 8005ebc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ec0:	2a30      	cmp	r2, #48	@ 0x30
 8005ec2:	d0fa      	beq.n	8005eba <_dtoa_r+0xb22>
 8005ec4:	e4b5      	b.n	8005832 <_dtoa_r+0x49a>
 8005ec6:	459a      	cmp	sl, r3
 8005ec8:	d1a8      	bne.n	8005e1c <_dtoa_r+0xa84>
 8005eca:	2331      	movs	r3, #49	@ 0x31
 8005ecc:	f108 0801 	add.w	r8, r8, #1
 8005ed0:	f88a 3000 	strb.w	r3, [sl]
 8005ed4:	e4ad      	b.n	8005832 <_dtoa_r+0x49a>
 8005ed6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ed8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f34 <_dtoa_r+0xb9c>
 8005edc:	b11b      	cbz	r3, 8005ee6 <_dtoa_r+0xb4e>
 8005ede:	f10a 0308 	add.w	r3, sl, #8
 8005ee2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4650      	mov	r0, sl
 8005ee8:	b017      	add	sp, #92	@ 0x5c
 8005eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	f77f ae2e 	ble.w	8005b52 <_dtoa_r+0x7ba>
 8005ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef8:	9308      	str	r3, [sp, #32]
 8005efa:	2001      	movs	r0, #1
 8005efc:	e64d      	b.n	8005b9a <_dtoa_r+0x802>
 8005efe:	f1bb 0f00 	cmp.w	fp, #0
 8005f02:	f77f aed9 	ble.w	8005cb8 <_dtoa_r+0x920>
 8005f06:	4656      	mov	r6, sl
 8005f08:	9802      	ldr	r0, [sp, #8]
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	f7ff f9ba 	bl	8005284 <quorem>
 8005f10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f14:	f806 3b01 	strb.w	r3, [r6], #1
 8005f18:	eba6 020a 	sub.w	r2, r6, sl
 8005f1c:	4593      	cmp	fp, r2
 8005f1e:	ddb4      	ble.n	8005e8a <_dtoa_r+0xaf2>
 8005f20:	9902      	ldr	r1, [sp, #8]
 8005f22:	2300      	movs	r3, #0
 8005f24:	220a      	movs	r2, #10
 8005f26:	4648      	mov	r0, r9
 8005f28:	f000 f968 	bl	80061fc <__multadd>
 8005f2c:	9002      	str	r0, [sp, #8]
 8005f2e:	e7eb      	b.n	8005f08 <_dtoa_r+0xb70>
 8005f30:	08008344 	.word	0x08008344
 8005f34:	080082df 	.word	0x080082df

08005f38 <_free_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d041      	beq.n	8005fc4 <_free_r+0x8c>
 8005f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f44:	1f0c      	subs	r4, r1, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfb8      	it	lt
 8005f4a:	18e4      	addlt	r4, r4, r3
 8005f4c:	f000 f8e8 	bl	8006120 <__malloc_lock>
 8005f50:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc8 <_free_r+0x90>)
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	b933      	cbnz	r3, 8005f64 <_free_r+0x2c>
 8005f56:	6063      	str	r3, [r4, #4]
 8005f58:	6014      	str	r4, [r2, #0]
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f60:	f000 b8e4 	b.w	800612c <__malloc_unlock>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d908      	bls.n	8005f7a <_free_r+0x42>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	1821      	adds	r1, r4, r0
 8005f6c:	428b      	cmp	r3, r1
 8005f6e:	bf01      	itttt	eq
 8005f70:	6819      	ldreq	r1, [r3, #0]
 8005f72:	685b      	ldreq	r3, [r3, #4]
 8005f74:	1809      	addeq	r1, r1, r0
 8005f76:	6021      	streq	r1, [r4, #0]
 8005f78:	e7ed      	b.n	8005f56 <_free_r+0x1e>
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	b10b      	cbz	r3, 8005f84 <_free_r+0x4c>
 8005f80:	42a3      	cmp	r3, r4
 8005f82:	d9fa      	bls.n	8005f7a <_free_r+0x42>
 8005f84:	6811      	ldr	r1, [r2, #0]
 8005f86:	1850      	adds	r0, r2, r1
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	d10b      	bne.n	8005fa4 <_free_r+0x6c>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	4401      	add	r1, r0
 8005f90:	1850      	adds	r0, r2, r1
 8005f92:	4283      	cmp	r3, r0
 8005f94:	6011      	str	r1, [r2, #0]
 8005f96:	d1e0      	bne.n	8005f5a <_free_r+0x22>
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	6053      	str	r3, [r2, #4]
 8005f9e:	4408      	add	r0, r1
 8005fa0:	6010      	str	r0, [r2, #0]
 8005fa2:	e7da      	b.n	8005f5a <_free_r+0x22>
 8005fa4:	d902      	bls.n	8005fac <_free_r+0x74>
 8005fa6:	230c      	movs	r3, #12
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	e7d6      	b.n	8005f5a <_free_r+0x22>
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	1821      	adds	r1, r4, r0
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	bf04      	itt	eq
 8005fb4:	6819      	ldreq	r1, [r3, #0]
 8005fb6:	685b      	ldreq	r3, [r3, #4]
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	bf04      	itt	eq
 8005fbc:	1809      	addeq	r1, r1, r0
 8005fbe:	6021      	streq	r1, [r4, #0]
 8005fc0:	6054      	str	r4, [r2, #4]
 8005fc2:	e7ca      	b.n	8005f5a <_free_r+0x22>
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200003a0 	.word	0x200003a0

08005fcc <malloc>:
 8005fcc:	4b02      	ldr	r3, [pc, #8]	@ (8005fd8 <malloc+0xc>)
 8005fce:	4601      	mov	r1, r0
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	f000 b825 	b.w	8006020 <_malloc_r>
 8005fd6:	bf00      	nop
 8005fd8:	20000030 	.word	0x20000030

08005fdc <sbrk_aligned>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4e0f      	ldr	r6, [pc, #60]	@ (800601c <sbrk_aligned+0x40>)
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	6831      	ldr	r1, [r6, #0]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	b911      	cbnz	r1, 8005fee <sbrk_aligned+0x12>
 8005fe8:	f000 fe50 	bl	8006c8c <_sbrk_r>
 8005fec:	6030      	str	r0, [r6, #0]
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 fe4b 	bl	8006c8c <_sbrk_r>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	d103      	bne.n	8006002 <sbrk_aligned+0x26>
 8005ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8005ffe:	4620      	mov	r0, r4
 8006000:	bd70      	pop	{r4, r5, r6, pc}
 8006002:	1cc4      	adds	r4, r0, #3
 8006004:	f024 0403 	bic.w	r4, r4, #3
 8006008:	42a0      	cmp	r0, r4
 800600a:	d0f8      	beq.n	8005ffe <sbrk_aligned+0x22>
 800600c:	1a21      	subs	r1, r4, r0
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fe3c 	bl	8006c8c <_sbrk_r>
 8006014:	3001      	adds	r0, #1
 8006016:	d1f2      	bne.n	8005ffe <sbrk_aligned+0x22>
 8006018:	e7ef      	b.n	8005ffa <sbrk_aligned+0x1e>
 800601a:	bf00      	nop
 800601c:	2000039c 	.word	0x2000039c

08006020 <_malloc_r>:
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006024:	1ccd      	adds	r5, r1, #3
 8006026:	f025 0503 	bic.w	r5, r5, #3
 800602a:	3508      	adds	r5, #8
 800602c:	2d0c      	cmp	r5, #12
 800602e:	bf38      	it	cc
 8006030:	250c      	movcc	r5, #12
 8006032:	2d00      	cmp	r5, #0
 8006034:	4606      	mov	r6, r0
 8006036:	db01      	blt.n	800603c <_malloc_r+0x1c>
 8006038:	42a9      	cmp	r1, r5
 800603a:	d904      	bls.n	8006046 <_malloc_r+0x26>
 800603c:	230c      	movs	r3, #12
 800603e:	6033      	str	r3, [r6, #0]
 8006040:	2000      	movs	r0, #0
 8006042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800611c <_malloc_r+0xfc>
 800604a:	f000 f869 	bl	8006120 <__malloc_lock>
 800604e:	f8d8 3000 	ldr.w	r3, [r8]
 8006052:	461c      	mov	r4, r3
 8006054:	bb44      	cbnz	r4, 80060a8 <_malloc_r+0x88>
 8006056:	4629      	mov	r1, r5
 8006058:	4630      	mov	r0, r6
 800605a:	f7ff ffbf 	bl	8005fdc <sbrk_aligned>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	4604      	mov	r4, r0
 8006062:	d158      	bne.n	8006116 <_malloc_r+0xf6>
 8006064:	f8d8 4000 	ldr.w	r4, [r8]
 8006068:	4627      	mov	r7, r4
 800606a:	2f00      	cmp	r7, #0
 800606c:	d143      	bne.n	80060f6 <_malloc_r+0xd6>
 800606e:	2c00      	cmp	r4, #0
 8006070:	d04b      	beq.n	800610a <_malloc_r+0xea>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	4639      	mov	r1, r7
 8006076:	4630      	mov	r0, r6
 8006078:	eb04 0903 	add.w	r9, r4, r3
 800607c:	f000 fe06 	bl	8006c8c <_sbrk_r>
 8006080:	4581      	cmp	r9, r0
 8006082:	d142      	bne.n	800610a <_malloc_r+0xea>
 8006084:	6821      	ldr	r1, [r4, #0]
 8006086:	1a6d      	subs	r5, r5, r1
 8006088:	4629      	mov	r1, r5
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff ffa6 	bl	8005fdc <sbrk_aligned>
 8006090:	3001      	adds	r0, #1
 8006092:	d03a      	beq.n	800610a <_malloc_r+0xea>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	442b      	add	r3, r5
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	f8d8 3000 	ldr.w	r3, [r8]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	bb62      	cbnz	r2, 80060fc <_malloc_r+0xdc>
 80060a2:	f8c8 7000 	str.w	r7, [r8]
 80060a6:	e00f      	b.n	80060c8 <_malloc_r+0xa8>
 80060a8:	6822      	ldr	r2, [r4, #0]
 80060aa:	1b52      	subs	r2, r2, r5
 80060ac:	d420      	bmi.n	80060f0 <_malloc_r+0xd0>
 80060ae:	2a0b      	cmp	r2, #11
 80060b0:	d917      	bls.n	80060e2 <_malloc_r+0xc2>
 80060b2:	1961      	adds	r1, r4, r5
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	6025      	str	r5, [r4, #0]
 80060b8:	bf18      	it	ne
 80060ba:	6059      	strne	r1, [r3, #4]
 80060bc:	6863      	ldr	r3, [r4, #4]
 80060be:	bf08      	it	eq
 80060c0:	f8c8 1000 	streq.w	r1, [r8]
 80060c4:	5162      	str	r2, [r4, r5]
 80060c6:	604b      	str	r3, [r1, #4]
 80060c8:	4630      	mov	r0, r6
 80060ca:	f000 f82f 	bl	800612c <__malloc_unlock>
 80060ce:	f104 000b 	add.w	r0, r4, #11
 80060d2:	1d23      	adds	r3, r4, #4
 80060d4:	f020 0007 	bic.w	r0, r0, #7
 80060d8:	1ac2      	subs	r2, r0, r3
 80060da:	bf1c      	itt	ne
 80060dc:	1a1b      	subne	r3, r3, r0
 80060de:	50a3      	strne	r3, [r4, r2]
 80060e0:	e7af      	b.n	8006042 <_malloc_r+0x22>
 80060e2:	6862      	ldr	r2, [r4, #4]
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	bf0c      	ite	eq
 80060e8:	f8c8 2000 	streq.w	r2, [r8]
 80060ec:	605a      	strne	r2, [r3, #4]
 80060ee:	e7eb      	b.n	80060c8 <_malloc_r+0xa8>
 80060f0:	4623      	mov	r3, r4
 80060f2:	6864      	ldr	r4, [r4, #4]
 80060f4:	e7ae      	b.n	8006054 <_malloc_r+0x34>
 80060f6:	463c      	mov	r4, r7
 80060f8:	687f      	ldr	r7, [r7, #4]
 80060fa:	e7b6      	b.n	800606a <_malloc_r+0x4a>
 80060fc:	461a      	mov	r2, r3
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	42a3      	cmp	r3, r4
 8006102:	d1fb      	bne.n	80060fc <_malloc_r+0xdc>
 8006104:	2300      	movs	r3, #0
 8006106:	6053      	str	r3, [r2, #4]
 8006108:	e7de      	b.n	80060c8 <_malloc_r+0xa8>
 800610a:	230c      	movs	r3, #12
 800610c:	6033      	str	r3, [r6, #0]
 800610e:	4630      	mov	r0, r6
 8006110:	f000 f80c 	bl	800612c <__malloc_unlock>
 8006114:	e794      	b.n	8006040 <_malloc_r+0x20>
 8006116:	6005      	str	r5, [r0, #0]
 8006118:	e7d6      	b.n	80060c8 <_malloc_r+0xa8>
 800611a:	bf00      	nop
 800611c:	200003a0 	.word	0x200003a0

08006120 <__malloc_lock>:
 8006120:	4801      	ldr	r0, [pc, #4]	@ (8006128 <__malloc_lock+0x8>)
 8006122:	f7ff b880 	b.w	8005226 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	20000398 	.word	0x20000398

0800612c <__malloc_unlock>:
 800612c:	4801      	ldr	r0, [pc, #4]	@ (8006134 <__malloc_unlock+0x8>)
 800612e:	f7ff b87b 	b.w	8005228 <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	20000398 	.word	0x20000398

08006138 <_Balloc>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	69c6      	ldr	r6, [r0, #28]
 800613c:	4604      	mov	r4, r0
 800613e:	460d      	mov	r5, r1
 8006140:	b976      	cbnz	r6, 8006160 <_Balloc+0x28>
 8006142:	2010      	movs	r0, #16
 8006144:	f7ff ff42 	bl	8005fcc <malloc>
 8006148:	4602      	mov	r2, r0
 800614a:	61e0      	str	r0, [r4, #28]
 800614c:	b920      	cbnz	r0, 8006158 <_Balloc+0x20>
 800614e:	4b18      	ldr	r3, [pc, #96]	@ (80061b0 <_Balloc+0x78>)
 8006150:	4818      	ldr	r0, [pc, #96]	@ (80061b4 <_Balloc+0x7c>)
 8006152:	216b      	movs	r1, #107	@ 0x6b
 8006154:	f7ff f878 	bl	8005248 <__assert_func>
 8006158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800615c:	6006      	str	r6, [r0, #0]
 800615e:	60c6      	str	r6, [r0, #12]
 8006160:	69e6      	ldr	r6, [r4, #28]
 8006162:	68f3      	ldr	r3, [r6, #12]
 8006164:	b183      	cbz	r3, 8006188 <_Balloc+0x50>
 8006166:	69e3      	ldr	r3, [r4, #28]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800616e:	b9b8      	cbnz	r0, 80061a0 <_Balloc+0x68>
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f605 	lsl.w	r6, r1, r5
 8006176:	1d72      	adds	r2, r6, #5
 8006178:	0092      	lsls	r2, r2, #2
 800617a:	4620      	mov	r0, r4
 800617c:	f000 fd9d 	bl	8006cba <_calloc_r>
 8006180:	b160      	cbz	r0, 800619c <_Balloc+0x64>
 8006182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006186:	e00e      	b.n	80061a6 <_Balloc+0x6e>
 8006188:	2221      	movs	r2, #33	@ 0x21
 800618a:	2104      	movs	r1, #4
 800618c:	4620      	mov	r0, r4
 800618e:	f000 fd94 	bl	8006cba <_calloc_r>
 8006192:	69e3      	ldr	r3, [r4, #28]
 8006194:	60f0      	str	r0, [r6, #12]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e4      	bne.n	8006166 <_Balloc+0x2e>
 800619c:	2000      	movs	r0, #0
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	6802      	ldr	r2, [r0, #0]
 80061a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061a6:	2300      	movs	r3, #0
 80061a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061ac:	e7f7      	b.n	800619e <_Balloc+0x66>
 80061ae:	bf00      	nop
 80061b0:	08008200 	.word	0x08008200
 80061b4:	08008355 	.word	0x08008355

080061b8 <_Bfree>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	69c6      	ldr	r6, [r0, #28]
 80061bc:	4605      	mov	r5, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	b976      	cbnz	r6, 80061e0 <_Bfree+0x28>
 80061c2:	2010      	movs	r0, #16
 80061c4:	f7ff ff02 	bl	8005fcc <malloc>
 80061c8:	4602      	mov	r2, r0
 80061ca:	61e8      	str	r0, [r5, #28]
 80061cc:	b920      	cbnz	r0, 80061d8 <_Bfree+0x20>
 80061ce:	4b09      	ldr	r3, [pc, #36]	@ (80061f4 <_Bfree+0x3c>)
 80061d0:	4809      	ldr	r0, [pc, #36]	@ (80061f8 <_Bfree+0x40>)
 80061d2:	218f      	movs	r1, #143	@ 0x8f
 80061d4:	f7ff f838 	bl	8005248 <__assert_func>
 80061d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061dc:	6006      	str	r6, [r0, #0]
 80061de:	60c6      	str	r6, [r0, #12]
 80061e0:	b13c      	cbz	r4, 80061f2 <_Bfree+0x3a>
 80061e2:	69eb      	ldr	r3, [r5, #28]
 80061e4:	6862      	ldr	r2, [r4, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061ec:	6021      	str	r1, [r4, #0]
 80061ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	08008200 	.word	0x08008200
 80061f8:	08008355 	.word	0x08008355

080061fc <__multadd>:
 80061fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006200:	690d      	ldr	r5, [r1, #16]
 8006202:	4607      	mov	r7, r0
 8006204:	460c      	mov	r4, r1
 8006206:	461e      	mov	r6, r3
 8006208:	f101 0c14 	add.w	ip, r1, #20
 800620c:	2000      	movs	r0, #0
 800620e:	f8dc 3000 	ldr.w	r3, [ip]
 8006212:	b299      	uxth	r1, r3
 8006214:	fb02 6101 	mla	r1, r2, r1, r6
 8006218:	0c1e      	lsrs	r6, r3, #16
 800621a:	0c0b      	lsrs	r3, r1, #16
 800621c:	fb02 3306 	mla	r3, r2, r6, r3
 8006220:	b289      	uxth	r1, r1
 8006222:	3001      	adds	r0, #1
 8006224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006228:	4285      	cmp	r5, r0
 800622a:	f84c 1b04 	str.w	r1, [ip], #4
 800622e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006232:	dcec      	bgt.n	800620e <__multadd+0x12>
 8006234:	b30e      	cbz	r6, 800627a <__multadd+0x7e>
 8006236:	68a3      	ldr	r3, [r4, #8]
 8006238:	42ab      	cmp	r3, r5
 800623a:	dc19      	bgt.n	8006270 <__multadd+0x74>
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	4638      	mov	r0, r7
 8006240:	3101      	adds	r1, #1
 8006242:	f7ff ff79 	bl	8006138 <_Balloc>
 8006246:	4680      	mov	r8, r0
 8006248:	b928      	cbnz	r0, 8006256 <__multadd+0x5a>
 800624a:	4602      	mov	r2, r0
 800624c:	4b0c      	ldr	r3, [pc, #48]	@ (8006280 <__multadd+0x84>)
 800624e:	480d      	ldr	r0, [pc, #52]	@ (8006284 <__multadd+0x88>)
 8006250:	21ba      	movs	r1, #186	@ 0xba
 8006252:	f7fe fff9 	bl	8005248 <__assert_func>
 8006256:	6922      	ldr	r2, [r4, #16]
 8006258:	3202      	adds	r2, #2
 800625a:	f104 010c 	add.w	r1, r4, #12
 800625e:	0092      	lsls	r2, r2, #2
 8006260:	300c      	adds	r0, #12
 8006262:	f7fe ffe2 	bl	800522a <memcpy>
 8006266:	4621      	mov	r1, r4
 8006268:	4638      	mov	r0, r7
 800626a:	f7ff ffa5 	bl	80061b8 <_Bfree>
 800626e:	4644      	mov	r4, r8
 8006270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006274:	3501      	adds	r5, #1
 8006276:	615e      	str	r6, [r3, #20]
 8006278:	6125      	str	r5, [r4, #16]
 800627a:	4620      	mov	r0, r4
 800627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006280:	08008344 	.word	0x08008344
 8006284:	08008355 	.word	0x08008355

08006288 <__hi0bits>:
 8006288:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800628c:	4603      	mov	r3, r0
 800628e:	bf36      	itet	cc
 8006290:	0403      	lslcc	r3, r0, #16
 8006292:	2000      	movcs	r0, #0
 8006294:	2010      	movcc	r0, #16
 8006296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800629a:	bf3c      	itt	cc
 800629c:	021b      	lslcc	r3, r3, #8
 800629e:	3008      	addcc	r0, #8
 80062a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062a4:	bf3c      	itt	cc
 80062a6:	011b      	lslcc	r3, r3, #4
 80062a8:	3004      	addcc	r0, #4
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ae:	bf3c      	itt	cc
 80062b0:	009b      	lslcc	r3, r3, #2
 80062b2:	3002      	addcc	r0, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	db05      	blt.n	80062c4 <__hi0bits+0x3c>
 80062b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062bc:	f100 0001 	add.w	r0, r0, #1
 80062c0:	bf08      	it	eq
 80062c2:	2020      	moveq	r0, #32
 80062c4:	4770      	bx	lr

080062c6 <__lo0bits>:
 80062c6:	6803      	ldr	r3, [r0, #0]
 80062c8:	4602      	mov	r2, r0
 80062ca:	f013 0007 	ands.w	r0, r3, #7
 80062ce:	d00b      	beq.n	80062e8 <__lo0bits+0x22>
 80062d0:	07d9      	lsls	r1, r3, #31
 80062d2:	d421      	bmi.n	8006318 <__lo0bits+0x52>
 80062d4:	0798      	lsls	r0, r3, #30
 80062d6:	bf49      	itett	mi
 80062d8:	085b      	lsrmi	r3, r3, #1
 80062da:	089b      	lsrpl	r3, r3, #2
 80062dc:	2001      	movmi	r0, #1
 80062de:	6013      	strmi	r3, [r2, #0]
 80062e0:	bf5c      	itt	pl
 80062e2:	6013      	strpl	r3, [r2, #0]
 80062e4:	2002      	movpl	r0, #2
 80062e6:	4770      	bx	lr
 80062e8:	b299      	uxth	r1, r3
 80062ea:	b909      	cbnz	r1, 80062f0 <__lo0bits+0x2a>
 80062ec:	0c1b      	lsrs	r3, r3, #16
 80062ee:	2010      	movs	r0, #16
 80062f0:	b2d9      	uxtb	r1, r3
 80062f2:	b909      	cbnz	r1, 80062f8 <__lo0bits+0x32>
 80062f4:	3008      	adds	r0, #8
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	0719      	lsls	r1, r3, #28
 80062fa:	bf04      	itt	eq
 80062fc:	091b      	lsreq	r3, r3, #4
 80062fe:	3004      	addeq	r0, #4
 8006300:	0799      	lsls	r1, r3, #30
 8006302:	bf04      	itt	eq
 8006304:	089b      	lsreq	r3, r3, #2
 8006306:	3002      	addeq	r0, #2
 8006308:	07d9      	lsls	r1, r3, #31
 800630a:	d403      	bmi.n	8006314 <__lo0bits+0x4e>
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	f100 0001 	add.w	r0, r0, #1
 8006312:	d003      	beq.n	800631c <__lo0bits+0x56>
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4770      	bx	lr
 8006318:	2000      	movs	r0, #0
 800631a:	4770      	bx	lr
 800631c:	2020      	movs	r0, #32
 800631e:	4770      	bx	lr

08006320 <__i2b>:
 8006320:	b510      	push	{r4, lr}
 8006322:	460c      	mov	r4, r1
 8006324:	2101      	movs	r1, #1
 8006326:	f7ff ff07 	bl	8006138 <_Balloc>
 800632a:	4602      	mov	r2, r0
 800632c:	b928      	cbnz	r0, 800633a <__i2b+0x1a>
 800632e:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <__i2b+0x24>)
 8006330:	4805      	ldr	r0, [pc, #20]	@ (8006348 <__i2b+0x28>)
 8006332:	f240 1145 	movw	r1, #325	@ 0x145
 8006336:	f7fe ff87 	bl	8005248 <__assert_func>
 800633a:	2301      	movs	r3, #1
 800633c:	6144      	str	r4, [r0, #20]
 800633e:	6103      	str	r3, [r0, #16]
 8006340:	bd10      	pop	{r4, pc}
 8006342:	bf00      	nop
 8006344:	08008344 	.word	0x08008344
 8006348:	08008355 	.word	0x08008355

0800634c <__multiply>:
 800634c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	4617      	mov	r7, r2
 8006352:	690a      	ldr	r2, [r1, #16]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	429a      	cmp	r2, r3
 8006358:	bfa8      	it	ge
 800635a:	463b      	movge	r3, r7
 800635c:	4689      	mov	r9, r1
 800635e:	bfa4      	itt	ge
 8006360:	460f      	movge	r7, r1
 8006362:	4699      	movge	r9, r3
 8006364:	693d      	ldr	r5, [r7, #16]
 8006366:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	eb05 060a 	add.w	r6, r5, sl
 8006372:	42b3      	cmp	r3, r6
 8006374:	b085      	sub	sp, #20
 8006376:	bfb8      	it	lt
 8006378:	3101      	addlt	r1, #1
 800637a:	f7ff fedd 	bl	8006138 <_Balloc>
 800637e:	b930      	cbnz	r0, 800638e <__multiply+0x42>
 8006380:	4602      	mov	r2, r0
 8006382:	4b41      	ldr	r3, [pc, #260]	@ (8006488 <__multiply+0x13c>)
 8006384:	4841      	ldr	r0, [pc, #260]	@ (800648c <__multiply+0x140>)
 8006386:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800638a:	f7fe ff5d 	bl	8005248 <__assert_func>
 800638e:	f100 0414 	add.w	r4, r0, #20
 8006392:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006396:	4623      	mov	r3, r4
 8006398:	2200      	movs	r2, #0
 800639a:	4573      	cmp	r3, lr
 800639c:	d320      	bcc.n	80063e0 <__multiply+0x94>
 800639e:	f107 0814 	add.w	r8, r7, #20
 80063a2:	f109 0114 	add.w	r1, r9, #20
 80063a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80063aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80063ae:	9302      	str	r3, [sp, #8]
 80063b0:	1beb      	subs	r3, r5, r7
 80063b2:	3b15      	subs	r3, #21
 80063b4:	f023 0303 	bic.w	r3, r3, #3
 80063b8:	3304      	adds	r3, #4
 80063ba:	3715      	adds	r7, #21
 80063bc:	42bd      	cmp	r5, r7
 80063be:	bf38      	it	cc
 80063c0:	2304      	movcc	r3, #4
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	428b      	cmp	r3, r1
 80063ca:	d80c      	bhi.n	80063e6 <__multiply+0x9a>
 80063cc:	2e00      	cmp	r6, #0
 80063ce:	dd03      	ble.n	80063d8 <__multiply+0x8c>
 80063d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d055      	beq.n	8006484 <__multiply+0x138>
 80063d8:	6106      	str	r6, [r0, #16]
 80063da:	b005      	add	sp, #20
 80063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	f843 2b04 	str.w	r2, [r3], #4
 80063e4:	e7d9      	b.n	800639a <__multiply+0x4e>
 80063e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80063ea:	f1ba 0f00 	cmp.w	sl, #0
 80063ee:	d01f      	beq.n	8006430 <__multiply+0xe4>
 80063f0:	46c4      	mov	ip, r8
 80063f2:	46a1      	mov	r9, r4
 80063f4:	2700      	movs	r7, #0
 80063f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063fa:	f8d9 3000 	ldr.w	r3, [r9]
 80063fe:	fa1f fb82 	uxth.w	fp, r2
 8006402:	b29b      	uxth	r3, r3
 8006404:	fb0a 330b 	mla	r3, sl, fp, r3
 8006408:	443b      	add	r3, r7
 800640a:	f8d9 7000 	ldr.w	r7, [r9]
 800640e:	0c12      	lsrs	r2, r2, #16
 8006410:	0c3f      	lsrs	r7, r7, #16
 8006412:	fb0a 7202 	mla	r2, sl, r2, r7
 8006416:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006420:	4565      	cmp	r5, ip
 8006422:	f849 3b04 	str.w	r3, [r9], #4
 8006426:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800642a:	d8e4      	bhi.n	80063f6 <__multiply+0xaa>
 800642c:	9b01      	ldr	r3, [sp, #4]
 800642e:	50e7      	str	r7, [r4, r3]
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006436:	3104      	adds	r1, #4
 8006438:	f1b9 0f00 	cmp.w	r9, #0
 800643c:	d020      	beq.n	8006480 <__multiply+0x134>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	4647      	mov	r7, r8
 8006442:	46a4      	mov	ip, r4
 8006444:	f04f 0a00 	mov.w	sl, #0
 8006448:	f8b7 b000 	ldrh.w	fp, [r7]
 800644c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006450:	fb09 220b 	mla	r2, r9, fp, r2
 8006454:	4452      	add	r2, sl
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800645c:	f84c 3b04 	str.w	r3, [ip], #4
 8006460:	f857 3b04 	ldr.w	r3, [r7], #4
 8006464:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006468:	f8bc 3000 	ldrh.w	r3, [ip]
 800646c:	fb09 330a 	mla	r3, r9, sl, r3
 8006470:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006474:	42bd      	cmp	r5, r7
 8006476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800647a:	d8e5      	bhi.n	8006448 <__multiply+0xfc>
 800647c:	9a01      	ldr	r2, [sp, #4]
 800647e:	50a3      	str	r3, [r4, r2]
 8006480:	3404      	adds	r4, #4
 8006482:	e79f      	b.n	80063c4 <__multiply+0x78>
 8006484:	3e01      	subs	r6, #1
 8006486:	e7a1      	b.n	80063cc <__multiply+0x80>
 8006488:	08008344 	.word	0x08008344
 800648c:	08008355 	.word	0x08008355

08006490 <__pow5mult>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4615      	mov	r5, r2
 8006496:	f012 0203 	ands.w	r2, r2, #3
 800649a:	4607      	mov	r7, r0
 800649c:	460e      	mov	r6, r1
 800649e:	d007      	beq.n	80064b0 <__pow5mult+0x20>
 80064a0:	4c25      	ldr	r4, [pc, #148]	@ (8006538 <__pow5mult+0xa8>)
 80064a2:	3a01      	subs	r2, #1
 80064a4:	2300      	movs	r3, #0
 80064a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064aa:	f7ff fea7 	bl	80061fc <__multadd>
 80064ae:	4606      	mov	r6, r0
 80064b0:	10ad      	asrs	r5, r5, #2
 80064b2:	d03d      	beq.n	8006530 <__pow5mult+0xa0>
 80064b4:	69fc      	ldr	r4, [r7, #28]
 80064b6:	b97c      	cbnz	r4, 80064d8 <__pow5mult+0x48>
 80064b8:	2010      	movs	r0, #16
 80064ba:	f7ff fd87 	bl	8005fcc <malloc>
 80064be:	4602      	mov	r2, r0
 80064c0:	61f8      	str	r0, [r7, #28]
 80064c2:	b928      	cbnz	r0, 80064d0 <__pow5mult+0x40>
 80064c4:	4b1d      	ldr	r3, [pc, #116]	@ (800653c <__pow5mult+0xac>)
 80064c6:	481e      	ldr	r0, [pc, #120]	@ (8006540 <__pow5mult+0xb0>)
 80064c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80064cc:	f7fe febc 	bl	8005248 <__assert_func>
 80064d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064d4:	6004      	str	r4, [r0, #0]
 80064d6:	60c4      	str	r4, [r0, #12]
 80064d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064e0:	b94c      	cbnz	r4, 80064f6 <__pow5mult+0x66>
 80064e2:	f240 2171 	movw	r1, #625	@ 0x271
 80064e6:	4638      	mov	r0, r7
 80064e8:	f7ff ff1a 	bl	8006320 <__i2b>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80064f2:	4604      	mov	r4, r0
 80064f4:	6003      	str	r3, [r0, #0]
 80064f6:	f04f 0900 	mov.w	r9, #0
 80064fa:	07eb      	lsls	r3, r5, #31
 80064fc:	d50a      	bpl.n	8006514 <__pow5mult+0x84>
 80064fe:	4631      	mov	r1, r6
 8006500:	4622      	mov	r2, r4
 8006502:	4638      	mov	r0, r7
 8006504:	f7ff ff22 	bl	800634c <__multiply>
 8006508:	4631      	mov	r1, r6
 800650a:	4680      	mov	r8, r0
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff fe53 	bl	80061b8 <_Bfree>
 8006512:	4646      	mov	r6, r8
 8006514:	106d      	asrs	r5, r5, #1
 8006516:	d00b      	beq.n	8006530 <__pow5mult+0xa0>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	b938      	cbnz	r0, 800652c <__pow5mult+0x9c>
 800651c:	4622      	mov	r2, r4
 800651e:	4621      	mov	r1, r4
 8006520:	4638      	mov	r0, r7
 8006522:	f7ff ff13 	bl	800634c <__multiply>
 8006526:	6020      	str	r0, [r4, #0]
 8006528:	f8c0 9000 	str.w	r9, [r0]
 800652c:	4604      	mov	r4, r0
 800652e:	e7e4      	b.n	80064fa <__pow5mult+0x6a>
 8006530:	4630      	mov	r0, r6
 8006532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006536:	bf00      	nop
 8006538:	080083cc 	.word	0x080083cc
 800653c:	08008200 	.word	0x08008200
 8006540:	08008355 	.word	0x08008355

08006544 <__lshift>:
 8006544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	460c      	mov	r4, r1
 800654a:	6849      	ldr	r1, [r1, #4]
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	4607      	mov	r7, r0
 8006556:	4691      	mov	r9, r2
 8006558:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800655c:	f108 0601 	add.w	r6, r8, #1
 8006560:	42b3      	cmp	r3, r6
 8006562:	db0b      	blt.n	800657c <__lshift+0x38>
 8006564:	4638      	mov	r0, r7
 8006566:	f7ff fde7 	bl	8006138 <_Balloc>
 800656a:	4605      	mov	r5, r0
 800656c:	b948      	cbnz	r0, 8006582 <__lshift+0x3e>
 800656e:	4602      	mov	r2, r0
 8006570:	4b28      	ldr	r3, [pc, #160]	@ (8006614 <__lshift+0xd0>)
 8006572:	4829      	ldr	r0, [pc, #164]	@ (8006618 <__lshift+0xd4>)
 8006574:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006578:	f7fe fe66 	bl	8005248 <__assert_func>
 800657c:	3101      	adds	r1, #1
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	e7ee      	b.n	8006560 <__lshift+0x1c>
 8006582:	2300      	movs	r3, #0
 8006584:	f100 0114 	add.w	r1, r0, #20
 8006588:	f100 0210 	add.w	r2, r0, #16
 800658c:	4618      	mov	r0, r3
 800658e:	4553      	cmp	r3, sl
 8006590:	db33      	blt.n	80065fa <__lshift+0xb6>
 8006592:	6920      	ldr	r0, [r4, #16]
 8006594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006598:	f104 0314 	add.w	r3, r4, #20
 800659c:	f019 091f 	ands.w	r9, r9, #31
 80065a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065a8:	d02b      	beq.n	8006602 <__lshift+0xbe>
 80065aa:	f1c9 0e20 	rsb	lr, r9, #32
 80065ae:	468a      	mov	sl, r1
 80065b0:	2200      	movs	r2, #0
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	fa00 f009 	lsl.w	r0, r0, r9
 80065b8:	4310      	orrs	r0, r2
 80065ba:	f84a 0b04 	str.w	r0, [sl], #4
 80065be:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c2:	459c      	cmp	ip, r3
 80065c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80065c8:	d8f3      	bhi.n	80065b2 <__lshift+0x6e>
 80065ca:	ebac 0304 	sub.w	r3, ip, r4
 80065ce:	3b15      	subs	r3, #21
 80065d0:	f023 0303 	bic.w	r3, r3, #3
 80065d4:	3304      	adds	r3, #4
 80065d6:	f104 0015 	add.w	r0, r4, #21
 80065da:	4560      	cmp	r0, ip
 80065dc:	bf88      	it	hi
 80065de:	2304      	movhi	r3, #4
 80065e0:	50ca      	str	r2, [r1, r3]
 80065e2:	b10a      	cbz	r2, 80065e8 <__lshift+0xa4>
 80065e4:	f108 0602 	add.w	r6, r8, #2
 80065e8:	3e01      	subs	r6, #1
 80065ea:	4638      	mov	r0, r7
 80065ec:	612e      	str	r6, [r5, #16]
 80065ee:	4621      	mov	r1, r4
 80065f0:	f7ff fde2 	bl	80061b8 <_Bfree>
 80065f4:	4628      	mov	r0, r5
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80065fe:	3301      	adds	r3, #1
 8006600:	e7c5      	b.n	800658e <__lshift+0x4a>
 8006602:	3904      	subs	r1, #4
 8006604:	f853 2b04 	ldr.w	r2, [r3], #4
 8006608:	f841 2f04 	str.w	r2, [r1, #4]!
 800660c:	459c      	cmp	ip, r3
 800660e:	d8f9      	bhi.n	8006604 <__lshift+0xc0>
 8006610:	e7ea      	b.n	80065e8 <__lshift+0xa4>
 8006612:	bf00      	nop
 8006614:	08008344 	.word	0x08008344
 8006618:	08008355 	.word	0x08008355

0800661c <__mcmp>:
 800661c:	690a      	ldr	r2, [r1, #16]
 800661e:	4603      	mov	r3, r0
 8006620:	6900      	ldr	r0, [r0, #16]
 8006622:	1a80      	subs	r0, r0, r2
 8006624:	b530      	push	{r4, r5, lr}
 8006626:	d10e      	bne.n	8006646 <__mcmp+0x2a>
 8006628:	3314      	adds	r3, #20
 800662a:	3114      	adds	r1, #20
 800662c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006630:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800663c:	4295      	cmp	r5, r2
 800663e:	d003      	beq.n	8006648 <__mcmp+0x2c>
 8006640:	d205      	bcs.n	800664e <__mcmp+0x32>
 8006642:	f04f 30ff 	mov.w	r0, #4294967295
 8006646:	bd30      	pop	{r4, r5, pc}
 8006648:	42a3      	cmp	r3, r4
 800664a:	d3f3      	bcc.n	8006634 <__mcmp+0x18>
 800664c:	e7fb      	b.n	8006646 <__mcmp+0x2a>
 800664e:	2001      	movs	r0, #1
 8006650:	e7f9      	b.n	8006646 <__mcmp+0x2a>
	...

08006654 <__mdiff>:
 8006654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	4689      	mov	r9, r1
 800665a:	4606      	mov	r6, r0
 800665c:	4611      	mov	r1, r2
 800665e:	4648      	mov	r0, r9
 8006660:	4614      	mov	r4, r2
 8006662:	f7ff ffdb 	bl	800661c <__mcmp>
 8006666:	1e05      	subs	r5, r0, #0
 8006668:	d112      	bne.n	8006690 <__mdiff+0x3c>
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff fd63 	bl	8006138 <_Balloc>
 8006672:	4602      	mov	r2, r0
 8006674:	b928      	cbnz	r0, 8006682 <__mdiff+0x2e>
 8006676:	4b3f      	ldr	r3, [pc, #252]	@ (8006774 <__mdiff+0x120>)
 8006678:	f240 2137 	movw	r1, #567	@ 0x237
 800667c:	483e      	ldr	r0, [pc, #248]	@ (8006778 <__mdiff+0x124>)
 800667e:	f7fe fde3 	bl	8005248 <__assert_func>
 8006682:	2301      	movs	r3, #1
 8006684:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006688:	4610      	mov	r0, r2
 800668a:	b003      	add	sp, #12
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	bfbc      	itt	lt
 8006692:	464b      	movlt	r3, r9
 8006694:	46a1      	movlt	r9, r4
 8006696:	4630      	mov	r0, r6
 8006698:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800669c:	bfba      	itte	lt
 800669e:	461c      	movlt	r4, r3
 80066a0:	2501      	movlt	r5, #1
 80066a2:	2500      	movge	r5, #0
 80066a4:	f7ff fd48 	bl	8006138 <_Balloc>
 80066a8:	4602      	mov	r2, r0
 80066aa:	b918      	cbnz	r0, 80066b4 <__mdiff+0x60>
 80066ac:	4b31      	ldr	r3, [pc, #196]	@ (8006774 <__mdiff+0x120>)
 80066ae:	f240 2145 	movw	r1, #581	@ 0x245
 80066b2:	e7e3      	b.n	800667c <__mdiff+0x28>
 80066b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066b8:	6926      	ldr	r6, [r4, #16]
 80066ba:	60c5      	str	r5, [r0, #12]
 80066bc:	f109 0310 	add.w	r3, r9, #16
 80066c0:	f109 0514 	add.w	r5, r9, #20
 80066c4:	f104 0e14 	add.w	lr, r4, #20
 80066c8:	f100 0b14 	add.w	fp, r0, #20
 80066cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80066d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	46d9      	mov	r9, fp
 80066d8:	f04f 0c00 	mov.w	ip, #0
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	fa1f f38a 	uxth.w	r3, sl
 80066ec:	4619      	mov	r1, r3
 80066ee:	b283      	uxth	r3, r0
 80066f0:	1acb      	subs	r3, r1, r3
 80066f2:	0c00      	lsrs	r0, r0, #16
 80066f4:	4463      	add	r3, ip
 80066f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80066fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066fe:	b29b      	uxth	r3, r3
 8006700:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006704:	4576      	cmp	r6, lr
 8006706:	f849 3b04 	str.w	r3, [r9], #4
 800670a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800670e:	d8e5      	bhi.n	80066dc <__mdiff+0x88>
 8006710:	1b33      	subs	r3, r6, r4
 8006712:	3b15      	subs	r3, #21
 8006714:	f023 0303 	bic.w	r3, r3, #3
 8006718:	3415      	adds	r4, #21
 800671a:	3304      	adds	r3, #4
 800671c:	42a6      	cmp	r6, r4
 800671e:	bf38      	it	cc
 8006720:	2304      	movcc	r3, #4
 8006722:	441d      	add	r5, r3
 8006724:	445b      	add	r3, fp
 8006726:	461e      	mov	r6, r3
 8006728:	462c      	mov	r4, r5
 800672a:	4544      	cmp	r4, r8
 800672c:	d30e      	bcc.n	800674c <__mdiff+0xf8>
 800672e:	f108 0103 	add.w	r1, r8, #3
 8006732:	1b49      	subs	r1, r1, r5
 8006734:	f021 0103 	bic.w	r1, r1, #3
 8006738:	3d03      	subs	r5, #3
 800673a:	45a8      	cmp	r8, r5
 800673c:	bf38      	it	cc
 800673e:	2100      	movcc	r1, #0
 8006740:	440b      	add	r3, r1
 8006742:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006746:	b191      	cbz	r1, 800676e <__mdiff+0x11a>
 8006748:	6117      	str	r7, [r2, #16]
 800674a:	e79d      	b.n	8006688 <__mdiff+0x34>
 800674c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006750:	46e6      	mov	lr, ip
 8006752:	0c08      	lsrs	r0, r1, #16
 8006754:	fa1c fc81 	uxtah	ip, ip, r1
 8006758:	4471      	add	r1, lr
 800675a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800675e:	b289      	uxth	r1, r1
 8006760:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006764:	f846 1b04 	str.w	r1, [r6], #4
 8006768:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800676c:	e7dd      	b.n	800672a <__mdiff+0xd6>
 800676e:	3f01      	subs	r7, #1
 8006770:	e7e7      	b.n	8006742 <__mdiff+0xee>
 8006772:	bf00      	nop
 8006774:	08008344 	.word	0x08008344
 8006778:	08008355 	.word	0x08008355

0800677c <__d2b>:
 800677c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006780:	460f      	mov	r7, r1
 8006782:	2101      	movs	r1, #1
 8006784:	ec59 8b10 	vmov	r8, r9, d0
 8006788:	4616      	mov	r6, r2
 800678a:	f7ff fcd5 	bl	8006138 <_Balloc>
 800678e:	4604      	mov	r4, r0
 8006790:	b930      	cbnz	r0, 80067a0 <__d2b+0x24>
 8006792:	4602      	mov	r2, r0
 8006794:	4b23      	ldr	r3, [pc, #140]	@ (8006824 <__d2b+0xa8>)
 8006796:	4824      	ldr	r0, [pc, #144]	@ (8006828 <__d2b+0xac>)
 8006798:	f240 310f 	movw	r1, #783	@ 0x30f
 800679c:	f7fe fd54 	bl	8005248 <__assert_func>
 80067a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067a8:	b10d      	cbz	r5, 80067ae <__d2b+0x32>
 80067aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	f1b8 0300 	subs.w	r3, r8, #0
 80067b4:	d023      	beq.n	80067fe <__d2b+0x82>
 80067b6:	4668      	mov	r0, sp
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	f7ff fd84 	bl	80062c6 <__lo0bits>
 80067be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067c2:	b1d0      	cbz	r0, 80067fa <__d2b+0x7e>
 80067c4:	f1c0 0320 	rsb	r3, r0, #32
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	430b      	orrs	r3, r1
 80067ce:	40c2      	lsrs	r2, r0
 80067d0:	6163      	str	r3, [r4, #20]
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	61a3      	str	r3, [r4, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bf0c      	ite	eq
 80067dc:	2201      	moveq	r2, #1
 80067de:	2202      	movne	r2, #2
 80067e0:	6122      	str	r2, [r4, #16]
 80067e2:	b1a5      	cbz	r5, 800680e <__d2b+0x92>
 80067e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067e8:	4405      	add	r5, r0
 80067ea:	603d      	str	r5, [r7, #0]
 80067ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067f0:	6030      	str	r0, [r6, #0]
 80067f2:	4620      	mov	r0, r4
 80067f4:	b003      	add	sp, #12
 80067f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067fa:	6161      	str	r1, [r4, #20]
 80067fc:	e7ea      	b.n	80067d4 <__d2b+0x58>
 80067fe:	a801      	add	r0, sp, #4
 8006800:	f7ff fd61 	bl	80062c6 <__lo0bits>
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	6163      	str	r3, [r4, #20]
 8006808:	3020      	adds	r0, #32
 800680a:	2201      	movs	r2, #1
 800680c:	e7e8      	b.n	80067e0 <__d2b+0x64>
 800680e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006812:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006816:	6038      	str	r0, [r7, #0]
 8006818:	6918      	ldr	r0, [r3, #16]
 800681a:	f7ff fd35 	bl	8006288 <__hi0bits>
 800681e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006822:	e7e5      	b.n	80067f0 <__d2b+0x74>
 8006824:	08008344 	.word	0x08008344
 8006828:	08008355 	.word	0x08008355

0800682c <__ssputs_r>:
 800682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	688e      	ldr	r6, [r1, #8]
 8006832:	461f      	mov	r7, r3
 8006834:	42be      	cmp	r6, r7
 8006836:	680b      	ldr	r3, [r1, #0]
 8006838:	4682      	mov	sl, r0
 800683a:	460c      	mov	r4, r1
 800683c:	4690      	mov	r8, r2
 800683e:	d82d      	bhi.n	800689c <__ssputs_r+0x70>
 8006840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006848:	d026      	beq.n	8006898 <__ssputs_r+0x6c>
 800684a:	6965      	ldr	r5, [r4, #20]
 800684c:	6909      	ldr	r1, [r1, #16]
 800684e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006852:	eba3 0901 	sub.w	r9, r3, r1
 8006856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800685a:	1c7b      	adds	r3, r7, #1
 800685c:	444b      	add	r3, r9
 800685e:	106d      	asrs	r5, r5, #1
 8006860:	429d      	cmp	r5, r3
 8006862:	bf38      	it	cc
 8006864:	461d      	movcc	r5, r3
 8006866:	0553      	lsls	r3, r2, #21
 8006868:	d527      	bpl.n	80068ba <__ssputs_r+0x8e>
 800686a:	4629      	mov	r1, r5
 800686c:	f7ff fbd8 	bl	8006020 <_malloc_r>
 8006870:	4606      	mov	r6, r0
 8006872:	b360      	cbz	r0, 80068ce <__ssputs_r+0xa2>
 8006874:	6921      	ldr	r1, [r4, #16]
 8006876:	464a      	mov	r2, r9
 8006878:	f7fe fcd7 	bl	800522a <memcpy>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	6126      	str	r6, [r4, #16]
 800688a:	6165      	str	r5, [r4, #20]
 800688c:	444e      	add	r6, r9
 800688e:	eba5 0509 	sub.w	r5, r5, r9
 8006892:	6026      	str	r6, [r4, #0]
 8006894:	60a5      	str	r5, [r4, #8]
 8006896:	463e      	mov	r6, r7
 8006898:	42be      	cmp	r6, r7
 800689a:	d900      	bls.n	800689e <__ssputs_r+0x72>
 800689c:	463e      	mov	r6, r7
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	4632      	mov	r2, r6
 80068a2:	4641      	mov	r1, r8
 80068a4:	f000 f9d8 	bl	8006c58 <memmove>
 80068a8:	68a3      	ldr	r3, [r4, #8]
 80068aa:	1b9b      	subs	r3, r3, r6
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	4433      	add	r3, r6
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	2000      	movs	r0, #0
 80068b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ba:	462a      	mov	r2, r5
 80068bc:	f000 fa23 	bl	8006d06 <_realloc_r>
 80068c0:	4606      	mov	r6, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d1e0      	bne.n	8006888 <__ssputs_r+0x5c>
 80068c6:	6921      	ldr	r1, [r4, #16]
 80068c8:	4650      	mov	r0, sl
 80068ca:	f7ff fb35 	bl	8005f38 <_free_r>
 80068ce:	230c      	movs	r3, #12
 80068d0:	f8ca 3000 	str.w	r3, [sl]
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	e7e9      	b.n	80068b6 <__ssputs_r+0x8a>
	...

080068e4 <_svfiprintf_r>:
 80068e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	4698      	mov	r8, r3
 80068ea:	898b      	ldrh	r3, [r1, #12]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	b09d      	sub	sp, #116	@ 0x74
 80068f0:	4607      	mov	r7, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	4614      	mov	r4, r2
 80068f6:	d510      	bpl.n	800691a <_svfiprintf_r+0x36>
 80068f8:	690b      	ldr	r3, [r1, #16]
 80068fa:	b973      	cbnz	r3, 800691a <_svfiprintf_r+0x36>
 80068fc:	2140      	movs	r1, #64	@ 0x40
 80068fe:	f7ff fb8f 	bl	8006020 <_malloc_r>
 8006902:	6028      	str	r0, [r5, #0]
 8006904:	6128      	str	r0, [r5, #16]
 8006906:	b930      	cbnz	r0, 8006916 <_svfiprintf_r+0x32>
 8006908:	230c      	movs	r3, #12
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	b01d      	add	sp, #116	@ 0x74
 8006912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006916:	2340      	movs	r3, #64	@ 0x40
 8006918:	616b      	str	r3, [r5, #20]
 800691a:	2300      	movs	r3, #0
 800691c:	9309      	str	r3, [sp, #36]	@ 0x24
 800691e:	2320      	movs	r3, #32
 8006920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006924:	f8cd 800c 	str.w	r8, [sp, #12]
 8006928:	2330      	movs	r3, #48	@ 0x30
 800692a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ac8 <_svfiprintf_r+0x1e4>
 800692e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006932:	f04f 0901 	mov.w	r9, #1
 8006936:	4623      	mov	r3, r4
 8006938:	469a      	mov	sl, r3
 800693a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693e:	b10a      	cbz	r2, 8006944 <_svfiprintf_r+0x60>
 8006940:	2a25      	cmp	r2, #37	@ 0x25
 8006942:	d1f9      	bne.n	8006938 <_svfiprintf_r+0x54>
 8006944:	ebba 0b04 	subs.w	fp, sl, r4
 8006948:	d00b      	beq.n	8006962 <_svfiprintf_r+0x7e>
 800694a:	465b      	mov	r3, fp
 800694c:	4622      	mov	r2, r4
 800694e:	4629      	mov	r1, r5
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff ff6b 	bl	800682c <__ssputs_r>
 8006956:	3001      	adds	r0, #1
 8006958:	f000 80a7 	beq.w	8006aaa <_svfiprintf_r+0x1c6>
 800695c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800695e:	445a      	add	r2, fp
 8006960:	9209      	str	r2, [sp, #36]	@ 0x24
 8006962:	f89a 3000 	ldrb.w	r3, [sl]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 809f 	beq.w	8006aaa <_svfiprintf_r+0x1c6>
 800696c:	2300      	movs	r3, #0
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006976:	f10a 0a01 	add.w	sl, sl, #1
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	9307      	str	r3, [sp, #28]
 800697e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006982:	931a      	str	r3, [sp, #104]	@ 0x68
 8006984:	4654      	mov	r4, sl
 8006986:	2205      	movs	r2, #5
 8006988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698c:	484e      	ldr	r0, [pc, #312]	@ (8006ac8 <_svfiprintf_r+0x1e4>)
 800698e:	f7f9 fc2f 	bl	80001f0 <memchr>
 8006992:	9a04      	ldr	r2, [sp, #16]
 8006994:	b9d8      	cbnz	r0, 80069ce <_svfiprintf_r+0xea>
 8006996:	06d0      	lsls	r0, r2, #27
 8006998:	bf44      	itt	mi
 800699a:	2320      	movmi	r3, #32
 800699c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069a0:	0711      	lsls	r1, r2, #28
 80069a2:	bf44      	itt	mi
 80069a4:	232b      	movmi	r3, #43	@ 0x2b
 80069a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069aa:	f89a 3000 	ldrb.w	r3, [sl]
 80069ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80069b0:	d015      	beq.n	80069de <_svfiprintf_r+0xfa>
 80069b2:	9a07      	ldr	r2, [sp, #28]
 80069b4:	4654      	mov	r4, sl
 80069b6:	2000      	movs	r0, #0
 80069b8:	f04f 0c0a 	mov.w	ip, #10
 80069bc:	4621      	mov	r1, r4
 80069be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c2:	3b30      	subs	r3, #48	@ 0x30
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	d94b      	bls.n	8006a60 <_svfiprintf_r+0x17c>
 80069c8:	b1b0      	cbz	r0, 80069f8 <_svfiprintf_r+0x114>
 80069ca:	9207      	str	r2, [sp, #28]
 80069cc:	e014      	b.n	80069f8 <_svfiprintf_r+0x114>
 80069ce:	eba0 0308 	sub.w	r3, r0, r8
 80069d2:	fa09 f303 	lsl.w	r3, r9, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	46a2      	mov	sl, r4
 80069dc:	e7d2      	b.n	8006984 <_svfiprintf_r+0xa0>
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	9103      	str	r1, [sp, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfbb      	ittet	lt
 80069ea:	425b      	neglt	r3, r3
 80069ec:	f042 0202 	orrlt.w	r2, r2, #2
 80069f0:	9307      	strge	r3, [sp, #28]
 80069f2:	9307      	strlt	r3, [sp, #28]
 80069f4:	bfb8      	it	lt
 80069f6:	9204      	strlt	r2, [sp, #16]
 80069f8:	7823      	ldrb	r3, [r4, #0]
 80069fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80069fc:	d10a      	bne.n	8006a14 <_svfiprintf_r+0x130>
 80069fe:	7863      	ldrb	r3, [r4, #1]
 8006a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a02:	d132      	bne.n	8006a6a <_svfiprintf_r+0x186>
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	1d1a      	adds	r2, r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	9203      	str	r2, [sp, #12]
 8006a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a10:	3402      	adds	r4, #2
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ad8 <_svfiprintf_r+0x1f4>
 8006a18:	7821      	ldrb	r1, [r4, #0]
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	f7f9 fbe7 	bl	80001f0 <memchr>
 8006a22:	b138      	cbz	r0, 8006a34 <_svfiprintf_r+0x150>
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	eba0 000a 	sub.w	r0, r0, sl
 8006a2a:	2240      	movs	r2, #64	@ 0x40
 8006a2c:	4082      	lsls	r2, r0
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	3401      	adds	r4, #1
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a38:	4824      	ldr	r0, [pc, #144]	@ (8006acc <_svfiprintf_r+0x1e8>)
 8006a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a3e:	2206      	movs	r2, #6
 8006a40:	f7f9 fbd6 	bl	80001f0 <memchr>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d036      	beq.n	8006ab6 <_svfiprintf_r+0x1d2>
 8006a48:	4b21      	ldr	r3, [pc, #132]	@ (8006ad0 <_svfiprintf_r+0x1ec>)
 8006a4a:	bb1b      	cbnz	r3, 8006a94 <_svfiprintf_r+0x1b0>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	3307      	adds	r3, #7
 8006a50:	f023 0307 	bic.w	r3, r3, #7
 8006a54:	3308      	adds	r3, #8
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5a:	4433      	add	r3, r6
 8006a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5e:	e76a      	b.n	8006936 <_svfiprintf_r+0x52>
 8006a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a64:	460c      	mov	r4, r1
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7a8      	b.n	80069bc <_svfiprintf_r+0xd8>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	3401      	adds	r4, #1
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	4619      	mov	r1, r3
 8006a72:	f04f 0c0a 	mov.w	ip, #10
 8006a76:	4620      	mov	r0, r4
 8006a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7c:	3a30      	subs	r2, #48	@ 0x30
 8006a7e:	2a09      	cmp	r2, #9
 8006a80:	d903      	bls.n	8006a8a <_svfiprintf_r+0x1a6>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0c6      	beq.n	8006a14 <_svfiprintf_r+0x130>
 8006a86:	9105      	str	r1, [sp, #20]
 8006a88:	e7c4      	b.n	8006a14 <_svfiprintf_r+0x130>
 8006a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8e:	4604      	mov	r4, r0
 8006a90:	2301      	movs	r3, #1
 8006a92:	e7f0      	b.n	8006a76 <_svfiprintf_r+0x192>
 8006a94:	ab03      	add	r3, sp, #12
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	462a      	mov	r2, r5
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad4 <_svfiprintf_r+0x1f0>)
 8006a9c:	a904      	add	r1, sp, #16
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	f7fd fe52 	bl	8004748 <_printf_float>
 8006aa4:	1c42      	adds	r2, r0, #1
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	d1d6      	bne.n	8006a58 <_svfiprintf_r+0x174>
 8006aaa:	89ab      	ldrh	r3, [r5, #12]
 8006aac:	065b      	lsls	r3, r3, #25
 8006aae:	f53f af2d 	bmi.w	800690c <_svfiprintf_r+0x28>
 8006ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ab4:	e72c      	b.n	8006910 <_svfiprintf_r+0x2c>
 8006ab6:	ab03      	add	r3, sp, #12
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	462a      	mov	r2, r5
 8006abc:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <_svfiprintf_r+0x1f0>)
 8006abe:	a904      	add	r1, sp, #16
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f7fe f8d9 	bl	8004c78 <_printf_i>
 8006ac6:	e7ed      	b.n	8006aa4 <_svfiprintf_r+0x1c0>
 8006ac8:	080083ae 	.word	0x080083ae
 8006acc:	080083b8 	.word	0x080083b8
 8006ad0:	08004749 	.word	0x08004749
 8006ad4:	0800682d 	.word	0x0800682d
 8006ad8:	080083b4 	.word	0x080083b4

08006adc <__sflush_r>:
 8006adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	0716      	lsls	r6, r2, #28
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	460c      	mov	r4, r1
 8006aea:	d454      	bmi.n	8006b96 <__sflush_r+0xba>
 8006aec:	684b      	ldr	r3, [r1, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	dc02      	bgt.n	8006af8 <__sflush_r+0x1c>
 8006af2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dd48      	ble.n	8006b8a <__sflush_r+0xae>
 8006af8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d045      	beq.n	8006b8a <__sflush_r+0xae>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b04:	682f      	ldr	r7, [r5, #0]
 8006b06:	6a21      	ldr	r1, [r4, #32]
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	d030      	beq.n	8006b6e <__sflush_r+0x92>
 8006b0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	0759      	lsls	r1, r3, #29
 8006b12:	d505      	bpl.n	8006b20 <__sflush_r+0x44>
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b1a:	b10b      	cbz	r3, 8006b20 <__sflush_r+0x44>
 8006b1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	2300      	movs	r3, #0
 8006b22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b24:	6a21      	ldr	r1, [r4, #32]
 8006b26:	4628      	mov	r0, r5
 8006b28:	47b0      	blx	r6
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	d106      	bne.n	8006b3e <__sflush_r+0x62>
 8006b30:	6829      	ldr	r1, [r5, #0]
 8006b32:	291d      	cmp	r1, #29
 8006b34:	d82b      	bhi.n	8006b8e <__sflush_r+0xb2>
 8006b36:	4a2a      	ldr	r2, [pc, #168]	@ (8006be0 <__sflush_r+0x104>)
 8006b38:	40ca      	lsrs	r2, r1
 8006b3a:	07d6      	lsls	r6, r2, #31
 8006b3c:	d527      	bpl.n	8006b8e <__sflush_r+0xb2>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	6062      	str	r2, [r4, #4]
 8006b42:	04d9      	lsls	r1, r3, #19
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	d504      	bpl.n	8006b54 <__sflush_r+0x78>
 8006b4a:	1c42      	adds	r2, r0, #1
 8006b4c:	d101      	bne.n	8006b52 <__sflush_r+0x76>
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	b903      	cbnz	r3, 8006b54 <__sflush_r+0x78>
 8006b52:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b56:	602f      	str	r7, [r5, #0]
 8006b58:	b1b9      	cbz	r1, 8006b8a <__sflush_r+0xae>
 8006b5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	d002      	beq.n	8006b68 <__sflush_r+0x8c>
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7ff f9e8 	bl	8005f38 <_free_r>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b6c:	e00d      	b.n	8006b8a <__sflush_r+0xae>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b0      	blx	r6
 8006b74:	4602      	mov	r2, r0
 8006b76:	1c50      	adds	r0, r2, #1
 8006b78:	d1c9      	bne.n	8006b0e <__sflush_r+0x32>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0c6      	beq.n	8006b0e <__sflush_r+0x32>
 8006b80:	2b1d      	cmp	r3, #29
 8006b82:	d001      	beq.n	8006b88 <__sflush_r+0xac>
 8006b84:	2b16      	cmp	r3, #22
 8006b86:	d11e      	bne.n	8006bc6 <__sflush_r+0xea>
 8006b88:	602f      	str	r7, [r5, #0]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e022      	b.n	8006bd4 <__sflush_r+0xf8>
 8006b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b92:	b21b      	sxth	r3, r3
 8006b94:	e01b      	b.n	8006bce <__sflush_r+0xf2>
 8006b96:	690f      	ldr	r7, [r1, #16]
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	d0f6      	beq.n	8006b8a <__sflush_r+0xae>
 8006b9c:	0793      	lsls	r3, r2, #30
 8006b9e:	680e      	ldr	r6, [r1, #0]
 8006ba0:	bf08      	it	eq
 8006ba2:	694b      	ldreq	r3, [r1, #20]
 8006ba4:	600f      	str	r7, [r1, #0]
 8006ba6:	bf18      	it	ne
 8006ba8:	2300      	movne	r3, #0
 8006baa:	eba6 0807 	sub.w	r8, r6, r7
 8006bae:	608b      	str	r3, [r1, #8]
 8006bb0:	f1b8 0f00 	cmp.w	r8, #0
 8006bb4:	dde9      	ble.n	8006b8a <__sflush_r+0xae>
 8006bb6:	6a21      	ldr	r1, [r4, #32]
 8006bb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bba:	4643      	mov	r3, r8
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b0      	blx	r6
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	dc08      	bgt.n	8006bd8 <__sflush_r+0xfc>
 8006bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	4407      	add	r7, r0
 8006bda:	eba8 0800 	sub.w	r8, r8, r0
 8006bde:	e7e7      	b.n	8006bb0 <__sflush_r+0xd4>
 8006be0:	20400001 	.word	0x20400001

08006be4 <_fflush_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	4605      	mov	r5, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	b913      	cbnz	r3, 8006bf4 <_fflush_r+0x10>
 8006bee:	2500      	movs	r5, #0
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	b118      	cbz	r0, 8006bfe <_fflush_r+0x1a>
 8006bf6:	6a03      	ldr	r3, [r0, #32]
 8006bf8:	b90b      	cbnz	r3, 8006bfe <_fflush_r+0x1a>
 8006bfa:	f7fe f9e7 	bl	8004fcc <__sinit>
 8006bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f3      	beq.n	8006bee <_fflush_r+0xa>
 8006c06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c08:	07d0      	lsls	r0, r2, #31
 8006c0a:	d404      	bmi.n	8006c16 <_fflush_r+0x32>
 8006c0c:	0599      	lsls	r1, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_fflush_r+0x32>
 8006c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c12:	f7fe fb08 	bl	8005226 <__retarget_lock_acquire_recursive>
 8006c16:	4628      	mov	r0, r5
 8006c18:	4621      	mov	r1, r4
 8006c1a:	f7ff ff5f 	bl	8006adc <__sflush_r>
 8006c1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c20:	07da      	lsls	r2, r3, #31
 8006c22:	4605      	mov	r5, r0
 8006c24:	d4e4      	bmi.n	8006bf0 <_fflush_r+0xc>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	059b      	lsls	r3, r3, #22
 8006c2a:	d4e1      	bmi.n	8006bf0 <_fflush_r+0xc>
 8006c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2e:	f7fe fafb 	bl	8005228 <__retarget_lock_release_recursive>
 8006c32:	e7dd      	b.n	8006bf0 <_fflush_r+0xc>

08006c34 <fiprintf>:
 8006c34:	b40e      	push	{r1, r2, r3}
 8006c36:	b503      	push	{r0, r1, lr}
 8006c38:	4601      	mov	r1, r0
 8006c3a:	ab03      	add	r3, sp, #12
 8006c3c:	4805      	ldr	r0, [pc, #20]	@ (8006c54 <fiprintf+0x20>)
 8006c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	f000 f8c3 	bl	8006dd0 <_vfiprintf_r>
 8006c4a:	b002      	add	sp, #8
 8006c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c50:	b003      	add	sp, #12
 8006c52:	4770      	bx	lr
 8006c54:	20000030 	.word	0x20000030

08006c58 <memmove>:
 8006c58:	4288      	cmp	r0, r1
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	eb01 0402 	add.w	r4, r1, r2
 8006c60:	d902      	bls.n	8006c68 <memmove+0x10>
 8006c62:	4284      	cmp	r4, r0
 8006c64:	4623      	mov	r3, r4
 8006c66:	d807      	bhi.n	8006c78 <memmove+0x20>
 8006c68:	1e43      	subs	r3, r0, #1
 8006c6a:	42a1      	cmp	r1, r4
 8006c6c:	d008      	beq.n	8006c80 <memmove+0x28>
 8006c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c76:	e7f8      	b.n	8006c6a <memmove+0x12>
 8006c78:	4402      	add	r2, r0
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	428a      	cmp	r2, r1
 8006c7e:	d100      	bne.n	8006c82 <memmove+0x2a>
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c8a:	e7f7      	b.n	8006c7c <memmove+0x24>

08006c8c <_sbrk_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d06      	ldr	r5, [pc, #24]	@ (8006ca8 <_sbrk_r+0x1c>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f7fb ff88 	bl	8002bac <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_sbrk_r+0x1a>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_sbrk_r+0x1a>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20000394 	.word	0x20000394

08006cac <abort>:
 8006cac:	b508      	push	{r3, lr}
 8006cae:	2006      	movs	r0, #6
 8006cb0:	f000 fa62 	bl	8007178 <raise>
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	f7fb ff00 	bl	8002aba <_exit>

08006cba <_calloc_r>:
 8006cba:	b570      	push	{r4, r5, r6, lr}
 8006cbc:	fba1 5402 	umull	r5, r4, r1, r2
 8006cc0:	b934      	cbnz	r4, 8006cd0 <_calloc_r+0x16>
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	f7ff f9ac 	bl	8006020 <_malloc_r>
 8006cc8:	4606      	mov	r6, r0
 8006cca:	b928      	cbnz	r0, 8006cd8 <_calloc_r+0x1e>
 8006ccc:	4630      	mov	r0, r6
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	220c      	movs	r2, #12
 8006cd2:	6002      	str	r2, [r0, #0]
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	e7f9      	b.n	8006ccc <_calloc_r+0x12>
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4621      	mov	r1, r4
 8006cdc:	f7fe fa25 	bl	800512a <memset>
 8006ce0:	e7f4      	b.n	8006ccc <_calloc_r+0x12>

08006ce2 <__ascii_mbtowc>:
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	b901      	cbnz	r1, 8006ce8 <__ascii_mbtowc+0x6>
 8006ce6:	a901      	add	r1, sp, #4
 8006ce8:	b142      	cbz	r2, 8006cfc <__ascii_mbtowc+0x1a>
 8006cea:	b14b      	cbz	r3, 8006d00 <__ascii_mbtowc+0x1e>
 8006cec:	7813      	ldrb	r3, [r2, #0]
 8006cee:	600b      	str	r3, [r1, #0]
 8006cf0:	7812      	ldrb	r2, [r2, #0]
 8006cf2:	1e10      	subs	r0, r2, #0
 8006cf4:	bf18      	it	ne
 8006cf6:	2001      	movne	r0, #1
 8006cf8:	b002      	add	sp, #8
 8006cfa:	4770      	bx	lr
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	e7fb      	b.n	8006cf8 <__ascii_mbtowc+0x16>
 8006d00:	f06f 0001 	mvn.w	r0, #1
 8006d04:	e7f8      	b.n	8006cf8 <__ascii_mbtowc+0x16>

08006d06 <_realloc_r>:
 8006d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	460d      	mov	r5, r1
 8006d10:	b921      	cbnz	r1, 8006d1c <_realloc_r+0x16>
 8006d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	4611      	mov	r1, r2
 8006d18:	f7ff b982 	b.w	8006020 <_malloc_r>
 8006d1c:	b92a      	cbnz	r2, 8006d2a <_realloc_r+0x24>
 8006d1e:	f7ff f90b 	bl	8005f38 <_free_r>
 8006d22:	4625      	mov	r5, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2a:	f000 fa41 	bl	80071b0 <_malloc_usable_size_r>
 8006d2e:	4284      	cmp	r4, r0
 8006d30:	4606      	mov	r6, r0
 8006d32:	d802      	bhi.n	8006d3a <_realloc_r+0x34>
 8006d34:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d38:	d8f4      	bhi.n	8006d24 <_realloc_r+0x1e>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff f96f 	bl	8006020 <_malloc_r>
 8006d42:	4680      	mov	r8, r0
 8006d44:	b908      	cbnz	r0, 8006d4a <_realloc_r+0x44>
 8006d46:	4645      	mov	r5, r8
 8006d48:	e7ec      	b.n	8006d24 <_realloc_r+0x1e>
 8006d4a:	42b4      	cmp	r4, r6
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	bf28      	it	cs
 8006d52:	4632      	movcs	r2, r6
 8006d54:	f7fe fa69 	bl	800522a <memcpy>
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f7ff f8ec 	bl	8005f38 <_free_r>
 8006d60:	e7f1      	b.n	8006d46 <_realloc_r+0x40>

08006d62 <__ascii_wctomb>:
 8006d62:	4603      	mov	r3, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	b141      	cbz	r1, 8006d7a <__ascii_wctomb+0x18>
 8006d68:	2aff      	cmp	r2, #255	@ 0xff
 8006d6a:	d904      	bls.n	8006d76 <__ascii_wctomb+0x14>
 8006d6c:	228a      	movs	r2, #138	@ 0x8a
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	4770      	bx	lr
 8006d76:	700a      	strb	r2, [r1, #0]
 8006d78:	2001      	movs	r0, #1
 8006d7a:	4770      	bx	lr

08006d7c <__sfputc_r>:
 8006d7c:	6893      	ldr	r3, [r2, #8]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	b410      	push	{r4}
 8006d84:	6093      	str	r3, [r2, #8]
 8006d86:	da08      	bge.n	8006d9a <__sfputc_r+0x1e>
 8006d88:	6994      	ldr	r4, [r2, #24]
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	db01      	blt.n	8006d92 <__sfputc_r+0x16>
 8006d8e:	290a      	cmp	r1, #10
 8006d90:	d103      	bne.n	8006d9a <__sfputc_r+0x1e>
 8006d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d96:	f000 b933 	b.w	8007000 <__swbuf_r>
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	1c58      	adds	r0, r3, #1
 8006d9e:	6010      	str	r0, [r2, #0]
 8006da0:	7019      	strb	r1, [r3, #0]
 8006da2:	4608      	mov	r0, r1
 8006da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <__sfputs_r>:
 8006daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dac:	4606      	mov	r6, r0
 8006dae:	460f      	mov	r7, r1
 8006db0:	4614      	mov	r4, r2
 8006db2:	18d5      	adds	r5, r2, r3
 8006db4:	42ac      	cmp	r4, r5
 8006db6:	d101      	bne.n	8006dbc <__sfputs_r+0x12>
 8006db8:	2000      	movs	r0, #0
 8006dba:	e007      	b.n	8006dcc <__sfputs_r+0x22>
 8006dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7ff ffda 	bl	8006d7c <__sfputc_r>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d1f3      	bne.n	8006db4 <__sfputs_r+0xa>
 8006dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dd0 <_vfiprintf_r>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	b09d      	sub	sp, #116	@ 0x74
 8006dd8:	4614      	mov	r4, r2
 8006dda:	4698      	mov	r8, r3
 8006ddc:	4606      	mov	r6, r0
 8006dde:	b118      	cbz	r0, 8006de8 <_vfiprintf_r+0x18>
 8006de0:	6a03      	ldr	r3, [r0, #32]
 8006de2:	b90b      	cbnz	r3, 8006de8 <_vfiprintf_r+0x18>
 8006de4:	f7fe f8f2 	bl	8004fcc <__sinit>
 8006de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dea:	07d9      	lsls	r1, r3, #31
 8006dec:	d405      	bmi.n	8006dfa <_vfiprintf_r+0x2a>
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	059a      	lsls	r2, r3, #22
 8006df2:	d402      	bmi.n	8006dfa <_vfiprintf_r+0x2a>
 8006df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006df6:	f7fe fa16 	bl	8005226 <__retarget_lock_acquire_recursive>
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	071b      	lsls	r3, r3, #28
 8006dfe:	d501      	bpl.n	8006e04 <_vfiprintf_r+0x34>
 8006e00:	692b      	ldr	r3, [r5, #16]
 8006e02:	b99b      	cbnz	r3, 8006e2c <_vfiprintf_r+0x5c>
 8006e04:	4629      	mov	r1, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	f000 f938 	bl	800707c <__swsetup_r>
 8006e0c:	b170      	cbz	r0, 8006e2c <_vfiprintf_r+0x5c>
 8006e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e10:	07dc      	lsls	r4, r3, #31
 8006e12:	d504      	bpl.n	8006e1e <_vfiprintf_r+0x4e>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	b01d      	add	sp, #116	@ 0x74
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	0598      	lsls	r0, r3, #22
 8006e22:	d4f7      	bmi.n	8006e14 <_vfiprintf_r+0x44>
 8006e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e26:	f7fe f9ff 	bl	8005228 <__retarget_lock_release_recursive>
 8006e2a:	e7f3      	b.n	8006e14 <_vfiprintf_r+0x44>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e30:	2320      	movs	r3, #32
 8006e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e3a:	2330      	movs	r3, #48	@ 0x30
 8006e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fec <_vfiprintf_r+0x21c>
 8006e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e44:	f04f 0901 	mov.w	r9, #1
 8006e48:	4623      	mov	r3, r4
 8006e4a:	469a      	mov	sl, r3
 8006e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e50:	b10a      	cbz	r2, 8006e56 <_vfiprintf_r+0x86>
 8006e52:	2a25      	cmp	r2, #37	@ 0x25
 8006e54:	d1f9      	bne.n	8006e4a <_vfiprintf_r+0x7a>
 8006e56:	ebba 0b04 	subs.w	fp, sl, r4
 8006e5a:	d00b      	beq.n	8006e74 <_vfiprintf_r+0xa4>
 8006e5c:	465b      	mov	r3, fp
 8006e5e:	4622      	mov	r2, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7ff ffa1 	bl	8006daa <__sfputs_r>
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f000 80a7 	beq.w	8006fbc <_vfiprintf_r+0x1ec>
 8006e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e70:	445a      	add	r2, fp
 8006e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e74:	f89a 3000 	ldrb.w	r3, [sl]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 809f 	beq.w	8006fbc <_vfiprintf_r+0x1ec>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e88:	f10a 0a01 	add.w	sl, sl, #1
 8006e8c:	9304      	str	r3, [sp, #16]
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e96:	4654      	mov	r4, sl
 8006e98:	2205      	movs	r2, #5
 8006e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e9e:	4853      	ldr	r0, [pc, #332]	@ (8006fec <_vfiprintf_r+0x21c>)
 8006ea0:	f7f9 f9a6 	bl	80001f0 <memchr>
 8006ea4:	9a04      	ldr	r2, [sp, #16]
 8006ea6:	b9d8      	cbnz	r0, 8006ee0 <_vfiprintf_r+0x110>
 8006ea8:	06d1      	lsls	r1, r2, #27
 8006eaa:	bf44      	itt	mi
 8006eac:	2320      	movmi	r3, #32
 8006eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eb2:	0713      	lsls	r3, r2, #28
 8006eb4:	bf44      	itt	mi
 8006eb6:	232b      	movmi	r3, #43	@ 0x2b
 8006eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ec2:	d015      	beq.n	8006ef0 <_vfiprintf_r+0x120>
 8006ec4:	9a07      	ldr	r2, [sp, #28]
 8006ec6:	4654      	mov	r4, sl
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f04f 0c0a 	mov.w	ip, #10
 8006ece:	4621      	mov	r1, r4
 8006ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ed4:	3b30      	subs	r3, #48	@ 0x30
 8006ed6:	2b09      	cmp	r3, #9
 8006ed8:	d94b      	bls.n	8006f72 <_vfiprintf_r+0x1a2>
 8006eda:	b1b0      	cbz	r0, 8006f0a <_vfiprintf_r+0x13a>
 8006edc:	9207      	str	r2, [sp, #28]
 8006ede:	e014      	b.n	8006f0a <_vfiprintf_r+0x13a>
 8006ee0:	eba0 0308 	sub.w	r3, r0, r8
 8006ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	46a2      	mov	sl, r4
 8006eee:	e7d2      	b.n	8006e96 <_vfiprintf_r+0xc6>
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	1d19      	adds	r1, r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	9103      	str	r1, [sp, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bfbb      	ittet	lt
 8006efc:	425b      	neglt	r3, r3
 8006efe:	f042 0202 	orrlt.w	r2, r2, #2
 8006f02:	9307      	strge	r3, [sp, #28]
 8006f04:	9307      	strlt	r3, [sp, #28]
 8006f06:	bfb8      	it	lt
 8006f08:	9204      	strlt	r2, [sp, #16]
 8006f0a:	7823      	ldrb	r3, [r4, #0]
 8006f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f0e:	d10a      	bne.n	8006f26 <_vfiprintf_r+0x156>
 8006f10:	7863      	ldrb	r3, [r4, #1]
 8006f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f14:	d132      	bne.n	8006f7c <_vfiprintf_r+0x1ac>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	1d1a      	adds	r2, r3, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	9203      	str	r2, [sp, #12]
 8006f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f22:	3402      	adds	r4, #2
 8006f24:	9305      	str	r3, [sp, #20]
 8006f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ffc <_vfiprintf_r+0x22c>
 8006f2a:	7821      	ldrb	r1, [r4, #0]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	4650      	mov	r0, sl
 8006f30:	f7f9 f95e 	bl	80001f0 <memchr>
 8006f34:	b138      	cbz	r0, 8006f46 <_vfiprintf_r+0x176>
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	eba0 000a 	sub.w	r0, r0, sl
 8006f3c:	2240      	movs	r2, #64	@ 0x40
 8006f3e:	4082      	lsls	r2, r0
 8006f40:	4313      	orrs	r3, r2
 8006f42:	3401      	adds	r4, #1
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4a:	4829      	ldr	r0, [pc, #164]	@ (8006ff0 <_vfiprintf_r+0x220>)
 8006f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f50:	2206      	movs	r2, #6
 8006f52:	f7f9 f94d 	bl	80001f0 <memchr>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d03f      	beq.n	8006fda <_vfiprintf_r+0x20a>
 8006f5a:	4b26      	ldr	r3, [pc, #152]	@ (8006ff4 <_vfiprintf_r+0x224>)
 8006f5c:	bb1b      	cbnz	r3, 8006fa6 <_vfiprintf_r+0x1d6>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	3307      	adds	r3, #7
 8006f62:	f023 0307 	bic.w	r3, r3, #7
 8006f66:	3308      	adds	r3, #8
 8006f68:	9303      	str	r3, [sp, #12]
 8006f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6c:	443b      	add	r3, r7
 8006f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f70:	e76a      	b.n	8006e48 <_vfiprintf_r+0x78>
 8006f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f76:	460c      	mov	r4, r1
 8006f78:	2001      	movs	r0, #1
 8006f7a:	e7a8      	b.n	8006ece <_vfiprintf_r+0xfe>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	3401      	adds	r4, #1
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	4619      	mov	r1, r3
 8006f84:	f04f 0c0a 	mov.w	ip, #10
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f8e:	3a30      	subs	r2, #48	@ 0x30
 8006f90:	2a09      	cmp	r2, #9
 8006f92:	d903      	bls.n	8006f9c <_vfiprintf_r+0x1cc>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0c6      	beq.n	8006f26 <_vfiprintf_r+0x156>
 8006f98:	9105      	str	r1, [sp, #20]
 8006f9a:	e7c4      	b.n	8006f26 <_vfiprintf_r+0x156>
 8006f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7f0      	b.n	8006f88 <_vfiprintf_r+0x1b8>
 8006fa6:	ab03      	add	r3, sp, #12
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	462a      	mov	r2, r5
 8006fac:	4b12      	ldr	r3, [pc, #72]	@ (8006ff8 <_vfiprintf_r+0x228>)
 8006fae:	a904      	add	r1, sp, #16
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7fd fbc9 	bl	8004748 <_printf_float>
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	1c78      	adds	r0, r7, #1
 8006fba:	d1d6      	bne.n	8006f6a <_vfiprintf_r+0x19a>
 8006fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fbe:	07d9      	lsls	r1, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_vfiprintf_r+0x1fe>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	059a      	lsls	r2, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_vfiprintf_r+0x1fe>
 8006fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fca:	f7fe f92d 	bl	8005228 <__retarget_lock_release_recursive>
 8006fce:	89ab      	ldrh	r3, [r5, #12]
 8006fd0:	065b      	lsls	r3, r3, #25
 8006fd2:	f53f af1f 	bmi.w	8006e14 <_vfiprintf_r+0x44>
 8006fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fd8:	e71e      	b.n	8006e18 <_vfiprintf_r+0x48>
 8006fda:	ab03      	add	r3, sp, #12
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	462a      	mov	r2, r5
 8006fe0:	4b05      	ldr	r3, [pc, #20]	@ (8006ff8 <_vfiprintf_r+0x228>)
 8006fe2:	a904      	add	r1, sp, #16
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7fd fe47 	bl	8004c78 <_printf_i>
 8006fea:	e7e4      	b.n	8006fb6 <_vfiprintf_r+0x1e6>
 8006fec:	080083ae 	.word	0x080083ae
 8006ff0:	080083b8 	.word	0x080083b8
 8006ff4:	08004749 	.word	0x08004749
 8006ff8:	08006dab 	.word	0x08006dab
 8006ffc:	080083b4 	.word	0x080083b4

08007000 <__swbuf_r>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	460e      	mov	r6, r1
 8007004:	4614      	mov	r4, r2
 8007006:	4605      	mov	r5, r0
 8007008:	b118      	cbz	r0, 8007012 <__swbuf_r+0x12>
 800700a:	6a03      	ldr	r3, [r0, #32]
 800700c:	b90b      	cbnz	r3, 8007012 <__swbuf_r+0x12>
 800700e:	f7fd ffdd 	bl	8004fcc <__sinit>
 8007012:	69a3      	ldr	r3, [r4, #24]
 8007014:	60a3      	str	r3, [r4, #8]
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	071a      	lsls	r2, r3, #28
 800701a:	d501      	bpl.n	8007020 <__swbuf_r+0x20>
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	b943      	cbnz	r3, 8007032 <__swbuf_r+0x32>
 8007020:	4621      	mov	r1, r4
 8007022:	4628      	mov	r0, r5
 8007024:	f000 f82a 	bl	800707c <__swsetup_r>
 8007028:	b118      	cbz	r0, 8007032 <__swbuf_r+0x32>
 800702a:	f04f 37ff 	mov.w	r7, #4294967295
 800702e:	4638      	mov	r0, r7
 8007030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	6922      	ldr	r2, [r4, #16]
 8007036:	1a98      	subs	r0, r3, r2
 8007038:	6963      	ldr	r3, [r4, #20]
 800703a:	b2f6      	uxtb	r6, r6
 800703c:	4283      	cmp	r3, r0
 800703e:	4637      	mov	r7, r6
 8007040:	dc05      	bgt.n	800704e <__swbuf_r+0x4e>
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff fdcd 	bl	8006be4 <_fflush_r>
 800704a:	2800      	cmp	r0, #0
 800704c:	d1ed      	bne.n	800702a <__swbuf_r+0x2a>
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	3b01      	subs	r3, #1
 8007052:	60a3      	str	r3, [r4, #8]
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	6022      	str	r2, [r4, #0]
 800705a:	701e      	strb	r6, [r3, #0]
 800705c:	6962      	ldr	r2, [r4, #20]
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	429a      	cmp	r2, r3
 8007062:	d004      	beq.n	800706e <__swbuf_r+0x6e>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	07db      	lsls	r3, r3, #31
 8007068:	d5e1      	bpl.n	800702e <__swbuf_r+0x2e>
 800706a:	2e0a      	cmp	r6, #10
 800706c:	d1df      	bne.n	800702e <__swbuf_r+0x2e>
 800706e:	4621      	mov	r1, r4
 8007070:	4628      	mov	r0, r5
 8007072:	f7ff fdb7 	bl	8006be4 <_fflush_r>
 8007076:	2800      	cmp	r0, #0
 8007078:	d0d9      	beq.n	800702e <__swbuf_r+0x2e>
 800707a:	e7d6      	b.n	800702a <__swbuf_r+0x2a>

0800707c <__swsetup_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4b29      	ldr	r3, [pc, #164]	@ (8007124 <__swsetup_r+0xa8>)
 8007080:	4605      	mov	r5, r0
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	460c      	mov	r4, r1
 8007086:	b118      	cbz	r0, 8007090 <__swsetup_r+0x14>
 8007088:	6a03      	ldr	r3, [r0, #32]
 800708a:	b90b      	cbnz	r3, 8007090 <__swsetup_r+0x14>
 800708c:	f7fd ff9e 	bl	8004fcc <__sinit>
 8007090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007094:	0719      	lsls	r1, r3, #28
 8007096:	d422      	bmi.n	80070de <__swsetup_r+0x62>
 8007098:	06da      	lsls	r2, r3, #27
 800709a:	d407      	bmi.n	80070ac <__swsetup_r+0x30>
 800709c:	2209      	movs	r2, #9
 800709e:	602a      	str	r2, [r5, #0]
 80070a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295
 80070aa:	e033      	b.n	8007114 <__swsetup_r+0x98>
 80070ac:	0758      	lsls	r0, r3, #29
 80070ae:	d512      	bpl.n	80070d6 <__swsetup_r+0x5a>
 80070b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070b2:	b141      	cbz	r1, 80070c6 <__swsetup_r+0x4a>
 80070b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070b8:	4299      	cmp	r1, r3
 80070ba:	d002      	beq.n	80070c2 <__swsetup_r+0x46>
 80070bc:	4628      	mov	r0, r5
 80070be:	f7fe ff3b 	bl	8005f38 <_free_r>
 80070c2:	2300      	movs	r3, #0
 80070c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	2300      	movs	r3, #0
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	f043 0308 	orr.w	r3, r3, #8
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	b94b      	cbnz	r3, 80070f6 <__swsetup_r+0x7a>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ec:	d003      	beq.n	80070f6 <__swsetup_r+0x7a>
 80070ee:	4621      	mov	r1, r4
 80070f0:	4628      	mov	r0, r5
 80070f2:	f000 f88b 	bl	800720c <__smakebuf_r>
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	f013 0201 	ands.w	r2, r3, #1
 80070fe:	d00a      	beq.n	8007116 <__swsetup_r+0x9a>
 8007100:	2200      	movs	r2, #0
 8007102:	60a2      	str	r2, [r4, #8]
 8007104:	6962      	ldr	r2, [r4, #20]
 8007106:	4252      	negs	r2, r2
 8007108:	61a2      	str	r2, [r4, #24]
 800710a:	6922      	ldr	r2, [r4, #16]
 800710c:	b942      	cbnz	r2, 8007120 <__swsetup_r+0xa4>
 800710e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007112:	d1c5      	bne.n	80070a0 <__swsetup_r+0x24>
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	0799      	lsls	r1, r3, #30
 8007118:	bf58      	it	pl
 800711a:	6962      	ldrpl	r2, [r4, #20]
 800711c:	60a2      	str	r2, [r4, #8]
 800711e:	e7f4      	b.n	800710a <__swsetup_r+0x8e>
 8007120:	2000      	movs	r0, #0
 8007122:	e7f7      	b.n	8007114 <__swsetup_r+0x98>
 8007124:	20000030 	.word	0x20000030

08007128 <_raise_r>:
 8007128:	291f      	cmp	r1, #31
 800712a:	b538      	push	{r3, r4, r5, lr}
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	d904      	bls.n	800713c <_raise_r+0x14>
 8007132:	2316      	movs	r3, #22
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	f04f 30ff 	mov.w	r0, #4294967295
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800713e:	b112      	cbz	r2, 8007146 <_raise_r+0x1e>
 8007140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007144:	b94b      	cbnz	r3, 800715a <_raise_r+0x32>
 8007146:	4628      	mov	r0, r5
 8007148:	f000 f830 	bl	80071ac <_getpid_r>
 800714c:	4622      	mov	r2, r4
 800714e:	4601      	mov	r1, r0
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007156:	f000 b817 	b.w	8007188 <_kill_r>
 800715a:	2b01      	cmp	r3, #1
 800715c:	d00a      	beq.n	8007174 <_raise_r+0x4c>
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	d103      	bne.n	800716a <_raise_r+0x42>
 8007162:	2316      	movs	r3, #22
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	2001      	movs	r0, #1
 8007168:	e7e7      	b.n	800713a <_raise_r+0x12>
 800716a:	2100      	movs	r1, #0
 800716c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007170:	4620      	mov	r0, r4
 8007172:	4798      	blx	r3
 8007174:	2000      	movs	r0, #0
 8007176:	e7e0      	b.n	800713a <_raise_r+0x12>

08007178 <raise>:
 8007178:	4b02      	ldr	r3, [pc, #8]	@ (8007184 <raise+0xc>)
 800717a:	4601      	mov	r1, r0
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	f7ff bfd3 	b.w	8007128 <_raise_r>
 8007182:	bf00      	nop
 8007184:	20000030 	.word	0x20000030

08007188 <_kill_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d07      	ldr	r5, [pc, #28]	@ (80071a8 <_kill_r+0x20>)
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	4611      	mov	r1, r2
 8007194:	602b      	str	r3, [r5, #0]
 8007196:	f7fb fc80 	bl	8002a9a <_kill>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d102      	bne.n	80071a4 <_kill_r+0x1c>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	b103      	cbz	r3, 80071a4 <_kill_r+0x1c>
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	bf00      	nop
 80071a8:	20000394 	.word	0x20000394

080071ac <_getpid_r>:
 80071ac:	f7fb bc6d 	b.w	8002a8a <_getpid>

080071b0 <_malloc_usable_size_r>:
 80071b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b4:	1f18      	subs	r0, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfbc      	itt	lt
 80071ba:	580b      	ldrlt	r3, [r1, r0]
 80071bc:	18c0      	addlt	r0, r0, r3
 80071be:	4770      	bx	lr

080071c0 <__swhatbuf_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	460c      	mov	r4, r1
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	2900      	cmp	r1, #0
 80071ca:	b096      	sub	sp, #88	@ 0x58
 80071cc:	4615      	mov	r5, r2
 80071ce:	461e      	mov	r6, r3
 80071d0:	da0d      	bge.n	80071ee <__swhatbuf_r+0x2e>
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071d8:	f04f 0100 	mov.w	r1, #0
 80071dc:	bf14      	ite	ne
 80071de:	2340      	movne	r3, #64	@ 0x40
 80071e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071e4:	2000      	movs	r0, #0
 80071e6:	6031      	str	r1, [r6, #0]
 80071e8:	602b      	str	r3, [r5, #0]
 80071ea:	b016      	add	sp, #88	@ 0x58
 80071ec:	bd70      	pop	{r4, r5, r6, pc}
 80071ee:	466a      	mov	r2, sp
 80071f0:	f000 f848 	bl	8007284 <_fstat_r>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	dbec      	blt.n	80071d2 <__swhatbuf_r+0x12>
 80071f8:	9901      	ldr	r1, [sp, #4]
 80071fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007202:	4259      	negs	r1, r3
 8007204:	4159      	adcs	r1, r3
 8007206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800720a:	e7eb      	b.n	80071e4 <__swhatbuf_r+0x24>

0800720c <__smakebuf_r>:
 800720c:	898b      	ldrh	r3, [r1, #12]
 800720e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007210:	079d      	lsls	r5, r3, #30
 8007212:	4606      	mov	r6, r0
 8007214:	460c      	mov	r4, r1
 8007216:	d507      	bpl.n	8007228 <__smakebuf_r+0x1c>
 8007218:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	6123      	str	r3, [r4, #16]
 8007220:	2301      	movs	r3, #1
 8007222:	6163      	str	r3, [r4, #20]
 8007224:	b003      	add	sp, #12
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007228:	ab01      	add	r3, sp, #4
 800722a:	466a      	mov	r2, sp
 800722c:	f7ff ffc8 	bl	80071c0 <__swhatbuf_r>
 8007230:	9f00      	ldr	r7, [sp, #0]
 8007232:	4605      	mov	r5, r0
 8007234:	4639      	mov	r1, r7
 8007236:	4630      	mov	r0, r6
 8007238:	f7fe fef2 	bl	8006020 <_malloc_r>
 800723c:	b948      	cbnz	r0, 8007252 <__smakebuf_r+0x46>
 800723e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007242:	059a      	lsls	r2, r3, #22
 8007244:	d4ee      	bmi.n	8007224 <__smakebuf_r+0x18>
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	f043 0302 	orr.w	r3, r3, #2
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	e7e2      	b.n	8007218 <__smakebuf_r+0xc>
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	6020      	str	r0, [r4, #0]
 8007256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	9b01      	ldr	r3, [sp, #4]
 800725e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007262:	b15b      	cbz	r3, 800727c <__smakebuf_r+0x70>
 8007264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f81d 	bl	80072a8 <_isatty_r>
 800726e:	b128      	cbz	r0, 800727c <__smakebuf_r+0x70>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	431d      	orrs	r5, r3
 8007280:	81a5      	strh	r5, [r4, #12]
 8007282:	e7cf      	b.n	8007224 <__smakebuf_r+0x18>

08007284 <_fstat_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4d07      	ldr	r5, [pc, #28]	@ (80072a4 <_fstat_r+0x20>)
 8007288:	2300      	movs	r3, #0
 800728a:	4604      	mov	r4, r0
 800728c:	4608      	mov	r0, r1
 800728e:	4611      	mov	r1, r2
 8007290:	602b      	str	r3, [r5, #0]
 8007292:	f7fb fc62 	bl	8002b5a <_fstat>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d102      	bne.n	80072a0 <_fstat_r+0x1c>
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	b103      	cbz	r3, 80072a0 <_fstat_r+0x1c>
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	bd38      	pop	{r3, r4, r5, pc}
 80072a2:	bf00      	nop
 80072a4:	20000394 	.word	0x20000394

080072a8 <_isatty_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d06      	ldr	r5, [pc, #24]	@ (80072c4 <_isatty_r+0x1c>)
 80072ac:	2300      	movs	r3, #0
 80072ae:	4604      	mov	r4, r0
 80072b0:	4608      	mov	r0, r1
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	f7fb fc61 	bl	8002b7a <_isatty>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_isatty_r+0x1a>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_isatty_r+0x1a>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	20000394 	.word	0x20000394

080072c8 <pow>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	ed2d 8b02 	vpush	{d8}
 80072ce:	eeb0 8a40 	vmov.f32	s16, s0
 80072d2:	eef0 8a60 	vmov.f32	s17, s1
 80072d6:	ec55 4b11 	vmov	r4, r5, d1
 80072da:	f000 f871 	bl	80073c0 <__ieee754_pow>
 80072de:	4622      	mov	r2, r4
 80072e0:	462b      	mov	r3, r5
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	ec57 6b10 	vmov	r6, r7, d0
 80072ea:	f7f9 fc2f 	bl	8000b4c <__aeabi_dcmpun>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d13b      	bne.n	800736a <pow+0xa2>
 80072f2:	ec51 0b18 	vmov	r0, r1, d8
 80072f6:	2200      	movs	r2, #0
 80072f8:	2300      	movs	r3, #0
 80072fa:	f7f9 fbf5 	bl	8000ae8 <__aeabi_dcmpeq>
 80072fe:	b1b8      	cbz	r0, 8007330 <pow+0x68>
 8007300:	2200      	movs	r2, #0
 8007302:	2300      	movs	r3, #0
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f9 fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800730c:	2800      	cmp	r0, #0
 800730e:	d146      	bne.n	800739e <pow+0xd6>
 8007310:	ec45 4b10 	vmov	d0, r4, r5
 8007314:	f000 f848 	bl	80073a8 <finite>
 8007318:	b338      	cbz	r0, 800736a <pow+0xa2>
 800731a:	2200      	movs	r2, #0
 800731c:	2300      	movs	r3, #0
 800731e:	4620      	mov	r0, r4
 8007320:	4629      	mov	r1, r5
 8007322:	f7f9 fbeb 	bl	8000afc <__aeabi_dcmplt>
 8007326:	b300      	cbz	r0, 800736a <pow+0xa2>
 8007328:	f7fd ff52 	bl	80051d0 <__errno>
 800732c:	2322      	movs	r3, #34	@ 0x22
 800732e:	e01b      	b.n	8007368 <pow+0xa0>
 8007330:	ec47 6b10 	vmov	d0, r6, r7
 8007334:	f000 f838 	bl	80073a8 <finite>
 8007338:	b9e0      	cbnz	r0, 8007374 <pow+0xac>
 800733a:	eeb0 0a48 	vmov.f32	s0, s16
 800733e:	eef0 0a68 	vmov.f32	s1, s17
 8007342:	f000 f831 	bl	80073a8 <finite>
 8007346:	b1a8      	cbz	r0, 8007374 <pow+0xac>
 8007348:	ec45 4b10 	vmov	d0, r4, r5
 800734c:	f000 f82c 	bl	80073a8 <finite>
 8007350:	b180      	cbz	r0, 8007374 <pow+0xac>
 8007352:	4632      	mov	r2, r6
 8007354:	463b      	mov	r3, r7
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f9 fbf7 	bl	8000b4c <__aeabi_dcmpun>
 800735e:	2800      	cmp	r0, #0
 8007360:	d0e2      	beq.n	8007328 <pow+0x60>
 8007362:	f7fd ff35 	bl	80051d0 <__errno>
 8007366:	2321      	movs	r3, #33	@ 0x21
 8007368:	6003      	str	r3, [r0, #0]
 800736a:	ecbd 8b02 	vpop	{d8}
 800736e:	ec47 6b10 	vmov	d0, r6, r7
 8007372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007374:	2200      	movs	r2, #0
 8007376:	2300      	movs	r3, #0
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fbb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007380:	2800      	cmp	r0, #0
 8007382:	d0f2      	beq.n	800736a <pow+0xa2>
 8007384:	eeb0 0a48 	vmov.f32	s0, s16
 8007388:	eef0 0a68 	vmov.f32	s1, s17
 800738c:	f000 f80c 	bl	80073a8 <finite>
 8007390:	2800      	cmp	r0, #0
 8007392:	d0ea      	beq.n	800736a <pow+0xa2>
 8007394:	ec45 4b10 	vmov	d0, r4, r5
 8007398:	f000 f806 	bl	80073a8 <finite>
 800739c:	e7c3      	b.n	8007326 <pow+0x5e>
 800739e:	4f01      	ldr	r7, [pc, #4]	@ (80073a4 <pow+0xdc>)
 80073a0:	2600      	movs	r6, #0
 80073a2:	e7e2      	b.n	800736a <pow+0xa2>
 80073a4:	3ff00000 	.word	0x3ff00000

080073a8 <finite>:
 80073a8:	b082      	sub	sp, #8
 80073aa:	ed8d 0b00 	vstr	d0, [sp]
 80073ae:	9801      	ldr	r0, [sp, #4]
 80073b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80073b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80073b8:	0fc0      	lsrs	r0, r0, #31
 80073ba:	b002      	add	sp, #8
 80073bc:	4770      	bx	lr
	...

080073c0 <__ieee754_pow>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	b091      	sub	sp, #68	@ 0x44
 80073c6:	ed8d 1b00 	vstr	d1, [sp]
 80073ca:	e9dd 1900 	ldrd	r1, r9, [sp]
 80073ce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80073d2:	ea5a 0001 	orrs.w	r0, sl, r1
 80073d6:	ec57 6b10 	vmov	r6, r7, d0
 80073da:	d113      	bne.n	8007404 <__ieee754_pow+0x44>
 80073dc:	19b3      	adds	r3, r6, r6
 80073de:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80073e2:	4152      	adcs	r2, r2
 80073e4:	4298      	cmp	r0, r3
 80073e6:	4b9a      	ldr	r3, [pc, #616]	@ (8007650 <__ieee754_pow+0x290>)
 80073e8:	4193      	sbcs	r3, r2
 80073ea:	f080 84ee 	bcs.w	8007dca <__ieee754_pow+0xa0a>
 80073ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f2:	4630      	mov	r0, r6
 80073f4:	4639      	mov	r1, r7
 80073f6:	f7f8 ff59 	bl	80002ac <__adddf3>
 80073fa:	ec41 0b10 	vmov	d0, r0, r1
 80073fe:	b011      	add	sp, #68	@ 0x44
 8007400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007404:	4a93      	ldr	r2, [pc, #588]	@ (8007654 <__ieee754_pow+0x294>)
 8007406:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800740a:	4295      	cmp	r5, r2
 800740c:	46b8      	mov	r8, r7
 800740e:	4633      	mov	r3, r6
 8007410:	d80a      	bhi.n	8007428 <__ieee754_pow+0x68>
 8007412:	d104      	bne.n	800741e <__ieee754_pow+0x5e>
 8007414:	2e00      	cmp	r6, #0
 8007416:	d1ea      	bne.n	80073ee <__ieee754_pow+0x2e>
 8007418:	45aa      	cmp	sl, r5
 800741a:	d8e8      	bhi.n	80073ee <__ieee754_pow+0x2e>
 800741c:	e001      	b.n	8007422 <__ieee754_pow+0x62>
 800741e:	4592      	cmp	sl, r2
 8007420:	d802      	bhi.n	8007428 <__ieee754_pow+0x68>
 8007422:	4592      	cmp	sl, r2
 8007424:	d10f      	bne.n	8007446 <__ieee754_pow+0x86>
 8007426:	b171      	cbz	r1, 8007446 <__ieee754_pow+0x86>
 8007428:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800742c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007430:	ea58 0803 	orrs.w	r8, r8, r3
 8007434:	d1db      	bne.n	80073ee <__ieee754_pow+0x2e>
 8007436:	e9dd 3200 	ldrd	r3, r2, [sp]
 800743a:	18db      	adds	r3, r3, r3
 800743c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007440:	4152      	adcs	r2, r2
 8007442:	4598      	cmp	r8, r3
 8007444:	e7cf      	b.n	80073e6 <__ieee754_pow+0x26>
 8007446:	f1b8 0f00 	cmp.w	r8, #0
 800744a:	46ab      	mov	fp, r5
 800744c:	da43      	bge.n	80074d6 <__ieee754_pow+0x116>
 800744e:	4a82      	ldr	r2, [pc, #520]	@ (8007658 <__ieee754_pow+0x298>)
 8007450:	4592      	cmp	sl, r2
 8007452:	d856      	bhi.n	8007502 <__ieee754_pow+0x142>
 8007454:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007458:	4592      	cmp	sl, r2
 800745a:	f240 84c5 	bls.w	8007de8 <__ieee754_pow+0xa28>
 800745e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007462:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007466:	2a14      	cmp	r2, #20
 8007468:	dd18      	ble.n	800749c <__ieee754_pow+0xdc>
 800746a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800746e:	fa21 f402 	lsr.w	r4, r1, r2
 8007472:	fa04 f202 	lsl.w	r2, r4, r2
 8007476:	428a      	cmp	r2, r1
 8007478:	f040 84b6 	bne.w	8007de8 <__ieee754_pow+0xa28>
 800747c:	f004 0401 	and.w	r4, r4, #1
 8007480:	f1c4 0402 	rsb	r4, r4, #2
 8007484:	2900      	cmp	r1, #0
 8007486:	d159      	bne.n	800753c <__ieee754_pow+0x17c>
 8007488:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800748c:	d148      	bne.n	8007520 <__ieee754_pow+0x160>
 800748e:	4632      	mov	r2, r6
 8007490:	463b      	mov	r3, r7
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 f8bf 	bl	8000618 <__aeabi_dmul>
 800749a:	e7ae      	b.n	80073fa <__ieee754_pow+0x3a>
 800749c:	2900      	cmp	r1, #0
 800749e:	d14c      	bne.n	800753a <__ieee754_pow+0x17a>
 80074a0:	f1c2 0214 	rsb	r2, r2, #20
 80074a4:	fa4a f402 	asr.w	r4, sl, r2
 80074a8:	fa04 f202 	lsl.w	r2, r4, r2
 80074ac:	4552      	cmp	r2, sl
 80074ae:	f040 8498 	bne.w	8007de2 <__ieee754_pow+0xa22>
 80074b2:	f004 0401 	and.w	r4, r4, #1
 80074b6:	f1c4 0402 	rsb	r4, r4, #2
 80074ba:	4a68      	ldr	r2, [pc, #416]	@ (800765c <__ieee754_pow+0x29c>)
 80074bc:	4592      	cmp	sl, r2
 80074be:	d1e3      	bne.n	8007488 <__ieee754_pow+0xc8>
 80074c0:	f1b9 0f00 	cmp.w	r9, #0
 80074c4:	f280 8489 	bge.w	8007dda <__ieee754_pow+0xa1a>
 80074c8:	4964      	ldr	r1, [pc, #400]	@ (800765c <__ieee754_pow+0x29c>)
 80074ca:	4632      	mov	r2, r6
 80074cc:	463b      	mov	r3, r7
 80074ce:	2000      	movs	r0, #0
 80074d0:	f7f9 f9cc 	bl	800086c <__aeabi_ddiv>
 80074d4:	e791      	b.n	80073fa <__ieee754_pow+0x3a>
 80074d6:	2400      	movs	r4, #0
 80074d8:	bb81      	cbnz	r1, 800753c <__ieee754_pow+0x17c>
 80074da:	4a5e      	ldr	r2, [pc, #376]	@ (8007654 <__ieee754_pow+0x294>)
 80074dc:	4592      	cmp	sl, r2
 80074de:	d1ec      	bne.n	80074ba <__ieee754_pow+0xfa>
 80074e0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80074e4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80074e8:	431a      	orrs	r2, r3
 80074ea:	f000 846e 	beq.w	8007dca <__ieee754_pow+0xa0a>
 80074ee:	4b5c      	ldr	r3, [pc, #368]	@ (8007660 <__ieee754_pow+0x2a0>)
 80074f0:	429d      	cmp	r5, r3
 80074f2:	d908      	bls.n	8007506 <__ieee754_pow+0x146>
 80074f4:	f1b9 0f00 	cmp.w	r9, #0
 80074f8:	f280 846b 	bge.w	8007dd2 <__ieee754_pow+0xa12>
 80074fc:	2000      	movs	r0, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	e77b      	b.n	80073fa <__ieee754_pow+0x3a>
 8007502:	2402      	movs	r4, #2
 8007504:	e7e8      	b.n	80074d8 <__ieee754_pow+0x118>
 8007506:	f1b9 0f00 	cmp.w	r9, #0
 800750a:	f04f 0000 	mov.w	r0, #0
 800750e:	f04f 0100 	mov.w	r1, #0
 8007512:	f6bf af72 	bge.w	80073fa <__ieee754_pow+0x3a>
 8007516:	e9dd 0300 	ldrd	r0, r3, [sp]
 800751a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800751e:	e76c      	b.n	80073fa <__ieee754_pow+0x3a>
 8007520:	4a50      	ldr	r2, [pc, #320]	@ (8007664 <__ieee754_pow+0x2a4>)
 8007522:	4591      	cmp	r9, r2
 8007524:	d10a      	bne.n	800753c <__ieee754_pow+0x17c>
 8007526:	f1b8 0f00 	cmp.w	r8, #0
 800752a:	db07      	blt.n	800753c <__ieee754_pow+0x17c>
 800752c:	ec47 6b10 	vmov	d0, r6, r7
 8007530:	b011      	add	sp, #68	@ 0x44
 8007532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f000 bd4f 	b.w	8007fd8 <__ieee754_sqrt>
 800753a:	2400      	movs	r4, #0
 800753c:	ec47 6b10 	vmov	d0, r6, r7
 8007540:	9302      	str	r3, [sp, #8]
 8007542:	f000 fc87 	bl	8007e54 <fabs>
 8007546:	9b02      	ldr	r3, [sp, #8]
 8007548:	ec51 0b10 	vmov	r0, r1, d0
 800754c:	bb43      	cbnz	r3, 80075a0 <__ieee754_pow+0x1e0>
 800754e:	4b43      	ldr	r3, [pc, #268]	@ (800765c <__ieee754_pow+0x29c>)
 8007550:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8007554:	429a      	cmp	r2, r3
 8007556:	d000      	beq.n	800755a <__ieee754_pow+0x19a>
 8007558:	bb15      	cbnz	r5, 80075a0 <__ieee754_pow+0x1e0>
 800755a:	f1b9 0f00 	cmp.w	r9, #0
 800755e:	da05      	bge.n	800756c <__ieee754_pow+0x1ac>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	2000      	movs	r0, #0
 8007566:	493d      	ldr	r1, [pc, #244]	@ (800765c <__ieee754_pow+0x29c>)
 8007568:	f7f9 f980 	bl	800086c <__aeabi_ddiv>
 800756c:	f1b8 0f00 	cmp.w	r8, #0
 8007570:	f6bf af43 	bge.w	80073fa <__ieee754_pow+0x3a>
 8007574:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007578:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800757c:	4325      	orrs	r5, r4
 800757e:	d108      	bne.n	8007592 <__ieee754_pow+0x1d2>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4610      	mov	r0, r2
 8007586:	4619      	mov	r1, r3
 8007588:	f7f8 fe8e 	bl	80002a8 <__aeabi_dsub>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	e79e      	b.n	80074d0 <__ieee754_pow+0x110>
 8007592:	2c01      	cmp	r4, #1
 8007594:	f47f af31 	bne.w	80073fa <__ieee754_pow+0x3a>
 8007598:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800759c:	4619      	mov	r1, r3
 800759e:	e72c      	b.n	80073fa <__ieee754_pow+0x3a>
 80075a0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80075a4:	3b01      	subs	r3, #1
 80075a6:	ea53 0204 	orrs.w	r2, r3, r4
 80075aa:	d102      	bne.n	80075b2 <__ieee754_pow+0x1f2>
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	e7e8      	b.n	8007584 <__ieee754_pow+0x1c4>
 80075b2:	3c01      	subs	r4, #1
 80075b4:	431c      	orrs	r4, r3
 80075b6:	d016      	beq.n	80075e6 <__ieee754_pow+0x226>
 80075b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007640 <__ieee754_pow+0x280>
 80075bc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80075c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075c4:	f240 8110 	bls.w	80077e8 <__ieee754_pow+0x428>
 80075c8:	4b27      	ldr	r3, [pc, #156]	@ (8007668 <__ieee754_pow+0x2a8>)
 80075ca:	459a      	cmp	sl, r3
 80075cc:	4b24      	ldr	r3, [pc, #144]	@ (8007660 <__ieee754_pow+0x2a0>)
 80075ce:	d916      	bls.n	80075fe <__ieee754_pow+0x23e>
 80075d0:	429d      	cmp	r5, r3
 80075d2:	d80b      	bhi.n	80075ec <__ieee754_pow+0x22c>
 80075d4:	f1b9 0f00 	cmp.w	r9, #0
 80075d8:	da0b      	bge.n	80075f2 <__ieee754_pow+0x232>
 80075da:	2000      	movs	r0, #0
 80075dc:	b011      	add	sp, #68	@ 0x44
 80075de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e2:	f000 bcf1 	b.w	8007fc8 <__math_oflow>
 80075e6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007648 <__ieee754_pow+0x288>
 80075ea:	e7e7      	b.n	80075bc <__ieee754_pow+0x1fc>
 80075ec:	f1b9 0f00 	cmp.w	r9, #0
 80075f0:	dcf3      	bgt.n	80075da <__ieee754_pow+0x21a>
 80075f2:	2000      	movs	r0, #0
 80075f4:	b011      	add	sp, #68	@ 0x44
 80075f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	f000 bcdd 	b.w	8007fb8 <__math_uflow>
 80075fe:	429d      	cmp	r5, r3
 8007600:	d20c      	bcs.n	800761c <__ieee754_pow+0x25c>
 8007602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	f7f9 fa77 	bl	8000afc <__aeabi_dcmplt>
 800760e:	3800      	subs	r0, #0
 8007610:	bf18      	it	ne
 8007612:	2001      	movne	r0, #1
 8007614:	f1b9 0f00 	cmp.w	r9, #0
 8007618:	daec      	bge.n	80075f4 <__ieee754_pow+0x234>
 800761a:	e7df      	b.n	80075dc <__ieee754_pow+0x21c>
 800761c:	4b0f      	ldr	r3, [pc, #60]	@ (800765c <__ieee754_pow+0x29c>)
 800761e:	429d      	cmp	r5, r3
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	d922      	bls.n	800766c <__ieee754_pow+0x2ac>
 8007626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762a:	2300      	movs	r3, #0
 800762c:	f7f9 fa66 	bl	8000afc <__aeabi_dcmplt>
 8007630:	3800      	subs	r0, #0
 8007632:	bf18      	it	ne
 8007634:	2001      	movne	r0, #1
 8007636:	f1b9 0f00 	cmp.w	r9, #0
 800763a:	dccf      	bgt.n	80075dc <__ieee754_pow+0x21c>
 800763c:	e7da      	b.n	80075f4 <__ieee754_pow+0x234>
 800763e:	bf00      	nop
 8007640:	00000000 	.word	0x00000000
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	00000000 	.word	0x00000000
 800764c:	bff00000 	.word	0xbff00000
 8007650:	fff00000 	.word	0xfff00000
 8007654:	7ff00000 	.word	0x7ff00000
 8007658:	433fffff 	.word	0x433fffff
 800765c:	3ff00000 	.word	0x3ff00000
 8007660:	3fefffff 	.word	0x3fefffff
 8007664:	3fe00000 	.word	0x3fe00000
 8007668:	43f00000 	.word	0x43f00000
 800766c:	4b5a      	ldr	r3, [pc, #360]	@ (80077d8 <__ieee754_pow+0x418>)
 800766e:	f7f8 fe1b 	bl	80002a8 <__aeabi_dsub>
 8007672:	a351      	add	r3, pc, #324	@ (adr r3, 80077b8 <__ieee754_pow+0x3f8>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	4604      	mov	r4, r0
 800767a:	460d      	mov	r5, r1
 800767c:	f7f8 ffcc 	bl	8000618 <__aeabi_dmul>
 8007680:	a34f      	add	r3, pc, #316	@ (adr r3, 80077c0 <__ieee754_pow+0x400>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	4620      	mov	r0, r4
 800768c:	4629      	mov	r1, r5
 800768e:	f7f8 ffc3 	bl	8000618 <__aeabi_dmul>
 8007692:	4b52      	ldr	r3, [pc, #328]	@ (80077dc <__ieee754_pow+0x41c>)
 8007694:	4682      	mov	sl, r0
 8007696:	468b      	mov	fp, r1
 8007698:	2200      	movs	r2, #0
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f8 ffbb 	bl	8000618 <__aeabi_dmul>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	a148      	add	r1, pc, #288	@ (adr r1, 80077c8 <__ieee754_pow+0x408>)
 80076a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ac:	f7f8 fdfc 	bl	80002a8 <__aeabi_dsub>
 80076b0:	4622      	mov	r2, r4
 80076b2:	462b      	mov	r3, r5
 80076b4:	f7f8 ffb0 	bl	8000618 <__aeabi_dmul>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	2000      	movs	r0, #0
 80076be:	4948      	ldr	r1, [pc, #288]	@ (80077e0 <__ieee754_pow+0x420>)
 80076c0:	f7f8 fdf2 	bl	80002a8 <__aeabi_dsub>
 80076c4:	4622      	mov	r2, r4
 80076c6:	4680      	mov	r8, r0
 80076c8:	4689      	mov	r9, r1
 80076ca:	462b      	mov	r3, r5
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 ffa2 	bl	8000618 <__aeabi_dmul>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	f7f8 ff9c 	bl	8000618 <__aeabi_dmul>
 80076e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80077d0 <__ieee754_pow+0x410>)
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f7f8 ff97 	bl	8000618 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4650      	mov	r0, sl
 80076f0:	4659      	mov	r1, fp
 80076f2:	f7f8 fdd9 	bl	80002a8 <__aeabi_dsub>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4680      	mov	r8, r0
 80076fc:	4689      	mov	r9, r1
 80076fe:	4630      	mov	r0, r6
 8007700:	4639      	mov	r1, r7
 8007702:	f7f8 fdd3 	bl	80002ac <__adddf3>
 8007706:	2400      	movs	r4, #0
 8007708:	4632      	mov	r2, r6
 800770a:	463b      	mov	r3, r7
 800770c:	4620      	mov	r0, r4
 800770e:	460d      	mov	r5, r1
 8007710:	f7f8 fdca 	bl	80002a8 <__aeabi_dsub>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f8 fdc4 	bl	80002a8 <__aeabi_dsub>
 8007720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007724:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007728:	2300      	movs	r3, #0
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	465b      	mov	r3, fp
 8007736:	4652      	mov	r2, sl
 8007738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800773c:	f7f8 fdb4 	bl	80002a8 <__aeabi_dsub>
 8007740:	4622      	mov	r2, r4
 8007742:	462b      	mov	r3, r5
 8007744:	f7f8 ff68 	bl	8000618 <__aeabi_dmul>
 8007748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774c:	4680      	mov	r8, r0
 800774e:	4689      	mov	r9, r1
 8007750:	4630      	mov	r0, r6
 8007752:	4639      	mov	r1, r7
 8007754:	f7f8 ff60 	bl	8000618 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4640      	mov	r0, r8
 800775e:	4649      	mov	r1, r9
 8007760:	f7f8 fda4 	bl	80002ac <__adddf3>
 8007764:	465b      	mov	r3, fp
 8007766:	4606      	mov	r6, r0
 8007768:	460f      	mov	r7, r1
 800776a:	4652      	mov	r2, sl
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 ff52 	bl	8000618 <__aeabi_dmul>
 8007774:	460b      	mov	r3, r1
 8007776:	4602      	mov	r2, r0
 8007778:	4680      	mov	r8, r0
 800777a:	4689      	mov	r9, r1
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f8 fd94 	bl	80002ac <__adddf3>
 8007784:	4b17      	ldr	r3, [pc, #92]	@ (80077e4 <__ieee754_pow+0x424>)
 8007786:	4299      	cmp	r1, r3
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	468b      	mov	fp, r1
 800778e:	f340 820b 	ble.w	8007ba8 <__ieee754_pow+0x7e8>
 8007792:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007796:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800779a:	4303      	orrs	r3, r0
 800779c:	f000 81ea 	beq.w	8007b74 <__ieee754_pow+0x7b4>
 80077a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	f7f9 f9a8 	bl	8000afc <__aeabi_dcmplt>
 80077ac:	3800      	subs	r0, #0
 80077ae:	bf18      	it	ne
 80077b0:	2001      	movne	r0, #1
 80077b2:	e713      	b.n	80075dc <__ieee754_pow+0x21c>
 80077b4:	f3af 8000 	nop.w
 80077b8:	60000000 	.word	0x60000000
 80077bc:	3ff71547 	.word	0x3ff71547
 80077c0:	f85ddf44 	.word	0xf85ddf44
 80077c4:	3e54ae0b 	.word	0x3e54ae0b
 80077c8:	55555555 	.word	0x55555555
 80077cc:	3fd55555 	.word	0x3fd55555
 80077d0:	652b82fe 	.word	0x652b82fe
 80077d4:	3ff71547 	.word	0x3ff71547
 80077d8:	3ff00000 	.word	0x3ff00000
 80077dc:	3fd00000 	.word	0x3fd00000
 80077e0:	3fe00000 	.word	0x3fe00000
 80077e4:	408fffff 	.word	0x408fffff
 80077e8:	4bd5      	ldr	r3, [pc, #852]	@ (8007b40 <__ieee754_pow+0x780>)
 80077ea:	ea08 0303 	and.w	r3, r8, r3
 80077ee:	2200      	movs	r2, #0
 80077f0:	b92b      	cbnz	r3, 80077fe <__ieee754_pow+0x43e>
 80077f2:	4bd4      	ldr	r3, [pc, #848]	@ (8007b44 <__ieee754_pow+0x784>)
 80077f4:	f7f8 ff10 	bl	8000618 <__aeabi_dmul>
 80077f8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80077fc:	468b      	mov	fp, r1
 80077fe:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007802:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007806:	4413      	add	r3, r2
 8007808:	930a      	str	r3, [sp, #40]	@ 0x28
 800780a:	4bcf      	ldr	r3, [pc, #828]	@ (8007b48 <__ieee754_pow+0x788>)
 800780c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007810:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007814:	459b      	cmp	fp, r3
 8007816:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800781a:	dd08      	ble.n	800782e <__ieee754_pow+0x46e>
 800781c:	4bcb      	ldr	r3, [pc, #812]	@ (8007b4c <__ieee754_pow+0x78c>)
 800781e:	459b      	cmp	fp, r3
 8007820:	f340 81a5 	ble.w	8007b6e <__ieee754_pow+0x7ae>
 8007824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007826:	3301      	adds	r3, #1
 8007828:	930a      	str	r3, [sp, #40]	@ 0x28
 800782a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800782e:	f04f 0a00 	mov.w	sl, #0
 8007832:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007836:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007838:	4bc5      	ldr	r3, [pc, #788]	@ (8007b50 <__ieee754_pow+0x790>)
 800783a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800783e:	ed93 7b00 	vldr	d7, [r3]
 8007842:	4629      	mov	r1, r5
 8007844:	ec53 2b17 	vmov	r2, r3, d7
 8007848:	ed8d 7b06 	vstr	d7, [sp, #24]
 800784c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007850:	f7f8 fd2a 	bl	80002a8 <__aeabi_dsub>
 8007854:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007858:	4606      	mov	r6, r0
 800785a:	460f      	mov	r7, r1
 800785c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007860:	f7f8 fd24 	bl	80002ac <__adddf3>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	2000      	movs	r0, #0
 800786a:	49ba      	ldr	r1, [pc, #744]	@ (8007b54 <__ieee754_pow+0x794>)
 800786c:	f7f8 fffe 	bl	800086c <__aeabi_ddiv>
 8007870:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f8 fecc 	bl	8000618 <__aeabi_dmul>
 8007880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007884:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007888:	106d      	asrs	r5, r5, #1
 800788a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800788e:	f04f 0b00 	mov.w	fp, #0
 8007892:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007896:	4661      	mov	r1, ip
 8007898:	2200      	movs	r2, #0
 800789a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800789e:	4658      	mov	r0, fp
 80078a0:	46e1      	mov	r9, ip
 80078a2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80078a6:	4614      	mov	r4, r2
 80078a8:	461d      	mov	r5, r3
 80078aa:	f7f8 feb5 	bl	8000618 <__aeabi_dmul>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	f7f8 fcf7 	bl	80002a8 <__aeabi_dsub>
 80078ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	4620      	mov	r0, r4
 80078c4:	4629      	mov	r1, r5
 80078c6:	f7f8 fcef 	bl	80002a8 <__aeabi_dsub>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078d2:	f7f8 fce9 	bl	80002a8 <__aeabi_dsub>
 80078d6:	465a      	mov	r2, fp
 80078d8:	464b      	mov	r3, r9
 80078da:	f7f8 fe9d 	bl	8000618 <__aeabi_dmul>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f8 fcdf 	bl	80002a8 <__aeabi_dsub>
 80078ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078ee:	f7f8 fe93 	bl	8000618 <__aeabi_dmul>
 80078f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078fa:	4610      	mov	r0, r2
 80078fc:	4619      	mov	r1, r3
 80078fe:	f7f8 fe8b 	bl	8000618 <__aeabi_dmul>
 8007902:	a37d      	add	r3, pc, #500	@ (adr r3, 8007af8 <__ieee754_pow+0x738>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	4604      	mov	r4, r0
 800790a:	460d      	mov	r5, r1
 800790c:	f7f8 fe84 	bl	8000618 <__aeabi_dmul>
 8007910:	a37b      	add	r3, pc, #492	@ (adr r3, 8007b00 <__ieee754_pow+0x740>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f8 fcc9 	bl	80002ac <__adddf3>
 800791a:	4622      	mov	r2, r4
 800791c:	462b      	mov	r3, r5
 800791e:	f7f8 fe7b 	bl	8000618 <__aeabi_dmul>
 8007922:	a379      	add	r3, pc, #484	@ (adr r3, 8007b08 <__ieee754_pow+0x748>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f7f8 fcc0 	bl	80002ac <__adddf3>
 800792c:	4622      	mov	r2, r4
 800792e:	462b      	mov	r3, r5
 8007930:	f7f8 fe72 	bl	8000618 <__aeabi_dmul>
 8007934:	a376      	add	r3, pc, #472	@ (adr r3, 8007b10 <__ieee754_pow+0x750>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f8 fcb7 	bl	80002ac <__adddf3>
 800793e:	4622      	mov	r2, r4
 8007940:	462b      	mov	r3, r5
 8007942:	f7f8 fe69 	bl	8000618 <__aeabi_dmul>
 8007946:	a374      	add	r3, pc, #464	@ (adr r3, 8007b18 <__ieee754_pow+0x758>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7f8 fcae 	bl	80002ac <__adddf3>
 8007950:	4622      	mov	r2, r4
 8007952:	462b      	mov	r3, r5
 8007954:	f7f8 fe60 	bl	8000618 <__aeabi_dmul>
 8007958:	a371      	add	r3, pc, #452	@ (adr r3, 8007b20 <__ieee754_pow+0x760>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fca5 	bl	80002ac <__adddf3>
 8007962:	4622      	mov	r2, r4
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	462b      	mov	r3, r5
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f7f8 fe53 	bl	8000618 <__aeabi_dmul>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	f7f8 fe4d 	bl	8000618 <__aeabi_dmul>
 800797e:	465a      	mov	r2, fp
 8007980:	4604      	mov	r4, r0
 8007982:	460d      	mov	r5, r1
 8007984:	464b      	mov	r3, r9
 8007986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800798a:	f7f8 fc8f 	bl	80002ac <__adddf3>
 800798e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007992:	f7f8 fe41 	bl	8000618 <__aeabi_dmul>
 8007996:	4622      	mov	r2, r4
 8007998:	462b      	mov	r3, r5
 800799a:	f7f8 fc87 	bl	80002ac <__adddf3>
 800799e:	465a      	mov	r2, fp
 80079a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079a4:	464b      	mov	r3, r9
 80079a6:	4658      	mov	r0, fp
 80079a8:	4649      	mov	r1, r9
 80079aa:	f7f8 fe35 	bl	8000618 <__aeabi_dmul>
 80079ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007b58 <__ieee754_pow+0x798>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	f7f8 fc79 	bl	80002ac <__adddf3>
 80079ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079be:	f7f8 fc75 	bl	80002ac <__adddf3>
 80079c2:	46d8      	mov	r8, fp
 80079c4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80079c8:	460d      	mov	r5, r1
 80079ca:	465a      	mov	r2, fp
 80079cc:	460b      	mov	r3, r1
 80079ce:	4640      	mov	r0, r8
 80079d0:	4649      	mov	r1, r9
 80079d2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80079d6:	f7f8 fe1f 	bl	8000618 <__aeabi_dmul>
 80079da:	465c      	mov	r4, fp
 80079dc:	4680      	mov	r8, r0
 80079de:	4689      	mov	r9, r1
 80079e0:	4b5d      	ldr	r3, [pc, #372]	@ (8007b58 <__ieee754_pow+0x798>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	4620      	mov	r0, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	f7f8 fc5e 	bl	80002a8 <__aeabi_dsub>
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	f7f8 fc5a 	bl	80002a8 <__aeabi_dsub>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079fc:	f7f8 fc54 	bl	80002a8 <__aeabi_dsub>
 8007a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a04:	f7f8 fe08 	bl	8000618 <__aeabi_dmul>
 8007a08:	4622      	mov	r2, r4
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	462b      	mov	r3, r5
 8007a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a14:	f7f8 fe00 	bl	8000618 <__aeabi_dmul>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f7f8 fc44 	bl	80002ac <__adddf3>
 8007a24:	4606      	mov	r6, r0
 8007a26:	460f      	mov	r7, r1
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	f7f8 fc3c 	bl	80002ac <__adddf3>
 8007a34:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007a38:	a33b      	add	r3, pc, #236	@ (adr r3, 8007b28 <__ieee754_pow+0x768>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	4658      	mov	r0, fp
 8007a40:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007a44:	460d      	mov	r5, r1
 8007a46:	f7f8 fde7 	bl	8000618 <__aeabi_dmul>
 8007a4a:	465c      	mov	r4, fp
 8007a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a50:	4642      	mov	r2, r8
 8007a52:	464b      	mov	r3, r9
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fc26 	bl	80002a8 <__aeabi_dsub>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 fc20 	bl	80002a8 <__aeabi_dsub>
 8007a68:	a331      	add	r3, pc, #196	@ (adr r3, 8007b30 <__ieee754_pow+0x770>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fdd3 	bl	8000618 <__aeabi_dmul>
 8007a72:	a331      	add	r3, pc, #196	@ (adr r3, 8007b38 <__ieee754_pow+0x778>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	4606      	mov	r6, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f8 fdca 	bl	8000618 <__aeabi_dmul>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fc0e 	bl	80002ac <__adddf3>
 8007a90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a92:	4b32      	ldr	r3, [pc, #200]	@ (8007b5c <__ieee754_pow+0x79c>)
 8007a94:	4413      	add	r3, r2
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	f7f8 fc07 	bl	80002ac <__adddf3>
 8007a9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aa2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007aa4:	f7f8 fd4e 	bl	8000544 <__aeabi_i2d>
 8007aa8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8007b60 <__ieee754_pow+0x7a0>)
 8007aac:	4413      	add	r3, r2
 8007aae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ab8:	460f      	mov	r7, r1
 8007aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007abe:	f7f8 fbf5 	bl	80002ac <__adddf3>
 8007ac2:	4642      	mov	r2, r8
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	f7f8 fbf1 	bl	80002ac <__adddf3>
 8007aca:	4632      	mov	r2, r6
 8007acc:	463b      	mov	r3, r7
 8007ace:	f7f8 fbed 	bl	80002ac <__adddf3>
 8007ad2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	463b      	mov	r3, r7
 8007ada:	4658      	mov	r0, fp
 8007adc:	460d      	mov	r5, r1
 8007ade:	f7f8 fbe3 	bl	80002a8 <__aeabi_dsub>
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	f7f8 fbdf 	bl	80002a8 <__aeabi_dsub>
 8007aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aee:	f7f8 fbdb 	bl	80002a8 <__aeabi_dsub>
 8007af2:	465c      	mov	r4, fp
 8007af4:	e036      	b.n	8007b64 <__ieee754_pow+0x7a4>
 8007af6:	bf00      	nop
 8007af8:	4a454eef 	.word	0x4a454eef
 8007afc:	3fca7e28 	.word	0x3fca7e28
 8007b00:	93c9db65 	.word	0x93c9db65
 8007b04:	3fcd864a 	.word	0x3fcd864a
 8007b08:	a91d4101 	.word	0xa91d4101
 8007b0c:	3fd17460 	.word	0x3fd17460
 8007b10:	518f264d 	.word	0x518f264d
 8007b14:	3fd55555 	.word	0x3fd55555
 8007b18:	db6fabff 	.word	0xdb6fabff
 8007b1c:	3fdb6db6 	.word	0x3fdb6db6
 8007b20:	33333303 	.word	0x33333303
 8007b24:	3fe33333 	.word	0x3fe33333
 8007b28:	e0000000 	.word	0xe0000000
 8007b2c:	3feec709 	.word	0x3feec709
 8007b30:	dc3a03fd 	.word	0xdc3a03fd
 8007b34:	3feec709 	.word	0x3feec709
 8007b38:	145b01f5 	.word	0x145b01f5
 8007b3c:	be3e2fe0 	.word	0xbe3e2fe0
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	43400000 	.word	0x43400000
 8007b48:	0003988e 	.word	0x0003988e
 8007b4c:	000bb679 	.word	0x000bb679
 8007b50:	080085f0 	.word	0x080085f0
 8007b54:	3ff00000 	.word	0x3ff00000
 8007b58:	40080000 	.word	0x40080000
 8007b5c:	080085d0 	.word	0x080085d0
 8007b60:	080085e0 	.word	0x080085e0
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b6c:	e5d6      	b.n	800771c <__ieee754_pow+0x35c>
 8007b6e:	f04f 0a01 	mov.w	sl, #1
 8007b72:	e65e      	b.n	8007832 <__ieee754_pow+0x472>
 8007b74:	a3b5      	add	r3, pc, #724	@ (adr r3, 8007e4c <__ieee754_pow+0xa8c>)
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	f7f8 fb95 	bl	80002ac <__adddf3>
 8007b82:	4642      	mov	r2, r8
 8007b84:	e9cd 0100 	strd	r0, r1, [sp]
 8007b88:	464b      	mov	r3, r9
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7f8 fb8b 	bl	80002a8 <__aeabi_dsub>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b9a:	f7f8 ffcd 	bl	8000b38 <__aeabi_dcmpgt>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f47f adfe 	bne.w	80077a0 <__ieee754_pow+0x3e0>
 8007ba4:	4ba2      	ldr	r3, [pc, #648]	@ (8007e30 <__ieee754_pow+0xa70>)
 8007ba6:	e022      	b.n	8007bee <__ieee754_pow+0x82e>
 8007ba8:	4ca2      	ldr	r4, [pc, #648]	@ (8007e34 <__ieee754_pow+0xa74>)
 8007baa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	d919      	bls.n	8007be6 <__ieee754_pow+0x826>
 8007bb2:	4ba1      	ldr	r3, [pc, #644]	@ (8007e38 <__ieee754_pow+0xa78>)
 8007bb4:	440b      	add	r3, r1
 8007bb6:	4303      	orrs	r3, r0
 8007bb8:	d009      	beq.n	8007bce <__ieee754_pow+0x80e>
 8007bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f7f8 ff9b 	bl	8000afc <__aeabi_dcmplt>
 8007bc6:	3800      	subs	r0, #0
 8007bc8:	bf18      	it	ne
 8007bca:	2001      	movne	r0, #1
 8007bcc:	e512      	b.n	80075f4 <__ieee754_pow+0x234>
 8007bce:	4642      	mov	r2, r8
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	f7f8 fb69 	bl	80002a8 <__aeabi_dsub>
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	463b      	mov	r3, r7
 8007bda:	f7f8 ffa3 	bl	8000b24 <__aeabi_dcmpge>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d1eb      	bne.n	8007bba <__ieee754_pow+0x7fa>
 8007be2:	4b96      	ldr	r3, [pc, #600]	@ (8007e3c <__ieee754_pow+0xa7c>)
 8007be4:	e003      	b.n	8007bee <__ieee754_pow+0x82e>
 8007be6:	4a96      	ldr	r2, [pc, #600]	@ (8007e40 <__ieee754_pow+0xa80>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	f240 80e7 	bls.w	8007dbc <__ieee754_pow+0x9fc>
 8007bee:	151b      	asrs	r3, r3, #20
 8007bf0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8007bf4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8007bf8:	fa4a fa03 	asr.w	sl, sl, r3
 8007bfc:	44da      	add	sl, fp
 8007bfe:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007c02:	4890      	ldr	r0, [pc, #576]	@ (8007e44 <__ieee754_pow+0xa84>)
 8007c04:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007c08:	4108      	asrs	r0, r1
 8007c0a:	ea00 030a 	and.w	r3, r0, sl
 8007c0e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007c12:	f1c1 0114 	rsb	r1, r1, #20
 8007c16:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007c1a:	fa4a fa01 	asr.w	sl, sl, r1
 8007c1e:	f1bb 0f00 	cmp.w	fp, #0
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f04f 0200 	mov.w	r2, #0
 8007c2a:	bfb8      	it	lt
 8007c2c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007c30:	f7f8 fb3a 	bl	80002a8 <__aeabi_dsub>
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	4632      	mov	r2, r6
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 fb34 	bl	80002ac <__adddf3>
 8007c44:	2400      	movs	r4, #0
 8007c46:	a36a      	add	r3, pc, #424	@ (adr r3, 8007df0 <__ieee754_pow+0xa30>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	460d      	mov	r5, r1
 8007c50:	f7f8 fce2 	bl	8000618 <__aeabi_dmul>
 8007c54:	4642      	mov	r2, r8
 8007c56:	e9cd 0100 	strd	r0, r1, [sp]
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f7f8 fb22 	bl	80002a8 <__aeabi_dsub>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4630      	mov	r0, r6
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	f7f8 fb1c 	bl	80002a8 <__aeabi_dsub>
 8007c70:	a361      	add	r3, pc, #388	@ (adr r3, 8007df8 <__ieee754_pow+0xa38>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fccf 	bl	8000618 <__aeabi_dmul>
 8007c7a:	a361      	add	r3, pc, #388	@ (adr r3, 8007e00 <__ieee754_pow+0xa40>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	4680      	mov	r8, r0
 8007c82:	4689      	mov	r9, r1
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f7f8 fcc6 	bl	8000618 <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4640      	mov	r0, r8
 8007c92:	4649      	mov	r1, r9
 8007c94:	f7f8 fb0a 	bl	80002ac <__adddf3>
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ca4:	f7f8 fb02 	bl	80002ac <__adddf3>
 8007ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cac:	4680      	mov	r8, r0
 8007cae:	4689      	mov	r9, r1
 8007cb0:	f7f8 fafa 	bl	80002a8 <__aeabi_dsub>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4620      	mov	r0, r4
 8007cba:	4629      	mov	r1, r5
 8007cbc:	f7f8 faf4 	bl	80002a8 <__aeabi_dsub>
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 fca4 	bl	8000618 <__aeabi_dmul>
 8007cd0:	a34d      	add	r3, pc, #308	@ (adr r3, 8007e08 <__ieee754_pow+0xa48>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	460d      	mov	r5, r1
 8007cda:	f7f8 fc9d 	bl	8000618 <__aeabi_dmul>
 8007cde:	a34c      	add	r3, pc, #304	@ (adr r3, 8007e10 <__ieee754_pow+0xa50>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 fae0 	bl	80002a8 <__aeabi_dsub>
 8007ce8:	4622      	mov	r2, r4
 8007cea:	462b      	mov	r3, r5
 8007cec:	f7f8 fc94 	bl	8000618 <__aeabi_dmul>
 8007cf0:	a349      	add	r3, pc, #292	@ (adr r3, 8007e18 <__ieee754_pow+0xa58>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fad9 	bl	80002ac <__adddf3>
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	f7f8 fc8b 	bl	8000618 <__aeabi_dmul>
 8007d02:	a347      	add	r3, pc, #284	@ (adr r3, 8007e20 <__ieee754_pow+0xa60>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	f7f8 face 	bl	80002a8 <__aeabi_dsub>
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	462b      	mov	r3, r5
 8007d10:	f7f8 fc82 	bl	8000618 <__aeabi_dmul>
 8007d14:	a344      	add	r3, pc, #272	@ (adr r3, 8007e28 <__ieee754_pow+0xa68>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	f7f8 fac7 	bl	80002ac <__adddf3>
 8007d1e:	4622      	mov	r2, r4
 8007d20:	462b      	mov	r3, r5
 8007d22:	f7f8 fc79 	bl	8000618 <__aeabi_dmul>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 fabb 	bl	80002a8 <__aeabi_dsub>
 8007d32:	4604      	mov	r4, r0
 8007d34:	460d      	mov	r5, r1
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	f7f8 fc6b 	bl	8000618 <__aeabi_dmul>
 8007d42:	2200      	movs	r2, #0
 8007d44:	e9cd 0100 	strd	r0, r1, [sp]
 8007d48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	4629      	mov	r1, r5
 8007d50:	f7f8 faaa 	bl	80002a8 <__aeabi_dsub>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5c:	f7f8 fd86 	bl	800086c <__aeabi_ddiv>
 8007d60:	4632      	mov	r2, r6
 8007d62:	4604      	mov	r4, r0
 8007d64:	460d      	mov	r5, r1
 8007d66:	463b      	mov	r3, r7
 8007d68:	4640      	mov	r0, r8
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7f8 fc54 	bl	8000618 <__aeabi_dmul>
 8007d70:	4632      	mov	r2, r6
 8007d72:	463b      	mov	r3, r7
 8007d74:	f7f8 fa9a 	bl	80002ac <__adddf3>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	4629      	mov	r1, r5
 8007d80:	f7f8 fa92 	bl	80002a8 <__aeabi_dsub>
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	f7f8 fa8e 	bl	80002a8 <__aeabi_dsub>
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4602      	mov	r2, r0
 8007d90:	492d      	ldr	r1, [pc, #180]	@ (8007e48 <__ieee754_pow+0xa88>)
 8007d92:	2000      	movs	r0, #0
 8007d94:	f7f8 fa88 	bl	80002a8 <__aeabi_dsub>
 8007d98:	ec41 0b10 	vmov	d0, r0, r1
 8007d9c:	ee10 3a90 	vmov	r3, s1
 8007da0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007da8:	da0b      	bge.n	8007dc2 <__ieee754_pow+0xa02>
 8007daa:	4650      	mov	r0, sl
 8007dac:	f000 f85c 	bl	8007e68 <scalbn>
 8007db0:	ec51 0b10 	vmov	r0, r1, d0
 8007db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db8:	f7ff bb6d 	b.w	8007496 <__ieee754_pow+0xd6>
 8007dbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007dc0:	e73a      	b.n	8007c38 <__ieee754_pow+0x878>
 8007dc2:	ec51 0b10 	vmov	r0, r1, d0
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	e7f4      	b.n	8007db4 <__ieee754_pow+0x9f4>
 8007dca:	491f      	ldr	r1, [pc, #124]	@ (8007e48 <__ieee754_pow+0xa88>)
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f7ff bb14 	b.w	80073fa <__ieee754_pow+0x3a>
 8007dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dd6:	f7ff bb10 	b.w	80073fa <__ieee754_pow+0x3a>
 8007dda:	4630      	mov	r0, r6
 8007ddc:	4639      	mov	r1, r7
 8007dde:	f7ff bb0c 	b.w	80073fa <__ieee754_pow+0x3a>
 8007de2:	460c      	mov	r4, r1
 8007de4:	f7ff bb69 	b.w	80074ba <__ieee754_pow+0xfa>
 8007de8:	2400      	movs	r4, #0
 8007dea:	f7ff bb4b 	b.w	8007484 <__ieee754_pow+0xc4>
 8007dee:	bf00      	nop
 8007df0:	00000000 	.word	0x00000000
 8007df4:	3fe62e43 	.word	0x3fe62e43
 8007df8:	fefa39ef 	.word	0xfefa39ef
 8007dfc:	3fe62e42 	.word	0x3fe62e42
 8007e00:	0ca86c39 	.word	0x0ca86c39
 8007e04:	be205c61 	.word	0xbe205c61
 8007e08:	72bea4d0 	.word	0x72bea4d0
 8007e0c:	3e663769 	.word	0x3e663769
 8007e10:	c5d26bf1 	.word	0xc5d26bf1
 8007e14:	3ebbbd41 	.word	0x3ebbbd41
 8007e18:	af25de2c 	.word	0xaf25de2c
 8007e1c:	3f11566a 	.word	0x3f11566a
 8007e20:	16bebd93 	.word	0x16bebd93
 8007e24:	3f66c16c 	.word	0x3f66c16c
 8007e28:	5555553e 	.word	0x5555553e
 8007e2c:	3fc55555 	.word	0x3fc55555
 8007e30:	40900000 	.word	0x40900000
 8007e34:	4090cbff 	.word	0x4090cbff
 8007e38:	3f6f3400 	.word	0x3f6f3400
 8007e3c:	4090cc00 	.word	0x4090cc00
 8007e40:	3fe00000 	.word	0x3fe00000
 8007e44:	fff00000 	.word	0xfff00000
 8007e48:	3ff00000 	.word	0x3ff00000
 8007e4c:	652b82fe 	.word	0x652b82fe
 8007e50:	3c971547 	.word	0x3c971547

08007e54 <fabs>:
 8007e54:	ec51 0b10 	vmov	r0, r1, d0
 8007e58:	4602      	mov	r2, r0
 8007e5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007e5e:	ec43 2b10 	vmov	d0, r2, r3
 8007e62:	4770      	bx	lr
 8007e64:	0000      	movs	r0, r0
	...

08007e68 <scalbn>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	ec55 4b10 	vmov	r4, r5, d0
 8007e6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007e72:	4606      	mov	r6, r0
 8007e74:	462b      	mov	r3, r5
 8007e76:	b991      	cbnz	r1, 8007e9e <scalbn+0x36>
 8007e78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007e7c:	4323      	orrs	r3, r4
 8007e7e:	d03b      	beq.n	8007ef8 <scalbn+0x90>
 8007e80:	4b33      	ldr	r3, [pc, #204]	@ (8007f50 <scalbn+0xe8>)
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	2200      	movs	r2, #0
 8007e88:	f7f8 fbc6 	bl	8000618 <__aeabi_dmul>
 8007e8c:	4b31      	ldr	r3, [pc, #196]	@ (8007f54 <scalbn+0xec>)
 8007e8e:	429e      	cmp	r6, r3
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	da0f      	bge.n	8007eb6 <scalbn+0x4e>
 8007e96:	a326      	add	r3, pc, #152	@ (adr r3, 8007f30 <scalbn+0xc8>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	e01e      	b.n	8007edc <scalbn+0x74>
 8007e9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	d10b      	bne.n	8007ebe <scalbn+0x56>
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	4629      	mov	r1, r5
 8007eac:	f7f8 f9fe 	bl	80002ac <__adddf3>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	e020      	b.n	8007ef8 <scalbn+0x90>
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007ebc:	3936      	subs	r1, #54	@ 0x36
 8007ebe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007ec2:	4296      	cmp	r6, r2
 8007ec4:	dd0d      	ble.n	8007ee2 <scalbn+0x7a>
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	a11b      	add	r1, pc, #108	@ (adr r1, 8007f38 <scalbn+0xd0>)
 8007eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ece:	da02      	bge.n	8007ed6 <scalbn+0x6e>
 8007ed0:	a11b      	add	r1, pc, #108	@ (adr r1, 8007f40 <scalbn+0xd8>)
 8007ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed6:	a318      	add	r3, pc, #96	@ (adr r3, 8007f38 <scalbn+0xd0>)
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	f7f8 fb9c 	bl	8000618 <__aeabi_dmul>
 8007ee0:	e7e6      	b.n	8007eb0 <scalbn+0x48>
 8007ee2:	1872      	adds	r2, r6, r1
 8007ee4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007ee8:	428a      	cmp	r2, r1
 8007eea:	dcec      	bgt.n	8007ec6 <scalbn+0x5e>
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	dd06      	ble.n	8007efe <scalbn+0x96>
 8007ef0:	f36f 531e 	bfc	r3, #20, #11
 8007ef4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ef8:	ec45 4b10 	vmov	d0, r4, r5
 8007efc:	bd70      	pop	{r4, r5, r6, pc}
 8007efe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007f02:	da08      	bge.n	8007f16 <scalbn+0xae>
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	a10a      	add	r1, pc, #40	@ (adr r1, 8007f30 <scalbn+0xc8>)
 8007f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f0c:	dac3      	bge.n	8007e96 <scalbn+0x2e>
 8007f0e:	a10e      	add	r1, pc, #56	@ (adr r1, 8007f48 <scalbn+0xe0>)
 8007f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f14:	e7bf      	b.n	8007e96 <scalbn+0x2e>
 8007f16:	3236      	adds	r2, #54	@ 0x36
 8007f18:	f36f 531e 	bfc	r3, #20, #11
 8007f1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f20:	4620      	mov	r0, r4
 8007f22:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <scalbn+0xf0>)
 8007f24:	4629      	mov	r1, r5
 8007f26:	2200      	movs	r2, #0
 8007f28:	e7d8      	b.n	8007edc <scalbn+0x74>
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w
 8007f30:	c2f8f359 	.word	0xc2f8f359
 8007f34:	01a56e1f 	.word	0x01a56e1f
 8007f38:	8800759c 	.word	0x8800759c
 8007f3c:	7e37e43c 	.word	0x7e37e43c
 8007f40:	8800759c 	.word	0x8800759c
 8007f44:	fe37e43c 	.word	0xfe37e43c
 8007f48:	c2f8f359 	.word	0xc2f8f359
 8007f4c:	81a56e1f 	.word	0x81a56e1f
 8007f50:	43500000 	.word	0x43500000
 8007f54:	ffff3cb0 	.word	0xffff3cb0
 8007f58:	3c900000 	.word	0x3c900000

08007f5c <with_errno>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	ed2d 8b02 	vpush	{d8}
 8007f62:	eeb0 8a40 	vmov.f32	s16, s0
 8007f66:	eef0 8a60 	vmov.f32	s17, s1
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	f7fd f930 	bl	80051d0 <__errno>
 8007f70:	eeb0 0a48 	vmov.f32	s0, s16
 8007f74:	eef0 0a68 	vmov.f32	s1, s17
 8007f78:	ecbd 8b02 	vpop	{d8}
 8007f7c:	6004      	str	r4, [r0, #0]
 8007f7e:	bd10      	pop	{r4, pc}

08007f80 <xflow>:
 8007f80:	4603      	mov	r3, r0
 8007f82:	b507      	push	{r0, r1, r2, lr}
 8007f84:	ec51 0b10 	vmov	r0, r1, d0
 8007f88:	b183      	cbz	r3, 8007fac <xflow+0x2c>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f90:	e9cd 2300 	strd	r2, r3, [sp]
 8007f94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f98:	f7f8 fb3e 	bl	8000618 <__aeabi_dmul>
 8007f9c:	ec41 0b10 	vmov	d0, r0, r1
 8007fa0:	2022      	movs	r0, #34	@ 0x22
 8007fa2:	b003      	add	sp, #12
 8007fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa8:	f7ff bfd8 	b.w	8007f5c <with_errno>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	e7ee      	b.n	8007f90 <xflow+0x10>
 8007fb2:	0000      	movs	r0, r0
 8007fb4:	0000      	movs	r0, r0
	...

08007fb8 <__math_uflow>:
 8007fb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007fc0 <__math_uflow+0x8>
 8007fbc:	f7ff bfe0 	b.w	8007f80 <xflow>
 8007fc0:	00000000 	.word	0x00000000
 8007fc4:	10000000 	.word	0x10000000

08007fc8 <__math_oflow>:
 8007fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007fd0 <__math_oflow+0x8>
 8007fcc:	f7ff bfd8 	b.w	8007f80 <xflow>
 8007fd0:	00000000 	.word	0x00000000
 8007fd4:	70000000 	.word	0x70000000

08007fd8 <__ieee754_sqrt>:
 8007fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	4a66      	ldr	r2, [pc, #408]	@ (8008178 <__ieee754_sqrt+0x1a0>)
 8007fde:	ec55 4b10 	vmov	r4, r5, d0
 8007fe2:	43aa      	bics	r2, r5
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	d110      	bne.n	800800c <__ieee754_sqrt+0x34>
 8007fea:	4622      	mov	r2, r4
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f7f8 fb12 	bl	8000618 <__aeabi_dmul>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7f8 f956 	bl	80002ac <__adddf3>
 8008000:	4604      	mov	r4, r0
 8008002:	460d      	mov	r5, r1
 8008004:	ec45 4b10 	vmov	d0, r4, r5
 8008008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	2d00      	cmp	r5, #0
 800800e:	dc0e      	bgt.n	800802e <__ieee754_sqrt+0x56>
 8008010:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008014:	4322      	orrs	r2, r4
 8008016:	d0f5      	beq.n	8008004 <__ieee754_sqrt+0x2c>
 8008018:	b19d      	cbz	r5, 8008042 <__ieee754_sqrt+0x6a>
 800801a:	4622      	mov	r2, r4
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 f942 	bl	80002a8 <__aeabi_dsub>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	f7f8 fc20 	bl	800086c <__aeabi_ddiv>
 800802c:	e7e8      	b.n	8008000 <__ieee754_sqrt+0x28>
 800802e:	152a      	asrs	r2, r5, #20
 8008030:	d115      	bne.n	800805e <__ieee754_sqrt+0x86>
 8008032:	2000      	movs	r0, #0
 8008034:	e009      	b.n	800804a <__ieee754_sqrt+0x72>
 8008036:	0acb      	lsrs	r3, r1, #11
 8008038:	3a15      	subs	r2, #21
 800803a:	0549      	lsls	r1, r1, #21
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0fa      	beq.n	8008036 <__ieee754_sqrt+0x5e>
 8008040:	e7f7      	b.n	8008032 <__ieee754_sqrt+0x5a>
 8008042:	462a      	mov	r2, r5
 8008044:	e7fa      	b.n	800803c <__ieee754_sqrt+0x64>
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	3001      	adds	r0, #1
 800804a:	02dc      	lsls	r4, r3, #11
 800804c:	d5fb      	bpl.n	8008046 <__ieee754_sqrt+0x6e>
 800804e:	1e44      	subs	r4, r0, #1
 8008050:	1b12      	subs	r2, r2, r4
 8008052:	f1c0 0420 	rsb	r4, r0, #32
 8008056:	fa21 f404 	lsr.w	r4, r1, r4
 800805a:	4323      	orrs	r3, r4
 800805c:	4081      	lsls	r1, r0
 800805e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008062:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800806a:	07d2      	lsls	r2, r2, #31
 800806c:	bf5c      	itt	pl
 800806e:	005b      	lslpl	r3, r3, #1
 8008070:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008074:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008078:	bf58      	it	pl
 800807a:	0049      	lslpl	r1, r1, #1
 800807c:	2600      	movs	r6, #0
 800807e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008082:	107f      	asrs	r7, r7, #1
 8008084:	0049      	lsls	r1, r1, #1
 8008086:	2016      	movs	r0, #22
 8008088:	4632      	mov	r2, r6
 800808a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800808e:	1915      	adds	r5, r2, r4
 8008090:	429d      	cmp	r5, r3
 8008092:	bfde      	ittt	le
 8008094:	192a      	addle	r2, r5, r4
 8008096:	1b5b      	suble	r3, r3, r5
 8008098:	1936      	addle	r6, r6, r4
 800809a:	0fcd      	lsrs	r5, r1, #31
 800809c:	3801      	subs	r0, #1
 800809e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80080a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80080a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80080aa:	d1f0      	bne.n	800808e <__ieee754_sqrt+0xb6>
 80080ac:	4605      	mov	r5, r0
 80080ae:	2420      	movs	r4, #32
 80080b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80080b4:	4293      	cmp	r3, r2
 80080b6:	eb0c 0e00 	add.w	lr, ip, r0
 80080ba:	dc02      	bgt.n	80080c2 <__ieee754_sqrt+0xea>
 80080bc:	d113      	bne.n	80080e6 <__ieee754_sqrt+0x10e>
 80080be:	458e      	cmp	lr, r1
 80080c0:	d811      	bhi.n	80080e6 <__ieee754_sqrt+0x10e>
 80080c2:	f1be 0f00 	cmp.w	lr, #0
 80080c6:	eb0e 000c 	add.w	r0, lr, ip
 80080ca:	da3f      	bge.n	800814c <__ieee754_sqrt+0x174>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	db3d      	blt.n	800814c <__ieee754_sqrt+0x174>
 80080d0:	f102 0801 	add.w	r8, r2, #1
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	458e      	cmp	lr, r1
 80080d8:	bf88      	it	hi
 80080da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80080de:	eba1 010e 	sub.w	r1, r1, lr
 80080e2:	4465      	add	r5, ip
 80080e4:	4642      	mov	r2, r8
 80080e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80080ea:	3c01      	subs	r4, #1
 80080ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80080f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80080f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80080f8:	d1dc      	bne.n	80080b4 <__ieee754_sqrt+0xdc>
 80080fa:	4319      	orrs	r1, r3
 80080fc:	d01b      	beq.n	8008136 <__ieee754_sqrt+0x15e>
 80080fe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800817c <__ieee754_sqrt+0x1a4>
 8008102:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008180 <__ieee754_sqrt+0x1a8>
 8008106:	e9da 0100 	ldrd	r0, r1, [sl]
 800810a:	e9db 2300 	ldrd	r2, r3, [fp]
 800810e:	f7f8 f8cb 	bl	80002a8 <__aeabi_dsub>
 8008112:	e9da 8900 	ldrd	r8, r9, [sl]
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f7f8 fcf7 	bl	8000b10 <__aeabi_dcmple>
 8008122:	b140      	cbz	r0, 8008136 <__ieee754_sqrt+0x15e>
 8008124:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008128:	e9da 0100 	ldrd	r0, r1, [sl]
 800812c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008130:	d10e      	bne.n	8008150 <__ieee754_sqrt+0x178>
 8008132:	3601      	adds	r6, #1
 8008134:	4625      	mov	r5, r4
 8008136:	1073      	asrs	r3, r6, #1
 8008138:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800813c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008140:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8008144:	086b      	lsrs	r3, r5, #1
 8008146:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800814a:	e759      	b.n	8008000 <__ieee754_sqrt+0x28>
 800814c:	4690      	mov	r8, r2
 800814e:	e7c1      	b.n	80080d4 <__ieee754_sqrt+0xfc>
 8008150:	f7f8 f8ac 	bl	80002ac <__adddf3>
 8008154:	e9da 8900 	ldrd	r8, r9, [sl]
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fccc 	bl	8000afc <__aeabi_dcmplt>
 8008164:	b120      	cbz	r0, 8008170 <__ieee754_sqrt+0x198>
 8008166:	1cab      	adds	r3, r5, #2
 8008168:	bf08      	it	eq
 800816a:	3601      	addeq	r6, #1
 800816c:	3502      	adds	r5, #2
 800816e:	e7e2      	b.n	8008136 <__ieee754_sqrt+0x15e>
 8008170:	1c6b      	adds	r3, r5, #1
 8008172:	f023 0501 	bic.w	r5, r3, #1
 8008176:	e7de      	b.n	8008136 <__ieee754_sqrt+0x15e>
 8008178:	7ff00000 	.word	0x7ff00000
 800817c:	08008608 	.word	0x08008608
 8008180:	08008600 	.word	0x08008600

08008184 <_init>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr

08008190 <_fini>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr
